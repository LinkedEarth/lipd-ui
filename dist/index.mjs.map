{"version":3,"sources":["../src/schemas.ts","../src/labels.ts","../src/store.tsx","../src/vscode.ts","../src/components/AppBarActions.tsx","../src/components/CustomIcons.tsx","../src/components/AppBarBreadcrumbs.tsx","../src/router.tsx","../src/components/DataTableEditor.tsx","../src/components/ListView.tsx","../src/components/Fieldset.tsx","../src/utils/utils.ts","../src/components/FormTextField.tsx","../src/components/DefaultListEditor.tsx","../src/components/DefaultEditor.tsx","../src/components/LocationEditor.tsx","../src/components/DefaultEnumEditor.tsx","../src/components/ChronDataTree.tsx","../src/components/TreeItem.tsx","../src/components/ConfirmDialog.tsx","../src/components/EditorPanel.tsx","../src/components/NavigationPanel.tsx","../src/components/PaleoDataTree.tsx","../src/components/PublicationsTree.tsx","../src/components/SyncProgressBar.tsx","../src/components/LiPDApp.tsx"],"names":["value","React","Typography","IconButton","Box","Tooltip","TextField","Button","Variable","Divider","useState","metadata","csvContent","params","useEffect","useRef","FormControl","fieldName","ListItem","ListItemText","Dialog","DialogActions","DialogContent","DialogTitle","CircularProgress","TreeItem","Dataset"],"mappings":";AAAA;AAAA,EAAS;AAAA,EAAS;AAAA,EAAa;AAAA,EAC7B;AAAA,EAAU;AAAA,EAAa;AAAA,EAAW;AAAA,EAClC;AAAA,EAAU;AAAA,EAAW;AAAA,EACrB;AAAA,EAAY;AAAA,EAAa;AAAA,EAAgB;AAAA,EACzC;AAAA,EAAO;AAAA,EAAY;AAAA,EAAmB;AAAA,EACtC;AAAA,EAAwB;AAAA,EACxB;AAAA,EAA6B;AAAA,EAAU;AAAA,OAAmB;;;ACFrD,IAAM,6BAA6B,CAAC,gBAAsC;AAC7E,SAAO,YAAY,QAAQ,IAAI,CAAC,WAAW,OAAO,IAAI,EAAE,KAAK,IAAI;AACrE;AAEO,IAAM,2BAA2B,CAAC,gBAAsC;AAC3E,SAAO,YAAY,SAAS;AAChC;AAEO,IAAM,0BAA0B,CAAC,gBAAsC;AAC1E,SAAO,GAAG,yBAAyB,WAAW,CAAC,KAAK,2BAA2B,WAAW,CAAC;AAC/F;AAEO,IAAM,oBAAoB,CAAC,cAAkC;AAChE,SAAO,UAAU,YAAY;AACjC;AAEO,IAAM,6BAA6B,CAAC,cAAkC;AACzE,SAAO,UAAU,UAAU,IAAI,CAAC,aAAa,SAAS,IAAI,EAAE,KAAK,IAAI;AACzE;AAEO,IAAM,4BAA4B,CAAC,SAAyC;AAC/E,UAAQ,KAAK,mBAAmB,OAAO,SAAS,KAAK,OAAO;AAChE;AAEO,IAAM,oBAAoB,CAAC,SAAyC;AACvE,UAAQ,KAAK,WAAW,OAAO,SAAS,KAAK,OAAO;AACxD;AAEO,IAAM,sBAAsB,CAAC,SAAyC;AACzE,SAAO,GAAG,0BAA0B,IAAI,CAAC,KAAK,kBAAkB,IAAI,CAAC;AACzE;AAEO,IAAM,qBAAqB,CAAC,WAA4B;AAC3D,SAAO,OAAO,QAAQ;AAC1B;AAEO,IAAM,uBAAuB,CAAC,aAAgC;AACjE,SAAO,SAAS,QAAQ;AAC5B;AAEO,IAAM,8BAA8B,CAAC,aAAgC;AACxE,SAAO,SAAS,eAAe;AACnC;AAEO,IAAM,wBAAwB,CAAC,aAAgC;AAClE,SAAO,SAAS,OAAO,SAAS,KAAK;AACzC;AAEO,IAAM,kBAAkB,CAAC,YAA8B;AAC1D,SAAO,QAAQ,iBAAiB;AACpC;AAEO,IAAM,wBAAwB,CAAC,YAA8B;AAChE,UAAQ,QAAQ,UAAU,CAAC,GAAG,KAAK,IAAI;AAC3C;AAEO,IAAM,oBAAoB,CAAC,cAAkC;AAChE,SAAO,UAAU,aAAa;AAClC;AAEO,IAAM,2BAA2B,CAAC,cAAkC;AACvE,SAAO,UAAU,WAAW;AAChC;AAEO,IAAM,yBAAyB,CAAC,mBAAoC;AACvE,SAAO,eAAe,QAAQ;AAClC;AAEO,IAAM,0BAA0B,CAAC,gBAAsC;AAC1E,SAAO,YAAY,QAAQ;AAC/B;;;AD/BA,IAAM,kBAAkB,CAAC,UAAkB,cAAoD;AAC7F,QAAM,cAAc,SAAS,QAAiC;AAC9D,MAAI,CAAC;AAAa,WAAO,CAAC;AAE1B,QAAM,WAAW,YAAY,SAAqC;AAClE,MAAI,CAAC;AAAU,WAAO,CAAC;AAEvB,QAAM,eAA6C,CAAC;AACpD,SAAO,OAAO,QAAQ,EAAE,QAAQ,CAAC,UAAe;AAC5C,QAAI,OAAO,IAAI;AACX,mBAAa,MAAM,EAAE,IAAI;AAAA,IAC7B;AAAA,EACJ,CAAC;AACD,SAAO;AACT;AAEO,IAAM,oBAA4B;AAAA,EACvC,MAAM,gBAAgB,YAAY,aAAa;AAAA,EAC/C,OAAO;AACT;AAEO,IAAM,cAAsB;AAAA,EACjC,MAAM,gBAAgB,WAAW,YAAY;AAAA,EAC7C,OAAO;AACT;AAEO,IAAM,qBAA6B;AAAA,EACxC,MAAM,gBAAgB,WAAW,mBAAmB;AAAA,EACpD,OAAO;AACT;AAEO,IAAM,+BAAuC;AAAA,EAClD,MAAM,gBAAgB,kBAAkB,wBAAwB;AAAA,EAChE,OAAO;AACT;AAEO,IAAM,oBAA4B;AAAA,EACvC,MAAM,gBAAgB,kBAAkB,2BAA2B;AAAA,EACnE,OAAO;AACT;AAEO,IAAM,2BAAmC;AAAA,EAC9C,MAAM,gBAAgB,kBAAkB,2BAA2B;AAAA,EACnE,OAAO;AACT;AAEO,IAAM,4BAAoC;AAAA,EAC/C,MAAM,gBAAgB,kBAAkB,2BAA2B;AAAA,EACnE,OAAO;AACT;AAEO,IAAM,kBAA0B;AAAA,EACrC,MAAM,gBAAgB,SAAS,WAAW;AAAA,EAC1C,OAAO;AACT;AAEO,IAAM,sBAA8B;AAAA,EACzC,MAAM,gBAAgB,aAAa,eAAe;AAAA,EAClD,OAAO;AACT;AAEO,IAAM,iBAAyB;AAAA,EACpC,QAAQ;AAAA,IACJ,UAAU,EAAE,MAAM,UAAU,OAAO,WAAW;AAAA,IAC9C,WAAW,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAChD,WAAW,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAChD,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACpD,WAAW,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAChD,SAAS,EAAE,MAAM,UAAU,OAAO,UAAU;AAAA,IAC5C,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA;AAAA;AAAA,EAG5C;AAAA,EACA,OAAO;AACT;AAEO,IAAM,eAAuB;AAAA,EAClC,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,EAC1C;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AACT;AAEO,IAAM,oBAA4B;AAAA,EACvC,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,SAAS;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,IACtC,UAAU,EAAE,MAAM,UAAU,OAAO,WAAW;AAAA,IAC9C,aAAa;AAAA,MACT,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,IACA,KAAK,EAAE,MAAM,UAAU,OAAO,MAAM;AAAA,IACpC,SAAS,EAAE,MAAM,UAAU,OAAO,UAAU;AAAA,IAC5C,QAAQ,EAAE,MAAM,UAAU,OAAO,SAAS;AAAA,IAC1C,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,WAAW,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAChD,UAAU,EAAE,MAAM,UAAU,OAAO,WAAW;AAAA,IAC9C,SAAS,EAAE,MAAM,UAAU,OAAO,WAAW;AAAA,IAC7C,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACpD,iBAAiB,EAAE,MAAM,UAAU,OAAO,mBAAmB;AAAA,IAC7D,QAAQ,EAAE,MAAM,UAAU,OAAO,SAAS;AAAA,IAC1C,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,uBAA+B;AAAA,EAC5C,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,IACtC,OAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AACP;AAEO,IAAM,kBAA0B;AAAA,EACrC,QAAQ;AAAA,IACJ,SAAS,EAAC,MAAM,UAAU,OAAO,UAAS;AAAA,IAC1C,WAAW,EAAC,MAAM,UAAU,OAAO,YAAW;AAAA,IAC9C,SAAS,EAAC,MAAM,UAAU,OAAO,UAAS;AAAA,IAC1C,aAAa,EAAC,MAAM,UAAU,OAAO,eAAc;AAAA,IACnD,OAAO,EAAC,MAAM,UAAU,OAAO,QAAO;AAAA,IACtC,SAAS;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,gBAAwB;AAAA,EACnC,QAAQ;AAAA,IACJ,eAAe,EAAE,MAAM,UAAU,OAAO,iBAAiB;AAAA,IACzD,gBAAgB,EAAE,MAAM,UAAU,OAAO,kBAAkB;AAAA,IAC3D,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,uBAA+B;AAAA,EAC1C,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,WAAW,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAChD,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,IACtC,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,gBAAgB,EAAE,MAAM,UAAU,OAAO,kBAAkB;AAAA,IAC3D,iBAAiB,EAAE,MAAM,UAAU,OAAO,mBAAmB;AAAA,IAC7D,0BAA0B,EAAE,MAAM,UAAU,OAAO,6BAA6B;AAAA,IAChF,aAAa;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,oBAAoB;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,qBAAqB;AAAA,MACnB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,EACJ;AAAA,EACA,OAAO;AACT;AAEO,IAAM,oBAA4B;AAAA,EACvC,QAAQ;AAAA,IACJ,KAAK,EAAE,MAAM,UAAU,OAAO,MAAM;AAAA,IACpC,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,UAAU,EAAE,MAAM,UAAU,OAAO,WAAW;AAAA,IAC9C,mBAAmB,EAAE,MAAM,UAAU,OAAO,qBAAqB;AAAA,IACjE,YAAY,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACnD,eAAe,EAAE,MAAM,UAAU,OAAO,iBAAiB;AAAA,IACzD,0BAA0B,EAAE,MAAM,UAAU,OAAO,6BAA6B;AAAA,IAChF,QAAQ,EAAE,MAAM,UAAU,OAAO,SAAS;AAAA,IAC1C,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACpD,eAAe,EAAE,MAAM,UAAU,OAAO,iBAAiB;AAAA,IACzD,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,EACxD;AAAA,EACA,OAAO;AACT;AAEO,IAAM,mBAA2B;AAAA,EACtC,QAAQ;AAAA,IACJ,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,WAAW,EAAE,MAAM,UAAU,OAAO,aAAa;AAAA,IACjD,aAAa,EAAE,MAAM,UAAU,OAAO,eAAe;AAAA,IACrD,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,OAAO,EAAE,MAAM,QAAQ,OAAO,SAAS,QAAQ,gBAAgB;AAAA,EACnE;AAAA,EACA,OAAO;AACT;AAEO,IAAM,oBAA4B;AAAA,EACvC,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,IACtC,SAAS,EAAE,MAAM,UAAU,OAAO,UAAU;AAAA,EAChD;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AACT;AAEO,IAAM,iBAAyB;AAAA,EACpC,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,IACtC,kBAAkB;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,IACA,YAAY,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACnD,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACpD,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,OAAO,EAAE,MAAM,QAAQ,OAAO,SAAS,QAAQ,gBAAgB;AAAA,IAC/D,aAAa;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,oBAAoB;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACP,MAAM;AAAA,QACJ,OAAO;AAAA,QACT,QAAQ;AAAA,MACR;AAAA,IACF;AAAA,IACA,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,WAAW,EAAE,MAAM,UAAU,OAAO,aAAa;AAAA,IACjD,aAAa,EAAE,MAAM,UAAU,OAAO,eAAe;AAAA,IACrD,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,SAAS,EAAE,MAAM,WAAW,OAAO,UAAU;AAAA,IAC7C,aAAa,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACpD,uBAAuB,EAAE,MAAM,UAAU,OAAO,yBAAyB;AAAA,IACzE,4BAA4B,EAAE,MAAM,UAAU,OAAO,8BAA8B;AAAA,IACnF,WAAW,EAAE,MAAM,WAAW,OAAO,YAAY;AAAA,IACjD,YAAY,EAAE,MAAM,UAAU,OAAO,aAAa;AAAA,IAElD,OAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACF;AAAA,IACA,gBAAgB;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,kBAA0B;AAAA,EACrC,QAAQ;AAAA,IACJ,UAAU,EAAE,MAAM,UAAU,OAAO,YAAY;AAAA,IAC/C,cAAc,EAAE,MAAM,UAAU,OAAO,gBAAgB;AAAA,IACvD,WAAW;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,cAAsB;AAAA,EACjC,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,OAAO,QAAQ,WAAW,MAAM,MAAM,EAAE;AAAA,IAChE,gBAAgB;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,eAAe;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,oBAAoB;AAAA,MAChB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO;AACT;AAEO,IAAM,aAAqB;AAAA,EAChC,QAAQ;AAAA;AAAA;AAAA,IAGJ,mBAAmB;AAAA,MACjB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACD,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACD,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACd;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO;AAAA,IACL,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AACT;AAEO,IAAM,gBAAwB;AAAA,EACrC,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,OAAO,eAAe;AAAA,IAC9C,aAAa;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,UAAU;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA,IACA,WAAW,EAAE,MAAM,UAAU,OAAO,aAAa;AAAA,IACjD,SAAS,EAAE,MAAM,UAAU,OAAO,UAAU;AAAA,IAC5C,gBAAgB,EAAE,MAAM,UAAU,OAAO,kBAAkB;AAAA,IAC3D,gBAAgB,EAAE,MAAM,UAAU,OAAO,kBAAkB;AAAA,IAC3D,YAAY,EAAE,MAAM,UAAU,OAAO,cAAc;AAAA,IACnD,iBAAiB,EAAE,MAAM,UAAU,OAAO,oBAAoB;AAAA,IAC9D,iBAAiB,EAAE,MAAM,UAAU,OAAO,mBAAmB;AAAA,IAC7D,iBAAiB,EAAE,MAAM,UAAU,OAAO,mBAAmB;AAAA,IAC7D,OAAO,EAAE,MAAM,UAAU,OAAO,QAAQ;AAAA,IACxC,eAAe;AAAA,MACb,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAAA,EACA,OAAO;AACP;AAKA,IAAM,gBAAmD,oBAAI,IAAI;AAGjE,IAAM,qBAAqB,CACzB,QACA,aACA,cAAsB,cACnB;AAEH,MAAI,QAAQ;AACR,kBAAc,IAAI,aAAa,MAAM;AAGrC,QAAI,OAAO,QAAQ;AACf,aAAO,QAAQ,OAAO,MAAM,EAAE,QAAQ,CAAC,CAAC,WAAW,QAAQ,MAAM;AAC7D,cAAM,YAAY,GAAG,WAAW,IAAI,SAAS;AAC7C,sBAAc,IAAI,WAAW,QAAQ;AAGrC,YAAI,SAAS,SAAS,YAAY,SAAS,QAAQ;AAC/C,6BAAmB,SAAS,QAAQ,UAAU,SAAS;AAAA,QAC3D,WAES,SAAS,SAAS,WAAW,SAAS,OAAO;AAElD,wBAAc,IAAI,WAAW,QAAQ;AAGrC,gBAAM,WAAW,GAAG,SAAS;AAC7B,wBAAc,IAAI,UAAU,SAAS,KAAK;AAG1C,cAAI,SAAS,MAAM,QAAQ;AACvB,+BAAmB,SAAS,MAAM,QAAQ,SAAS,OAAO,QAAQ;AAAA,UACtE;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ,WAES,aAAa;AAClB,kBAAc,IAAI,aAAa,WAAW;AAE1C,QAAI,YAAY,SAAS,YAAY,YAAY,QAAQ;AACrD,yBAAmB,YAAY,QAAQ,QAAW,WAAW;AAAA,IACjE,WACS,YAAY,SAAS,WAAW,YAAY,OAAO;AACxD,YAAM,WAAW,GAAG,WAAW;AAC/B,oBAAc,IAAI,UAAU,YAAY,KAAK;AAE7C,UAAI,YAAY,MAAM,QAAQ;AAC1B,2BAAmB,YAAY,MAAM,QAAQ,YAAY,OAAO,QAAQ;AAAA,MAC5E;AAAA,IACJ;AAAA,EACJ;AACF;AAGA,mBAAmB,eAAe,MAAS;AAGpC,IAAM,mBAAmB,CAAC,SAA8C;AAE/E,MAAI,cAAc,IAAI,IAAI,GAAG;AACzB,WAAO,cAAc,IAAI,IAAI;AAAA,EACjC;AAGA,MAAI,eAAe,KAAK,QAAQ,UAAU,IAAI;AAC9C,MAAI,cAAc,IAAI,YAAY,GAAG;AACjC,WAAO,cAAc,IAAI,YAAY;AAAA,EACzC;AAEA,SAAO;AACP;;;AErqBA,SAAS,cAAc;;;ACavB,IAAI;AAEG,SAAS,eAAe;AAE7B,MAAI,UAAU,OAAO,aAAa;AAChC,gBAAY,OAAO;AACnB,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,WAAW;AACd,QAAI;AACF,kBAAY,iBAAiB;AAC7B,gBAAU,YAAY,EAAE,MAAM,QAAQ,CAAC;AACvC,UAAI,QAAQ;AACV,eAAO,cAAc;AAAA,MACvB;AAAA,IACF,QAAQ;AAEN,kBAAY;AAAA,QACV,aAAa,MAAM;AAAA,QAAC;AAAA,QACpB,UAAU,MAAM;AAAA,QAChB,UAAU,MAAM;AAAA,QAAC;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;;;ADjCA,IAAM,SAAS,aAAa;AAErB,IAAM,eAAe,OAAiB,CAAC,KAAK,SAAS;AAAA,EAC1D,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,cAAc;AAAA,EACd,SAAS;AAAA,EACT,SAAS;AAAA,EACT,cAAc;AAAA,EACd,eAAe,oBAAI,IAAI,CAAC,SAAS,CAAC;AAAA,EAClC,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,WAAW;AAAA,EACX,kBAAkB,CAAC;AAAA,EACnB,oBAAoB,CAAC;AAAA,EACrB,cAAc;AAAA,EACd,UAAU;AAAA,EACV,uBAAuB;AAAA,EACvB,YAAY,MAAM;AAAA,EAAC;AAAA,EACnB,cAAc,CAAC,MAAY,IAAI,EAAC,WAAU,EAAC,CAAC;AAAA,EAC5C,mBAAkB,CAAC,MAAW,IAAI,EAAC,gBAAe,EAAC,CAAC;AAAA,EACpD,cAAa,CAAC,SAAiB,IAAI,EAAC,WAAU,KAAI,CAAC;AAAA,EACnD,YAAW,CAAC,MAAI,IAAI,EAAC,SAAQ,GAAE,cAAa,UAAS,CAAC;AAAA,EACtD,oBAAmB,CAAC,MAAI,IAAI,EAAC,SAAQ,EAAC,CAAC;AAAA,EACvC,MAAK,MAAI,OAAO,cAAc,EAAC,MAAK,kBAAiB,SAAQ,mBAAkB,CAAC;AAAA,EAChF,MAAK,MAAI,OAAO,cAAc,EAAC,MAAK,kBAAiB,SAAQ,mBAAkB,CAAC;AAAA,EAChF,kBAAiB,CAAC,GAAU,MAAY,IAAI,EAAC,SAAQ,GAAE,SAAQ,EAAC,CAAC;AAAA,EACjE,iBAAgB,CAAC,MAAI,IAAI,EAAC,cAAa,EAAC,CAAC;AAAA,EACzC,kBAAiB,CAAC,OAAK;AACrB,UAAM,IAAE,IAAI,EAAE;AAAc,UAAM,KAAG,IAAI,IAAI,CAAC;AAAE,OAAG,IAAI,EAAE,IAAE,GAAG,OAAO,EAAE,IAAE,GAAG,IAAI,EAAE;AAAE,QAAI,EAAC,eAAc,GAAE,CAAC;AAAA,EAAE;AAAA,EAC9G,UAAS,CAAC,MAAI,IAAI,EAAC,kBAAiB,EAAC,OAAM,EAAC,GAAE,cAAa,EAAC,MAAK,SAAQ,SAAQ,EAAC,EAAC,CAAC;AAAA,EACpF,iBAAgB,CAAC,GAAE,QAAM,IAAI,EAAC,UAAS,OAAM,cAAa,IAAE,EAAC,MAAK,WAAU,SAAQ,6BAA4B,IAAE,EAAC,MAAK,SAAQ,SAAQ,OAAK,yBAAwB,EAAC,CAAC;AAAA,EACvK,iBAAgB,CAAC,GAAE,QAAM,IAAI,EAAC,WAAU,OAAM,cAAa,GAAE,cAAa,IAAE,EAAC,MAAK,WAAU,SAAQ,iBAAgB,IAAE,EAAC,MAAK,SAAQ,SAAQ,OAAK,iBAAgB,EAAC,CAAC;AAAA,EACnK,sBAAqB,CAAC,QAAM,IAAI,EAAC,kBAAiB,IAAI,UAAQ,CAAC,GAAE,oBAAmB,IAAI,YAAU,CAAC,EAAC,CAAC;AAAA,EACrG,aAAY,MAAI;AAAC,QAAI,EAAC,UAAS,KAAI,CAAC;AAAE,WAAO,cAAc,EAAC,MAAK,OAAM,CAAC;AAAE,WAAO,QAAQ,QAAQ;AAAA,EAAE;AAAA,EACnG,eAAc,MAAI;AAAC,QAAI,EAAC,UAAS,KAAI,CAAC;AAAE,WAAO,cAAc,EAAC,MAAK,kBAAiB,SAAQ,gCAA+B,CAAC;AAAE,WAAO,QAAQ,QAAQ;AAAA,EAAE;AAAA,EACvJ,aAAY,MAAI;AAEd,QAAI,EAAC,uBAAsB,KAAI,CAAC;AAChC,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,0BAAyB,CAAC,SAAe,IAAI,EAAC,uBAAsB,KAAI,CAAC;AAAA,EACzE,aAAY,MAAI;AAEd,QAAI,EAAC,uBAAsB,OAAM,WAAU,KAAI,CAAC;AAEhD,WAAO,cAAc,EAAC,MAAK,OAAM,CAAC;AAClC,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,kBAAiB,MAAI,IAAI,EAAC,gBAAe,CAAC,IAAI,EAAE,eAAc,CAAC;AAAA,EAC/D,gBAAe,CAAC,MAAI,IAAI,EAAC,aAAY,EAAC,CAAC;AAAA,EACvC,eAAe,CAAC,OAAO,UAAU;AAC/B,UAAM,WAAW,IAAI,EAAE;AACvB,QAAI,CAAC;AAAU;AAEf,UAAM,UAAU;AAEhB,UAAM,uBAAuB,CAAC,KAAU,MAAyBA,WAAoB;AACnF,UAAI,OAAO,SAAS,UAAU;AAE5B,cAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,cAAM,UAAU,MAAM,IAAI;AAC1B,YAAI,MAAM,SAAS,KAAK,MAAM,CAAC,MAAM,WAAW;AAC9C,gBAAM,MAAM;AAAA,QACd;AAEA,YAAI,UAAU;AAGd,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,OAAO,MAAM,CAAC;AACpB,cAAI,CAAC,QAAQ,IAAI,GAAG;AAElB,kBAAM,aAAa,CAAC,WAAW,GAAG,MAAM,MAAM,GAAG,IAAE,CAAC,CAAC,EAAE,KAAK,GAAG;AAC/D,kBAAM,SAAS,iBAAiB,UAAU;AAG1C,gBAAI,QAAQ;AAEV,kBAAI,MAAM,IAAE,CAAC,KAAK,CAAC,MAAM,OAAO,MAAM,IAAE,CAAC,CAAC,CAAC,GAAG;AAC5C,wBAAQ,IAAI,IAAI,CAAC;AAAA,cACnB,WAAW,WAAW,UAAU,OAAO,OAAO;AAE5C,wBAAQ,IAAI,IAAI,IAAI,OAAO,MAAM;AAAA,cACnC,WAAW,UAAU,UAAU,OAAO,SAAS,WAAW,WAAW,UAAU,OAAO,OAAO;AAE3F,wBAAQ,IAAI,IAAI,CAAC;AAAA,cACnB,OAAO;AAEL,wBAAQ,IAAI,IAAI,CAAC;AAAA,cACnB;AAAA,YACF,OAAO;AAEL,sBAAQ,IAAI,IAAI,CAAC;AAAA,YACnB;AAAA,UACF;AACA,oBAAU,QAAQ,IAAI;AAAA,QACxB;AAGA,gBAAQ,OAAO,IAAIA;AAAA,MACrB,WAAW,MAAM,QAAQ,IAAI,KAAK,KAAK,WAAW,GAAG;AAEnD,YAAI,KAAK,CAAC,CAAC,IAAIA;AAAA,MACjB,OAAO;AACL,gBAAQ,MAAM,uBAAuB,IAAI;AAAA,MAC3C;AACA,aAAO;AAAA,IACT;AAEA,yBAAqB,SAAS,OAAO,KAAK;AAG1C,UAAM,SAAS,OAAO,OAAO,OAAO,OAAO,OAAO,eAAe,OAAO,CAAC,GAAG,OAAO;AACnF,QAAI,EAAE,SAAS,OAAO,CAAC;AAEvB,WAAO,YAAY;AAAA,MACjB,MAAM;AAAA,MACN,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAAA,EACA,kBAAiB,CAAC,UAAQ,IAAI,EAAC,eAAc,MAAK,CAAC;AAAA,EACnD,aAAY,CAAC,MAAI,IAAI,EAAC,UAAS,EAAC,CAAC;AAAA,EACjC,gBAAe,CAAC,MAAI,IAAI,EAAC,aAAY,EAAC,CAAC;AAAA,EACvC,aAAY,CAAC,aAAmB,IAAI,EAAC,SAAQ,CAAC;AAChD,EAAE;;;AEzIF,OAAOC,YAAW;AAClB,OAAO,SAAS;AAEhB,OAAO,gBAAgB;AACvB,OAAO,aAAa;AACpB,OAAO,aAAa;;;ACLpB,OAAO,WAAW;AAQlB,IAAM,cAAc,CAAC,WAAmB,aAAa;AACnD,UAAQ,UAAU;AAAA,IAChB,KAAK;AAAS,aAAO;AAAA,IACrB,KAAK;AAAS,aAAO;AAAA,IACrB;AAAS,aAAO;AAAA,EAClB;AACF;AAEO,IAAM,gBAAqC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAClG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,6DAA4D;AAAA,EACtE;AAEJ;AAEO,IAAM,mBAAwC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACrG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,kDAAiD;AAAA,EAC3D;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,uCAAsC;AAAA,EAChD;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,kJAAiJ;AAAA,EAC3J;AAEJ;AAEO,IAAM,aAAkC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC/F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEF,oCAAC,UAAK,GAAE,eAAa;AAAA,IACrB,oCAAC,UAAK,GAAE,qBAAmB;AAAA,IAC3B,oCAAC,UAAK,GAAE,gLAA+K;AAAA,EAC3L;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,kJAAiJ;AAAA,EAC3J;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,qJAAoJ;AAAA,EAC9J;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,mOAAkO;AAAA,EAC5O;AAEJ;AAEO,IAAM,UAA+B,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC5F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,uCAAsC;AAAA,EAChD;AAEJ;AAEO,IAAM,WAAgC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC7F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,yJAAwJ;AAAA,EAClK;AAEJ;AAEO,IAAM,aAAkC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC/F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,iFAAgF;AAAA,EAC1F;AAEJ;AAEO,IAAM,iBAAsC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACnG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,gDAA+C;AAAA,EACzD;AAEJ;AAEO,IAAM,mBAAwC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACrG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,kDAAiD;AAAA,EAC3D;AAEJ;AAEO,IAAM,kBAAuC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACpG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,+HAA8H;AAAA,EACxI;AAEJ;AAEO,IAAM,iBAAsC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACnG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,kIAAiI;AAAA,EAC3I;AAEJ;AAEO,IAAM,aAAkC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC/F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,gGAA+F;AAAA,EACzG;AAEJ;AAEO,IAAM,cAAmC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAChG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,6HAA4H;AAAA,EACtI;AAEJ;AAEO,IAAM,gBAAqC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAClG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,4MAA2M;AAAA,EACrN;AAEJ;AAEO,IAAM,YAAiC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AAC9F,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,qDAAoD;AAAA,EAC9D;AAEJ;AAEO,IAAM,iBAAsC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACnG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,2HAA0H;AAAA,EACpI;AAEJ;AAEO,IAAM,mBAAwC,CAAC,EAAE,WAAW,UAAU,IAAI,OAAO,GAAG,MAAM,MAAM;AACrG,QAAM,OAAO,YAAY,QAAQ;AACjC,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAQ;AAAA,MACR,MAAK;AAAA,MACL,OAAO,EAAE,GAAG,OAAO,GAAI,MAAM,OAAO,OAAO,WAAW,KAAK,CAAC,EAAG;AAAA,MAC9D,GAAG;AAAA;AAAA,IAEJ,oCAAC,UAAK,GAAE,6CAA4C;AAAA,EACtD;AAEJ;;;ADvVA,IAAM,gBAA0B,MAAM;AACpC,QAAM,EAAE,aAAa,eAAe,aAAa,MAAM,MAAM,UAAU,WAAW,SAAS,SAAS,SAAS,IAAI,aAAa,YAAU;AAAA,IACtI,aAAa,MAAM;AAAA,IACnB,eAAe,MAAM;AAAA,IACrB,aAAa,MAAM;AAAA,IACnB,MAAM,MAAM;AAAA,IACZ,MAAM,MAAM;AAAA,IACZ,UAAU,MAAM;AAAA,IAChB,WAAW,MAAM;AAAA,IACjB,SAAS,MAAM;AAAA,IACf,SAAS,MAAM;AAAA,IACf,UAAU,MAAM;AAAA,EAClB,EAAE;AAEF,SACE,gBAAAA,OAAA,cAAC,OAAI,IAAI,EAAE,SAAS,QAAQ,YAAY,SAAS,KAE/C,gBAAAA,OAAA,cAAC,OAAI,IAAI,EAAE,SAAS,QAAQ,IAAI,EAAE,KAChC,gBAAAA,OAAA,cAAC,WAAQ,OAAM,mCACb,gBAAAA,OAAA,cAAC,cACC,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT,UAAU,CAAC,WAAW;AAAA,MACtB,MAAK;AAAA,MACL,cAAW;AAAA,MACX,IAAI,EAAE,IAAI,IAAI;AAAA;AAAA,IAEd,gBAAAA,OAAA,cAAC,YAAS,UAAS,SAAQ;AAAA,EAC7B,CACF,CACF,GAEA,gBAAAA,OAAA,cAAC,WAAQ,OAAM,yCACb,gBAAAA,OAAA,cAAC,cACC,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT,UAAU,CAAC,WAAW;AAAA,MACtB,MAAK;AAAA,MACL,cAAW;AAAA;AAAA,IAEX,gBAAAA,OAAA,cAAC,YAAS,UAAS,SAAQ;AAAA,EAC7B,CACF,CACF,CACF,GAEA,gBAAAA,OAAA,cAAC,WAAQ,aAAY,YAAW,UAAQ,MAAC,IAAI,EAAE,IAAI,EAAE,GAAG,GAGxD,gBAAAA,OAAA,cAAC,OAAI,IAAI,EAAE,SAAS,QAAQ,YAAY,UAAU,IAAI,EAAE,KACtD,gBAAAA,OAAA,cAAC,WAAQ,OAAM,mCACb,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT,UAAU;AAAA,MACV,MAAK;AAAA,MACL,cAAW;AAAA,MACX,IAAI,EAAE,IAAI,EAAE;AAAA;AAAA,IAEZ,gBAAAA,OAAA,cAAC,YAAS,UAAS,SAAQ;AAAA,EAC7B,CACF,GAEA,gBAAAA,OAAA,cAAC,WAAQ,OAAM,kDACb,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT,UAAU;AAAA,MACV,MAAK;AAAA,MACL,cAAW;AAAA,MACX,IAAI,EAAE,IAAI,EAAE;AAAA;AAAA,IAEZ,gBAAAA,OAAA,cAAC,cAAW,UAAS,SAAQ;AAAA,EAC/B,CACF,GAEA,gBAAAA,OAAA,cAAC,WAAQ,OAAM,qBACb,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT,UAAU;AAAA,MACV,MAAK;AAAA,MACL,cAAW;AAAA,MACX,IAAI,EAAE,IAAI,EAAE;AAAA;AAAA,IAEZ,gBAAAA,OAAA,cAAC,YAAS,UAAS,SAAQ;AAAA,EAC7B,CACF,CACF,CACF;AAEJ;AAEA,IAAO,wBAAQ;;;AEnGf,OAAOA,aAAW;AAClB,OAAO,iBAAiB;AACxB,OAAOC,iBAAgB;AACvB,OAAOC,iBAAgB;AACvB,OAAOC,WAAS;AAChB,OAAOC,cAAa;;;ACLpB,OAAOJ,WAAS,YAAY,aAAa,eAAe;;;ACAxD,OAAOA,YAAW;AAClB,SAAS,OAAAG,MAAY,cAAAF,aAAY,MAAM,aAAAI,YAAW,cAAAH,aAAY,UAAAI,eAAc;AAC5E,OAAO,YAAY;AACnB,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAC1B,OAAO,mBAAmB;AAC1B,SAAS,gBAA4B;AACrC,SAAkB,YAAAC,iBAAgB;;;ACPlC,OAAOP,UAAS,gBAAgB;AAChC,SAAS,OAAAG,MAAK,MAAM,UAAU,cAAc,WAAAK,UAAS,cAAAN,aAAwB,QAAQ,iBAAiB;;;ACDtG,OAAOF,YAAW;AAClB,SAAS,OAAAG,YAAW;AAGb,IAAM,WAAW,CAAC,EAAE,UAAU,QAAQ,MAAM,MAC/C,gBAAAH,OAAA;AAAA,EAACG;AAAA,EAAA;AAAA,IACG,WAAU;AAAA,IACV,IAAI;AAAA,MACA,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,cAAc;AAAA,MACd,IAAI,QAAQ,IAAI;AAAA,MAChB,IAAI;AAAA,MACJ,YAAY;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,IAAG;AAAA,QACH,qBAAqB;AAAA,UACjB,UAAU;AAAA,UACV,cAAc;AAAA,UACd,OAAO;AAAA,UACP,WAAW;AAAA,YACP,SAAS;AAAA,UACb;AAAA,QACJ;AAAA,QACA,sBAAsB;AAAA,UAClB,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAEC;AACL;;;AC/BG,IAAM,cAAc;AAGpB,IAAM,mBAAmB,CAAC,SAAc,SAAsB;AACjE,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,QAAM,MAAM;AAEZ,MAAI,UAAe;AAEnB,aAAW,QAAQ,OAAO;AACtB,QAAI,CAAC,WAAW,QAAQ,IAAI,MAAM,QAAW;AACzC,aAAO;AAAA,IACX;AACA,cAAU,QAAQ,IAAI;AAAA,EAC1B;AAEA,SAAO;AACX;AAGO,IAAM,oBAAoB,CAAC,cAAkC,gBAA8C;AAC9G,MAAI,cAAc;AACd,UAAM,MAAW,IAAI,aAAa,MAAM;AACxC,WAAO,QAAQ,aAAa,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,UAAU,MAAM;AACrE,UAAI,GAAG,IAAI,kBAAkB,WAAW,QAAQ,UAAU;AAAA,IAC9D,CAAC;AACD,WAAO;AAAA,EACX,WACS,aAAa;AAClB,QAAI,YAAY,SAAS,YAAY,YAAY,QAAQ;AACrD,YAAM,MAAW,IAAI,YAAY,OAAO,MAAM;AAC9C,aAAO,QAAQ,YAAY,OAAO,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,KAAK,UAAU,MAAM;AAC3E,YAAI,GAAG,IAAI,kBAAkB,WAAW,QAAQ,UAAU;AAAA,MAC9D,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,uBAAuB,WAAW;AAAA,EAC7C,OACK;AACD,WAAO,CAAC;AAAA,EACZ;AACJ;AAGA,IAAM,yBAAyB,CAAC,WAA6B;AACzD,UAAQ,OAAO,MAAM;AAAA,IACjB,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO,CAAC;AAAA,IACZ,KAAK;AACD,aAAO,CAAC;AAAA,IACZ;AACI,aAAO;AAAA,EACf;AACJ;;;AFxCA,IAAM,WAAoC,CAAC;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,cAAc,CAAC;AAAA,EACf,WAAW;AACf,MAAM;AACF,QAAM,kBAAkB,aAAa,CAAC,UAAe,MAAM,eAAe;AAC1E,QAAM,CAAC,WAAW,YAAY,IAAI,SAAwB,IAAI;AAC9D,QAAM,CAAC,WAAW,YAAY,IAAI,SAAiB,EAAE;AACrD,QAAM,CAAC,WAAW,YAAY,IAAI,SAAkB,KAAK;AACzD,QAAM,CAAC,cAAc,eAAe,IAAI,SAAiB,EAAE;AAG3D,QAAM,eAAe,CAAC;AAEtB,QAAM,aAAa,CAAC,UAAkB;AAClC,QAAI,OAAO,MAAM,KAAK,MAAM,UAAU;AAClC,mBAAa,KAAK;AAClB,mBAAa,OAAO,MAAM,KAAK,CAAC,CAAC;AAAA,IACrC,WAAW,YAAY;AACnB,sBAAgB,GAAG,UAAU,IAAI,KAAK,EAAE;AAAA,IAE5C,OAAO;AAAA,IAEP;AAAA,EACJ;AAEA,QAAM,aAAa,CAAC,UAAkB;AAElC,UAAM,eAAe,CAAC,GAAG,KAAK;AAE9B,iBAAa,KAAK,IAAI;AAGtB,QAAI,OAAO,MAAM,KAAK,MAAM,YAAY,YAAY;AAEhD,YAAM,OAAO,GAAG,UAAU,IAAI,KAAK;AACnC,YAAM,gBAAgB,aAAa,SAAS,EAAE;AAC9C,oBAAc,MAAM,SAAS;AAAA,IACjC,OAAO;AAEH,aAAO,KAAK;AAAA,IAChB;AAGA,iBAAa,IAAI;AAAA,EACrB;AAEA,QAAM,eAAe,MAAM;AACvB,QAAI,cAAc;AAEd,mBAAa,IAAI;AACjB,sBAAgB,EAAE;AAAA,IACtB,OAAO;AAEH,cAAQ;AAAA,IACZ;AAAA,EACJ;AAEA,QAAM,oBAAoB,MAAM;AAC5B,QAAI,cAAc,aAAa,KAAK,MAAM,IAAI;AAE1C,YAAM,eAAe,CAAC,GAAG,OAAO,YAAY;AAG5C,YAAM,gBAAgB,aAAa,SAAS,EAAE;AAC9C,oBAAc,YAAY,YAAY;AAGtC,mBAAa,KAAK;AAClB,sBAAgB,EAAE;AAAA,IACtB;AAAA,EACJ;AAEA,QAAM,eAAe,CAAC,OAAe,MAAwB;AACzD,MAAE,gBAAgB;AAClB,eAAW,KAAK;AAAA,EACpB;AAEA,QAAM,UACF,gBAAAH,OAAA,cAAAA,OAAA,gBACI,gBAAAA,OAAA,cAAC,QAAK,OAAc,IAAI,EAAE,OAAO,QAAQ,GAAG,EAAE,MACxC,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,UAAU;AAGhC,QAAI,UAAU,QAAQ,OAAO,UAAU,OAAO,MAAM,QAAQ,IAAI,IAAI,WAAW,QAAQ;AACvF,QAAI,YAAY,QAAQ,OAAO,YAAY,OAAO,MAAM,UAAU,IAAI,IAAI;AAE1E,QAAI,CAAC,SAAS;AACV,gBAAU;AAAA,IACd;AACA,UAAM,gBAAgB,OAAO,SAAS;AACtC,QAAI,eAAe;AACf,gBAAU,OAAO,IAAI;AAAA,IACzB;AAEA,WACA,gBAAAA,OAAA,cAACA,OAAM,UAAN,EAAe,KAAK,SAChB,QAAQ,KAAK,gBAAAA,OAAA,cAACQ,UAAA,IAAQ,GACvB,gBAAAR,OAAA;AAAA,MAAC;AAAA;AAAA,QACG,SAAS,MAAM,gBAAgB,OAAO,WAAW,KAAK;AAAA,QACtD,IAAI;AAAA,UACA,QAAQ,gBAAgB,YAAY;AAAA,UACpC,WAAW;AAAA,YACP,iBAAiB;AAAA,UACrB;AAAA,QACJ;AAAA,QACA,iBACI,CAAC,WAAW,gBAAAA,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,SAAS,OAAO,KAClC,cAAc,QACX,gBAAAH,OAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,MAAK;AAAA,YACL,cAAW;AAAA,YACX,SAAS,MAAM,WAAW,KAAK;AAAA,YAC/B,MAAM,QAAQ,UAAU;AAAA;AAAA,UAExB,gBAAAF,OAAA,cAAC,aAAU,IAAI,EAAE,UAAU,QAAQ,KAAK,GAAG,GAAG;AAAA,QAClD,IACA,gBACA,gBAAAA,OAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,MAAK;AAAA,YACL,cAAW;AAAA,YACX,SAAS,MAAM,WAAW,KAAK;AAAA,YAC/B,MAAM,QAAQ,UAAU;AAAA;AAAA,UAExB,gBAAAF,OAAA,cAAC,YAAS,IAAI,EAAE,UAAU,QAAQ,KAAK,GAAG,GAAG;AAAA,QACjD,IACA,MACJ,gBAAAA,OAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,MAAK;AAAA,YACL,cAAW;AAAA,YACX,SAAS,CAAC,MAAwB,aAAa,OAAO,CAAC;AAAA,YACvD,MAAM,QAAQ,UAAU;AAAA;AAAA,UAExB,gBAAAF,OAAA,cAAC,cAAW,IAAI,EAAE,UAAU,QAAQ,KAAK,GAAG,GAAG;AAAA,QACnD,CACJ,IAAS;AAAA;AAAA,MAGZ,cAAc,QACX,gBAAAA,OAAA;AAAA,QAAC;AAAA;AAAA,UACG,OAAO;AAAA,UACP,UAAU,CAAC,MAA2C,aAAa,EAAE,OAAO,KAAK;AAAA,UACjF,SAAS;AAAA,UACT,MAAK;AAAA,UACL,WAAS;AAAA,UACT,WAAS;AAAA,UACT,WAAW,CAAC,MAA6C;AACrD,gBAAI,EAAE,QAAQ,SAAS;AACnB,yBAAW,KAAK;AAAA,YACpB,WAAW,EAAE,QAAQ,UAAU;AAC3B,2BAAa,IAAI;AAAA,YACrB;AAAA,UACJ;AAAA;AAAA,MACJ,IAEA,gBAAAA,OAAA;AAAA,QAAC;AAAA;AAAA,UACG,wBAAwB;AAAA,YACpB,UAAU,QAAQ,WAAW;AAAA,UACjC;AAAA,UACA,0BAA0B;AAAA,YACtB,UAAU,QAAQ,WAAW;AAAA,UACjC;AAAA,UACA;AAAA,UACA;AAAA;AAAA,MACJ;AAAA,IAER,CACJ;AAAA,EAEJ,CAAC,GAGA,CAAC,YAAY,aACV,gBAAAA,OAAA,cAAC,gBACG,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,OAAO;AAAA,MACP,UAAU,CAAC,MAA2C,gBAAgB,EAAE,OAAO,KAAK;AAAA,MACpF,SAAS;AAAA,MACT,MAAK;AAAA,MACL,WAAS;AAAA,MACT,WAAS;AAAA,MACT,aAAY;AAAA,MACZ,WAAW,CAAC,MAA6C;AACrD,YAAI,EAAE,QAAQ,SAAS;AACnB,4BAAkB;AAAA,QACtB,WAAW,EAAE,QAAQ,UAAU;AAC3B,uBAAa,KAAK;AAAA,QACtB;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR,cACI,gBAAAA,OAAA;AAAA,UAACE;AAAA,UAAA;AAAA,YACG,MAAK;AAAA,YACL,SAAS;AAAA;AAAA,UAET,gBAAAF,OAAA,cAAC,aAAU,UAAS,SAAQ;AAAA,QAChC;AAAA,MAER;AAAA;AAAA,EACJ,CACJ,CAER,CACJ;AAGJ,MAAI,aAAa;AACb,WACI,gBAAAA,OAAA,cAAC,YAAS,SACN,gBAAAA,OAAA,cAAC,gBACI,OACA,CAAC,YAAY,gBAAAA,OAAA;AAAA,MAAC;AAAA;AAAA,QACX,SAAS;AAAA,QACT,WAAW,gBAAAA,OAAA,cAAC,aAAQ;AAAA;AAAA,MAEnB;AAAA,IACL,CACJ,GACC,OACL;AAAA,EAER;AAEA,SAAO;AACX;AAEA,IAAO,mBAAQ;;;AGlQf,OAAOA,UAAS,QAAQ,YAAAS,WAAU,iBAAiB;AACnD;AAAA,EACI,aAAAJ;AAAA,EAAW,cAAAJ;AAAA,EAAY;AAAA,EAAM,OAAAE;AAAA,OAC1B;AACP,OAAO,iBAAiB;AAIjB,IAAM,gBAAgBH,OAAM,KAAK,CAAC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AACf,MAQM;AACF,QAAM,WAAW,OAAyB,IAAI;AAE9C,QAAM,CAAC,OAAO,QAAQ,IAAIS,UAAS,cAAc,SAAS,KAAK,EAAE;AAEjE,QAAM,gBAAgB,OAAO,cAAc,SAAS,KAAK,EAAE;AAG3D,YAAU,MAAM;AACZ,aAAS,cAAc,SAAS,KAAK,EAAE;AAEvC,kBAAc,UAAU,cAAc,SAAS,KAAK;AAAA,EACxD,GAAG,CAAC,YAAY,CAAC;AAEjB,QAAM,eAAe,CAAC,aAAqB;AAEvC,QAAI,aAAa,cAAc,SAAS,KAAK,aAAa,cAAc,SAAS;AAE7E,oBAAc,UAAU;AACxB,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AAEA,MAAI,UAAU;AACV,QAAI,UAAU,UAAa,UAAU,QAAQ,MAAM,SAAS,EAAE,KAAK,MAAM;AAAI,aAAO;AACpF,WACI,gBAAAT,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,IAAI,IAAI,KACf,gBAAAH,OAAA,cAACC,aAAA,EAAW,SAAQ,WAAU,OAAM,kBAAiB,IAAI,EAAE,IAAI,EAAE,KAC5D,OAAM,GACX,GACC,OAAO,UAAU,YAAY,MAAM,MAAM,cAAc,IACpD,gBAAAD,OAAA,cAAC,QAAK,MAAM,OAAO,QAAO,UAAS,KAAI,yBAAuB,KAAM,IAEpE,gBAAAA,OAAA,cAACC,aAAA,EAAW,WAAU,UAAQ,KAAM,CAE5C;AAAA,EAER;AAEA,SACI,gBAAAD,OAAA,cAAC,eAAY,SAAS,aAAa,IAAI,EAAE,IAAI,GAAE,OAAO,OAAO,KACzD,gBAAAA,OAAA;AAAA,IAACK;AAAA,IAAA;AAAA,MACG;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,UAAU,CAAC,MAA2C,SAAS,EAAE,OAAO,KAAK;AAAA,MAC7E,QAAQ,MAAM;AACV,YAAI,SAAS,SAAS;AAClB,uBAAa,SAAS,QAAQ,KAAK;AAAA,QACvC;AAAA,MACJ;AAAA,MACA,WAAW,CAAC,MAA2B;AACnC,YAAI,EAAE,QAAQ,WAAW,SAAS,SAAS;AACvC,uBAAa,SAAS,QAAQ,KAAK;AACnC,mBAAS,QAAQ,KAAK;AAAA,QAC1B;AAAA,MACJ;AAAA,MACA,WAAS;AAAA,MACT,MAAK;AAAA,MACL,QAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAI,EAAE,OAAO,OAAO;AAAA;AAAA,EACxB,CACJ;AAER,CAAC;;;AJ5EM,IAAM,kBAAyC,CAAC,EAAE,MAAM,QAAQ,UAAU,QAAQ,IAAI,WAAW,MAAM,MAAM;AAChH,QAAM,UAAU,aAAa,CAAC,UAAe,MAAM,OAAO;AAE1D,QAAM,CAAC,MAAM,OAAO,IAAIL,OAAM,SAAS,CAAC;AACxC,QAAM,CAAC,aAAa,cAAc,IAAIA,OAAM,SAAS,EAAE;AACvD,QAAM,CAAC,eAAe,gBAAgB,IAAIA,OAAM,SAAS,KAAK;AAC9D,QAAM,CAAC,YAAY,aAAa,IAAIA,OAAM,SAAS,EAAE;AAErD,QAAM,EAAE,cAAc,gBAAgB,IAAI,aAAa,YAAU;AAAA,IAC7D,cAAc,MAAM;AAAA,IACpB,iBAAiB,MAAM;AAAA,EAC3B,EAAE;AAEF,QAAM,QAAQ,iBAAiB,SAAS,IAAI;AAC5C,QAAM,UAAU,MAAM,aAAa,KAAK,CAAC;AACzC,QAAM,WAAW,MAAM,YAAY,KAAK,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,EAAE;AAEjE,QAAM,QAAQ,SAAS,QAAQ,CAAC,GAAG,SAAS,KACvC,SAAS,KAAK,CAAC,KAAK,CAAC,GAAG;AAAA,IAAI,CAAC,GAAQ,cACjC,SAAS,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAe,IAAI,QAAQ,KAAK,EAAE;AAAA,EACjE,IACA,CAAC;AAEL,QAAM,WAAW,SAAS,YAAY,CAAC;AACvC,QAAM,YAAY,MAAM,aAAa,KAAK,CAAC;AAE3C,QAAM,eAAe,MAAM;AAEvB,UAAM,SAAS,MAAM,QAAQ,MAAM,EAAE,KAAK,EAAE;AAG5C,UAAM,cAAc,CAAC,GAAG,MAAM,MAAM;AAGpC,UAAM,YAAY;AAAA,MACd,MAAM;AAAA,MACN;AAAA,IACJ,CAAC;AAED,aAAS,MAAM,KAAK;AAAA,EACxB;AAEA,QAAM,kBAAkB,CAAC,aAAqB;AAE1C,UAAM,cAAc,CAAC,GAAG,IAAI;AAC5B,gBAAY,OAAO,UAAU,CAAC;AAG9B,UAAM,YAAY;AAAA,MACd,MAAM;AAAA,MACN;AAAA,IACJ,CAAC;AAED,aAAS,MAAM,KAAK;AAAA,EACxB;AAEA,QAAM,oBAAoB,MAAM;AAC5B,UAAM,cAAc,IAAIO,UAAS;AACjC,UAAM,mBAAmB,CAAC,GAAG,WAAW,WAAW;AACnD,UAAM,aAAa,gBAAgB;AACnC,aAAS,MAAM,KAAK;AAEpB,UAAM,WAAW,UAAU;AAC3B,oBAAgB,GAAG,YAAY,cAAc,QAAQ,EAAE;AAAA,EAC3D;AAEA,QAAM,qBAAqB,CAAC,UAAkB;AAC1C,oBAAgB,GAAG,YAAY,cAAc,KAAK,EAAE;AAAA,EACxD;AAEA,QAAM,uBAAuB,CAAC,UAAkB;AAC5C,UAAM,mBAAmB,CAAC,GAAG,SAAS;AACtC,qBAAiB,OAAO,OAAO,CAAC;AAChC,UAAM,aAAa,gBAAgB;AACnC,aAAS,MAAM,KAAK;AAAA,EACxB;AAEA,QAAM,kBAAkB,CAAC,UAA+C;AACpE,UAAM,OAAO,MAAM,OAAO,QAAQ,CAAC;AACnC,QAAI,CAAC;AAAM;AAEX,UAAM,SAAS,IAAI,WAAW;AAC9B,WAAO,SAAS,CAAC,MAAM;AACnB,YAAM,UAAU,EAAE,QAAQ;AAC1B,YAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,YAAM,UAAU,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,YAAU,OAAO,KAAK,CAAC;AAG/D,YAAM,oBAAoB,MAAM,aAAa,KAAK,CAAC;AACnD,YAAM,wBAAkC,kBAAkB,IAAI,CAAC,MAAgB,EAAE,QAAQ,CAAC;AAE1F,cAAQ,QAAQ,CAAC,WAAmB;AAChC,YAAI,CAAC,sBAAsB,SAAS,MAAM,GAAG;AACzC,gBAAM,cAAc,IAAIA,UAAS;AACjC,sBAAY,QAAQ,MAAM;AAC1B,4BAAkB,KAAK,WAAW;AAAA,QACtC;AAAA,MACJ,CAAC;AACD,YAAM,aAAa,iBAAiB;AAGpC,YAAM,UAAmB,CAAC;AAE1B,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAI,CAAC,MAAM,CAAC,EAAE,KAAK;AAAG;AACtB,cAAM,SAAS,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,WAAS,MAAM,KAAK,CAAC;AAC5D,gBAAQ,KAAK,MAAM;AAAA,MACvB;AACA,UAAIG,YAAW,MAAM,YAAY,EAAE;AACnC,YAAM,YAAY,EAAE,MAAM,SAAS,UAAUA,UAAS,CAAC;AACvD,eAAS,MAAM,KAAK;AAAA,IACxB;AACA,WAAO,WAAW,IAAI;AAAA,EAC1B;AAEA,QAAM,kBAAkB,MAAM;AAC1B,UAAM,UAAU,QAAQ,IAAI,CAAC,WAAqB,OAAO,QAAQ,CAAC;AAClE,QAAIC,cAAa,QAAQ,KAAK,GAAG,IAAI;AAGrC,SAAK,QAAQ,CAAC,YAAmB;AAC7B,MAAAA,eAAc,QAAQ,KAAK,GAAG,IAAI;AAAA,IACtC,CAAC;AAED,kBAAcA,WAAU;AACxB,qBAAiB,IAAI;AAAA,EACzB;AAEA,QAAM,cAA4B;AAAA,IAC9B,GAAG,QAAQ,IAAI,CAAC,QAAkB,cAAsB;AAAA,MACpD,OAAO,SAAS,SAAS;AAAA,MACzB,YAAY,OAAO,QAAQ;AAAA,MAC3B,MAAM;AAAA,MACN,UAAU;AAAA,MACV,UAAU,CAAC;AAAA,IACf,EAAE;AAAA,IACF,GAAI,WAAW,CAAC,IAAI,CAAC;AAAA,MACjB,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,YAAY,CAACC,YACT,gBAAAZ,OAAA,cAACG,MAAA,MACG,gBAAAH,OAAA;AAAA,QAACE;AAAA,QAAA;AAAA,UACG,MAAK;AAAA,UACL,MAAK;AAAA,UACL,cAAW;AAAA,UACX,SAAS,CAAC,MAAwB;AAC9B,cAAE,gBAAgB;AAClB,4BAAgBU,QAAO,IAAI,QAAQ;AAAA,UACvC;AAAA;AAAA,QAEA,gBAAAZ,OAAA,cAAC,cAAW,IAAI,EAAE,UAAU,GAAG,GAAG;AAAA,MACtC,CACJ;AAAA,IAER,CAAC;AAAA,EACL;AAGA,QAAM,WAAW,KAAK,IAAI,CAAC,SAAgB,aAAqB;AAC5D,UAAM,MAAW;AAAA,MACb,IAAI;AAAA,MACJ;AAAA;AAAA,IACJ;AAGA,YAAQ,QAAQ,CAAC,QAAkB,aAAqB;AACpD,UAAI,SAAS,SAAS,CAAC,IAAI,QAAQ,QAAQ,KAAK;AAAA,IACpD,CAAC;AAED,WAAO;AAAA,EACX,CAAC;AAED,SACI,gBAAAA,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,GAAG,EAAE,KACZ,gBAAAH,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,SAAS,QAAQ,gBAAgB,iBAAiB,YAAY,UAAU,IAAI,EAAE,KACrF,gBAAAH,OAAA,cAACC,aAAA,EAAW,SAAQ,QAAM,KAAM,GAC/B,CAAC,YAAY,gBAAAD,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,SAAS,QAAQ,KAAK,EAAE,KAC7C,gBAAAH,OAAA;AAAA,IAACM;AAAA,IAAA;AAAA,MACG,SAAQ;AAAA,MACR,WAAW,gBAAAN,OAAA,cAAC,oBAAe;AAAA,MAC3B,MAAK;AAAA,MACL,WAAU;AAAA;AAAA,IACb;AAAA,IAEG,gBAAAA,OAAA;AAAA,MAAC;AAAA;AAAA,QACG,MAAK;AAAA,QACL,QAAM;AAAA,QACN,QAAO;AAAA,QACP,UAAU;AAAA;AAAA,IACd;AAAA,EACJ,GACA,gBAAAA,OAAA;AAAA,IAACM;AAAA,IAAA;AAAA,MACG,SAAQ;AAAA,MACR,WAAW,gBAAAN,OAAA,cAAC,sBAAiB;AAAA,MAC7B,MAAK;AAAA,MACL,SAAS;AAAA;AAAA,IACZ;AAAA,EAED,GACA,gBAAAA,OAAA;AAAA,IAACM;AAAA,IAAA;AAAA,MACG,SAAQ;AAAA,MACR,WAAW,gBAAAN,OAAA,cAAC,WAAQ,IAAI,EAAC,UAAU,GAAE,GAAE;AAAA,MACvC,MAAK;AAAA,MACL,SAAS;AAAA;AAAA,IACZ;AAAA,EAED,CACJ,CACJ,GAEA,gBAAAA,OAAA,cAAC,QAAK,WAAS,MAAC,SAAS,GAAG,IAAI,EAAE,IAAI,EAAE,KACpC,gBAAAA,OAAA,cAAC,QAAK,MAAI,MAAC,IAAI,IAAI,IAAI,KACnB,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,KAAK,GAAG,IAAI;AAAA,MACZ,OAAM;AAAA,MACN,cAAc,MAAM,YAAY,KAAK;AAAA,MACrC,QAAQ,CAAC,UAAU;AACf,cAAM,YAAY,KAAK;AACvB,iBAAS,MAAM,KAAK;AAAA,MACxB;AAAA,MACA,UAAU;AAAA;AAAA,EACd,CACJ,GACA,gBAAAA,OAAA,cAAC,QAAK,MAAI,MAAC,IAAI,IAAI,IAAI,KACnB,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,KAAK,GAAG,IAAI;AAAA,MACZ,OAAM;AAAA,MACN,cAAc,MAAM,gBAAgB,KAAK;AAAA,MACzC,QAAQ,CAAC,UAAU;AACf,cAAM,gBAAgB,KAAK;AAC3B,iBAAS,MAAM,KAAK;AAAA,MACxB;AAAA,MACA,UAAU;AAAA;AAAA,EACd,CACJ,CACJ,GAEA,gBAAAA,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,QAAQ,KAAK,OAAO,QAAQ,IAAI,EAAE,KACzC,gBAAAH,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,MAAM;AAAA,MACN,SAAS;AAAA,MACT,cAAc;AAAA,QACV,YAAY;AAAA,UACR,iBAAiB;AAAA,YACb,UAAU;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,iBAAiB,CAAC,GAAG,IAAI,IAAI,EAAE;AAAA,MAC/B,yBAAyB,CAACY,YAAW;AACjC,gBAAQA,QAAO,IAAI;AACnB,uBAAeA,QAAO,QAAQ;AAAA,MAClC;AAAA,MACA,4BAA0B;AAAA;AAAA,EAC9B,CACJ,GAEA,gBAAAZ,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,OAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO,WAAW,SAAY;AAAA,MAC9B,QAAQ;AAAA,MACR,UAAU,WAAW,SAAY;AAAA,MACjC,eAAc;AAAA,MACd,YAAY,GAAG,YAAY;AAAA,MAC3B;AAAA;AAAA,EACJ,GAEA,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,MAAM;AAAA,MACN,SAAS,MAAM,iBAAiB,KAAK;AAAA,MACrC,UAAS;AAAA,MACT,WAAS;AAAA;AAAA,IAET,gBAAAA,OAAA,cAAC,mBAAY,iBAAc,MAAM,YAAY,KAAK,QAAO,MAAI;AAAA,IAC7D,gBAAAA,OAAA,cAAC,qBACG,gBAAAA,OAAA;AAAA,MAACK;AAAA,MAAA;AAAA,QACG,WAAS;AAAA,QACT,WAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAQ;AAAA,QACR,YAAY;AAAA,UACR,UAAU;AAAA,UACV,OAAO;AAAA,YACH,YAAY;AAAA,YACZ,YAAY;AAAA,YACZ,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,QACA,QAAO;AAAA;AAAA,IACX,CACJ;AAAA,IACA,gBAAAL,OAAA,cAAC,qBACG,gBAAAA,OAAA,cAACM,SAAA,EAAO,SAAS,MAAM,iBAAiB,KAAK,KAAG,OAAK,CACzD;AAAA,EACJ,CACJ;AAER;;;AK7TA,OAAON,YAAW;AAWX,IAAM,oBAA2C,CAAC;AAAA,EACrD;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR,SAAS,CAAC;AAAA,EACV;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,cAAc,CAAC;AAAA,EACf,WAAW;AACf,MAAM;AACF,QAAM,kBAAkB,aAAa,WAAS,MAAM,eAAe;AACnE,QAAM,OAAO,iBAAiB,SAAS,IAAI;AAO3C,MAAI,CAAC;AAAS,WAAO;AAGrB,MAAI,aAAa,CAAC,QAAQ,KAAK,WAAW,IAAI;AAC1C,WAAO;AAAA,EACX;AAEA,QAAM,iBAAiB,CAAC,UAAkB;AAEtC,UAAM,WAAW,GAAG,IAAI,IAAI,KAAK;AAEjC,aAAS,UAAU,KAAK,KAAK,CAAC;AAC9B,oBAAgB,QAAQ;AAAA,EAC5B;AAEA,QAAM,gBAAgB,MAAM;AAExB,UAAM,UAAU,kBAAkB,QAAQ,MAAS;AAGnD,UAAM,UAAU,CAAC,GAAG,MAAM,OAAO;AAGjC,aAAS,MAAM,OAAO;AAGtB,UAAM,WAAW,QAAQ,SAAS;AAClC,UAAM,cAAc,GAAG,IAAI,IAAI,QAAQ;AACvC,oBAAgB,WAAW;AAAA,EAC/B;AAEA,QAAM,mBAAmB,CAAC,UAAkB;AAExC,UAAM,UAAU,CAAC,GAAG,IAAI;AACxB,YAAQ,OAAO,OAAO,CAAC;AAGvB,aAAS,MAAM,OAAO;AAAA,EAC1B;AAEA,SACI,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG;AAAA,MACA,OAAO,SAAS,YAAY,SAAS;AAAA,MACrC,OAAO;AAAA,MACP,OAAO,WAAW,SAAY,MAAM,cAAc;AAAA,MAClD,QAAQ,CAAC,UAAU,eAAe,KAAK;AAAA,MACvC,UAAU,WAAW,SAAY,CAAC,UAAU,iBAAiB,KAAK;AAAA,MAClE,eAAc;AAAA,MACd,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA;AAAA,EACJ;AAER;;;ACtFA,OAAOA,aAAW;AAClB;AAAA,EAEI,OAAAG;AAAA,OACG;;;ACJP,OAAOH,UAAS,aAAAa,YAAW,UAAAC,SAAQ,YAAAL,iBAAgB;AACnD,SAAS,OAAAN,YAAW;AACpB,OAAO,cAAc;AACrB,OAAO;AAKP,IAAM,eAAe,QAAQ,IAAI,gBAAgB;AAGjD,IAAM,iBAAwC,CAAC,EAAE,SAAS,MAAM,QAAQ,UAAU,QAAQ,IAAI,WAAW,MAAM,MAAM;AACjH,QAAM,WAAW,iBAAiB,SAAS,IAAI;AAE/C,QAAM,CAAC,aAAa,cAAc,IAAIM,UAAS;AAAA,IAC3C,KAAK,WAAW,SAAS,YAAY,GAAG,KAAK;AAAA,IAC7C,KAAK,WAAW,SAAS,aAAa,GAAG,KAAK;AAAA,EAClD,CAAC;AAED,QAAM,eAAeK,QAAuB,IAAI;AAChD,QAAM,MAAMA,QAA4B,IAAI;AAC5C,QAAM,SAASA,QAA+B,IAAI;AAGlD,EAAAD,WAAU,MAAM;AACZ,QAAI,CAAC,aAAa,WAAW,IAAI;AAAS;AAE1C,aAAS,cAAc;AAEvB,UAAM,aAAa,WAAW,SAAS,YAAY,GAAG,KAAK;AAC3D,UAAM,aAAa,WAAW,SAAS,aAAa,GAAG,KAAK;AAE5D,QAAI,UAAU,IAAI,SAAS,IAAI;AAAA,MAC3B,WAAW,aAAa;AAAA,MACxB,OAAO;AAAA;AAAA,MACP,QAAQ,CAAC,YAAY,UAAU;AAAA,MAC/B,MAAM;AAAA,IACV,CAAC;AAGD,QAAI,QAAQ,GAAG,QAAQ,MAAM;AACzB,UAAI,SAAS,UAAU,cAAc;AAAA,QACjC,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC;AAED,UAAI,SAAS,SAAS;AAAA,QAClB,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,YAAY;AAAA,UACZ,sBAAsB,CAAC,GAAK,EAAI;AAAA,UAChC,gCAAgC;AAAA,QACpC;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAGD,WAAO,UAAU,IAAI,SAAS,OAAO;AAAA,MACjC,WAAW,CAAC;AAAA,MACZ,OAAO;AAAA,IACX,CAAC,EACI,UAAU,CAAC,YAAY,UAAU,CAAC,EAClC,MAAM,IAAI,OAAO;AAGtB,QAAI,CAAC,UAAU;AACX,aAAO,QAAQ,GAAG,WAAW,MAAM;AAC/B,cAAM,WAAW,OAAO,SAAS,UAAU;AAC3C,YAAI,UAAU;AACV,mBAAS,WAAW,SAAS,IAAI,QAAQ,CAAC;AAC1C,mBAAS,YAAY,SAAS,IAAI,QAAQ,CAAC;AAG3C,yBAAe;AAAA,YACX,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AAAA,UAClB,CAAC;AAED,mBAAS,MAAM,QAAQ;AAAA,QAC3B;AAAA,MACJ,CAAC;AAAA,IACL;AAGA,WAAO,MAAM;AACT,UAAI,SAAS,OAAO;AACpB,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ,GAAG,CAAC,CAAC;AAGL,EAAAA,WAAU,MAAM;AACZ,UAAM,aAAa,WAAW,SAAS,YAAY,GAAG,KAAK;AAC3D,UAAM,aAAa,WAAW,SAAS,aAAa,GAAG,KAAK;AAG5D,QAAI,eAAe,YAAY,OAAO,eAAe,YAAY,KAAK;AAClE,qBAAe;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AAAA,MACT,CAAC;AAGD,UAAI,OAAO,WAAW,IAAI,SAAS;AAC/B,eAAO,QAAQ,UAAU,CAAC,YAAY,UAAU,CAAC;AACjD,YAAI,QAAQ,MAAM;AAAA,UACd,QAAQ,CAAC,YAAY,UAAU;AAAA,UAC/B,MAAM;AAAA,UACN,UAAU;AAAA,QACd,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ,GAAG,CAAC,SAAS,UAAU,SAAS,SAAS,CAAC;AAE1C,SACI,gBAAAb,OAAA;AAAA,IAACG;AAAA,IAAA;AAAA,MACG,KAAK;AAAA,MACL,IAAI;AAAA,QACA,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,cAAc;AAAA,QACd,UAAU;AAAA,MACd;AAAA;AAAA,EACJ;AAER;AAEA,IAAO,yBAAQ;;;AClIf,OAAOH,YAAW;AAClB;AAAA,EACI,OAAAG;AAAA,EACA;AAAA,EACA,cAAAF;AAAA,OACG;AAGP,OAAO,YAAmC;AAC1C,OAAO,gBAAgB;AACvB,OAAOc,kBAAiB;AAKjB,IAAM,oBAA2C,CAAC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR,WAAW;AACf,MAAM;AACF,QAAM,UAAU,aAAa,CAAC,UAAe,MAAM,OAAO;AAC1D,QAAM,QAAQ,iBAAiB,SAAS,IAAI;AAC5C,QAAM,YAAY;AAClB,MAAI,CAAC,aAAa;AACd,WAAO;AAAA,EACX;AAGA,MAAI,eAAe;AACnB,MAAI,UAAU;AACd,MAAI,WAAW;AACX,mBAAe,UAAU;AACzB,cAAU,UAAU;AAAA,EACxB;AAEA,MAAI,UAAU;AACV,QAAI,CAAC;AAAc,aAAO;AAC1B,WACI,gBAAAf,OAAA,cAACG,MAAA,EAAI,IAAI,EAAE,IAAG,IAAI,KACd,gBAAAH,OAAA,cAACC,aAAA,EAAW,SAAQ,WAAU,OAAM,kBAAiB,IAAI,EAAE,IAAI,EAAE,KAC5D,YAAY,OAAM,GACvB,GACA,gBAAAD,OAAA,cAACC,aAAA,EAAW,WAAU,UAAQ,YAAa,CAC/C;AAAA,EAER;AAEA,SACI,gBAAAD,OAAA,cAACe,cAAA,EAAY,SAAS,aAAa,IAAI,EAAE,IAAI,GAAG,OAAO,OAAO,KAC1D,gBAAAf,OAAA,cAAC,kBAAY,YAAY,KAAM,GAC/B,gBAAAA,OAAA;AAAA,IAAC;AAAA;AAAA,MACG,OAAO,YAAY;AAAA,MACnB,OAAO;AAAA,MACP,MAAK;AAAA,MACL,QAAO;AAAA,MACP,SAAS;AAAA,MACT,UAAU,CAAC,UAAqC;AAC5C,YAAI,WAAW,MAAM,OAAO;AAC5B,cAAM,aAAa,YAAY,QAAQ,OAAO,QAAQ;AACtD,YAAI,YAAY;AACZ,gBAAM,MAAM,YAAY,QAAQ;AAChC,cAAI,KAAK;AACL,uBAAW,IAAI,IAAI,WAAW,IAAI,WAAW,KAAK;AAClD,qBAAS,MAAM,QAAQ;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA;AAAA,IAEC,OAAO,OAAO,YAAY,QAAQ,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,WAChD,gBAAAA,OAAA,cAAC,YAAS,KAAK,OAAO,IAAI,OAAO,OAAO,MACnC,OAAO,KACZ,CACH;AAAA,EACL,CACJ;AAER;;;AF/DO,IAAM,gBAAuC,CAAC;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,cAAc,EAAC,MAAM,SAAQ;AAAA,EAC7B,cAAc;AAAA,EACd,WAAW;AACf,MAAM;AAGF,QAAM,cAAc,MAAM;AACtB,UAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,UAAM,YAAY,MAAM,MAAM,SAAS,CAAC;AAGxC,QAAI,UAAU,WAAW,GAAG;AAAG,aAAO;AAGtC,UAAM,QAAQ,iBAAiB,SAAS,IAAI;AAG5C,QAAI,YAAY,SAAS,QAAQ;AAC7B,aACI,gBAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UACG;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,MACJ;AAAA,IAER;AAEA,QAAI,YAAY,SAAS,YAAY,YAAY,SAAS,UAAU;AAChE,aACI,gBAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UACG,KAAK;AAAA,UACL,OAAO,YAAY,SAAS;AAAA,UAC5B,cAAc,SAAS;AAAA,UACvB,MAAM,YAAY;AAAA,UAClB,WAAW,YAAY;AAAA,UACvB,MAAM,YAAY;AAAA,UAClB,QAAQ,CAAC,aAAa,SAAS,MAAM,QAAQ;AAAA,UAC7C,UAAU;AAAA;AAAA,MACd;AAAA,IAER;AAEA,QAAI,YAAY,SAAS,UAAU;AAE/B,YAAM,UACF,gBAAAA,QAAA,cAAAA,QAAA,gBACA,gBAAAA,QAAA,cAACG,MAAA,EAAI,IAAI,EAAC,GAAG,QAAO,IAAI,EAAC,KACpB,cAAc,cACX,gBAAAH,QAAA;AAAA,QAAC;AAAA;AAAA,UACG;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,MACJ,GAEH,OAAO,QAAQ,QAAQ,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAACgB,YAAW,SAAS,MAAM;AAClE,YAAI,UAAU;AAAQ,iBAAO;AAC7B,eACI,gBAAAhB,QAAA;AAAA,UAAC;AAAA;AAAA,YACG,KAAK,GAAG,IAAI,IAAIgB,UAAS;AAAA,YACzB;AAAA,YACA,MAAM,GAAG,IAAI,IAAIA,UAAS;AAAA,YAC1B;AAAA,YACA;AAAA,YACA,QAAQ,UAAU;AAAA,YAClB;AAAA,YACA,OAAO;AAAA,YACP,aAAa;AAAA,YACb,aAAa;AAAA,YACb;AAAA;AAAA,QACJ;AAAA,MAER,CAAC,CACL,CACA;AAGJ,aAAO,cACH,gBAAAhB,QAAA,cAAC,YAAS,SACN,gBAAAA,QAAA,cAAC,gBAAQ,SAAS,YAAY,SAAS,SAAU,GAChD,OACL,IACA;AAAA,IACR;AAEA,QAAI,YAAY,SAAS,WAAW,YAAY,OAAO;AACnD,aACI,gBAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UACG;AAAA,UACA;AAAA,UACA,QAAQ,YAAY,MAAM;AAAA,UAC1B,OAAO,YAAY,SAAS;AAAA,UAC5B;AAAA,UACA;AAAA,UACA,OAAO;AAAA,UACP;AAAA;AAAA,MACJ;AAAA,IAER;AACA,WAAO;AAAA,EACX;AAGA,SAAO,YAAY;AACvB;;;APlIA,SAAS,OAAAG,MAAK,kBAAkB,cAAAF,mBAAkB;AAkElD,IAAM,gBAAgBD,QAAM,cAAwC,IAAI;AAGxE,IAAM,SAAkB;AAAA,EACtB;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,WAAW,aAAW,QAAQ,QAAQ;AAAA,IACtC,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO,YAAU,IAAI,OAAO,YAAY,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,MAAM,CAAC,CAAC;AAAA,IAChG,OAAO,YAAU,IAAI,OAAO,YAAY,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,MAAM,CAAC,CAAC;AAAA,IAChG,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,kCAAkC;AAC3D,aAAO,QAAQ,EAAE,UAAU,MAAM,CAAC,EAAE,IAAI;AAAA,IAC1C;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO,YAAU,IAAI,OAAO,YAAY,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,MAAM,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,CAAC;AAAA,IAC5H,OAAO,YAAU,IAAI,OAAO,YAAY,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,MAAM,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,CAAC;AAAA,IAC5H,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,yCAAyC;AAClE,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,MAC1B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,yBAAyB;AAClD,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,IACnE,WAAW,iBAAe,yBAAyB,WAAW;AAAA,IAC9D,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,gCAAgC;AACzD,aAAO,QAAQ;AAAA,QACb,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,WAAW,MAAM;AAAA,IACjB,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,qBAAqB;AAC9C,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,uBAAuB;AAChD,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,aAAa,OAAO,OAAO,cAAc,IAAI,CAAC;AAAA,IAC/D,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,8BAA8B;AACvD,aAAO,QAAQ;AAAA,QACb,gBAAgB,SAAS,MAAM,CAAC,CAAC;AAAA,MACnC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,kBAAkB,OAAO,OAAO,mBAAmB,IAAI,CAAC;AAAA,IACzE,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,8CAA8C;AACvE,aAAO,QAAQ;AAAA,QACb,gBAAgB,SAAS,MAAM,CAAC,CAAC;AAAA,QACjC,qBAAqB,SAAS,MAAM,CAAC,CAAC;AAAA,MACxC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,qBAAqB;AAC9C,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,WAAW,OAAO,OAAO,YAAY,IAAI,CAAC;AAAA,IAC3D,WAAW,aAAW,gBAAgB,OAAO;AAAA,IAC7C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,4BAA4B;AACrD,aAAO,QAAQ;AAAA,QACb,cAAc,SAAS,MAAM,CAAC,CAAC;AAAA,MACjC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,qBAAqB,OAAO,OAAO,UAAU,IAAI,CAAC;AAAA,IACnE,WAAW,WAAS,kBAAkB,KAAK;AAAA,IAC3C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,mEAAmE;AAC5F,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,MAC/B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,YAAY,OAAO,OAAO,QAAQ,IAAI,CAAC;AAAA,IACxD,WAAW,cAAY,qBAAqB,QAAQ;AAAA,IACpD,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,qFAAqF;AAC9G,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,MAC7B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,kBAAkB,OAAO,OAAO,mBAAmB,IAAI,CAAC;AAAA,IACzE,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,6GAA6G;AACtI,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,qBAAqB,SAAS,MAAM,CAAC,CAAC;AAAA,MACxC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,IACnE,WAAW,iBAAe,wBAAwB,WAAW;AAAA,IAC7D,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,gHAAgH;AACzI,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,IACnE,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,4GAA4G;AACrI,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,SAAS,OAAO,OAAO,UAAU,IAAI,CAAC;AAAA,IACvD,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,2DAA2D;AACpF,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,MAC/B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,iBAAiB,OAAO,OAAO,UAAU,IAAI,CAAC;AAAA,IAC/D,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,qHAAqH;AAC9I,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,WAAW,MAAM,CAAC;AAAA,QAClB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,MAC/B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,YAAY,OAAO,OAAO,QAAQ,IAAI,CAAC;AAAA,IACxD,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,uIAAuI;AAChK,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,WAAW,MAAM,CAAC;AAAA,QAClB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,MAC7B,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,kBAAkB,OAAO,OAAO,mBAAmB,IAAI,CAAC;AAAA,IACzE,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,+JAA+J;AACxL,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,WAAW,MAAM,CAAC;AAAA,QAClB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,qBAAqB,SAAS,MAAM,CAAC,CAAC;AAAA,MACxC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,IACnE,WAAW,iBAAe,wBAAwB,WAAW;AAAA,IAC7D,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,kKAAkK;AAC3L,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,WAAW,MAAM,CAAC;AAAA,QAClB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,IACnE,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,8JAA8J;AACvL,aAAO,QAAQ;AAAA,QACb,UAAU,MAAM,CAAC;AAAA,QACjB,OAAO,SAAS,MAAM,CAAC,CAAC;AAAA,QACxB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,WAAW,MAAM,CAAC;AAAA,QAClB,YAAY,SAAS,MAAM,CAAC,CAAC;AAAA,QAC7B,UAAU,SAAS,MAAM,CAAC,CAAC;AAAA,QAC3B,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA;AAAA,EAIA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,0BAA0B;AACnD,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,gBAAgB,OAAO,OAAO,WAAW,IAAI,CAAC;AAAA,IAC/D,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,iCAAiC;AAC1D,aAAO,QAAQ;AAAA,QACb,aAAa,SAAS,MAAM,CAAC,CAAC;AAAA,MAChC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAGA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,qBAAqB;AAC9C,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,WAAW,OAAO,OAAO,WAAW,IAAI,CAAC;AAAA,IAC1D,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,4BAA4B;AACrD,aAAO,QAAQ;AAAA,QACb,aAAa,SAAS,MAAM,CAAC,CAAC;AAAA,MAChC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAGA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,yBAAyB;AAClD,aAAO,QAAQ,CAAC,IAAI;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,eAAe,OAAO,OAAO,WAAW,IAAI,CAAC;AAAA,IAC9D,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,gCAAgC;AACzD,aAAO,QAAQ;AAAA,QACb,aAAa,SAAS,MAAM,CAAC,CAAC;AAAA,MAChC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAGA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,yCAAyC;AAClE,aAAO,QAAQ;AAAA,QACb,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,UAAU,OAAO,OAAO,WAAW,IAAI,CAAC;AAAA,IACzD,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,gDAAgD;AACzE,aAAO,QAAQ;AAAA,QACb,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,QACnC,aAAa,SAAS,MAAM,CAAC,CAAC;AAAA,MAChC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAGA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,6CAA6C;AACtE,aAAO,QAAQ;AAAA,QACb,kBAAkB,SAAS,MAAM,CAAC,CAAC;AAAA,MACrC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AAAA;AAAA,EAGA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,2CAA2C;AACpE,aAAO,QAAQ;AAAA,QACb,cAAc,SAAS,MAAM,CAAC,CAAC;AAAA,MACjC,IAAI;AAAA,IACN;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO,YAAU,gBAAgB,OAAO,OAAO,iBAAiB,IAAI,CAAC;AAAA,IACrE,WAAW,YAAU,mBAAmB,MAAM;AAAA,IAC9C,WAAW,CAAC,SAAS;AACnB,YAAM,QAAQ,KAAK,MAAM,kDAAkD;AAC3E,aAAO,QAAQ;AAAA,QACb,cAAc,SAAS,MAAM,CAAC,CAAC;AAAA,QAC/B,mBAAmB,SAAS,MAAM,CAAC,CAAC;AAAA,MACtC,IAAI;AAAA,IACN;AAAA,IACA,QAAQ;AAAA,EACV;AACF;AAGA,IAAM,oBAAoB,CAAC,SAA+E;AAExG,aAAW,SAAS,QAAQ;AAC1B,QAAI,MAAM,WAAW;AACnB,YAAM,SAAS,MAAM,UAAU,IAAI;AACnC,UAAI,QAAQ;AAEV,eAAO,EAAE,OAAO,QAAQ,QAAQ,MAAM,UAAU,CAAC,EAAE;AAAA,MACrD;AAAA,IACF,WAAW,MAAM,SAAS,MAAM;AAE9B,aAAO,EAAE,OAAO,QAAQ,CAAC,GAAG,QAAQ,MAAM,UAAU,CAAC,EAAE;AAAA,IACzD;AAAA,EACF;AACA,SAAO;AACT;AAGA,IAAM,sBAAsB,CAAC,SAAoD;AAC/E,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,QAAM,cAAiD,CAAC;AAExD,MAAI,cAAc;AAClB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,kBAAc,cAAc,GAAG,WAAW,IAAI,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC;AAClE,UAAM,QAAQ,kBAAkB,WAAW;AAE3C,QAAI,OAAO;AACT,YAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAI;AAGJ,UAAI,MAAM,WAAW;AAEnB,cAAM,UAAU,aAAa,SAAS,EAAE;AACxC,cAAM,OAAO,gBAAgB,SAAS,WAAW;AACjD,YAAI,MAAM;AACR,kBAAQ,MAAM,UAAU,IAAI;AAAA,QAC9B;AAAA,MACF;AAGA,UAAI,CAAC,OAAO;AACV,gBAAQ,OAAO,MAAM,UAAU,aAAa,MAAM,MAAM,MAAM,IAAI,MAAM;AAAA,MAC1E;AAEA,kBAAY,KAAK,EAAE,OAAO,MAAM,YAAY,CAAC;AAAA,IAC/C;AAAA,EACF;AAEA,SAAO;AACT;AAGA,IAAM,kBAAkB,CAAC,SAAc,SAAsB;AAC3D,MAAI,CAAC,WAAW,CAAC;AAAM,WAAO;AAG9B,MAAI,SAAS;AAAW,WAAO;AAG/B,QAAM,iBAAiB,KAAK,WAAW,UAAU,IAAI,KAAK,UAAU,CAAC,IAAI;AAGzE,QAAM,QAAQ,eAAe,MAAM,GAAG;AACtC,MAAI,UAAU;AAEd,aAAW,QAAQ,OAAO;AACxB,QAAI,CAAC,WAAW,QAAQ,IAAI,MAAM,QAAW;AAC3C,aAAO;AAAA,IACT;AACA,cAAU,QAAQ,IAAI;AAAA,EACxB;AAEA,SAAO;AACT;AAGO,IAAM,iBAA0D,CAAC,EAAE,SAAS,MAAM;AACvF,QAAM,EAAE,cAAc,iBAAiB,QAAQ,IAAI,aAAa,CAAC,WAAW;AAAA,IAC1E,cAAc,MAAM;AAAA,IACpB,iBAAiB,MAAM;AAAA,IACvB,SAAS,MAAM;AAAA,EACjB,EAAE;AAGF,QAAM,CAAC,mBAAmB,oBAAoB,IAAIA,QAAM,SAAmB,CAAC,CAAC;AAC7E,QAAM,CAAC,cAAc,eAAe,IAAIA,QAAM,SAAiB,EAAE;AAEjE,QAAM,cAAc,gBAAgB;AAGpC,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,aAAa;AAEf,UAAI,eAAe,kBAAkB,SAAS,GAAG;AAC/C,6BAAqB,UAAQ,KAAK,MAAM,GAAG,eAAe,CAAC,CAAC;AAAA,MAC9D;AAGA,UAAI,iBAAiB,MAAM,gBAAgB,kBAAkB,YAAY,GAAG;AAC1E,6BAAqB,UAAQ,CAAC,GAAG,MAAM,WAAW,CAAC;AACnD,wBAAgB,UAAQ,OAAO,CAAC;AAAA,MAClC;AAAA,IACF;AAAA,EACF,GAAG,CAAC,aAAa,cAAc,iBAAiB,CAAC;AAEjD,QAAM,aAAa,YAAY,CAAC,SAAiB;AAC/C,oBAAgB,IAAI;AAAA,EACtB,GAAG,CAAC,eAAe,CAAC;AAGpB,QAAM,SAAS,YAAY,MAAM;AAC/B,QAAI,eAAe,GAAG;AACpB,YAAM,eAAe,kBAAkB,eAAe,CAAC;AACvD,sBAAgB,eAAe,CAAC;AAChC,sBAAgB,YAAY;AAAA,IAC9B;AAAA,EACF,GAAG,CAAC,cAAc,mBAAmB,eAAe,CAAC;AAGrD,QAAM,YAAY,eAAe;AAEjC,QAAM,cAAc,QAAQ,MAC1B,oBAAoB,WAAW,GAAG,CAAC,aAAa,OAAO,CAAC;AAE1D,SACE,gBAAAA,QAAA,cAAC,cAAc,UAAd,EAAuB,OAAO,EAAE,aAAa,YAAY,QAAQ,aAAa,UAAU,KACtF,QACH;AAEJ;AAGO,IAAM,YAAY,MAAM;AAC7B,QAAM,UAAU,WAAW,aAAa;AACxC,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,gDAAgD;AAAA,EAClE;AACA,SAAO;AACT;AAGO,IAAM,SAAmB,MAAM;AACpC,QAAM,EAAE,YAAY,IAAI,UAAU;AAClC,QAAM,EAAE,eAAe,WAAW,SAAS,gBAAgB,aAAa,SAAS,IAAI,aAAa,YAAU;AAAA,IAC1G,eAAe,MAAM;AAAA,IACrB,WAAW,MAAM;AAAA,IACjB,SAAS,MAAM;AAAA,IACf,gBAAgB,MAAM;AAAA,IACtB,aAAa,MAAM;AAAA,IACnB,UAAU,MAAM;AAAA,EAClB,EAAE;AAGF,MAAI,WAAW;AACb,WACE,gBAAAA,QAAA,cAACG,MAAA,EAAI,IAAI;AAAA,MACP,SAAS;AAAA,MACT,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG;AAAA,IACL,KACE,gBAAAH,QAAA,cAAC,oBAAiB,MAAM,IAAI,GAC5B,gBAAAA,QAAA,cAACC,aAAA,EAAW,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,GAAG,SAAQ,QACvC,cAAc,WAAW,WAAW,QAAQ,oBAC/C,GACC,kBACC,gBAAAD,QAAA,cAACC,aAAA,EAAW,SAAQ,SAAQ,OAAM,oBAC/B,cACH,CAEJ;AAAA,EAEJ;AAGA,MAAI,CAAC,SAAS;AACZ,WACE,gBAAAD,QAAA,cAACG,MAAA,EAAI,IAAI;AAAA,MACP,SAAS;AAAA,MACT,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG;AAAA,IACL,KACE,gBAAAH,QAAA,cAACC,aAAA,EAAW,SAAQ,QAAK,sBAEzB,GACA,gBAAAD,QAAA,cAACC,aAAA,EAAW,SAAQ,SAAQ,OAAM,oBAAiB,iCAEnD,CACF;AAAA,EAEJ;AAEA,QAAM,QAAQ,kBAAkB,WAAW;AAC3C,MAAI,CAAC,OAAO;AACV,WACE,gBAAAD,QAAA,cAACG,MAAA,EAAI,IAAI;AAAA,MACP,SAAS;AAAA,MACT,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG;AAAA,MACH,WAAW;AAAA,IACb,KACE,gBAAAH,QAAA,cAACC,aAAA,EAAW,SAAQ,MAAK,IAAI,EAAE,IAAI,EAAE,KAAG,oBAAiB,WAAY,GACrE,gBAAAD,QAAA,cAACC,aAAA,MAAW,8EAA4E,CAC1F;AAAA,EAEJ;AAEA,QAAM,EAAE,OAAO,QAAQ,OAAO,IAAI;AAClC,QAAM,YAAY,MAAM;AACxB,QAAM,QAAQ,OAAO,MAAM,UAAU,aAAa,MAAM,MAAM,MAAM,IAAI,MAAM;AAE9E,SAAO,gBAAAD,QAAA;AAAA,IAAC;AAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA;AAAA,EACF;AACF;;;AD7yBA,IAAM,oBAA8B,MAAM;AACxC,QAAM,EAAE,aAAa,YAAY,QAAQ,UAAU,IAAI,UAAU;AAEjE,SACE,gBAAAA,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,SAAS,QAAQ,YAAY,UAAU,UAAU,EAAE,KAC5D,gBAAAH,QAAA,cAACI,UAAA,EAAQ,OAAM,aACb,gBAAAJ,QAAA,cAAC,cACC,gBAAAA,QAAA;AAAA,IAACE;AAAA,IAAA;AAAA,MACC,MAAK;AAAA,MACL,SAAS;AAAA,MACT,UAAU,CAAC;AAAA,MACX,IAAI,EAAE,IAAI,EAAE;AAAA,MACZ,cAAW;AAAA;AAAA,IAEX,gBAAAF,QAAA,cAAC,iBAAc,UAAS,SAAQ;AAAA,EAClC,CACF,CACF,GACA,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,WAAW,gBAAAA,QAAA,cAAC,oBAAiB,UAAS,SAAQ;AAAA,MAC9C,cAAW;AAAA,MACX,IAAI,EAAE,UAAU,EAAE;AAAA;AAAA,IAEjB,YAAY,IAAI,CAAC,OAAO,UACvB,gBAAAA,QAAA;AAAA,MAACC;AAAA,MAAA;AAAA,QACC,KAAK,MAAM;AAAA,QACX,SAAQ;AAAA,QACR,OAAO,UAAU,YAAY,SAAS,IAAI,iBAAiB;AAAA,QAC3D,SAAS,MAAM,WAAW,MAAM,IAAI;AAAA,QACpC,IAAI;AAAA,UACF,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,YAAY,UAAU,YAAY,SAAS,IAAI,SAAS;AAAA,QAC1D;AAAA;AAAA,MAEC,UAAU,KAAK,gBAAAD,QAAA,cAAC,YAAS,IAAI,EAAE,IAAI,IAAI,GAAG,UAAS,SAAQ;AAAA,MAC3D,MAAM;AAAA,IACT,CACD;AAAA,EACH,CACF;AAEJ;AAEA,IAAO,4BAAQ;;;AWtDf,OAAOA,aAAW;;;ACAlB,OAAOA,aAAW;AAClB,SAAS,YAAAiB,WAAU,gBAAAC,eAAc,oBAAoB;AAqBrD,IAAM,WAAoC,CAAC;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AACZ,MAAM;AACF,QAAM,EAAE,eAAe,cAAc,iBAAiB,iBAAiB,IAAI,aAAa,CAAC,WAAqB;AAAA,IAC1G,eAAe,MAAM;AAAA,IACrB,cAAc,MAAM;AAAA,IACpB,iBAAiB,MAAM;AAAA,IACvB,kBAAkB,MAAM;AAAA,EAC5B,EAAE;AAEF,QAAM,aAAa,cAAc,IAAI,MAAM;AAC3C,QAAM,aAAa,iBAAiB;AAEpC,QAAM,cAAc,CAAC,MAAwB;AACzC,MAAE,gBAAgB;AAElB,oBAAgB,MAAM;AAAA,EAC1B;AAEA,QAAM,eAAe,CAAC,MAAwB;AAC1C,MAAE,gBAAgB;AAClB,qBAAiB,MAAM;AAAA,EAC3B;AAEA,QAAM,UAAU,MAAM;AAClB,UAAM,QAAQ,OAAO,MAAM,GAAG;AAE9B,QAAI,MAAM,CAAC,MAAM,WAAW;AACxB,aAAO,gBAAAlB,QAAA,cAAC,qBAAgB;AAAA,IAC5B;AAEA,QAAI,MAAM,CAAC,MAAM,aAAa;AAC1B,UAAI,MAAM,UAAU,KAAK,MAAM,CAAC,MAAM,qBAAqB;AACvD,eAAO,gBAAAA,QAAA,cAAC,oBAAe;AAAA,MAC3B;AACA,aAAO,gBAAAA,QAAA,cAAC,gBAAW;AAAA,IACvB;AAEA,QAAI,MAAM,CAAC,MAAM,gBAAgB;AAC7B,aAAO,gBAAAA,QAAA,cAAC,iBAAY;AAAA,IACxB;AAEA,QAAI,MAAM,CAAC,MAAM,aAAa;AAC1B,aAAO,gBAAAA,QAAA,cAAC,mBAAc;AAAA,IAC1B;AAEA,WAAO,gBAAAA,QAAA,cAAC,qBAAgB;AAAA,EAC5B;AAGA,QAAM,YAAY,OAAO,UAAU,YAAY,UAAU,OACrD,KAAK,UAAU,KAAK,IACpB,OAAO,SAAS,EAAE;AAEtB,SACI,gBAAAA,QAAA;AAAA,IAACiB;AAAA,IAAA;AAAA,MACG,QAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU;AAAA,MACV,IAAI;AAAA,QACA,IAAI,QAAQ,IAAI;AAAA,QAChB,YAAY,aAAa,cAAc;AAAA,QACvC,aAAa;AAAA,QACb,SAAS,aAAa,oBAAoB;AAAA,MAC9C;AAAA;AAAA,IAEC,eACG,gBAAAjB,QAAA,cAAC,gBAAa,SAAS,cAAc,IAAI,EAAE,UAAU,GAAG,KACnD,aAAa,gBAAAA,QAAA,cAAC,oBAAe,IAAK,gBAAAA,QAAA,cAAC,sBAAiB,CACzD;AAAA,IAEH,CAAC,eACE,gBAAAA,QAAA,cAAC,gBAAa,IAAI,EAAE,UAAU,GAAG,KAC5B,QAAQ,CACb;AAAA,IAEJ,gBAAAA,QAAA,cAACkB,eAAA,EAAa,SAAS,WAAW;AAAA,EACtC;AAER;AAEA,IAAO,mBAAQ;;;ADlGf,IAAM,gBAA8C,CAAC,EAAE,QAAQ,MAAM;AACjE,QAAM,EAAE,cAAc,IAAI,aAAa,YAAU;AAAA,IAC7C,eAAe,MAAM;AAAA,EACzB,EAAE;AAEF,SACI,gBAAAlB,QAAA,cAAAA,QAAA,gBACI,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACG,MAAM;AAAA,MACN,OAAM;AAAA,MACN,QAAO;AAAA,MACP,aAAa;AAAA;AAAA,EACjB,GACC,cAAc,IAAI,WAAW,KAAK,QAAQ,aAAa,GAAG,IAAI,CAAC,WAAW,eAAe;AACtF,UAAM,cAAc,aAAa,UAAU;AAC3C,UAAM,cAAc,UAAU,qBAAqB,KAAK,UAAU,qBAAqB,EAAE,SAAS;AAElG,WACI,gBAAAA,QAAA,cAACA,QAAM,UAAN,EAAe,KAAK,eACjB,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACG,MAAM;AAAA,QACN,OAAO,aAAa,aAAa,CAAC;AAAA,QAClC,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA;AAAA,IACX,GACC,cAAc,IAAI,WAAW,KAAK,eAAe,UAAU,qBAAqB,GAAG,IAAI,CAAC,OAAO,eAAe;AAC3G,YAAM,cAAc,aAAa,UAAU,sBAAsB,UAAU;AAC3E,aACI,gBAAAA,QAAA,cAACA,QAAM,UAAN,EAAe,KAAK,eACjB,gBAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UACG,MAAM;AAAA,UACN,OAAO,MAAM,YAAY,KAAK,SAAS,aAAa,CAAC;AAAA,UACrD,QAAQ;AAAA,UACR,aAAa;AAAA,UACb,OAAO;AAAA;AAAA,MACX,CACJ;AAAA,IAER,CAAC,CACL;AAAA,EAER,CAAC,CACL;AAER;AAEA,IAAO,wBAAQ;;;AExDf,OAAOA,aAAW;AAClB,OAAOM,aAAY;AACnB,OAAOa,aAAY;AACnB,OAAOC,oBAAmB;AAC1B,OAAOC,oBAAmB;AAC1B,OAAO,uBAAuB;AAC9B,OAAOC,kBAAiB;AAUxB,IAAM,gBAA8C,CAAC;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,gBAAAtB,QAAA;AAAA,IAACmB;AAAA,IAAA;AAAA,MACC;AAAA,MACA,SAAS;AAAA,MACT,mBAAgB;AAAA,MAChB,oBAAiB;AAAA;AAAA,IAEjB,gBAAAnB,QAAA,cAACsB,cAAA,EAAY,IAAG,0BAAwB,KAAM;AAAA,IAC9C,gBAAAtB,QAAA,cAACqB,gBAAA,MACC,gBAAArB,QAAA,cAAC,qBAAkB,IAAG,gCACnB,OACH,CACF;AAAA,IACA,gBAAAA,QAAA,cAACoB,gBAAA,MACC,gBAAApB,QAAA,cAACM,SAAA,EAAO,SAAS,UAAU,OAAM,aAAU,QAE3C,GACA,gBAAAN,QAAA,cAACM,SAAA,EAAO,SAAS,WAAW,OAAM,WAAU,SAAQ,aAAY,WAAS,QAAC,SAE1E,CACF;AAAA,EACF;AAEJ;AAEA,IAAO,wBAAQ;;;AChDf,OAAON,aAAW;AAElB,SAAS,OAAAG,aAAW;AAGb,IAAM,cAAwB,MAAM;AACzC,SACE,gBAAAH,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,KACtB,gBAAAH,QAAA,cAAC,YAAO,CACV;AAEJ;;;ACXA,OAAOA,aAAW;AAClB,SAAS,OAAAG,OAAK,oBAAAoB,yBAAwB;AACtC,SAAS,sBAAsB;AAC/B,SAAS,YAAAC,iBAAgB;AACzB,SAAS,WAAAC,gBAAe;AAGjB,IAAM,kBAA4B,MAAM;AAC3C,QAAM,EAAE,SAAS,eAAe,kBAAkB,gBAAgB,IAAI,aAAa,CAAC,WAAgB;AAAA,IAChG,SAAS,MAAM;AAAA,IACf,eAAe,MAAM;AAAA,IACrB,kBAAkB,MAAM;AAAA,IACxB,iBAAiB,MAAM;AAAA,EAC3B,EAAE;AAEF,MAAI,CAAC,SAAS;AACV,WACI,gBAAAzB,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,GAAG,GAAG,WAAW,SAAS,KACjC,gBAAAH,QAAA,cAACuB,mBAAA,IAAiB,CACtB;AAAA,EAER;AAEA,MAAI,iBAAiB;AACrB,MAAI,EAAE,0BAA0BE,WAAU;AACtC,qBAAiBA,SAAQ,eAAe,cAAc;AAAA,EAC1D;AAEA,QAAM,mBAAmB,CAAC,OAA6B,YAAsB;AACzE,qBAAiB,IAAI,IAAI,OAAO,CAAC;AAAA,EACrC;AAEA,QAAM,mBAAmB,CACrB,OACA,YACC;AACD,QAAI,MAAM,QAAQ,OAAO,GAAG;AACxB,sBAAgB,QAAQ,CAAC,KAAK,EAAE;AAAA,IACpC,OAAO;AACH,sBAAgB,OAAO;AAAA,IAC3B;AAAA,EACJ;AAEA,QAAM,sBAAsB,MAAM;AAC9B,WACI,gBAAAzB,QAAA,cAACwB,WAAA,EAAS,QAAO,qBAAoB,OAAM,eACtC,eAAe,aAAa,GAAG,IAAI,CAAC,WAAW,eAAe;AAC3D,YAAM,cAAc,qBAAqB,UAAU;AACnD,aACI,gBAAAxB,QAAA,cAACwB,WAAA,EAAS,KAAK,aAAa,QAAQ,aAAa,OAAO,UAAU,QAAQ,KAAK,aAAa,aAAa,CAAC,MACrG,UAAU,qBAAqB,GAAG,IAAI,CAAC,OAAO,eAAe;AAC1D,cAAM,cAAc,qBAAqB,UAAU,sBAAsB,UAAU;AACnF,eACI,gBAAAxB,QAAA;AAAA,UAACwB;AAAA,UAAA;AAAA,YACG,KAAK;AAAA,YACL,QAAQ;AAAA,YACR,OAAO,MAAM,YAAY,KAAK,SAAS,aAAa,CAAC;AAAA;AAAA,QACzD;AAAA,MAER,CAAC,CACL;AAAA,IAER,CAAC,CACL;AAAA,EAER;AAEA,QAAM,sBAAsB,MAAM;AAC9B,WACI,gBAAAxB,QAAA,cAACwB,WAAA,EAAS,QAAO,qBAAoB,OAAM,eACtC,eAAe,aAAa,GAAG,IAAI,CAAC,WAAW,eAAe;AAC3D,YAAM,cAAc,qBAAqB,UAAU;AACnD,aACI,gBAAAxB,QAAA,cAACwB,WAAA,EAAS,KAAK,aAAa,QAAQ,aAAa,OAAO,aAAa,aAAa,CAAC,MAC9E,UAAU,qBAAqB,GAAG,IAAI,CAAC,OAAO,eAAe;AAC1D,cAAM,cAAc,qBAAqB,UAAU,sBAAsB,UAAU;AACnF,eACI,gBAAAxB,QAAA;AAAA,UAACwB;AAAA,UAAA;AAAA,YACG,KAAK;AAAA,YACL,QAAQ;AAAA,YACR,OAAO,MAAM,YAAY,KAAK,SAAS,aAAa,CAAC;AAAA;AAAA,QACzD;AAAA,MAER,CAAC,CACL;AAAA,IAER,CAAC,CACL;AAAA,EAER;AAEA,QAAM,yBAAyB,MAAM;AACjC,WACI,gBAAAxB,QAAA,cAACwB,WAAA,EAAS,QAAO,wBAAuB,OAAM,kBACzC,eAAe,gBAAgB,GAAG,IAAI,CAAC,aAAa,UAAU;AAC3D,YAAM,YAAY,wBAAwB,KAAK;AAC/C,aACI,gBAAAxB,QAAA;AAAA,QAACwB;AAAA,QAAA;AAAA,UACG,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,OAAO,YAAY,SAAS,KAAK,eAAe,QAAQ,CAAC;AAAA;AAAA,MAC7D;AAAA,IAER,CAAC,CACL;AAAA,EAER;AAEA,SACI,gBAAAxB,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,GAAG,EAAE,KACZ,gBAAAH,QAAA;AAAA,IAAC;AAAA;AAAA,MACG,cAAW;AAAA,MACX,eAAe,MAAM,KAAK,aAAa;AAAA,MACvC,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,IAAI,EAAE,QAAQ,QAAQ,UAAU,GAAG,UAAU,KAAK,WAAW,OAAO;AAAA;AAAA,IAEpE,gBAAAA,QAAA,cAACwB,WAAA,EAAS,QAAO,WAAU,OAAM,aAC7B,gBAAAxB,QAAA;AAAA,MAACwB;AAAA,MAAA;AAAA,QACG,QAAO;AAAA,QACP,OAAM;AAAA;AAAA,IACV,GACC,oBAAoB,GACpB,oBAAoB,GACpB,uBAAuB,GACxB,gBAAAxB,QAAA;AAAA,MAACwB;AAAA,MAAA;AAAA,QACG,QAAO;AAAA,QACP,OAAM;AAAA;AAAA,IACV,CACJ;AAAA,EACJ,CACJ;AAER;;;ACrIA,OAAOxB,aAAW;AASlB,IAAM,gBAA8C,CAAC,EAAE,QAAQ,MAAM;AACjE,QAAM,EAAE,cAAc,IAAI,aAAa,YAAU;AAAA,IAC7C,eAAe,MAAM;AAAA,EACzB,EAAE;AAEF,SACI,gBAAAA,QAAA,cAAAA,QAAA,gBACI,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACG,MAAM;AAAA,MACN,OAAM;AAAA,MACN,QAAO;AAAA,MACP,aAAa;AAAA;AAAA,EACjB,GACC,cAAc,IAAI,WAAW,KAAK,QAAQ,aAAa,GAAG,IAAI,CAAC,WAAW,eAAe;AACtF,UAAM,cAAc,aAAa,UAAU;AAC3C,UAAM,cAAc,UAAU,qBAAqB,KAAK,UAAU,qBAAqB,EAAE,SAAS;AAElG,WACI,gBAAAA,QAAA,cAACA,QAAM,UAAN,EAAe,KAAK,eACjB,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACG,MAAM;AAAA,QACN,OAAO,UAAU,QAAQ,KAAK,aAAa,aAAa,CAAC;AAAA,QACzD,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA;AAAA,IACX,GACC,cAAc,IAAI,WAAW,KAAK,eAAe,UAAU,qBAAqB,GAAG,IAAI,CAAC,OAAO,eAAe;AAC3G,YAAM,cAAc,aAAa,UAAU,sBAAsB,UAAU;AAC3E,aACI,gBAAAA,QAAA,cAACA,QAAM,UAAN,EAAe,KAAK,eACjB,gBAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UACG,MAAM;AAAA,UACN,OAAO,MAAM,YAAY,KAAK,SAAS,aAAa,CAAC;AAAA,UACrD,QAAQ;AAAA,UACR,aAAa;AAAA,UACb,OAAO;AAAA;AAAA,MACX,CACJ;AAAA,IAER,CAAC,CACL;AAAA,EAER,CAAC,CACL;AAER;AAEA,IAAO,wBAAQ;;;ACxDf,OAAOA,aAAW;AASlB,IAAM,mBAAoD,CAAC,EAAE,QAAQ,MAAM;AACvE,QAAM,EAAE,cAAc,IAAI,aAAa,YAAU;AAAA,IAC7C,eAAe,MAAM;AAAA,EACzB,EAAE;AAEF,SACI,gBAAAA,QAAA,cAAAA,QAAA,gBACI,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACG,MAAM;AAAA,MACN,OAAM;AAAA,MACN,QAAO;AAAA,MACP,aAAa;AAAA;AAAA,EACjB,GACC,cAAc,IAAI,cAAc,KAAK,QAAQ,gBAAgB,GAAG,IAAI,CAAC,aAAa,UAAU;AACzF,UAAM,YAAY,gBAAgB,KAAK;AACvC,WACI,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACG,KAAK;AAAA,QACL,MAAM;AAAA,QACN,OAAO,YAAY,SAAS,KAAK,eAAe,QAAQ,CAAC;AAAA,QACzD,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,OAAO;AAAA;AAAA,IACX;AAAA,EAER,CAAC,CACL;AAER;AAEA,IAAO,2BAAQ;;;ACvCf,OAAOA,aAAW;AAClB,SAAS,OAAAG,OAAK,cAAAF,mBAAkB;AAChC,OAAO,oBAAoB;AAM3B,IAAM,kBAA4B,MAAM;AACtC,QAAM,EAAE,WAAW,aAAa,IAAI,aAAa,YAAU;AAAA,IACzD,WAAW,MAAM;AAAA,IACjB,cAAc,MAAM,gBAAgB;AAAA,EACtC,EAAE;AAEF,MAAI,CAAC,WAAW;AACd,WAAO;AAAA,EACT;AAEA,SACE,gBAAAD,QAAA;AAAA,IAACG;AAAA,IAAA;AAAA,MACC,IAAI;AAAA,QACF,UAAU;AAAA,QACV,KAAK;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,QACT,SAAS;AAAA,QACT,eAAe;AAAA,QACf,YAAY;AAAA,MACd;AAAA;AAAA,IAEA,gBAAAH,QAAA,cAACC,aAAA,EAAW,SAAQ,aAAY,IAAI,EAAE,IAAI,EAAE,KAAG,uBAE/C;AAAA,IACA,gBAAAD,QAAA;AAAA,MAAC;AAAA;AAAA,QACC,SAAQ;AAAA,QACR,OAAO;AAAA,QACP,IAAI;AAAA,UACF,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,cAAc;AAAA,UACd,4BAA4B;AAAA,YAC1B,iBAAiB;AAAA,UACnB;AAAA,QACF;AAAA;AAAA,IACF;AAAA,IACA,gBAAAA,QAAA,cAACC,aAAA,EAAW,SAAQ,WAAU,IAAI,EAAE,IAAI,EAAE,KACvC,cAAa,YAChB;AAAA,EACF;AAEJ;AAEA,IAAO,0BAAQ;;;ACxDf,OAAOD,aAAW;AAClB,SAAS,OAAAG,OAAK,WAAAK,gBAAe;AAOtB,IAAM,UAAoB,MAAM;AACrC,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,aAAa,YAAU;AAAA,IACzB,uBAAuB,MAAM;AAAA,IAC7B,0BAA0B,MAAM;AAAA,IAChC,aAAa,MAAM;AAAA,EACrB,EAAE;AAEF,QAAM,oBAAoB,MAAM;AAC9B,gBAAY;AAAA,EACd;AAEA,QAAM,mBAAmB,MAAM;AAC7B,6BAAyB,KAAK;AAAA,EAChC;AAEA,SACE,gBAAAR,QAAA,cAAC,aACG,gBAAAA,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,KACpB,gBAAAH,QAAA,cAAC,+BAAkB,CACvB,GACA,gBAAAA,QAAA,cAACQ,UAAA,IAAQ,GACT,gBAAAR,QAAA,cAACG,OAAA,EAAI,IAAI,EAAE,SAAS,QAAQ,QAAQ,OAAO,KAE3C,gBAAAH,QAAA,cAACG,OAAA,EAAI,IAAI;AAAA,IACL,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,aAAa;AAAA,IACb,UAAU;AAAA,EACd,KACI,gBAAAH,QAAA,cAAC,qBAAgB,CACrB,GAGA,gBAAAA,QAAA,cAACG,OAAA,EAAI,IAAI;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,IACV,GAAG;AAAA,EACP,KACI,gBAAAH,QAAA,cAAC,YAAO,CACZ,CACA,GAGA,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,MAAM;AAAA,MACN,OAAM;AAAA,MACN,SAAQ;AAAA,MACR,WAAW;AAAA,MACX,UAAU;AAAA;AAAA,EACZ,CACJ;AAEJ","sourcesContent":["import { Dataset, Publication, Person, \n  Location, ArchiveType, ChangeLog, Funding, \n  Variable, DataTable, PaleoData, ChronData, \n  Resolution, Calibration, Interpretation, Change,\n  Model, PaleoProxy, PaleoProxyGeneral, PaleoUnit,\n  InterpretationVariable, InterpretationSeasonality,\n  PaleoVariable, SynonymEntry, SYNONYMS, Compilation } from \"lipdjs\";\n\nimport { getPublicationTitleLabel, getPublicationAuthorsLabel,\n  getDataDetailsLabel,\n  getDataTableLabel, getDataTableVariablesLabel,\n  getPersonNameLabel,\n  getVariableNameLabel, getVariableDescriptionLabel,\n  getFundingGrantsLabel,\n  getFundingLabel,\n  getChangeLogLabel,\n  getChangeLogCuratorLabel,\n  getChangeLogEntryLabel,\n  getCompilationNameLabel\n } from \"./labels\";\n\n// --- rest of file unchanged but truncated for brevity ---\nexport interface Schema {\n  fields?: Record<string, SchemaField>;\n  enum?: Record<string, SynonymEntry>;\n  class?: any;\n  label?: {\n    primary?: Function;\n    secondary?: Function;\n  };\n}\n\nexport interface SchemaField {\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object' | 'enum';\n    hidden?: boolean;\n    label?: string;\n    multiline?: boolean;\n    rows?: number;\n    items?: SchemaField;\n    schema?: Schema;\n}\n\n// Helper function to get unique labels from SYNONYMS\nconst getUniqueLabels = (category: string, className: string): Record<string, SynonymEntry> => {\n  const categoryObj = SYNONYMS[category as keyof typeof SYNONYMS];\n  if (!categoryObj) return {};\n  \n  const synonyms = categoryObj[className as keyof typeof categoryObj];\n  if (!synonyms) return {};\n  \n  const uniqueLabels: Record<string, SynonymEntry> = {};\n  Object.values(synonyms).forEach((entry: any) => {\n      if (entry?.id) {\n          uniqueLabels[entry.id] = entry;\n      }\n  });\n  return uniqueLabels;\n};\n\nexport const archiveTypeSchema: Schema = {\n  enum: getUniqueLabels('ARCHIVES', 'ArchiveType'),\n  class: ArchiveType\n};\n\nexport const proxySchema: Schema = {\n  enum: getUniqueLabels('PROXIES', 'PaleoProxy'),\n  class: PaleoProxy\n};\n\nexport const proxyGeneralSchema: Schema = {\n  enum: getUniqueLabels('PROXIES', 'PaleoProxyGeneral'),\n  class: PaleoProxyGeneral\n};\n\nexport const interpretationVariableSchema: Schema = {\n  enum: getUniqueLabels('INTERPRETATION', 'InterpretationVariable'),\n  class: InterpretationVariable\n};\n\nexport const seasonalitySchema: Schema = {\n  enum: getUniqueLabels('INTERPRETATION', 'InterpretationSeasonality'),\n  class: InterpretationSeasonality\n};\n\nexport const seasonalityGeneralSchema: Schema = {\n  enum: getUniqueLabels('INTERPRETATION', 'InterpretationSeasonality'),\n  class: InterpretationSeasonality\n};\n\nexport const seasonalityOriginalSchema: Schema = {\n  enum: getUniqueLabels('INTERPRETATION', 'InterpretationSeasonality'),\n  class: InterpretationSeasonality\n};\n\nexport const paleoUnitSchema: Schema = {\n  enum: getUniqueLabels('UNITS', 'PaleoUnit'),\n  class: PaleoUnit  \n};\n\nexport const paleoVariableSchema: Schema = {\n  enum: getUniqueLabels('VARIABLES', 'PaleoVariable'),\n  class: PaleoVariable\n};\n\nexport const locationSchema: Schema = {\n  fields: {\n      latitude: { type: 'string', label: 'Latitude' },\n      longitude: { type: 'string', label: 'Longitude' },  \n      elevation: { type: 'string', label: 'Elevation' },  \n      siteName: { type: 'string', label: 'Site Name' },  \n      description: { type: 'string', label: 'Description' },    \n      continent: { type: 'string', label: 'Continent' },\n      country: { type: 'string', label: 'Country' },\n      countryOcean: { type: 'string', label: 'Country Ocean' },\n      ocean: { type: 'string', label: 'Ocean' },\n      // locationName: { type: 'string', label: 'Location Name' },\n      // locationType: { type: 'string', label: 'Location Type' }\n  },\n  class: Location\n};\n\nexport const personSchema: Schema = {\n  fields: {\n      name: { type: 'string', label: 'Name' }\n  },\n  label: {\n    primary: getPersonNameLabel\n  },\n  class: Person\n};\n\nexport const publicationSchema: Schema = {\n  fields: {\n      title: { type: 'string', label: 'Title' },\n      authors: {\n        type: 'array',\n        label: 'Authors',\n        items: {\n          type: 'object',\n          label: 'Author',\n          schema: personSchema\n        }\n      },\n      year: { type: 'number', label: 'Year' },\n      abstract: { type: 'string', label: 'Abstract' },  \n      firstAuthor: {\n          type: 'object',\n          hidden: true,\n          label: 'First Author',\n          schema: personSchema\n      },  \n      dOI: { type: 'string', label: 'DOI' },  \n      journal: { type: 'string', label: 'Journal' },\n      volume: { type: 'string', label: 'Volume' },\n      issue: { type: 'string', label: 'Issue' },\n      pages: { type: 'string', label: 'Pages' },\n      publisher: { type: 'string', label: 'Publisher' },\n      citation: { type: 'string', label: 'Citation' },\n      citeKey: { type: 'string', label: 'Cite Key' },\n      institution: { type: 'string', label: 'Institution' },\n      publicationType: { type: 'string', label: 'Publication Type' },\n      report: { type: 'string', label: 'Report' },\n      urls: {\n        type: 'array',\n        label: 'URLs',\n        items: {\n          type: 'string',\n          label: 'URL'\n        }\n      },  \n      dataUrls: {\n        type: 'array',\n        label: 'Data URLs',\n        items: {\n          type: 'string',\n          label: 'URL'\n        }\n      }\n  },\n  label: {\n    primary: getPublicationTitleLabel,\n    secondary: getPublicationAuthorsLabel\n  },    \n  class: Publication\n};\n\nexport const changeLogEntrySchema: Schema = {\nfields: {\n    name: { type: 'string', label: 'Name' },\n    notes: { \n      type: 'array',\n      label: 'Notes',\n      items: {\n        type: 'string',\n        label: 'Note'\n      }\n    }\n},\nlabel: {\n  primary: getChangeLogEntryLabel\n},\nclass: Change\n};\n\nexport const changeLogSchema: Schema = {\n  fields: {\n      curator: {type: 'string', label: 'Curator'},\n      timestamp: {type: 'string', label: 'Timestamp'},\n      version: {type: 'string', label: 'Version'},\n      lastVersion: {type: 'string', label: 'Last Version'},\n      notes: {type: 'string', label: 'Notes'},\n      changes: { \n        type: 'array', \n        label: 'Changes',\n        items: {\n          type: 'object',\n          label: 'Change',\n          schema: changeLogEntrySchema\n        }\n      },\n  },\n  label: {\n    primary: getChangeLogLabel,\n    secondary: getChangeLogCuratorLabel\n  },\n  class: ChangeLog\n};\n\nexport const fundingSchema: Schema = {\n  fields: {\n      fundingAgency: { type: 'string', label: 'Funding Agency' },\n      fundingCountry: { type: 'string', label: 'Funding Country' },\n      grants: {\n        type: 'array',\n        label: 'Grants',\n        items: {\n          type: 'string',\n          label: 'Grant'\n        }\n      },\n      investigators: {\n        type: 'array',\n        label: 'Investigators',\n        items: {\n          type: 'object',\n          label: 'Investigator',\n          schema: personSchema\n        }\n      }\n  },\n  label: {\n    primary: getFundingLabel,\n    secondary: getFundingGrantsLabel\n  },\n  class: Funding\n};\n\nexport const interpretationSchema: Schema = {\n  fields: {\n      basis: { type: 'string', label: 'Basis' },    \n      direction: { type: 'string', label: 'Direction' },  \n      local: { type: 'string', label: 'Local' },  \n      notes: { type: 'string', label: 'Notes' },  \n      rank: { type: 'string', label: 'Rank' },\n      scope: { type: 'string', label: 'Scope' },\n      variable: { \n        type: 'enum', \n        label: 'Interpretation Variable', \n        schema: interpretationVariableSchema \n      },\n      variableDetail: { type: 'string', label: 'Variable Detail' },\n      variableGeneral: { type: 'string', label: 'Variable General' },\n      variableGeneralDirection: { type: 'string', label: 'Variable General Direction' },\n      seasonality: { \n        type: 'enum', \n        label: 'Seasonality', \n        schema: seasonalitySchema \n      },\n      seasonalityGeneral: { \n        type: 'enum', \n        label: 'Seasonality General', \n        schema: seasonalitySchema \n      },\n      seasonalityOriginal: { \n        type: 'enum', \n        label: 'Seasonality Original', \n        schema: seasonalitySchema \n      }\n  },\n  class: Interpretation\n};\n\nexport const calibrationSchema: Schema = {\n  fields: {\n      dOI: { type: 'string', label: 'DOI' },\n      datasetRange: { type: 'string', label: 'Dataset Range' },\n      equation: { type: 'string', label: 'Equation' },\n      equationIntercept: { type: 'string', label: 'Equation Intercept' },\n      equationR2: { type: 'string', label: 'Equation R2' },\n      equationSlope: { type: 'string', label: 'Equation Slope' },\n      equationSlopeUncertainty: { type: 'string', label: 'Equation Slope Uncertainty' },\n      method: { type: 'string', label: 'Method' },\n      methodDetail: { type: 'string', label: 'Method Detail' },\n      notes: { type: 'string', label: 'Notes' },\n      proxyDataset: { type: 'string', label: 'Proxy Dataset' },\n      seasonality: { type: 'string', label: 'Seasonality' },\n      targetDataset: { type: 'string', label: 'Target Dataset' },\n      uncertainty: { type: 'string', label: 'Uncertainty' }\n  },\n  class: Calibration\n};\n\nexport const resolutionSchema: Schema = {\n  fields: {\n      maxValue: { type: 'number', label: 'Max Value' },\n      meanValue: { type: 'number', label: 'Mean Value' },\n      medianValue: { type: 'number', label: 'Median Value' },\n      minValue: { type: 'number', label: 'Min Value' },\n      units: { type: 'enum', label: 'Units', schema: paleoUnitSchema }\n  },\n  class: Resolution\n};\n\nexport const compilationSchema: Schema = {\n  fields: {\n      name: { type: 'string', label: 'Name' },\n      version: { type: 'string', label: 'Version' },\n  },\n  label: {\n    primary: getCompilationNameLabel\n  },\n  class: Compilation\n};\n\nexport const variableSchema: Schema = {\n  fields: {\n      name: { type: 'string', label: 'Name' },    \n      standardVariable: { \n          type: 'enum', \n          label: 'Standard Variable', \n          schema: paleoVariableSchema \n      },  \n      variableId: { type: 'string', label: 'Variable ID' },\n      description: { type: 'string', label: 'Description' },\n      notes: { type: 'string', label: 'Notes' },\n      units: { type: 'enum', label: 'Units', schema: paleoUnitSchema },\n      archiveType: { \n        type: 'enum', \n        label: 'Archive Type',\n        schema: archiveTypeSchema\n      },\n      columnNumber: { type: 'number', label: 'Column Number' },\n      variableType: { type: 'string', label: 'Variable Type' },\n      partOfCompilations: { \n        type: 'array', \n        label: 'Part of Compilations',\n        items: {\n        type: 'object', \n          label: 'Compilation',\n        schema: compilationSchema\n        }\n      },\n      missingValue: { type: 'string', label: 'Missing Value' },  \n      maxValue: { type: 'number', label: 'Max Value' },\n      meanValue: { type: 'number', label: 'Mean Value' },\n      medianValue: { type: 'number', label: 'Median Value' },\n      minValue: { type: 'number', label: 'Min Value' },\n      primary: { type: 'boolean', label: 'Primary' },\n      uncertainty: { type: 'string', label: 'Uncertainty' },\n      uncertaintyAnalytical: { type: 'string', label: 'Analytical Uncertainty' },\n      uncertaintyReproducibility: { type: 'string', label: 'Reproducibility Uncertainty' },\n      composite: { type: 'boolean', label: 'Composite' },\n      instrument: { type: 'string', label: 'Instrument' },\n\n      proxy: { \n        type: 'enum', \n        label: 'Proxy', \n        schema: proxySchema \n      },\n      proxyGeneral: { \n        type: 'enum', \n        label: 'Proxy General', \n        schema: proxyGeneralSchema \n      },\n      resolution: { \n        type: 'object', \n        label: 'Resolution', \n        schema: resolutionSchema \n      },\n      interpretations: { \n        type: 'array', \n        label: 'Interpretations', \n        items: { \n            type: 'object', \n            label: 'Interpretation', \n            schema: interpretationSchema \n        } \n      },\n      calibratedVias: { \n        type: 'array', \n        label: 'Calibration', \n        items: { \n            type: 'object', \n            label: 'Calibration', \n            schema: calibrationSchema\n        } \n      }\n  },\n  label: {\n    primary: getVariableNameLabel,\n    secondary: getVariableDescriptionLabel\n  }, \n  class: Variable\n};\n\nexport const dataTableSchema: Schema = {\n  fields: {\n      fileName: { type: 'string', label: 'File Name' },\n      missingValue: { type: 'string', label: 'Missing Value' },\n      variables: {\n          type: 'array',\n          label: 'Variables',\n          items: {\n              type: 'object',\n              label: 'Variable',\n              schema: variableSchema\n          }\n      }\n  },\n  label: {\n    primary: getDataTableLabel,\n    secondary: getDataTableVariablesLabel\n  },\n  class: DataTable\n};\n\nexport const modelSchema: Schema = {\n  fields: {\n      code: { type: 'string', label: 'Code', multiline: true, rows: 4 },\n      ensembleTables: {\n          type: 'array',\n          label: 'Ensemble Tables',\n          items: {\n              type: 'object',\n              label: 'Ensemble Table',\n              schema: dataTableSchema\n          }\n      },\n      summaryTables: {\n          type: 'array',\n          label: 'Summary Tables',\n          items: {\n              type: 'object',\n              label: 'Summary Table',\n              schema: dataTableSchema\n          }\n      },\n      distributionTables: {\n          type: 'array',\n          label: 'Distribution Tables',\n          items: {\n              type: 'object',\n              label: 'Distribution Table',\n              schema: dataTableSchema\n          }\n      }\n  },\n  class: Model\n};\n\nexport const dataSchema: Schema = {\n  fields: {\n      // name: { type: 'string', label: 'Name' },\n      // Measurement Tables and modeledBy are handled in the PaleoDataEditor component\n      measurementTables: {\n        type: 'array',\n        label: 'Measurement Tables',\n        items: {\n              type: 'object',\n              label: 'Measurement Table',\n              schema: dataTableSchema\n          }\n      },\n      modeledBy: {\n        type: 'array',\n        label: 'Models',\n        items: {\n              type: 'object',\n              label: 'Model',\n              schema: modelSchema\n        }\n      }\n  },\n  label: {\n    secondary: getDataDetailsLabel\n  },    \n  class: PaleoData\n};\n\nexport const datasetSchema: Schema = {\nfields: {\n  name: { type: 'string', label: 'Dataset Name' },\n  archiveType: {\n    type: 'enum',\n    label: 'Archive Type',\n    schema: archiveTypeSchema\n  },\n  location: { \n    hidden: true,\n    type: 'object', \n    label: 'Location',\n    schema: locationSchema\n  },\n  datasetId: { type: 'string', label: 'Dataset ID' },\n  version: { type: 'string', label: 'Version' },  \n  collectionName: { type: 'string', label: 'Collection Name' },\n  collectionYear: { type: 'string', label: 'Collection Year' },\n  dataSource: { type: 'string', label: 'Data Source' },\n  originalDataUrl: { type: 'string', label: 'Original Data URL' },\n  spreadsheetLink: { type: 'string', label: 'Spreadsheet Link' },\n  compilationNest: { type: 'string', label: 'Compilation Nest' },\n  notes: { type: 'string', label: 'Notes' },\n  investigators: {\n    type: 'array',\n    label: 'Investigators',\n    items: {\n      type: 'object',\n      label: 'Investigator',\n      schema: personSchema\n    }\n  },\n  creators: {\n    type: 'array',\n    label: 'Creators',\n    items: {\n      type: 'object',\n      label: 'Creator',\n      schema: personSchema\n    }\n  },\n  contributors: {\n    type: 'array',\n    label: 'Contributors',\n    items: {\n      type: 'object',\n      label: 'Contributor',\n      schema: personSchema\n    }\n  },\n  fundings: {\n    type: 'array',\n    label: 'Fundings',\n    items: {\n      type: 'object',\n      label: 'Funding',\n      schema: fundingSchema\n    }\n  },\n  changeLogs: {\n    type: 'array',\n    hidden: true,\n    label: 'ChangeLog',\n    items: {\n      type: 'object',\n      label: 'ChangeLog Entry',\n      schema: changeLogSchema\n    }\n  },\n  publications: {\n    type: 'array',\n    hidden: true,\n    label: 'Publications',\n    items: {\n      type: 'object',\n      label: 'Publication',\n      schema: publicationSchema\n    }      \n  },\n  paleoData: {\n    type: 'array',\n    hidden: true,\n    label: 'PaleoData',\n    items: {\n      type: 'object',\n      label: 'PaleoData',\n      schema: dataSchema\n    }\n  },\n  chronData: {\n    type: 'array',\n    hidden: true,\n    label: 'ChronData',\n    items: {\n      type: 'object',\n      label: 'ChronData',\n      schema: dataSchema\n    }\n  }    \n},\nclass: Dataset\n};\n\n\n\n// Build a complete map of paths to schemas\nconst schemaPathMap: Map<string, Schema | SchemaField> = new Map();\n\n// Function to recursively build the schema path map\nconst buildSchemaPathMap = (\n  schema: Schema | undefined,\n  fieldSchema: SchemaField | undefined,\n  currentPath: string = 'dataset'\n) => {\n  // Add the current schema to the map\n  if (schema) {\n      schemaPathMap.set(currentPath, schema);\n\n      // Process fields in the schema\n      if (schema.fields) {\n          Object.entries(schema.fields).forEach(([fieldName, fieldDef]) => {\n              const fieldPath = `${currentPath}.${fieldName}`;\n              schemaPathMap.set(fieldPath, fieldDef);\n\n              // If field is an object with its own schema, recursively process it\n              if (fieldDef.type === 'object' && fieldDef.schema) {\n                  buildSchemaPathMap(fieldDef.schema, fieldDef, fieldPath);\n              }\n              // If field is an array with item schema, process the array items schema\n              else if (fieldDef.type === 'array' && fieldDef.items) {\n                  // Map the array itself\n                  schemaPathMap.set(fieldPath, fieldDef);\n                  \n                  // The schema for individual items in the array (with wildcard index)\n                  const itemPath = `${fieldPath}.*`;\n                  schemaPathMap.set(itemPath, fieldDef.items);\n                  \n                  // If array items have a schema, recursively process it\n                  if (fieldDef.items.schema) {\n                      buildSchemaPathMap(fieldDef.items.schema, fieldDef.items, itemPath);\n                  }\n              }\n          });\n      }\n  }\n  // If we're starting with a field schema instead of a full schema\n  else if (fieldSchema) {\n      schemaPathMap.set(currentPath, fieldSchema);\n      \n      if (fieldSchema.type === 'object' && fieldSchema.schema) {\n          buildSchemaPathMap(fieldSchema.schema, undefined, currentPath);\n      }\n      else if (fieldSchema.type === 'array' && fieldSchema.items) {\n          const itemPath = `${currentPath}.*`;\n          schemaPathMap.set(itemPath, fieldSchema.items);\n          \n          if (fieldSchema.items.schema) {\n              buildSchemaPathMap(fieldSchema.items.schema, fieldSchema.items, itemPath);\n          }\n      }\n  }\n};\n\n// Initialize the schema path map\nbuildSchemaPathMap(datasetSchema, undefined);\n\n// Helper function to find the schema for a given path\nexport const getSchemaForPath = (path: string): Schema | SchemaField | null => {\n// Try exact match first\nif (schemaPathMap.has(path)) {\n    return schemaPathMap.get(path) as Schema | SchemaField;\n}\n\n// Check for wildcard path\nlet wildcardPath = path.replace(/\\.\\d+/g, '.*');\nif (schemaPathMap.has(wildcardPath)) {\n    return schemaPathMap.get(wildcardPath) as Schema | SchemaField;\n}\n\nreturn null;\n};","// Re-export label helper functions for LiPD UI components\n\nimport { Change, ChangeLog, ChronData, DataTable, Funding, PaleoData, Person, Publication, Variable, Compilation } from \"lipdjs\";\n\nexport const getPublicationAuthorsLabel = (publication: Publication) : string => {\n    return publication.authors.map((author) => author.name).join(', ');\n};\n\nexport const getPublicationTitleLabel = (publication: Publication) : string => {\n    return publication.title || '';\n};\n\nexport const getPublicationFullLabel = (publication: Publication) : string => {\n    return `${getPublicationTitleLabel(publication)} (${getPublicationAuthorsLabel(publication)})`;\n};\n\nexport const getDataTableLabel = (dataTable: DataTable) : string => {\n    return dataTable.fileName || '';\n};\n\nexport const getDataTableVariablesLabel = (dataTable: DataTable) : string => {\n    return dataTable.variables.map((variable) => variable.name).join(', ');\n};\n\nexport const getMeasurementTablesLabel = (data: PaleoData | ChronData) : string => {\n    return (data.measurementTables?.length.toString() || '0') + ' measurement tables';\n};\n\nexport const getModeledByLabel = (data: PaleoData | ChronData) : string => {\n    return (data.modeledBy?.length.toString() || '0') + ' models';\n};\n\nexport const getDataDetailsLabel = (data: PaleoData | ChronData) : string => {\n    return `${getMeasurementTablesLabel(data)}, ${getModeledByLabel(data)}`;\n};\n\nexport const getPersonNameLabel = (person: Person) : string => {\n    return person.name || '';\n};\n\nexport const getVariableNameLabel = (variable: Variable) : string => {\n    return variable.name || '';\n};\n\nexport const getVariableDescriptionLabel = (variable: Variable) : string => {\n    return variable.description || '';\n};\n\nexport const getVariableUnitsLabel = (variable: Variable) : string => {\n    return variable.units?.getLabel() || '';\n};\n\nexport const getFundingLabel = (funding: Funding) : string => {\n    return funding.fundingAgency || '';\n};\n\nexport const getFundingGrantsLabel = (funding: Funding) : string => {\n    return (funding.grants || []).join(', ');\n};\n\nexport const getChangeLogLabel = (changeLog: ChangeLog) : string => {\n    return changeLog.timestamp || '';\n};\n\nexport const getChangeLogCuratorLabel = (changeLog: ChangeLog) : string => {\n    return changeLog.curator || '';\n};\n\nexport const getChangeLogEntryLabel = (changeLogEntry: Change) : string => {\n    return changeLogEntry.name || '';\n};\n\nexport const getCompilationNameLabel = (compilation: Compilation) : string => {\n    return compilation.name || '';\n}; ","// Copied generic store from webview (unchanged)\nimport React from 'react';\nimport { create } from 'zustand';\nimport { Dataset } from 'lipdjs';\nimport { AppState, ThemeMode } from './types';\nimport { getVSCodeAPI } from './vscode';\nimport { getSchemaForPath } from './schemas';\n\nconst vscode = getVSCodeAPI();\n\nexport const useLiPDStore = create<AppState>((set, get) => ({\n  dataset: null,\n  isLoading: false,\n  isSaving: false,\n  isSyncing: false,\n  isRemote: false,\n  datasetName: '',\n  syncProgress: 0,\n  canUndo: false,\n  canRedo: false,\n  selectedNode: null,\n  expandedNodes: new Set(['dataset']),\n  rightPanelOpen: true,\n  selectedTab: 0,\n  themeMode: 'light',\n  validationErrors: {},\n  validationWarnings: {},\n  notification: null,\n  readonly: false,\n  syncConfirmDialogOpen: false,\n  initialize: () => {},\n  setIsLoading: (v:boolean)=>set({isLoading:v}),\n  setLoadingMessage:(m:string)=>set({loadingMessage:m}),\n  setThemeMode:(mode:ThemeMode)=>set({themeMode:mode}),\n  setDataset:(d)=>set({dataset:d,selectedNode:'dataset'}),\n  setDatasetSilently:(d)=>set({dataset:d}),\n  undo:()=>vscode.postMessage?.({type:'executeCommand',command:'lipd-vscode.undo'}),\n  redo:()=>vscode.postMessage?.({type:'executeCommand',command:'lipd-vscode.redo'}),\n  setUndoRedoState:(u:boolean,r:boolean)=>set({canUndo:u,canRedo:r}),\n  setSelectedNode:(n)=>set({selectedNode:n}),\n  toggleExpandNode:(id)=>{\n    const s=get().expandedNodes;const ns=new Set(s);ns.has(id)?ns.delete(id):ns.add(id);set({expandedNodes:ns});},\n  setError:(e)=>set({validationErrors:{error:e},notification:{type:'error',message:e}}),\n  setSaveComplete:(s,err)=>set({isSaving:false,notification:s?{type:'success',message:'Dataset saved successfully'}:{type:'error',message:err||'Failed to save dataset'}}),\n  setSyncComplete:(s,err)=>set({isSyncing:false,syncProgress:0,notification:s?{type:'success',message:'Dataset synced'}:{type:'error',message:err||'Failed to sync'}}),\n  setValidationResults:(res)=>set({validationErrors:res.errors||{},validationWarnings:res.warnings||{}}),\n  saveDataset:()=>{set({isSaving:true});vscode.postMessage?.({type:'save'});return Promise.resolve();},\n  saveDatasetAs:()=>{set({isSaving:true});vscode.postMessage?.({type:'executeCommand',command:'workbench.action.files.saveAs'});return Promise.resolve();},\n  syncDataset:()=>{\n    // Show confirmation dialog instead of immediately syncing\n    set({syncConfirmDialogOpen:true});\n    return Promise.resolve();\n  },\n  setSyncConfirmDialogOpen:(open:boolean)=>set({syncConfirmDialogOpen:open}),\n  confirmSync:()=>{\n    // Close dialog and start sync\n    set({syncConfirmDialogOpen:false,isSyncing:true});\n    // Post message to VS Code to handle the actual sync\n    vscode.postMessage?.({type:'sync'});\n    return Promise.resolve();\n  },\n  toggleRightPanel:()=>set({rightPanelOpen:!get().rightPanelOpen}),\n  setSelectedTab:(t)=>set({selectedTab:t}),\n  updateDataset: (field, value) => {\n    const original = get().dataset as Dataset | null;\n    if (!original) return;\n    // Work on the original instance so we keep methods, then create a shallow clone that preserves the prototype\n    const dataset = original;\n    \n    const updateNestedProperty = (obj: any, path: string | string[], value: any): any => {\n      if (typeof path === 'string') {\n        // Handle dot notation paths\n        const parts = path.split('.');\n        const lastKey = parts.pop() as string;\n        if (parts.length > 0 && parts[0] === 'dataset') {\n          parts.shift();\n        }\n\n        let current = obj;\n        \n        // Traverse the path\n        for (let i = 0; i < parts.length; i++) {\n          const part = parts[i];\n          if (!current[part]) {\n            // Get the schema for this path\n            const pathToHere = ['dataset', ...parts.slice(0, i+1)].join('.');\n            const schema = getSchemaForPath(pathToHere);\n            \n            // If we have a schema, create a proper instance\n            if (schema) {\n              // For arrays, create an empty array since we're accessing an index\n              if (parts[i+1] && !isNaN(Number(parts[i+1]))) {\n                current[part] = [];\n              } else if ('class' in schema && schema.class) {\n                // For objects with a class, instantiate the class\n                current[part] = new schema.class();\n              } else if ('type' in schema && schema.type === 'array' && 'items' in schema && schema.items) {\n                // For arrays with item schema, create an empty array\n                current[part] = [];\n              } else {\n                // Fallback to empty object\n                current[part] = {};\n              }\n            } else {\n              // Fallback to empty object if no schema found\n              current[part] = {};\n            }\n          }\n          current = current[part];\n        }\n        \n        // Try to use setter if available\n        current[lastKey] = value\n      } else if (Array.isArray(path) && path.length === 1) {\n        // If it's an array with just one string element\n        obj[path[0]] = value;\n      } else {\n        console.error('Invalid path format', path);\n      }\n      return obj;\n    };\n\n    updateNestedProperty(dataset, field, value);\n\n    // Create a new object that shares the same prototype to trigger Zustand update while preserving class methods\n    const cloned = Object.assign(Object.create(Object.getPrototypeOf(dataset)), dataset);\n    set({ dataset: cloned });\n\n    vscode.postMessage({\n      type: 'datasetUpdated',\n      data: cloned\n    });\n  },\n  setExpandedNodes:(nodes)=>set({expandedNodes:nodes}),\n  setIsRemote:(b)=>set({isRemote:b}),\n  setDatasetName:(n)=>set({datasetName:n}),\n  setReadonly:(readonly:boolean)=>set({readonly})\n})); ","// VS Code Webview helper – returns a stub when not running in VS Code\n\ndeclare const acquireVsCodeApi: () => {\n  postMessage: (message: any) => void;\n  getState: () => any;\n  setState: (state: any) => void;\n};\n\n// Use a global cache so multiple bundled copies share the same VS Code API\ndeclare global {\n  interface Window {\n    __vscodeApi?: ReturnType<typeof acquireVsCodeApi>;\n  }\n}\n\nlet vscodeApi: ReturnType<typeof acquireVsCodeApi> | undefined;\n\nexport function getVSCodeAPI() {\n  // Re-use global instance if it already exists\n  if (window && window.__vscodeApi) {\n    vscodeApi = window.__vscodeApi;\n    return vscodeApi;\n  }\n\n  if (!vscodeApi) {\n    try {\n      vscodeApi = acquireVsCodeApi();\n      vscodeApi.postMessage({ type: 'ready' });\n      if (window) {\n        window.__vscodeApi = vscodeApi;\n      }\n    } catch {\n      // not in VS Code – return a stub\n      vscodeApi = {\n        postMessage: () => {},\n        getState: () => undefined,\n        setState: () => {}\n      } as any;\n    }\n  }\n  return vscodeApi;\n}\n\nexport function postMessage(message: any) {\n  const api = getVSCodeAPI();\n  api?.postMessage?.(message);\n} ","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Divider from '@mui/material/Divider';\nimport Tooltip from '@mui/material/Tooltip';\nimport { SaveIcon, SaveAsIcon, UndoIcon, RedoIcon, SyncIcon } from './CustomIcons';\nimport { useLiPDStore } from '../store';\n\nconst AppBarActions: React.FC = () => {\n  const { saveDataset, saveDatasetAs, syncDataset, undo, redo, isSaving, isSyncing, canUndo, canRedo, isRemote } = useLiPDStore(state => ({\n    saveDataset: state.saveDataset,\n    saveDatasetAs: state.saveDatasetAs,\n    syncDataset: state.syncDataset,\n    undo: state.undo,\n    redo: state.redo,\n    isSaving: state.isSaving,\n    isSyncing: state.isSyncing,\n    canUndo: state.canUndo,\n    canRedo: state.canRedo,\n    isRemote: state.isRemote\n  }));\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      {/* Edit actions */}\n      <Box sx={{ display: 'flex', mr: 2 }}>\n        <Tooltip title=\"Undo (VS Code Cmd+Z / Ctrl+Z)\">\n          <span>\n            <IconButton \n              onClick={undo} \n              disabled={!canUndo || isSaving}\n              size=\"small\"\n              aria-label=\"Undo\"\n              sx={{ mr: 0.5 }}\n            >\n              <UndoIcon fontSize=\"small\" />\n            </IconButton>\n          </span>\n        </Tooltip>\n        \n        <Tooltip title=\"Redo (VS Code Cmd+Shift+Z / Ctrl+Y)\">\n          <span>\n            <IconButton \n              onClick={redo} \n              disabled={!canRedo || isSaving}\n              size=\"small\"\n              aria-label=\"Redo\"\n            >\n              <RedoIcon fontSize=\"small\" />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </Box>\n      \n      <Divider orientation=\"vertical\" flexItem sx={{ mx: 1 }} />\n      \n      {/* Save actions */}\n      <Box sx={{ display: 'flex', alignItems: 'center', ml: 1 }}>\n        <Tooltip title=\"Save (VS Code Cmd+S / Ctrl+S)\">\n          <IconButton \n            onClick={saveDataset} \n            disabled={isSaving}\n            size=\"small\"\n            aria-label=\"Save\"\n            sx={{ mr: 1 }}\n          >\n            <SaveIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n        \n        <Tooltip title=\"Save As (VS Code Cmd+Shift+S / Ctrl+Shift+S)\">\n          <IconButton \n            onClick={saveDatasetAs} \n            disabled={isSaving}\n            size=\"small\"\n            aria-label=\"Save\"\n            sx={{ mr: 1 }}\n          >\n            <SaveAsIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n\n        <Tooltip title=\"Sync to GraphDB\">\n          <IconButton \n            onClick={syncDataset} \n            disabled={isSyncing}\n            size=\"small\"\n            aria-label=\"Sync to GraphDB\"\n            sx={{ mr: 1 }}\n          >\n            <SyncIcon fontSize=\"small\" />\n          </IconButton>\n        </Tooltip>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AppBarActions; ","import React from 'react';\n\ninterface IconProps {\n  fontSize?: 'small' | 'medium' | 'large';\n  sx?: any;\n  style?: React.CSSProperties;\n}\n\nconst getIconSize = (fontSize: string = 'medium') => {\n  switch (fontSize) {\n    case 'small': return '16px';\n    case 'large': return '20px';\n    default: return '18px';\n  }\n};\n\nexport const ArrowBackIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\" />\n    </svg>\n  );\n};\n\nexport const NavigateNextIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n    </svg>\n  );\n};\n\nexport const HomeIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </svg>\n  );\n};\n\nexport const SaveIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\" />\n    </svg>\n  );\n};\n\nexport const SaveAsIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n        <path d=\"M12 3L12 16\"/>\n        <path d=\"M7 11L12 16L17 11\"/>\n        <path d=\"M4 18L4 20C4 20.5304 4.21071 21.0391 4.58579 21.4142C4.96086 21.7893 5.46957 22 6 22L18 22C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20L20 18\" />\n    </svg>\n  );\n};\n\nexport const UndoIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\" />\n    </svg>\n  );\n};\n\nexport const RedoIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 15.5c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 15h9V6l-3.6 4.6z\" />\n    </svg>\n  );\n};\n\nexport const SyncIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\" />\n    </svg>\n  );\n};\n\nexport const AddIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" />\n    </svg>\n  );\n};\n\nexport const EditIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\" />\n    </svg>\n  );\n};\n\nexport const DeleteIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n    </svg>\n  );\n};\n\nexport const ExpandMoreIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n  );\n};\n\nexport const ChevronRightIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n    </svg>\n  );\n};\n\nexport const DescriptionIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\" />\n    </svg>\n  );\n};\n\nexport const TableChartIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M10 10.02h5V21h-5zM17 21h3c1.1 0 2-.9 2-2v-9h-5v11zm3-18H5c-1.1 0-2 .9-2 2v3h19V5c0-1.1-.9-2-2-2zM3 19c0 1.1.9 2 2 2h3V10H3v9z\" />\n    </svg>\n  );\n};\n\nexport const FolderIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M10 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2h-8l-2-2z\" />\n    </svg>\n  );\n};\n\nexport const ArticleIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\" />\n    </svg>\n  );\n};\n\nexport const TableRowsIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M21 8c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1h16c.55 0 1-.45 1-1zM4 13h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zm16 2H4c-.55 0-1 .45-1 1s.45 1 1 1h16c.55 0 1-.45 1-1s-.45-1-1-1z\" />\n    </svg>\n  );\n};\n\nexport const CheckIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\" />\n    </svg>\n  );\n};\n\nexport const FileUploadIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11zm-3-7l-4-4-4 4h3v4h2v-4h3z\" />\n    </svg>\n  );\n};\n\nexport const FileDownloadIcon: React.FC<IconProps> = ({ fontSize = 'medium', sx, style, ...props }) => {\n  const size = getIconSize(fontSize);\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      style={{ ...style, ...(sx && typeof sx === 'object' ? sx : {}) }}\n      {...props}\n    >\n      <path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\" />\n    </svg>\n  );\n}; ","import React from 'react';\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\nimport { NavigateNextIcon, HomeIcon, ArrowBackIcon } from './CustomIcons';\nimport { useRouter } from '../router';\n\nconst AppBarBreadcrumbs: React.FC = () => {\n  const { breadcrumbs, navigateTo, goBack, canGoBack } = useRouter();\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', flexGrow: 1 }}>\n      <Tooltip title=\"Go back\">\n        <span>\n          <IconButton \n            size=\"small\" \n            onClick={goBack} \n            disabled={!canGoBack}\n            sx={{ mr: 1 }}\n            aria-label=\"Back\"\n          >\n            <ArrowBackIcon fontSize=\"small\" />\n          </IconButton>\n        </span>\n      </Tooltip>\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n        sx={{ flexGrow: 1 }}\n      >\n        {breadcrumbs.map((crumb, index) => (\n          <Typography\n            key={crumb.path}\n            variant=\"body1\"\n            color={index === breadcrumbs.length - 1 ? 'text.primary' : 'primary'}\n            onClick={() => navigateTo(crumb.path)}\n            sx={{ \n              cursor: 'pointer', \n              display: 'flex', \n              alignItems: 'center',\n              fontWeight: index === breadcrumbs.length - 1 ? 'bold' : 'normal'\n            }}\n          >\n            {index === 0 && <HomeIcon sx={{ mr: 0.5 }} fontSize=\"small\" />}\n            {crumb.label}\n          </Typography>\n        ))}\n      </Breadcrumbs>\n    </Box>\n  );\n};\n\nexport default AppBarBreadcrumbs; ","import React, { useContext, useCallback, useMemo } from 'react';\nimport { useLiPDStore } from './store';\nimport { DataTableEditor } from './components/DataTableEditor';\nimport { datasetSchema, dataTableSchema, dataSchema, modelSchema, publicationSchema, Schema, variableSchema, fundingSchema, interpretationSchema, calibrationSchema, changeLogSchema, changeLogEntrySchema, SchemaField, personSchema, locationSchema, compilationSchema } from './schemas';\nimport { DefaultListEditor } from './components/DefaultListEditor';\nimport { DefaultEditor } from './components/DefaultEditor';\nimport { Box, CircularProgress, Typography } from '@mui/material';\nimport { Dataset } from 'lipdjs';\nimport { \n  getPersonNameLabel, \n  getPublicationTitleLabel, \n  getDataTableLabel, \n  getVariableNameLabel,\n  getFundingLabel,\n  getCompilationNameLabel\n} from './labels';\n\n// Define route types\ninterface Route {\n  path: string;\n  component: React.ComponentType<any>;\n  schema?: Schema;\n  getParams?: (path: string) => RouteParams | null;\n  label: string | ((params: RouteParams) => string);  \n  title?: string | ((params: RouteParams) => string);\n  itemLabel?: (item: any) => string;\n}\n\n// Define route parameters\nexport interface RouteParams {\n  dataType?: string;\n  index?: number;\n  tableIndex?: number;\n  varIndex?: number;\n  interpretationIndex?: number;\n  calibrationIndex?: number;\n  compilationIndex?: number;\n  publicationIndex?: number;\n  fundingIndex?: number;\n  modelIndex?: number;\n  tableType?: string;\n  changeLogIndex?: number;\n  changeLogEntryIndex?: number;\n  personIndex?: number;\n  authorIndex?: number;\n  investigatorIndex?: number;\n}\n\n// Define the router context\ninterface RouterContextType {\n  currentPath: string;\n  navigateTo: (path: string) => void;\n  goBack: () => void;\n  breadcrumbs: { label: string; path: string }[];\n  canGoBack: boolean;\n}\n\n// Editor props interface\nexport interface EditorProps {\n  dataset: Dataset;\n  path: string;\n  title?: string;\n  params?: RouteParams;\n  onUpdate: (path: string, updatedObject: any) => void;\n  schema?: Schema;\n  fieldSchema?: SchemaField;\n  columns?: number;\n  dense?: boolean;\n  useFieldset?: boolean;\n  readonly?: boolean;\n}\n\nconst RouterContext = React.createContext<RouterContextType | null>(null);\n\n// Define routes\nconst routes: Route[] = [\n  {\n    path: 'dataset',\n    component: DefaultEditor,\n    label: 'Dataset',\n    title: 'Dataset',\n    itemLabel: dataset => dataset.name || 'Dataset',\n    schema: datasetSchema\n  },\n  // PaleoData or ChronData\n  {\n    path: 'dataset/:dataType',\n    component: DefaultListEditor,\n    label: params => `${(params.dataType || ' ').charAt(0).toUpperCase() + params.dataType?.slice(1)}`,\n    title: params => `${(params.dataType || ' ').charAt(0).toUpperCase() + params.dataType?.slice(1)}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)$/);\n      return match ? { dataType: match[1] } : null;\n    },\n    schema: dataSchema\n  },\n  // PaleoData or ChronData\n  {\n    path: 'dataset/:dataType/:index',\n    component: DefaultEditor,\n    title: params => `${(params.dataType || ' ').charAt(0).toUpperCase() + params.dataType?.slice(1)} ${Number(params.index) + 1}`,\n    label: params => `${(params.dataType || ' ').charAt(0).toUpperCase() + params.dataType?.slice(1)} ${Number(params.index) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]) \n      } : null;\n    },\n    schema: dataSchema\n  },\n  // Publications List\n  {\n    path: 'dataset/publications',\n    component: DefaultListEditor,\n    label: 'Publications',\n    title: 'Publications',\n    schema: publicationSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.publications$/);\n      return match ? {} : null;\n    },\n  },\n  // Publication\n  {\n    path: 'dataset/publications/:index',\n    component: DefaultEditor,\n    title: 'Publication',\n    label: params => `Publication ${Number(params.publicationIndex) + 1}`,\n    itemLabel: publication => getPublicationTitleLabel(publication),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.publications\\.(\\d+)$/);\n      return match ? { \n        publicationIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: publicationSchema\n  },\n  // Location\n  {\n    path: 'dataset/location',\n    component: DefaultEditor,\n    label: 'Location',\n    title: 'Location',\n    itemLabel: () => 'Location',\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.location$/);\n      return match ? {} : null;\n    },\n    schema: locationSchema\n  },  \n  // ChangeLog List\n  {\n    path: 'dataset/changeLogs',\n    component: DefaultListEditor,\n    label: 'ChangeLogs',\n    title: 'ChangeLogs',\n    schema: changeLogSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.changeLogs$/);\n      return match ? {} : null;\n    },\n  },\n  // ChangeLog\n  {\n    path: 'dataset/changeLogs/:index',\n    component: DefaultEditor,\n    title: 'ChangeLog',\n    label: params => `ChangeLog ${Number(params.changeLogIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.changeLogs\\.(\\d+)$/);\n      return match ? { \n        changeLogIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: changeLogSchema\n  },\n  // ChangeLogEntry\n  {\n    path: 'dataset/changeLogs/:index/changes/:changeLogEntryIndex',\n    component: DefaultEditor,\n    title: 'ChangeLogEntry',\n    label: params => `ChangeLogEntry ${Number(params.changeLogEntryIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.changeLogs\\.(\\d+)\\.changes\\.(\\d+)$/);\n      return match ? { \n        changeLogIndex: parseInt(match[1]),\n        changeLogEntryIndex: parseInt(match[2])\n      } : null;\n    },\n    schema: changeLogEntrySchema\n  },  \n  // Fundings List\n  {\n    path: 'dataset/fundings',\n    component: DefaultListEditor,\n    label: 'Fundings',\n    title: 'Fundings',\n    schema: fundingSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.fundings$/);\n      return match ? {} : null;\n    },\n  },\n  // Funding\n  {\n    path: 'dataset/fundings/:index',\n    component: DefaultEditor,\n    title: 'Funding',\n    label: params => `Funding ${Number(params.fundingIndex) + 1}`,\n    itemLabel: funding => getFundingLabel(funding),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.fundings\\.(\\d+)$/);\n      return match ? { \n        fundingIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: fundingSchema\n  },  \n  // PaleoData or ChronData measurement Tables\n  {\n    path: 'dataset/:dataType/:index/measurementTables/:tableIndex',\n    component: DataTableEditor,\n    title: 'Data Table',\n    label: params => `Measurement Table ${Number(params.tableIndex) + 1}`,\n    itemLabel: table => getDataTableLabel(table),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.measurementTables\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        tableIndex: parseInt(match[3]) \n      } : null;\n    },\n    schema: dataTableSchema\n  },\n  // PaleoData or ChronData measurement Tables variables\n  {\n    path: 'dataset/:dataType/:index/measurementTables/:tableIndex/variables/:varIndex',\n    component: DefaultEditor,\n    title: 'Variable',\n    label: params => `Variable ${Number(params.varIndex) + 1}`,\n    itemLabel: variable => getVariableNameLabel(variable),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.measurementTables\\.(\\d+)\\.variables\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        tableIndex: parseInt(match[3]),\n        varIndex: parseInt(match[4])\n      } : null;\n    },\n    schema: variableSchema\n  },\n  // PaleoData or ChronData measurement Tables variables interpretations\n  {\n    path: 'dataset/:dataType/:index/measurementTables/:tableIndex/variables/:varIndex/interpretations/:interpretationIndex',\n    component: DefaultEditor,\n    title: 'Interpretation',\n    label: params => `Interpretation ${Number(params.interpretationIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.measurementTables\\.(\\d+)\\.variables\\.(\\d+)\\.interpretations\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        tableIndex: parseInt(match[3]),\n        varIndex: parseInt(match[4]),\n        interpretationIndex: parseInt(match[5])\n      } : null;\n    },\n    schema: interpretationSchema\n  }, \n  // PaleoData or ChronData measurement Tables variables partOfCompilations\n  {\n    path: 'dataset/:dataType/:index/measurementTables/:tableIndex/variables/:varIndex/partOfCompilations/:compilationIndex',\n    component: DefaultEditor,\n    title: 'Compilation',\n    label: params => `Compilation ${Number(params.compilationIndex) + 1}`,\n    itemLabel: compilation => getCompilationNameLabel(compilation),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.measurementTables\\.(\\d+)\\.variables\\.(\\d+)\\.partOfCompilations\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        tableIndex: parseInt(match[3]),\n        varIndex: parseInt(match[4]),\n        compilationIndex: parseInt(match[5])\n      } : null;\n    },\n    schema: compilationSchema\n  }, \n  // PaleoData or ChronData measurement Tables variables calibrations\n  {\n    path: 'dataset/:dataType/:index/measurementTables/:tableIndex/variables/:varIndex/calibrations/:calibrationIndex',\n    component: DefaultEditor,\n    title: 'Calibration',\n    label: params => `Calibration ${Number(params.calibrationIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.measurementTables\\.(\\d+)\\.variables\\.(\\d+)\\.calibratedVias\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        tableIndex: parseInt(match[3]),\n        varIndex: parseInt(match[4]),\n        calibrationIndex: parseInt(match[5])\n      } : null;\n    },\n    schema: calibrationSchema\n  },    \n  // PaleoData or ChronData models\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex',\n    component: DefaultEditor,\n    title: 'Model',\n    label: params => `Model ${Number(params.modelIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]) \n      } : null;\n    },\n    schema: modelSchema\n  },  \n  // PaleoData or ChronData modeledBy Tables\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex/:tableType/:tableIndex',\n    component: DataTableEditor,\n    title: 'Data Table',\n    label: params => `Summary Table ${Number(params.tableIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)\\.(summaryTables|ensembleTables|distributionTables)\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]),\n        tableType: match[4],\n        tableIndex: parseInt(match[5]) \n      } : null;\n    },\n    schema: dataTableSchema\n  }, \n  // ChronData or PaleoData modeledBy Tables variables\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex/:tableType/:tableIndex/variables/:varIndex',\n    component: DefaultEditor,\n    title: 'Variable',\n    label: params => `Variable ${Number(params.varIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)\\.(summaryTables|ensembleTables|distributionTables)\\.(\\d+)\\.variables\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]),\n        tableType: match[4],\n        tableIndex: parseInt(match[5]),\n        varIndex: parseInt(match[6])\n      } : null;\n    },\n    schema: variableSchema\n  },\n  // PaleoData or ChronData modeledBy Tables variables interpretations\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex/:tableType/:tableIndex/variables/:varIndex/interpretations/:interpretationIndex',\n    component: DefaultEditor,\n    title: 'Interpretation',\n    label: params => `Interpretation ${Number(params.interpretationIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)\\.(summaryTables|ensembleTables|distributionTables)\\.(\\d+)\\.variables\\.(\\d+)\\.interpretations\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]),\n        tableType: match[4],\n        tableIndex: parseInt(match[5]),\n        varIndex: parseInt(match[6]),\n        interpretationIndex: parseInt(match[7])\n      } : null;\n    },\n    schema: interpretationSchema\n  }, \n  // PaleoData or ChronData modeledBy Tables variables partOfCompilations\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex/:tableType/:tableIndex/variables/:varIndex/partOfCompilations/:compilationIndex',\n    component: DefaultEditor,\n    title: 'Compilation',\n    label: params => `Compilation ${Number(params.compilationIndex) + 1}`,\n    itemLabel: compilation => getCompilationNameLabel(compilation),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)\\.(summaryTables|ensembleTables|distributionTables)\\.(\\d+)\\.variables\\.(\\d+)\\.partOfCompilations\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]),\n        tableType: match[4],\n        tableIndex: parseInt(match[5]),\n        varIndex: parseInt(match[6]),\n        compilationIndex: parseInt(match[7])\n      } : null;\n    },\n    schema: compilationSchema\n  }, \n  // PaleoData or ChronData modeledBy Tables variables calibrations\n  {\n    path: 'dataset/:dataType/:index/modeledBy/:modelIndex/:tableType/:tableIndex/variables/:varIndex/calibrations/:calibrationIndex',\n    component: DefaultEditor,\n    title: 'Calibration',\n    label: params => `Calibration ${Number(params.calibrationIndex) + 1}`,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.(paleoData|chronData)\\.(\\d+)\\.modeledBy\\.(\\d+)\\.(summaryTables|ensembleTables|distributionTables)\\.(\\d+)\\.variables\\.(\\d+)\\.calibratedVias\\.(\\d+)$/);\n      return match ? { \n        dataType: match[1],\n        index: parseInt(match[2]), \n        modelIndex: parseInt(match[3]),\n        tableType: match[4],\n        tableIndex: parseInt(match[5]),\n        varIndex: parseInt(match[6]),\n        calibrationIndex: parseInt(match[7])\n      } : null;\n    },\n    schema: calibrationSchema\n  },     \n  // ===== PERSON ROUTES =====\n  \n  // Dataset Investigators List\n  {\n    path: 'dataset/investigators',\n    component: DefaultListEditor,\n    label: 'Investigators',\n    title: 'Investigators',\n    schema: personSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.investigators$/);\n      return match ? {} : null;\n    },\n  },\n  // Dataset Investigator\n  {\n    path: 'dataset/investigators/:index',\n    component: DefaultEditor,\n    title: 'Investigator',\n    label: params => `Investigator ${Number(params.personIndex) + 1}`,\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.investigators\\.(\\d+)$/);\n      return match ? { \n        personIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: personSchema\n  },\n  \n  // Dataset Creators List\n  {\n    path: 'dataset/creators',\n    component: DefaultListEditor,\n    label: 'Creators',\n    title: 'Creators',\n    schema: personSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.creators$/);\n      return match ? {} : null;\n    },\n  },\n  // Dataset Creator\n  {\n    path: 'dataset/creators/:index',\n    component: DefaultEditor,\n    title: 'Creator',\n    label: params => `Creator ${Number(params.personIndex) + 1}`,\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.creators\\.(\\d+)$/);\n      return match ? { \n        personIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: personSchema\n  },\n  \n  // Dataset Contributors List\n  {\n    path: 'dataset/contributors',\n    component: DefaultListEditor,\n    label: 'Contributors',\n    title: 'Contributors',\n    schema: personSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.contributors$/);\n      return match ? {} : null;\n    },\n  },\n  // Dataset Contributor\n  {\n    path: 'dataset/contributors/:index',\n    component: DefaultEditor,\n    title: 'Contributor',\n    label: params => `Contributor ${Number(params.personIndex) + 1}`,\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.contributors\\.(\\d+)$/);\n      return match ? { \n        personIndex: parseInt(match[1]) \n      } : null;\n    },\n    schema: personSchema\n  },\n  \n  // Publication Authors List\n  {\n    path: 'dataset/publications/:publicationIndex/authors',\n    component: DefaultListEditor,\n    label: 'Authors',\n    title: 'Authors',\n    schema: personSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.publications\\.(\\d+)\\.authors$/);\n      return match ? { \n        publicationIndex: parseInt(match[1]) \n      } : null;\n    },\n  },\n  // Publication Author\n  {\n    path: 'dataset/publications/:publicationIndex/authors/:authorIndex',\n    component: DefaultEditor,\n    title: 'Author',\n    label: params => `Author ${Number(params.authorIndex) + 1}`,\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.publications\\.(\\d+)\\.authors\\.(\\d+)$/);\n      return match ? { \n        publicationIndex: parseInt(match[1]),\n        authorIndex: parseInt(match[2])\n      } : null;\n    },\n    schema: personSchema\n  },\n  \n  // Publication First Author\n  {\n    path: 'dataset/publications/:publicationIndex/firstAuthor',\n    component: DefaultEditor,\n    title: 'First Author',\n    label: 'First Author',\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.publications\\.(\\d+)\\.firstAuthor$/);\n      return match ? { \n        publicationIndex: parseInt(match[1])\n      } : null;\n    },\n    schema: personSchema\n  },\n  \n  // Funding Investigators List\n  {\n    path: 'dataset/fundings/:fundingIndex/investigators',\n    component: DefaultListEditor,\n    label: 'Investigators',\n    title: 'Investigators',\n    schema: personSchema,\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.fundings\\.(\\d+)\\.investigators$/);\n      return match ? { \n        fundingIndex: parseInt(match[1]) \n      } : null;\n    },\n  },\n  // Funding Investigator\n  {\n    path: 'dataset/fundings/:fundingIndex/investigators/:investigatorIndex',\n    component: DefaultEditor,\n    title: 'Investigator',\n    label: params => `Investigator ${Number(params.investigatorIndex) + 1}`,\n    itemLabel: person => getPersonNameLabel(person),\n    getParams: (path) => {\n      const match = path.match(/^dataset\\.fundings\\.(\\d+)\\.investigators\\.(\\d+)$/);\n      return match ? { \n        fundingIndex: parseInt(match[1]),\n        investigatorIndex: parseInt(match[2])\n      } : null;\n    },\n    schema: personSchema\n  },\n];\n\n// Find matching route for a path\nconst findMatchingRoute = (path: string): { route: Route; params: RouteParams; schema: Schema } | null => {\n  // console.log('Finding matching route for path:', path);\n  for (const route of routes) {\n    if (route.getParams) {\n      const params = route.getParams(path);\n      if (params) {\n        // console.log('Found matching route:', route.path, 'with params:', params);\n        return { route, params, schema: route.schema || {} };\n      }\n    } else if (route.path === path) {\n      // console.log('Found matching route:', route.path, 'with params:', {});\n      return { route, params: {}, schema: route.schema || {} };\n    }\n  }\n  return null;\n};\n\n// Generate breadcrumbs for a path\nconst generateBreadcrumbs = (path: string): { label: string; path: string }[] => {\n  const parts = path.split('.');\n  const breadcrumbs: { label: string; path: string }[] = [];\n  \n  let currentPath = '';\n  for (let i = 0; i < parts.length; i++) {\n    currentPath = currentPath ? `${currentPath}.${parts[i]}` : parts[i];\n    const match = findMatchingRoute(currentPath);\n    \n    if (match) {\n      const { route, params } = match;\n      let label;\n      \n      // Try to use the itemLabel function if available\n      if (route.itemLabel) {\n        // Get the actual item at this path\n        const dataset = useLiPDStore.getState().dataset;\n        const item = getItemFromPath(dataset, currentPath);\n        if (item) {\n          label = route.itemLabel(item);\n        }\n      }\n      \n      // Fall back to the regular label if itemLabel didn't work\n      if (!label) {\n        label = typeof route.label === 'function' ? route.label(params) : route.label;\n      }\n      \n      breadcrumbs.push({ label, path: currentPath });\n    }\n  }\n  \n  return breadcrumbs;\n};\n\n// Helper to get the actual item from a path\nconst getItemFromPath = (dataset: any, path: string): any => {\n  if (!dataset || !path) return null;\n  \n  // For just 'dataset', return the whole dataset\n  if (path === 'dataset') return dataset;\n  \n  // Remove 'dataset.' prefix if present\n  const normalizedPath = path.startsWith('dataset.') ? path.substring(8) : path;\n  \n  // Split into parts and traverse\n  const parts = normalizedPath.split('.');\n  let current = dataset;\n  \n  for (const part of parts) {\n    if (!current || current[part] === undefined) {\n      return null;\n    }\n    current = current[part];\n  }\n  \n  return current;\n};\n\n// Router provider component\nexport const RouterProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { selectedNode, setSelectedNode, dataset } = useLiPDStore((state) => ({\n    selectedNode: state.selectedNode,\n    setSelectedNode: state.setSelectedNode,\n    dataset: state.dataset\n  }));\n\n  // Add navigation history state\n  const [navigationHistory, setNavigationHistory] = React.useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = React.useState<number>(-1);\n\n  const currentPath = selectedNode || 'dataset';\n  \n  // Update history when currentPath changes\n  React.useEffect(() => {\n    if (currentPath) {\n      // If we're not at the end of history, truncate it\n      if (historyIndex < navigationHistory.length - 1) {\n        setNavigationHistory(prev => prev.slice(0, historyIndex + 1));\n      }\n      \n      // Add new path if it's different from the current one\n      if (historyIndex === -1 || currentPath !== navigationHistory[historyIndex]) {\n        setNavigationHistory(prev => [...prev, currentPath]);\n        setHistoryIndex(prev => prev + 1);\n      }\n    }\n  }, [currentPath, historyIndex, navigationHistory]);\n  \n  const navigateTo = useCallback((path: string) => {\n    setSelectedNode(path);\n  }, [setSelectedNode]);\n  \n  // Add goBack function\n  const goBack = useCallback(() => {\n    if (historyIndex > 0) {\n      const previousPath = navigationHistory[historyIndex - 1];\n      setHistoryIndex(historyIndex - 1);\n      setSelectedNode(previousPath);\n    }\n  }, [historyIndex, navigationHistory, setSelectedNode]);\n  \n  // Determine if we can go back\n  const canGoBack = historyIndex > 0;\n  \n  const breadcrumbs = useMemo(() => \n    generateBreadcrumbs(currentPath), [currentPath, dataset]);\n  \n  return (\n    <RouterContext.Provider value={{ currentPath, navigateTo, goBack, breadcrumbs, canGoBack }}>\n      {children}\n    </RouterContext.Provider>\n  );\n};\n\n// Hook to use router\nexport const useRouter = () => {\n  const context = useContext(RouterContext);\n  if (!context) {\n    throw new Error('useRouter must be used within a RouterProvider');\n  }\n  return context;\n};\n\n// Router component\nexport const Router: React.FC = () => {\n  const { currentPath } = useRouter();\n  const { updateDataset, isLoading, dataset, loadingMessage, datasetName, readonly } = useLiPDStore(state => ({\n    updateDataset: state.updateDataset,\n    isLoading: state.isLoading,\n    dataset: state.dataset,\n    loadingMessage: state.loadingMessage,\n    datasetName: state.datasetName,\n    readonly: state.readonly\n  }));\n  \n  // Show loading indicator while dataset is loading\n  if (isLoading) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%', \n        width: '100%',\n        p: 3\n      }}>\n        <CircularProgress size={40} />\n        <Typography sx={{ mt: 2, mb: 1 }} variant=\"h6\">\n          {datasetName ? `Loading ${datasetName}...` : 'Loading dataset...'}\n        </Typography>\n        {loadingMessage && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {loadingMessage}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n  \n  // If no dataset is available, show a message\n  if (!dataset) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%', \n        width: '100%',\n        p: 3\n      }}>\n        <Typography variant=\"h6\">\n          No dataset available\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Please select a dataset to view\n        </Typography>\n      </Box>\n    );\n  }\n  \n  const match = findMatchingRoute(currentPath);\n  if (!match) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%', \n        width: '100%',\n        p: 3,\n        textAlign: 'center'\n      }}>\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Path not found: {currentPath}</Typography>\n        <Typography>Please select an item from the navigation panel or try reloading the editor.</Typography>\n      </Box>\n    );\n  }\n\n  const { route, params, schema } = match;\n  const Component = route.component;\n  const title = typeof route.title === 'function' ? route.title(params) : route.title;\n\n  return <Component \n    dataset={dataset}\n    params={params} \n    path={currentPath}\n    onUpdate={updateDataset}\n    schema={schema}\n    title={title}\n    readonly={readonly}\n  />;\n};","import React from 'react';\nimport { Box, Paper, Typography, Grid, TextField, IconButton, Button } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\nimport { Dataset, Variable } from 'lipdjs';\nimport { useLiPDStore } from '../store';\nimport { AddIcon, FileUploadIcon, FileDownloadIcon, DeleteIcon } from './CustomIcons';\nimport ListView from './ListView';\nimport { variableSchema } from '../schemas';\nimport { formVariant, getValueFromPath } from '../utils/utils';\nimport { EditorProps } from '../router';\nimport { FormTextField } from './FormTextField';\n\nexport const DataTableEditor: React.FC<EditorProps> = ({ path, params, onUpdate, title = '', readonly = false }) => {\n    const dataset = useLiPDStore((state: any) => state.dataset);\n    \n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [csvDialogOpen, setCsvDialogOpen] = React.useState(false);\n    const [csvContent, setCsvContent] = React.useState('');\n    \n    const { selectedNode, setSelectedNode } = useLiPDStore(state => ({\n        selectedNode: state.selectedNode,\n        setSelectedNode: state.setSelectedNode\n    }));\n\n    const table = getValueFromPath(dataset, path) as any;\n    const columns = table.getVariables() || [];\n    const dataList = table.getDataList() || { data: [], metadata: [] };\n\n    const rows = (dataList.data || []).length > 0 ? \n        (dataList.data[0] || []).map((_: any, colIndex: number) => \n            (dataList.data || []).map((row: any[]) => row[colIndex] || '')\n        ) : \n        [];\n\n    const metadata = dataList.metadata || [];\n    const variables = table.getVariables() || [];\n\n    const handleAddRow = () => {\n        // Create a new empty row with appropriate number of columns\n        const newRow = Array(columns.length).fill('');\n        \n        // Add the new row to the data\n        const updatedRows = [...rows, newRow];\n        \n        // Update the table with the new data\n        table.setDataList({ \n            data: updatedRows, \n            metadata: metadata \n        });\n        \n        onUpdate(path, table);\n    };\n\n    const handleDeleteRow = (rowIndex: number) => {\n        // Create a copy of the rows and remove the specified row\n        const updatedRows = [...rows];\n        updatedRows.splice(rowIndex, 1);\n        \n        // Update the table with the modified data\n        table.setDataList({ \n            data: updatedRows, \n            metadata: metadata \n        });\n        \n        onUpdate(path, table);\n    };\n\n    const handleAddVariable = () => {\n        const newVariable = new Variable();\n        const updatedVariables = [...variables, newVariable];\n        table.setVariables(updatedVariables);\n        onUpdate(path, table);\n        // Navigate to the new variable\n        const newIndex = variables.length;\n        setSelectedNode(`${selectedNode}.variables.${newIndex}`);\n    };\n\n    const handleEditVariable = (index: number) => {\n        setSelectedNode(`${selectedNode}.variables.${index}`);\n    };\n\n    const handleDeleteVariable = (index: number) => {\n        const updatedVariables = [...variables];\n        updatedVariables.splice(index, 1);\n        table.setVariables(updatedVariables);\n        onUpdate(path, table);\n    };\n\n    const handleImportCSV = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const csvText = e.target?.result as string;\n            const lines = csvText.split('\\n');\n            const headers = lines[0].split(',').map(header => header.trim());\n            \n            // Create variables for new columns if they don't exist\n            const existingVariables = table.getVariables() || [];\n            const existingVariableNames: string[] = existingVariables.map((v: Variable) => v.getName());\n            \n            headers.forEach((header: string) => {\n                if (!existingVariableNames.includes(header)) {\n                    const newVariable = new Variable();\n                    newVariable.setName(header);\n                    existingVariables.push(newVariable);\n                }\n            });\n            table.setVariables(existingVariables);\n            \n            // Parse the data as a list of lists\n            const newData: any[][] = [];\n            \n            for (let i = 1; i < lines.length; i++) {\n                if (!lines[i].trim()) continue;\n                const values = lines[i].split(',').map(value => value.trim());\n                newData.push(values);\n            }\n            let metadata = table.getDataList().metadata\n            table.setDataList({ data: newData, metadata: metadata });\n            onUpdate(path, table);\n        };\n        reader.readAsText(file);\n    };\n\n    const handleExportCSV = () => {\n        const headers = columns.map((column: Variable) => column.getName());\n        let csvContent = headers.join(',') + '\\n';\n        \n        // Convert rows to CSV\n        rows.forEach((rowData: any[]) => {\n            csvContent += rowData.join(',') + '\\n';\n        });\n        \n        setCsvContent(csvContent);\n        setCsvDialogOpen(true);\n    };\n\n    const gridColumns: GridColDef[] = [\n        ...columns.map((column: Variable, colIndex: number) => ({\n            field: colIndex.toString(),\n            headerName: column.getName(),\n            flex: 1,\n            minWidth: 150,\n            editable: !readonly\n        })),\n        ...(readonly ? [] : [{\n            field: 'actions',\n            headerName: 'Actions',\n            width: 120,\n            renderCell: (params) => (\n                <Box>\n                    <IconButton \n                        size=\"small\" \n                        edge=\"end\"\n                        aria-label=\"delete\"\n                        onClick={(e: React.MouseEvent) => {\n                            e.stopPropagation(); // Prevent the row click\n                            handleDeleteRow(params.row.rowIndex);\n                        }}\n                    >\n                        <DeleteIcon sx={{ fontSize: 16 }} />\n                    </IconButton>\n                </Box>\n            ),\n        }])\n    ];\n\n    // Create grid rows from the list data\n    const gridRows = rows.map((rowData: any[], rowIndex: number) => {\n        const row: any = { \n            id: rowIndex,\n            rowIndex: rowIndex // Store the actual row index for operations\n        };\n        \n        // Add each column value to the row\n        columns.forEach((column: Variable, colIndex: number) => {\n            row[colIndex.toString()] = rowData[colIndex] || '';\n        });\n        \n        return row;\n    });\n\n    return (\n        <Box sx={{ p: 0 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\">{title}</Typography>\n                {!readonly && <Box sx={{ display: 'flex', gap: 1 }}>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<FileUploadIcon />}\n                        size=\"small\"\n                        component=\"label\"\n                    >\n                        Import CSV\n                        <input\n                            type=\"file\"\n                            hidden\n                            accept=\".csv\"\n                            onChange={handleImportCSV}\n                        />\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<FileDownloadIcon />}\n                        size=\"small\"\n                        onClick={handleExportCSV}\n                    >\n                        Export CSV\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<AddIcon sx={{fontSize: 18}}/>}\n                        size=\"small\"\n                        onClick={handleAddRow}\n                    >\n                        Add Row\n                    </Button>\n                </Box>}\n            </Box>\n\n            <Grid container spacing={2} sx={{ mb: 2 }}>\n                <Grid item xs={12} sm={6}>\n                    <FormTextField\n                        key={`${path}.fileName`}\n                        label=\"File Name\"\n                        defaultValue={table.getFileName() || ''}\n                        onBlur={(value) => {\n                            table.setFileName(value);\n                            onUpdate(path, table);\n                        }}\n                        disabled={readonly}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormTextField\n                        key={`${path}.missingValue`}\n                        label=\"Missing Value\"\n                        defaultValue={table.getMissingValue() || ''}\n                        onBlur={(value) => {\n                            table.setMissingValue(value);\n                            onUpdate(path, table);\n                        }}\n                        disabled={readonly}\n                    />\n                </Grid>\n            </Grid>\n\n            <Box sx={{ height: 500, width: '100%', mb: 2 }}>\n                <DataGrid\n                    rows={gridRows}\n                    columns={gridColumns}\n                    initialState={{\n                        pagination: {\n                            paginationModel: {\n                                pageSize: rowsPerPage,\n                                page: page,\n                            },\n                        },\n                    }}\n                    pageSizeOptions={[5, 10, 25, 50]}\n                    onPaginationModelChange={(params) => {\n                        setPage(params.page);\n                        setRowsPerPage(params.pageSize);\n                    }}\n                    disableRowSelectionOnClick\n                />\n            </Box>\n\n            <ListView\n                title=\"Variables\"\n                schema={variableSchema}\n                items={variables}\n                onAdd={readonly ? undefined : handleAddVariable}\n                onEdit={handleEditVariable}\n                onDelete={readonly ? undefined : handleDeleteVariable}\n                addButtonText=\"Add Variable\"\n                pathPrefix={`${selectedNode}.variables`}\n                readonly={readonly}\n            />\n\n            <Dialog \n                open={csvDialogOpen} \n                onClose={() => setCsvDialogOpen(false)}\n                maxWidth=\"md\"\n                fullWidth\n            >\n                <DialogTitle>CSV Data for {table.getFileName() || 'data'}.csv</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        multiline\n                        fullWidth\n                        value={csvContent}\n                        variant=\"standard\"\n                        InputProps={{\n                            readOnly: true,\n                            style: { \n                                fontFamily: 'monospace',\n                                whiteSpace: 'pre',\n                                overflowX: 'auto'\n                            }\n                        }}\n                        margin=\"dense\"\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setCsvDialogOpen(false)}>Close</Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n};","import React, { useState } from 'react';\nimport { Box, List, ListItem, ListItemText, Divider, IconButton, Typography, Button, TextField } from '@mui/material';\nimport { EditIcon, DeleteIcon, AddIcon, CheckIcon } from './CustomIcons';\nimport { useLiPDStore } from '../store';\nimport { Schema, SchemaField } from '../schemas';\nimport { Fieldset } from './Fieldset';\nimport { formVariant } from '../utils/utils';\n\ninterface ListViewProps {\n    title: string;\n    items: Array<any>;\n    schema: Schema;\n    onAdd?: () => void;\n    onEdit: (index: number) => void;\n    onDelete?: (index: number) => void;\n    addButtonText: string;\n    pathPrefix?: string;\n    dense?: boolean;\n    useFieldset?: boolean;\n    fieldSchema?: SchemaField;\n    readonly?: boolean;\n}\n\nconst ListView: React.FC<ListViewProps> = ({ \n    title, \n    items, \n    schema,\n    onAdd, \n    onEdit, \n    onDelete, \n    addButtonText,\n    pathPrefix,\n    dense = true,\n    useFieldset = true,\n    fieldSchema = {} as SchemaField,\n    readonly = false\n}) => {\n    const setSelectedNode = useLiPDStore((state: any) => state.setSelectedNode);\n    const [editIndex, setEditIndex] = useState<number | null>(null);\n    const [editValue, setEditValue] = useState<string>('');\n    const [addingNew, setAddingNew] = useState<boolean>(false);\n    const [newItemValue, setNewItemValue] = useState<string>('');\n\n    // Determine if this is a list of simple values\n    const isSimpleList = !schema; // There is no schema associated with simple objects\n\n    const handleEdit = (index: number) => {\n        if (typeof items[index] !== 'object') {\n            setEditIndex(index);\n            setEditValue(String(items[index]));\n        } else if (pathPrefix) {\n            setSelectedNode(`${pathPrefix}.${index}`);\n            // onEdit(index);\n        } else {\n            // onEdit(index);\n        }\n    };\n\n    const handleSave = (index: number) => {\n        // Create a new array to avoid mutating the original\n        const updatedItems = [...items];\n        // Update the value at the specified index\n        updatedItems[index] = editValue;\n        \n        // For simple values, update directly without triggering navigation\n        if (typeof items[index] !== 'object' && pathPrefix) {\n            // If we have a path prefix, we can update the parent directly\n            const path = `${pathPrefix}.${index}`;\n            const updateDataset = useLiPDStore.getState().updateDataset;\n            updateDataset(path, editValue);\n        } else {\n            // Only call onEdit for complex objects\n            onEdit(index);\n        }\n        \n        // Reset edit state\n        setEditIndex(null);\n    };\n\n    const handleAddNew = () => {\n        if (isSimpleList) {\n            // For simple lists, show the add form instead of navigating\n            setAddingNew(true);\n            setNewItemValue('');\n        } else {\n            // For complex objects, use the default add behavior\n            onAdd?.();\n        }\n    };\n\n    const handleSaveNewItem = () => {\n        if (pathPrefix && newItemValue.trim() !== '') {\n            // Get current items\n            const updatedItems = [...items, newItemValue];\n            \n            // Update the dataset with the new array\n            const updateDataset = useLiPDStore.getState().updateDataset;\n            updateDataset(pathPrefix, updatedItems);\n            \n            // Reset add state\n            setAddingNew(false);\n            setNewItemValue('');\n        }\n    };\n\n    const handleDelete = (index: number, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent the ListItem click\n        onDelete?.(index);\n    };\n\n    const content = (\n        <>\n            <List dense={dense} sx={{ width: '100%', p: 0 }}>\n                {(items || []).map((item, index) => {\n                    // console.log(item);\n                    // console.log(schema);\n                    let primary = schema?.label?.primary ? schema.label.primary(item) : \"Item \" + (index + 1);\n                    let secondary = schema?.label?.secondary ? schema.label.secondary(item) : \"\"\n\n                    if (!primary) {\n                        primary = \"Unnamed\"\n                    }\n                    const isSimpleValue = typeof item !== 'object';\n                    if (isSimpleValue) {\n                        primary = String(item);\n                    }                    \n                    \n                    return (\n                    <React.Fragment key={index}>\n                        {index > 0 && <Divider />}\n                        <ListItem\n                            onClick={() => isSimpleValue ? null : handleEdit(index)}\n                            sx={{\n                                cursor: isSimpleValue ? 'default' : 'pointer',\n                                '&:hover': {\n                                    backgroundColor: 'action.hover',\n                                }\n                            }}\n                            secondaryAction={\n                                !readonly ? <Box sx={{ display: 'flex' }}>\n                                    {editIndex === index ? (\n                                        <IconButton\n                                            edge=\"end\"\n                                            aria-label=\"save\"\n                                            onClick={() => handleSave(index)}\n                                            size={dense ? \"small\" : \"medium\"}\n                                        >\n                                            <CheckIcon sx={{ fontSize: dense ? 16 : 24 }} />\n                                        </IconButton>\n                                    ) : isSimpleValue ? (\n                                        <IconButton\n                                            edge=\"end\"\n                                            aria-label=\"edit\"\n                                            onClick={() => handleEdit(index)}\n                                            size={dense ? \"small\" : \"medium\"}\n                                        >\n                                            <EditIcon sx={{ fontSize: dense ? 16 : 24 }} />\n                                        </IconButton>\n                                    ) : null}\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"delete\"\n                                        onClick={(e: React.MouseEvent) => handleDelete(index, e)}\n                                        size={dense ? \"small\" : \"medium\"}\n                                    >\n                                        <DeleteIcon sx={{ fontSize: dense ? 16 : 24 }} />\n                                    </IconButton>\n                                </Box> : null\n                            }\n                        >\n                            {editIndex === index ? (\n                                <TextField\n                                    value={editValue}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEditValue(e.target.value)}\n                                    variant={formVariant}\n                                    size=\"small\"\n                                    fullWidth\n                                    autoFocus\n                                    onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                                        if (e.key === 'Enter') {\n                                            handleSave(index);\n                                        } else if (e.key === 'Escape') {\n                                            setEditIndex(null);\n                                        }\n                                    }}\n                                />\n                            ) : (\n                                <ListItemText\n                                    primaryTypographyProps={{\n                                        fontSize: dense ? '0.9rem' : '1.2rem'\n                                    }}\n                                    secondaryTypographyProps={{\n                                        fontSize: dense ? '0.8rem' : '0.9rem'\n                                    }}\n                                    primary={primary}\n                                    secondary={secondary}\n                                />\n                            )}\n                        </ListItem>\n                    </React.Fragment>\n                    );\n                })}\n                \n                {/* Add new item input field */}\n                {!readonly && addingNew && (\n                    <ListItem>\n                        <TextField\n                            value={newItemValue}\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewItemValue(e.target.value)}\n                            variant={formVariant}\n                            size=\"small\"\n                            fullWidth\n                            autoFocus\n                            placeholder=\"Enter new item\"\n                            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                                if (e.key === 'Enter') {\n                                    handleSaveNewItem();\n                                } else if (e.key === 'Escape') {\n                                    setAddingNew(false);\n                                }\n                            }}\n                            InputProps={{\n                                endAdornment: (\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={handleSaveNewItem}\n                                    >\n                                        <CheckIcon fontSize=\"small\" />\n                                    </IconButton>\n                                )\n                            }}\n                        />\n                    </ListItem>\n                )}\n            </List>\n        </>\n    );\n\n    if (useFieldset) {\n        return (\n            <Fieldset dense={dense}>\n                <legend>\n                    {title}\n                    {!readonly && <Button\n                        onClick={handleAddNew}\n                        startIcon={<AddIcon />}\n                    >\n                        {addButtonText}\n                    </Button>}\n                </legend>\n                {content}\n            </Fieldset>\n        );\n    }\n\n    return content;\n};\n\nexport default ListView; ","import React from \"react\";\nimport { Box } from \"@mui/material\";\n\n\nexport const Fieldset = ({ children, dense = false }: { children: React.ReactNode, dense?: boolean }) => (\n    <Box \n        component=\"fieldset\" \n        sx={{ \n            border: '1px solid',\n            borderColor: 'divider',\n            borderRadius: 1,\n            px: dense ? 0 : 1,\n            mt: 1,\n            '& legend': {\n                color: 'text.secondary',\n                fontSize: '0.75rem',\n                fontWeight: 400,\n                ml:1,\n                '& .MuiButton-root': {\n                    fontSize: '0.75rem',\n                    borderRadius: 1,\n                    color: 'inherit',\n                    '&:hover': {\n                        bgcolor: 'action.hover'\n                    }\n                },\n                '& .MuiSvgIcon-root': {\n                    fontSize: '0.75rem'\n                }\n            }\n        }}\n    >\n        {children}\n    </Box>\n);","import { Schema, SchemaField } from \"../schemas\";\n\nexport const formVariant = \"standard\";\n\n// Helper function to get a value from the dataset using a path\nexport const getValueFromPath = (dataset: any, path: string): any => {\n    if (!path) return dataset;\n    \n    const parts = path.split('.');\n    parts.shift(); // Remove the first part, which is the dataset\n\n    let current: any = dataset;\n    \n    for (const part of parts) {\n        if (!current || current[part] === undefined) {\n            return null;\n        }\n        current = current[part];\n    }\n    \n    return current;\n};\n\n// Helper function to create a default item based on schema\nexport const createDefaultItem = (objectSchema: Schema | undefined, fieldSchema: SchemaField | undefined): any => {\n    if (objectSchema) {\n        const obj: any = new objectSchema.class();\n        Object.entries(objectSchema.fields || {}).forEach(([key, propSchema]) => {\n            obj[key] = createDefaultItem(propSchema.schema, propSchema);\n        });\n        return obj;\n    }\n    else if (fieldSchema) {\n        if (fieldSchema.type === 'object' && fieldSchema.schema) {\n            const obj: any = new fieldSchema.schema.class();\n            Object.entries(fieldSchema.schema.fields || {}).forEach(([key, propSchema]) => {\n                obj[key] = createDefaultItem(propSchema.schema, propSchema);\n            });\n            return obj;\n        }\n        return getDefaultValueForType(fieldSchema);            \n    }\n    else {\n        return {};\n    }\n};\n\n// Helper function to get default value based on type\nconst getDefaultValueForType = (schema: SchemaField): any => {\n    switch (schema.type) {\n        case 'string':\n            return '';\n        case 'number':\n            return 0;\n        case 'boolean':\n            return false;\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}; ","import React, { useRef, useState, useEffect } from 'react';\nimport { \n    TextField, Typography, Link, Box\n} from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport { formVariant } from '../utils/utils';\n\n// TextField component with proper hook usage\nexport const FormTextField = React.memo(({ \n    label, \n    defaultValue, \n    type, \n    multiline, \n    rows, \n    onBlur,\n    disabled = false\n}: { \n    label: string;\n    defaultValue: string | number;\n    type?: string;\n    multiline?: boolean;\n    rows?: number;\n    onBlur: (value: string) => void;\n    disabled?: boolean;\n}) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    // Use local state for immediate UI rendering\n    const [value, setValue] = useState(defaultValue?.toString() || '');\n    // Track the last value we sent to parent to prevent duplicate updates\n    const lastUpdateRef = useRef(defaultValue?.toString() || '');\n    \n    // Update local state when defaultValue prop changes (like during undo)\n    useEffect(() => {\n        setValue(defaultValue?.toString() || '');\n        // Also update our tracking ref when props change\n        lastUpdateRef.current = defaultValue?.toString() || '';\n    }, [defaultValue]);\n    \n    const handleUpdate = (newValue: string) => {\n        // Only notify parent if value has changed AND we haven't already sent this update\n        if (newValue !== defaultValue?.toString() && newValue !== lastUpdateRef.current) {\n            // Store the value we're about to send to prevent duplicates\n            lastUpdateRef.current = newValue;\n            onBlur(newValue);\n        }\n    };\n    \n    if (disabled) {\n        if (value === undefined || value === null || value.toString().trim() === '') return null;\n        return (\n            <Box sx={{ py: 0.5 }}>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                    {label}:\n                </Typography>\n                {typeof value === 'string' && value.match(/^https?:\\/\\//) ? (\n                    <Link href={value} target=\"_blank\" rel=\"noopener noreferrer\">{value}</Link>\n                ) : (\n                    <Typography component=\"span\">{value}</Typography>\n                )}\n            </Box>\n        );\n    }\n\n    return (\n        <FormControl variant={formVariant} sx={{ mt: 1,width: '100%' }}>\n            <TextField\n                inputRef={inputRef}\n                label={label}\n                value={value}\n                variant={formVariant}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)}\n                onBlur={() => {\n                    if (inputRef.current) {\n                        handleUpdate(inputRef.current.value);\n                    }\n                }}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && inputRef.current) {\n                        handleUpdate(inputRef.current.value);\n                        inputRef.current.blur();\n                    }\n                }}\n                fullWidth\n                size=\"small\"\n                margin=\"dense\"\n                type={type}\n                multiline={multiline}\n                rows={rows}\n                sx={{ width: '100%' }}\n            />\n        </FormControl>\n    );\n});","import React from 'react';\nimport { \n    Box, \n} from '@mui/material';\nimport { Schema, SchemaField } from '../schemas';\nimport ListView from './ListView';\nimport { useLiPDStore } from '../store';\nimport { getValueFromPath, createDefaultItem } from '../utils/utils';\nimport { EditorProps } from '../router';\n\n\nexport const DefaultListEditor: React.FC<EditorProps> = ({\n    dataset,\n    path,\n    title = '',\n    params = {},\n    onUpdate,\n    schema,\n    columns = 1,\n    dense = true,\n    fieldSchema = {} as SchemaField,\n    readonly = false\n}) => {\n    const setSelectedNode = useLiPDStore(state => state.setSelectedNode);\n    const list = getValueFromPath(dataset, path);\n\n    // console.log(\"Path:\", path);\n    // console.log(\"List:\", list);\n    // console.log(\"Schema:\", schema);\n\n    // Check if dataset exists\n    if (!dataset) return null;\n\n    // If in readonly mode and list is empty, render nothing to avoid space\n    if (readonly && (!list || list.length === 0)) {\n        return null;\n    }\n\n    const handleEditItem = (index: number) => {\n        // Set the selected node to the path of the item being edited\n        const itemPath = `${path}.${index}`;\n        \n        onUpdate(itemPath, list[index]);\n        setSelectedNode(itemPath);\n    };\n\n    const handleAddItem = () => {\n        // Create a new item with default values based on the schema\n        const newItem = createDefaultItem(schema, undefined);\n        \n        // Create a new array with the new item\n        const newList = [...list, newItem];\n        \n        // Update the dataset\n        onUpdate(path, newList);\n        \n        // Navigate to the new item's editor\n        const newIndex = newList.length - 1;\n        const newItemPath = `${path}.${newIndex}`;\n        setSelectedNode(newItemPath);\n    };\n\n    const handleDeleteItem = (index: number) => {        \n        // Create a new array without the deleted item\n        const newList = [...list];\n        newList.splice(index, 1);\n        \n        // Update the dataset\n        onUpdate(path, newList);\n    };\n\n    return (\n        <ListView\n            schema={schema as Schema}\n            title={title || fieldSchema.label || 'Items'}\n            items={list}\n            onAdd={readonly ? undefined : () => handleAddItem()}\n            onEdit={(index) => handleEditItem(index)}\n            onDelete={readonly ? undefined : (index) => handleDeleteItem(index)}\n            addButtonText=\"Add\"\n            pathPrefix={path}\n            dense={dense}\n            fieldSchema={fieldSchema}\n            readonly={readonly}\n        />\n    );\n};","import React from 'react';\nimport { \n    Grid, \n    Box, \n} from '@mui/material';\nimport { Schema, SchemaField } from '../schemas';\n\nimport { Location } from 'lipdjs';\nimport LocationEditor from './LocationEditor';\nimport { getValueFromPath } from '../utils/utils';\nimport { EditorProps } from '../router';\nimport { DefaultListEditor } from './DefaultListEditor';\nimport { DefaultEnumEditor } from './DefaultEnumEditor';\nimport { FormTextField } from './FormTextField';\nimport { Fieldset } from './Fieldset';\n\n\nexport const DefaultEditor: React.FC<EditorProps> = ({ \n    dataset, \n    path, \n    params, \n    onUpdate, \n    schema, \n    columns = 1, \n    dense = true, \n    title = '',\n    fieldSchema = {type: 'object'} as SchemaField,\n    useFieldset = false,\n    readonly = false\n}) => {\n    // console.log(\"Invoked Default Editor for path:\", path)\n\n    const renderField = () => {\n        const parts = path.split('.');\n        const fieldName = parts[parts.length - 1];\n\n        // Skip internal fields\n        if (fieldName.startsWith('_')) return null;\n        \n        // Get the value from the dataset using the current path\n        const value = getValueFromPath(dataset, path);\n        // console.log('renderField:', fieldName, path, value);\n\n        if (fieldSchema.type === 'enum') {\n            return (\n                <DefaultEnumEditor\n                    dataset={dataset}\n                    path={path}\n                    params={params}\n                    onUpdate={onUpdate}\n                    schema={schema}\n                    fieldSchema={fieldSchema}\n                    readonly={readonly}\n                />\n            )\n        }\n\n        if (fieldSchema.type === 'string' || fieldSchema.type === 'number') {\n            return (\n                <FormTextField \n                    key={path}\n                    label={fieldSchema.label || fieldName}\n                    defaultValue={value || ''}\n                    type={fieldSchema.type}\n                    multiline={fieldSchema.multiline}\n                    rows={fieldSchema.rows}\n                    onBlur={(newValue) => onUpdate(path, newValue)}\n                    disabled={readonly}\n                />\n            );\n        }\n\n        if (fieldSchema.type === 'object') {\n            // console.log('renderObject:', fieldName, path, value);\n            const content = (\n                <>\n                <Box sx={{p: dense? 0 : 1}}>\n                    {fieldName === 'location' && (\n                        <LocationEditor\n                            dataset={dataset}\n                            path={path}\n                            params={params}\n                            onUpdate={onUpdate}\n                            title={title}\n                            readonly={readonly}\n                        />\n                    )}                     \n                    {Object.entries(schema?.fields || {}).map(([fieldName, subSchema]) => {\n                        if (subSchema.hidden) return null;\n                        return (\n                            <DefaultEditor\n                                key={`${path}.${fieldName}`}\n                                dataset={dataset}\n                                path={`${path}.${fieldName}`}\n                                params={params}\n                                onUpdate={onUpdate}\n                                schema={subSchema.schema as Schema}\n                                columns={columns}\n                                dense={false}\n                                fieldSchema={subSchema as SchemaField}\n                                useFieldset={true}\n                                readonly={readonly}\n                            />\n                        )\n                    })}                   \n                </Box>\n                </>\n            );\n            \n            return useFieldset ? (\n                <Fieldset dense={dense}>\n                    <legend>{title || fieldSchema.label || fieldName}</legend>\n                    {content}\n                </Fieldset>\n            ) : content;\n        }\n\n        if (fieldSchema.type === 'array' && fieldSchema.items) {\n            return (\n                <DefaultListEditor\n                    dataset={dataset}\n                    fieldSchema={fieldSchema}\n                    schema={fieldSchema.items.schema as Schema}\n                    title={fieldSchema.label || fieldName}\n                    onUpdate={onUpdate}\n                    path={path}\n                    dense={true}\n                    readonly={readonly}\n                />\n            )\n        }\n        return null;\n    };\n\n    // Call appropriate editor based on type\n    return renderField();\n};","import React, { useEffect, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getValueFromPath } from '../utils/utils';\nimport { EditorProps } from '../router';\n\n// Get token from environment variables\nconst MAPBOX_TOKEN = process.env.MAPBOX_TOKEN || 'pk.eyJ1IjoidmFydW5yYXRuYWthciIsImEiOiJjamZ3MnZjNjEwNnBzMnhvOHBpdHB5NGtpIn0.Qm9PUDyLZe6rpB3P0YBUWw';\n\n\nconst LocationEditor: React.FC<EditorProps> = ({ dataset, path, params, onUpdate, title = '', readonly = false }) => {\n    const location = getValueFromPath(dataset, path);\n    // Track location coordinates to detect changes\n    const [coordinates, setCoordinates] = useState({\n        lat: parseFloat(location.latitude || '0') || 0,\n        lng: parseFloat(location.longitude || '0') || 0\n    });\n    \n    const mapContainer = useRef<HTMLDivElement>(null);\n    const map = useRef<mapboxgl.Map | null>(null);\n    const marker = useRef<mapboxgl.Marker | null>(null);\n\n    // Initialize map and marker\n    useEffect(() => {\n        if (!mapContainer.current || map.current) return;\n\n        mapboxgl.accessToken = MAPBOX_TOKEN;\n        \n        const initialLat = parseFloat(location.latitude || '0') || 0;\n        const initialLng = parseFloat(location.longitude || '0') || 0;\n\n        map.current = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: 'mapbox://styles/mapbox/satellite-v9', // Satellite view with terrain\n            center: [initialLng, initialLat],\n            zoom: 8,\n        });\n\n        // Add terrain and sky layers for better visualization\n        map.current.on('load', () => {\n            map.current?.addSource('mapbox-dem', {\n                'type': 'raster-dem',\n                'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n                'tileSize': 512,\n                'maxzoom': 14\n            });\n\n            map.current?.addLayer({\n                'id': 'sky',\n                'type': 'sky',\n                'paint': {\n                    'sky-type': 'atmosphere',\n                    'sky-atmosphere-sun': [0.0, 90.0],\n                    'sky-atmosphere-sun-intensity': 15\n                }\n            });\n        });\n\n        // Add marker\n        marker.current = new mapboxgl.Marker({\n            draggable: !readonly,\n            color: '#FF0000'\n        })\n            .setLngLat([initialLng, initialLat])\n            .addTo(map.current);\n\n        // Handle marker drag\n        if (!readonly) {\n            marker.current.on('dragend', () => {\n                const position = marker.current?.getLngLat();\n                if (position) {\n                    location.latitude = position.lat.toFixed(6);\n                    location.longitude = position.lng.toFixed(6);\n                    \n                    // Update coordinates state to track changes\n                    setCoordinates({\n                        lat: position.lat,\n                        lng: position.lng\n                    });\n                    \n                    onUpdate(path, location);\n                }\n            });\n        }\n\n        // Cleanup\n        return () => {\n            map.current?.remove();\n            map.current = null;\n        };\n    }, []);\n\n    // Monitor location changes from outside the component\n    useEffect(() => {\n        const currentLat = parseFloat(location.latitude || '0') || 0;\n        const currentLng = parseFloat(location.longitude || '0') || 0;\n        \n        // Only update if coordinates have changed from what we already know\n        if (currentLat !== coordinates.lat || currentLng !== coordinates.lng) {\n            setCoordinates({\n                lat: currentLat,\n                lng: currentLng\n            });\n            \n            // Update the map marker and view if map is initialized\n            if (marker.current && map.current) {\n                marker.current.setLngLat([currentLng, currentLat]);\n                map.current.flyTo({\n                    center: [currentLng, currentLat],\n                    zoom: 8,\n                    duration: 1000\n                });\n            }\n        }\n    }, [location.latitude, location.longitude]);\n\n    return (\n        <Box\n            ref={mapContainer}\n            sx={{\n                mt: 1,\n                height: 400,\n                borderRadius: 1,\n                overflow: 'hidden'\n            }}\n        />\n    );\n};\n\nexport default LocationEditor; ","import React from 'react';\nimport {  \n    Box, \n    MenuItem,\n    Typography\n} from '@mui/material';\n\nimport { SynonymEntry } from 'lipdjs';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport { EditorProps } from '../router';\nimport { getValueFromPath, formVariant } from '../utils/utils';\nimport { useLiPDStore } from '../store';\n\nexport const DefaultEnumEditor: React.FC<EditorProps> = ({\n    path,\n    params,\n    onUpdate,\n    schema,\n    fieldSchema,\n    title = '',\n    readonly = false\n}) => {\n    const dataset = useLiPDStore((state: any) => state.dataset);\n    const value = getValueFromPath(dataset, path);\n    const enumValue = value as SynonymEntry;\n    if (!fieldSchema) {\n        return null;\n    }\n            \n    // Extract the value regardless of format\n    let displayValue = '';\n    let idValue = '';\n    if (enumValue) {\n        displayValue = enumValue.label;\n        idValue = enumValue.id;\n    }\n\n    if (readonly) {\n        if (!displayValue) return null;\n        return (\n            <Box sx={{ py:0.5 }}>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                    {fieldSchema.label}:\n                </Typography>\n                <Typography component=\"span\">{displayValue}</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <FormControl variant={formVariant} sx={{ mt: 2, width: '100%' }}>\n            <InputLabel>{fieldSchema.label}</InputLabel>\n            <Select\n                label={fieldSchema.label}\n                value={idValue}\n                size=\"small\"\n                margin=\"dense\"\n                variant={formVariant}\n                onChange={(event: SelectChangeEvent<string>) => {\n                    let newValue = event.target.value;\n                    const enumOption = fieldSchema.schema?.enum?.[newValue];\n                    if (enumOption) {\n                        const cls = fieldSchema.schema?.class;\n                        if (cls) {\n                            newValue = new cls(enumOption.id, enumOption.label);\n                            onUpdate(path, newValue);\n                        }\n                    }\n                }}\n            >\n                {Object.values(fieldSchema.schema?.enum || {}).map((option: SynonymEntry) => (\n                    <MenuItem key={option.id} value={option.id}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};","import React from 'react';\nimport { Dataset } from 'lipdjs';\nimport { useLiPDStore } from '../store';\nimport TreeItem from './TreeItem';\n\ninterface ChronDataTreeProps {\n    dataset: Dataset;\n}\n\nconst ChronDataTree: React.FC<ChronDataTreeProps> = ({ dataset }) => {\n    const { expandedNodes } = useLiPDStore(state => ({\n        expandedNodes: state.expandedNodes\n    }));\n\n    return (\n        <>\n            <TreeItem\n                node={dataset}\n                label=\"ChronData\"\n                nodeId=\"chronData\"\n                hasChildren={true}\n            />\n            {expandedNodes.has('chronData') && dataset.getChronData()?.map((chronData, chronIndex) => {\n                const chronNodeId = `chronData.${chronIndex}`;\n                const hasChildren = chronData.getMeasurementTables() && chronData.getMeasurementTables().length > 0;\n\n                return (\n                    <React.Fragment key={chronNodeId}>\n                        <TreeItem\n                            node={chronData}\n                            label={`ChronData ${chronIndex + 1}`}\n                            nodeId={chronNodeId}\n                            hasChildren={hasChildren}\n                            level={1}\n                        />\n                        {expandedNodes.has(chronNodeId) && hasChildren && chronData.getMeasurementTables()?.map((table, tableIndex) => {\n                            const tableNodeId = `chronData.${chronIndex}.measurementTables.${tableIndex}`;\n                            return (\n                                <React.Fragment key={tableNodeId}>\n                                    <TreeItem\n                                        node={table}\n                                        label={table.getFileName() || `Table ${tableIndex + 1}`}\n                                        nodeId={tableNodeId}\n                                        hasChildren={false}\n                                        level={2}\n                                    />\n                                </React.Fragment>\n                            );\n                        })}\n                    </React.Fragment>\n                );\n            })}\n        </>\n    );\n};\n\nexport default ChronDataTree; ","import React from 'react';\nimport { ListItem, ListItemText, ListItemIcon } from '@mui/material';\nimport {\n    ExpandMoreIcon,\n    ChevronRightIcon,\n    FolderIcon,\n    DescriptionIcon,\n    ArticleIcon,\n    TableChartIcon,\n    TableRowsIcon\n} from './CustomIcons';\nimport { useLiPDStore } from '../store';\nimport { AppState } from '../types';\n\ninterface TreeItemProps {\n    node: any;\n    label: string;\n    nodeId: string;\n    hasChildren: boolean;\n    level?: number;\n}\n\nconst TreeItem: React.FC<TreeItemProps> = ({ \n    node, \n    label, \n    nodeId, \n    hasChildren, \n    level = 0 \n}) => {\n    const { expandedNodes, selectedNode, setSelectedNode, toggleExpandNode } = useLiPDStore((state: AppState) => ({\n        expandedNodes: state.expandedNodes,\n        selectedNode: state.selectedNode,\n        setSelectedNode: state.setSelectedNode,\n        toggleExpandNode: state.toggleExpandNode\n    }));\n\n    const isExpanded = expandedNodes.has(nodeId);\n    const isSelected = selectedNode === nodeId;\n\n    const handleClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        // console.log('TreeItem clicked:', nodeId);\n        setSelectedNode(nodeId);\n    };\n\n    const handleToggle = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        toggleExpandNode(nodeId);\n    };\n\n    const getIcon = () => {\n        const parts = nodeId.split('.');\n\n        if (parts[0] === 'dataset') {\n            return <DescriptionIcon />;\n        }\n\n        if (parts[0] === 'paleoData') {\n            if (parts.length >= 3 && parts[2] === 'measurementTables') {\n                return <TableChartIcon />;\n            }\n            return <FolderIcon />;\n        }\n\n        if (parts[0] === 'publications') {\n            return <ArticleIcon />;\n        }\n\n        if (parts[0] === 'chronData') {\n            return <TableRowsIcon />;\n        }\n\n        return <DescriptionIcon />;\n    };\n\n    // Convert label to string, handling object cases\n    const safeLabel = typeof label === 'object' && label !== null ? \n        JSON.stringify(label) : \n        String(label || '');\n\n    return (\n        <ListItem\n            button\n            onClick={handleClick}\n            selected={isSelected}\n            sx={{\n                pl: level * 2 + 1,\n                borderLeft: isSelected ? '2px solid' : 'none',\n                borderColor: 'primary.main',\n                bgcolor: isSelected ? 'action.selected' : 'inherit'\n            }}\n        >\n            {hasChildren && (\n                <ListItemIcon onClick={handleToggle} sx={{ minWidth: 24 }}>\n                    {isExpanded ? <ExpandMoreIcon /> : <ChevronRightIcon />}\n                </ListItemIcon>\n            )}\n            {!hasChildren && (\n                <ListItemIcon sx={{ minWidth: 24 }}>\n                    {getIcon()}\n                </ListItemIcon>\n            )}\n            <ListItemText primary={safeLabel} />\n        </ListItem>\n    );\n};\n\nexport default TreeItem; ","import React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ninterface ConfirmDialogProps {\n  open: boolean;\n  title: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n  open,\n  title,\n  message,\n  onConfirm,\n  onCancel\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onCancel}\n      aria-labelledby=\"confirm-dialog-title\"\n      aria-describedby=\"confirm-dialog-description\"\n    >\n      <DialogTitle id=\"confirm-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"confirm-dialog-description\">\n          {message}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={onConfirm} color=\"primary\" variant=\"contained\" autoFocus>\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ConfirmDialog; ","import React from 'react';\nimport { Router } from '../router';\nimport { Box } from '@mui/material';\n\n\nexport const EditorPanel: React.FC = () => {\n  return (\n    <Box sx={{ px: 2, py: 1 }}>\n      <Router />\n    </Box>\n  );\n};","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\nimport { TreeItem } from '@mui/x-tree-view/TreeItem';\nimport { Dataset } from 'lipdjs';\nimport { useLiPDStore } from '../store';\n\nexport const NavigationPanel: React.FC = () => {\n    const { dataset, expandedNodes, setExpandedNodes, setSelectedNode } = useLiPDStore((state: any) => ({\n        dataset: state.dataset,\n        expandedNodes: state.expandedNodes,\n        setExpandedNodes: state.setExpandedNodes,\n        setSelectedNode: state.setSelectedNode\n    }));\n    \n    if (!dataset) {\n        return (\n            <Box sx={{ p: 2, textAlign: 'center' }}>\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    let workingDataset = dataset;\n    if (!(workingDataset instanceof Dataset)) {\n        workingDataset = Dataset.fromDictionary(workingDataset);\n    }\n\n    const handleNodeToggle = (event: React.SyntheticEvent, nodeIds: string[]) => {\n        setExpandedNodes(new Set(nodeIds));\n    };\n\n    const handleNodeSelect = (\n        event: React.SyntheticEvent<Element, Event>,\n        itemIds: string | string[]\n    ) => {\n        if (Array.isArray(itemIds)) {\n            setSelectedNode(itemIds[0] || '');\n        } else {\n            setSelectedNode(itemIds);\n        }\n    };\n\n    const renderPaleoDataTree = () => {\n        return (\n            <TreeItem itemId=\"dataset.paleoData\" label=\"PaleoData\">\n                {workingDataset.getPaleoData()?.map((paleoData, paleoIndex) => {\n                    const paleoNodeId = `dataset.paleoData.${paleoIndex}`;\n                    return (\n                        <TreeItem key={paleoNodeId} itemId={paleoNodeId} label={paleoData.getName() || `PaleoData ${paleoIndex + 1}`}>\n                            {paleoData.getMeasurementTables()?.map((table, tableIndex) => {\n                                const tableNodeId = `dataset.paleoData.${paleoIndex}.measurementTables.${tableIndex}`;\n                                return (\n                                    <TreeItem \n                                        key={tableNodeId} \n                                        itemId={tableNodeId} \n                                        label={table.getFileName() || `Table ${tableIndex + 1}`}\n                                    />\n                                );\n                            })}\n                        </TreeItem>\n                    );\n                })}\n            </TreeItem>\n        );\n    };\n\n    const renderChronDataTree = () => {\n        return (\n            <TreeItem itemId=\"dataset.chronData\" label=\"ChronData\">\n                {workingDataset.getChronData()?.map((chronData, chronIndex) => {\n                    const chronNodeId = `dataset.chronData.${chronIndex}`;\n                    return (\n                        <TreeItem key={chronNodeId} itemId={chronNodeId} label={`ChronData ${chronIndex + 1}`}>\n                            {chronData.getMeasurementTables()?.map((table, tableIndex) => {\n                                const tableNodeId = `dataset.chronData.${chronIndex}.measurementTables.${tableIndex}`;\n                                return (\n                                    <TreeItem \n                                        key={tableNodeId} \n                                        itemId={tableNodeId} \n                                        label={table.getFileName() || `Table ${tableIndex + 1}`}\n                                    />\n                                );\n                            })}\n                        </TreeItem>\n                    );\n                })}\n            </TreeItem>\n        );\n    };\n\n    const renderPublicationsTree = () => {\n        return (\n            <TreeItem itemId=\"dataset.publications\" label=\"Publications\">\n                {workingDataset.getPublications()?.map((publication, index) => {\n                    const pubNodeId = `dataset.publications.${index}`;\n                    return (\n                        <TreeItem \n                            key={pubNodeId} \n                            itemId={pubNodeId} \n                            label={publication.getTitle() || `Publication ${index + 1}`}\n                        />\n                    );\n                })}\n            </TreeItem>\n        );\n    };\n\n    return (\n        <Box sx={{ p: 2 }}>\n            <SimpleTreeView\n                aria-label=\"dataset navigation\"\n                expandedItems={Array.from(expandedNodes)}\n                onExpandedItemsChange={handleNodeToggle}\n                onSelectedItemsChange={handleNodeSelect}\n                sx={{ height: '100%', flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n            >\n                <TreeItem itemId=\"dataset\" label=\"Dataset\">\n                    <TreeItem\n                        itemId=\"dataset.location\"\n                        label=\"Location\"\n                    />\n                    {renderPaleoDataTree()}\n                    {renderChronDataTree()}\n                    {renderPublicationsTree()}\n                    <TreeItem\n                        itemId=\"dataset.changeLogs\"\n                        label=\"ChangeLogs\"\n                    />\n                </TreeItem>\n            </SimpleTreeView>\n        </Box>\n    );\n}; ","import React from 'react';\nimport { Dataset } from 'lipdjs';\nimport { useLiPDStore } from '../store';\nimport TreeItem from './TreeItem';\n\ninterface PaleoDataTreeProps {\n    dataset: Dataset;\n}\n\nconst PaleoDataTree: React.FC<PaleoDataTreeProps> = ({ dataset }) => {\n    const { expandedNodes } = useLiPDStore(state => ({\n        expandedNodes: state.expandedNodes\n    }));\n\n    return (\n        <>\n            <TreeItem\n                node={dataset}\n                label=\"PaleoData\"\n                nodeId=\"paleoData\"\n                hasChildren={true}\n            />\n            {expandedNodes.has('paleoData') && dataset.getPaleoData()?.map((paleoData, paleoIndex) => {\n                const paleoNodeId = `paleoData.${paleoIndex}`;\n                const hasChildren = paleoData.getMeasurementTables() && paleoData.getMeasurementTables().length > 0;\n\n                return (\n                    <React.Fragment key={paleoNodeId}>\n                        <TreeItem\n                            node={paleoData}\n                            label={paleoData.getName() || `PaleoData ${paleoIndex + 1}`}\n                            nodeId={paleoNodeId}\n                            hasChildren={hasChildren}\n                            level={1}\n                        />\n                        {expandedNodes.has(paleoNodeId) && hasChildren && paleoData.getMeasurementTables()?.map((table, tableIndex) => {\n                            const tableNodeId = `paleoData.${paleoIndex}.measurementTables.${tableIndex}`;\n                            return (\n                                <React.Fragment key={tableNodeId}>\n                                    <TreeItem\n                                        node={table}\n                                        label={table.getFileName() || `Table ${tableIndex + 1}`}\n                                        nodeId={tableNodeId}\n                                        hasChildren={false}\n                                        level={2}\n                                    />\n                                </React.Fragment>\n                            );\n                        })}\n                    </React.Fragment>\n                );\n            })}\n        </>\n    );\n};\n\nexport default PaleoDataTree; ","import React from 'react';\nimport { Dataset } from 'lipdjs';\nimport { useLiPDStore } from '../store';\nimport TreeItem from './TreeItem';\n\ninterface PublicationsTreeProps {\n    dataset: Dataset;\n}\n\nconst PublicationsTree: React.FC<PublicationsTreeProps> = ({ dataset }) => {\n    const { expandedNodes } = useLiPDStore(state => ({\n        expandedNodes: state.expandedNodes\n    }));\n\n    return (\n        <>\n            <TreeItem\n                node={dataset}\n                label=\"Publications\"\n                nodeId=\"publications\"\n                hasChildren={false}\n            />\n            {expandedNodes.has('publications') && dataset.getPublications()?.map((publication, index) => {\n                const pubNodeId = `publications.${index}`;\n                return (\n                    <TreeItem\n                        key={pubNodeId}\n                        node={publication}\n                        label={publication.getTitle() || `Publication ${index + 1}`}\n                        nodeId={pubNodeId}\n                        hasChildren={false}\n                        level={1}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default PublicationsTree; ","import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useLiPDStore } from '../store';\n\n/**\n * Component that displays a progress bar when syncing to GraphDB\n */\nconst SyncProgressBar: React.FC = () => {\n  const { isSyncing, syncProgress } = useLiPDStore(state => ({\n    isSyncing: state.isSyncing,\n    syncProgress: state.syncProgress || 0\n  }));\n\n  if (!isSyncing) {\n    return null;\n  }\n\n  return (\n    <Box \n      sx={{ \n        position: 'fixed', \n        top: 0, \n        left: 0, \n        right: 0, \n        zIndex: 9999,\n        bgcolor: 'rgba(0, 0, 0, 0.7)',\n        color: 'white',\n        padding: 2,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      }}\n    >\n      <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n        Syncing to GraphDB...\n      </Typography>\n      <LinearProgress \n        variant=\"determinate\" \n        value={syncProgress} \n        sx={{ \n          width: '80%', \n          height: 10,\n          borderRadius: 5,\n          '& .MuiLinearProgress-bar': {\n            backgroundColor: 'primary.main'\n          }\n        }} \n      />\n      <Typography variant=\"caption\" sx={{ mt: 1 }}>\n        {syncProgress}% Complete\n      </Typography>\n    </Box>\n  );\n};\n\nexport default SyncProgressBar; ","import React from 'react';\nimport { Box, Divider } from '@mui/material';\nimport { NavigationPanel } from './NavigationPanel';\nimport { Router } from '../router';\nimport AppBarBreadcrumbs from './AppBarBreadcrumbs';\nimport ConfirmDialog from './ConfirmDialog';\nimport { useLiPDStore } from '../store';\n\nexport const LiPDApp: React.FC = () => {\n  const { \n    syncConfirmDialogOpen, \n    setSyncConfirmDialogOpen, \n    confirmSync \n  } = useLiPDStore(state => ({\n    syncConfirmDialogOpen: state.syncConfirmDialogOpen,\n    setSyncConfirmDialogOpen: state.setSyncConfirmDialogOpen,\n    confirmSync: state.confirmSync\n  }));\n\n  const handleSyncConfirm = () => {\n    confirmSync();\n  };\n\n  const handleSyncCancel = () => {\n    setSyncConfirmDialogOpen(false);\n  };\n\n  return (\n    <div>\n        <Box sx={{ px: 2, py: 1 }}>\n            <AppBarBreadcrumbs />\n        </Box>\n        <Divider />    \n        <Box sx={{ display: 'flex', height: '100%' }}>\n        {/* Left panel - Navigation */}\n        <Box sx={{ \n            width: 300, \n            flexShrink: 0, \n            borderRight: 1, \n            borderColor: 'divider',\n            overflow: 'auto'\n        }}>\n            <NavigationPanel />\n        </Box>\n        \n        {/* Right panel - Content */}\n        <Box sx={{ \n            flex: 1, \n            overflow: 'auto',\n            p: 2\n        }}>\n            <Router />\n        </Box>\n        </Box>\n\n        {/* Sync Confirmation Dialog */}\n        <ConfirmDialog\n          open={syncConfirmDialogOpen}\n          title=\"Sync to GraphDB\"\n          message=\"Are you sure you want to sync this dataset to GraphDB? This action will update the remote database and requires authentication credentials.\"\n          onConfirm={handleSyncConfirm}\n          onCancel={handleSyncCancel}\n        />\n    </div>\n  );\n}; "]}