import {
  init_src,
  require_browser,
  require_browser2,
  require_buffer,
  require_events,
  src_exports
} from "./chunk-5GAGZRWA.js";
import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __toCommonJS
} from "./chunk-OL46QLBJ.js";

// ../../lipdjs/node_modules/immutable/dist/immutable.es.js
var immutable_es_exports = {};
__export(immutable_es_exports, {
  Collection: () => Collection,
  Iterable: () => Iterable,
  List: () => List,
  Map: () => Map2,
  OrderedMap: () => OrderedMap,
  OrderedSet: () => OrderedSet,
  PairSorting: () => PairSorting,
  Range: () => Range,
  Record: () => Record,
  Repeat: () => Repeat,
  Seq: () => Seq,
  Set: () => Set2,
  Stack: () => Stack,
  default: () => immutable_es_default,
  fromJS: () => fromJS,
  get: () => get,
  getIn: () => getIn$1,
  has: () => has,
  hasIn: () => hasIn$1,
  hash: () => hash,
  is: () => is,
  isAssociative: () => isAssociative,
  isCollection: () => isCollection,
  isImmutable: () => isImmutable,
  isIndexed: () => isIndexed,
  isKeyed: () => isKeyed,
  isList: () => isList,
  isMap: () => isMap,
  isOrdered: () => isOrdered,
  isOrderedMap: () => isOrderedMap,
  isOrderedSet: () => isOrderedSet,
  isPlainObject: () => isPlainObject,
  isRecord: () => isRecord,
  isSeq: () => isSeq,
  isSet: () => isSet,
  isStack: () => isStack,
  isValueObject: () => isValueObject,
  merge: () => merge,
  mergeDeep: () => mergeDeep$1,
  mergeDeepWith: () => mergeDeepWith$1,
  mergeWith: () => mergeWith,
  remove: () => remove,
  removeIn: () => removeIn,
  set: () => set,
  setIn: () => setIn$1,
  update: () => update$1,
  updateIn: () => updateIn$1,
  version: () => version
});
function MakeRef() {
  return { value: false };
}
function SetRef(ref) {
  if (ref) {
    ref.value = true;
  }
}
function OwnerID() {
}
function ensureSize(iter) {
  if (iter.size === void 0) {
    iter.size = iter.__iterate(returnTrue);
  }
  return iter.size;
}
function wrapIndex(iter, index) {
  if (typeof index !== "number") {
    var uint32Index = index >>> 0;
    if ("" + uint32Index !== index || uint32Index === 4294967295) {
      return NaN;
    }
    index = uint32Index;
  }
  return index < 0 ? ensureSize(iter) + index : index;
}
function returnTrue() {
  return true;
}
function wholeSlice(begin, end, size) {
  return (begin === 0 && !isNeg(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
}
function resolveBegin(begin, size) {
  return resolveIndex(begin, size, 0);
}
function resolveEnd(end, size) {
  return resolveIndex(end, size, size);
}
function resolveIndex(index, size, defaultIndex) {
  return index === void 0 ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
}
function isNeg(value) {
  return value < 0 || value === 0 && 1 / value === -Infinity;
}
function isCollection(maybeCollection) {
  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
}
function isKeyed(maybeKeyed) {
  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
}
function isIndexed(maybeIndexed) {
  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
}
function isAssociative(maybeAssociative) {
  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
}
function isSeq(maybeSeq) {
  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
}
function isRecord(maybeRecord) {
  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
}
function isImmutable(maybeImmutable) {
  return isCollection(maybeImmutable) || isRecord(maybeImmutable);
}
function isOrdered(maybeOrdered) {
  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
}
function iteratorValue(type, k, v, iteratorResult) {
  var value = type === 0 ? k : type === 1 ? v : [k, v];
  iteratorResult ? iteratorResult.value = value : iteratorResult = {
    value,
    done: false
  };
  return iteratorResult;
}
function iteratorDone() {
  return { value: void 0, done: true };
}
function hasIterator(maybeIterable) {
  if (Array.isArray(maybeIterable)) {
    return true;
  }
  return !!getIteratorFn(maybeIterable);
}
function isIterator(maybeIterator) {
  return maybeIterator && typeof maybeIterator.next === "function";
}
function getIterator(iterable) {
  var iteratorFn = getIteratorFn(iterable);
  return iteratorFn && iteratorFn.call(iterable);
}
function getIteratorFn(iterable) {
  var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === "function") {
    return iteratorFn;
  }
}
function isEntriesIterable(maybeIterable) {
  var iteratorFn = getIteratorFn(maybeIterable);
  return iteratorFn && iteratorFn === maybeIterable.entries;
}
function isKeysIterable(maybeIterable) {
  var iteratorFn = getIteratorFn(maybeIterable);
  return iteratorFn && iteratorFn === maybeIterable.keys;
}
function isArrayLike(value) {
  if (Array.isArray(value) || typeof value === "string") {
    return true;
  }
  return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
    // Only {length: 0} is considered Array-like.
    Object.keys(value).length === 1
  ) : (
    // An object is only Array-like if it has a property where the last value
    // in the array-like may be found (which could be undefined).
    value.hasOwnProperty(value.length - 1)
  ));
}
function emptySequence() {
  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
}
function keyedSeqFromValue(value) {
  var seq = maybeIndexedSeqFromValue(value);
  if (seq) {
    return seq.fromEntrySeq();
  }
  if (typeof value === "object") {
    return new ObjectSeq(value);
  }
  throw new TypeError(
    "Expected Array or collection object of [k, v] entries, or keyed object: " + value
  );
}
function indexedSeqFromValue(value) {
  var seq = maybeIndexedSeqFromValue(value);
  if (seq) {
    return seq;
  }
  throw new TypeError(
    "Expected Array or collection object of values: " + value
  );
}
function seqFromValue(value) {
  var seq = maybeIndexedSeqFromValue(value);
  if (seq) {
    return isEntriesIterable(value) ? seq.fromEntrySeq() : isKeysIterable(value) ? seq.toSetSeq() : seq;
  }
  if (typeof value === "object") {
    return new ObjectSeq(value);
  }
  throw new TypeError(
    "Expected Array or collection object of values, or keyed object: " + value
  );
}
function maybeIndexedSeqFromValue(value) {
  return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
}
function isMap(maybeMap) {
  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
}
function isOrderedMap(maybeOrderedMap) {
  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
}
function isValueObject(maybeValue) {
  return Boolean(
    maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
  );
}
function is(valueA, valueB) {
  if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
    return true;
  }
  if (!valueA || !valueB) {
    return false;
  }
  if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
    valueA = valueA.valueOf();
    valueB = valueB.valueOf();
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
  }
  return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
}
function smi(i32) {
  return i32 >>> 1 & 1073741824 | i32 & 3221225471;
}
function hash(o) {
  if (o == null) {
    return hashNullish(o);
  }
  if (typeof o.hashCode === "function") {
    return smi(o.hashCode(o));
  }
  var v = valueOf(o);
  if (v == null) {
    return hashNullish(v);
  }
  switch (typeof v) {
    case "boolean":
      return v ? 1108378657 : 1108378656;
    case "number":
      return hashNumber(v);
    case "string":
      return v.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v) : hashString(v);
    case "object":
    case "function":
      return hashJSObj(v);
    case "symbol":
      return hashSymbol(v);
    default:
      if (typeof v.toString === "function") {
        return hashString(v.toString());
      }
      throw new Error("Value type " + typeof v + " cannot be hashed.");
  }
}
function hashNullish(nullish) {
  return nullish === null ? 1108378658 : (
    /* undefined */
    1108378659
  );
}
function hashNumber(n) {
  if (n !== n || n === Infinity) {
    return 0;
  }
  var hash2 = n | 0;
  if (hash2 !== n) {
    hash2 ^= n * 4294967295;
  }
  while (n > 4294967295) {
    n /= 4294967295;
    hash2 ^= n;
  }
  return smi(hash2);
}
function cachedHashString(string) {
  var hashed = stringHashCache[string];
  if (hashed === void 0) {
    hashed = hashString(string);
    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
      STRING_HASH_CACHE_SIZE = 0;
      stringHashCache = {};
    }
    STRING_HASH_CACHE_SIZE++;
    stringHashCache[string] = hashed;
  }
  return hashed;
}
function hashString(string) {
  var hashed = 0;
  for (var ii = 0; ii < string.length; ii++) {
    hashed = 31 * hashed + string.charCodeAt(ii) | 0;
  }
  return smi(hashed);
}
function hashSymbol(sym) {
  var hashed = symbolMap[sym];
  if (hashed !== void 0) {
    return hashed;
  }
  hashed = nextHash();
  symbolMap[sym] = hashed;
  return hashed;
}
function hashJSObj(obj) {
  var hashed;
  if (usingWeakMap) {
    hashed = weakMap.get(obj);
    if (hashed !== void 0) {
      return hashed;
    }
  }
  hashed = obj[UID_HASH_KEY];
  if (hashed !== void 0) {
    return hashed;
  }
  if (!canDefineProperty) {
    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
    if (hashed !== void 0) {
      return hashed;
    }
    hashed = getIENodeHash(obj);
    if (hashed !== void 0) {
      return hashed;
    }
  }
  hashed = nextHash();
  if (usingWeakMap) {
    weakMap.set(obj, hashed);
  } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
    throw new Error("Non-extensible objects are not allowed as keys.");
  } else if (canDefineProperty) {
    Object.defineProperty(obj, UID_HASH_KEY, {
      enumerable: false,
      configurable: false,
      writable: false,
      value: hashed
    });
  } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
    obj.propertyIsEnumerable = function() {
      return this.constructor.prototype.propertyIsEnumerable.apply(
        this,
        arguments
      );
    };
    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
  } else if (obj.nodeType !== void 0) {
    obj[UID_HASH_KEY] = hashed;
  } else {
    throw new Error("Unable to set a non-enumerable property on object.");
  }
  return hashed;
}
function getIENodeHash(node) {
  if (node && node.nodeType > 0) {
    switch (node.nodeType) {
      case 1:
        return node.uniqueID;
      case 9:
        return node.documentElement && node.documentElement.uniqueID;
    }
  }
}
function valueOf(obj) {
  return obj.valueOf !== defaultValueOf && typeof obj.valueOf === "function" ? obj.valueOf(obj) : obj;
}
function nextHash() {
  var nextHash2 = ++_objHashUID;
  if (_objHashUID & 1073741824) {
    _objHashUID = 0;
  }
  return nextHash2;
}
function flipFactory(collection) {
  var flipSequence = makeSequence(collection);
  flipSequence._iter = collection;
  flipSequence.size = collection.size;
  flipSequence.flip = function() {
    return collection;
  };
  flipSequence.reverse = function() {
    var reversedSequence = collection.reverse.apply(this);
    reversedSequence.flip = function() {
      return collection.reverse();
    };
    return reversedSequence;
  };
  flipSequence.has = function(key) {
    return collection.includes(key);
  };
  flipSequence.includes = function(key) {
    return collection.has(key);
  };
  flipSequence.cacheResult = cacheResultThrough;
  flipSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    return collection.__iterate(function(v, k) {
      return fn(k, v, this$1$1) !== false;
    }, reverse3);
  };
  flipSequence.__iteratorUncached = function(type, reverse3) {
    if (type === ITERATE_ENTRIES) {
      var iterator = collection.__iterator(type, reverse3);
      return new Iterator(function() {
        var step = iterator.next();
        if (!step.done) {
          var k = step.value[0];
          step.value[0] = step.value[1];
          step.value[1] = k;
        }
        return step;
      });
    }
    return collection.__iterator(
      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
      reverse3
    );
  };
  return flipSequence;
}
function mapFactory(collection, mapper, context) {
  var mappedSequence = makeSequence(collection);
  mappedSequence.size = collection.size;
  mappedSequence.has = function(key) {
    return collection.has(key);
  };
  mappedSequence.get = function(key, notSetValue) {
    var v = collection.get(key, NOT_SET);
    return v === NOT_SET ? notSetValue : mapper.call(context, v, key, collection);
  };
  mappedSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    return collection.__iterate(
      function(v, k, c) {
        return fn(mapper.call(context, v, k, c), k, this$1$1) !== false;
      },
      reverse3
    );
  };
  mappedSequence.__iteratorUncached = function(type, reverse3) {
    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse3);
    return new Iterator(function() {
      var step = iterator.next();
      if (step.done) {
        return step;
      }
      var entry = step.value;
      var key = entry[0];
      return iteratorValue(
        type,
        key,
        mapper.call(context, entry[1], key, collection),
        step
      );
    });
  };
  return mappedSequence;
}
function reverseFactory(collection, useKeys) {
  var this$1$1 = this;
  var reversedSequence = makeSequence(collection);
  reversedSequence._iter = collection;
  reversedSequence.size = collection.size;
  reversedSequence.reverse = function() {
    return collection;
  };
  if (collection.flip) {
    reversedSequence.flip = function() {
      var flipSequence = flipFactory(collection);
      flipSequence.reverse = function() {
        return collection.flip();
      };
      return flipSequence;
    };
  }
  reversedSequence.get = function(key, notSetValue) {
    return collection.get(useKeys ? key : -1 - key, notSetValue);
  };
  reversedSequence.has = function(key) {
    return collection.has(useKeys ? key : -1 - key);
  };
  reversedSequence.includes = function(value) {
    return collection.includes(value);
  };
  reversedSequence.cacheResult = cacheResultThrough;
  reversedSequence.__iterate = function(fn, reverse3) {
    var this$1$12 = this;
    var i = 0;
    reverse3 && ensureSize(collection);
    return collection.__iterate(
      function(v, k) {
        return fn(v, useKeys ? k : reverse3 ? this$1$12.size - ++i : i++, this$1$12);
      },
      !reverse3
    );
  };
  reversedSequence.__iterator = function(type, reverse3) {
    var i = 0;
    reverse3 && ensureSize(collection);
    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse3);
    return new Iterator(function() {
      var step = iterator.next();
      if (step.done) {
        return step;
      }
      var entry = step.value;
      return iteratorValue(
        type,
        useKeys ? entry[0] : reverse3 ? this$1$1.size - ++i : i++,
        entry[1],
        step
      );
    });
  };
  return reversedSequence;
}
function filterFactory(collection, predicate, context, useKeys) {
  var filterSequence = makeSequence(collection);
  if (useKeys) {
    filterSequence.has = function(key) {
      var v = collection.get(key, NOT_SET);
      return v !== NOT_SET && !!predicate.call(context, v, key, collection);
    };
    filterSequence.get = function(key, notSetValue) {
      var v = collection.get(key, NOT_SET);
      return v !== NOT_SET && predicate.call(context, v, key, collection) ? v : notSetValue;
    };
  }
  filterSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    var iterations = 0;
    collection.__iterate(function(v, k, c) {
      if (predicate.call(context, v, k, c)) {
        iterations++;
        return fn(v, useKeys ? k : iterations - 1, this$1$1);
      }
    }, reverse3);
    return iterations;
  };
  filterSequence.__iteratorUncached = function(type, reverse3) {
    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse3);
    var iterations = 0;
    return new Iterator(function() {
      while (true) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        var value = entry[1];
        if (predicate.call(context, value, key, collection)) {
          return iteratorValue(type, useKeys ? key : iterations++, value, step);
        }
      }
    });
  };
  return filterSequence;
}
function countByFactory(collection, grouper, context) {
  var groups = Map2().asMutable();
  collection.__iterate(function(v, k) {
    groups.update(grouper.call(context, v, k, collection), 0, function(a) {
      return a + 1;
    });
  });
  return groups.asImmutable();
}
function groupByFactory(collection, grouper, context) {
  var isKeyedIter = isKeyed(collection);
  var groups = (isOrdered(collection) ? OrderedMap() : Map2()).asMutable();
  collection.__iterate(function(v, k) {
    groups.update(
      grouper.call(context, v, k, collection),
      function(a) {
        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
      }
    );
  });
  var coerce = collectionClass(collection);
  return groups.map(function(arr) {
    return reify(collection, coerce(arr));
  }).asImmutable();
}
function partitionFactory(collection, predicate, context) {
  var isKeyedIter = isKeyed(collection);
  var groups = [[], []];
  collection.__iterate(function(v, k) {
    groups[predicate.call(context, v, k, collection) ? 1 : 0].push(
      isKeyedIter ? [k, v] : v
    );
  });
  var coerce = collectionClass(collection);
  return groups.map(function(arr) {
    return reify(collection, coerce(arr));
  });
}
function sliceFactory(collection, begin, end, useKeys) {
  var originalSize = collection.size;
  if (wholeSlice(begin, end, originalSize)) {
    return collection;
  }
  if (typeof originalSize === "undefined" && (begin < 0 || end < 0)) {
    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
  }
  var resolvedBegin = resolveBegin(begin, originalSize);
  var resolvedEnd = resolveEnd(end, originalSize);
  var resolvedSize = resolvedEnd - resolvedBegin;
  var sliceSize;
  if (resolvedSize === resolvedSize) {
    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
  }
  var sliceSeq = makeSequence(collection);
  sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
  if (!useKeys && isSeq(collection) && sliceSize >= 0) {
    sliceSeq.get = function(index, notSetValue) {
      index = wrapIndex(this, index);
      return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
    };
  }
  sliceSeq.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    if (sliceSize === 0) {
      return 0;
    }
    if (reverse3) {
      return this.cacheResult().__iterate(fn, reverse3);
    }
    var skipped = 0;
    var isSkipping = true;
    var iterations = 0;
    collection.__iterate(function(v, k) {
      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
        iterations++;
        return fn(v, useKeys ? k : iterations - 1, this$1$1) !== false && iterations !== sliceSize;
      }
    });
    return iterations;
  };
  sliceSeq.__iteratorUncached = function(type, reverse3) {
    if (sliceSize !== 0 && reverse3) {
      return this.cacheResult().__iterator(type, reverse3);
    }
    if (sliceSize === 0) {
      return new Iterator(iteratorDone);
    }
    var iterator = collection.__iterator(type, reverse3);
    var skipped = 0;
    var iterations = 0;
    return new Iterator(function() {
      while (skipped++ < resolvedBegin) {
        iterator.next();
      }
      if (++iterations > sliceSize) {
        return iteratorDone();
      }
      var step = iterator.next();
      if (useKeys || type === ITERATE_VALUES || step.done) {
        return step;
      }
      if (type === ITERATE_KEYS) {
        return iteratorValue(type, iterations - 1, void 0, step);
      }
      return iteratorValue(type, iterations - 1, step.value[1], step);
    });
  };
  return sliceSeq;
}
function takeWhileFactory(collection, predicate, context) {
  var takeSequence = makeSequence(collection);
  takeSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    if (reverse3) {
      return this.cacheResult().__iterate(fn, reverse3);
    }
    var iterations = 0;
    collection.__iterate(
      function(v, k, c) {
        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1);
      }
    );
    return iterations;
  };
  takeSequence.__iteratorUncached = function(type, reverse3) {
    var this$1$1 = this;
    if (reverse3) {
      return this.cacheResult().__iterator(type, reverse3);
    }
    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse3);
    var iterating = true;
    return new Iterator(function() {
      if (!iterating) {
        return iteratorDone();
      }
      var step = iterator.next();
      if (step.done) {
        return step;
      }
      var entry = step.value;
      var k = entry[0];
      var v = entry[1];
      if (!predicate.call(context, v, k, this$1$1)) {
        iterating = false;
        return iteratorDone();
      }
      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
    });
  };
  return takeSequence;
}
function skipWhileFactory(collection, predicate, context, useKeys) {
  var skipSequence = makeSequence(collection);
  skipSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    if (reverse3) {
      return this.cacheResult().__iterate(fn, reverse3);
    }
    var isSkipping = true;
    var iterations = 0;
    collection.__iterate(function(v, k, c) {
      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
        iterations++;
        return fn(v, useKeys ? k : iterations - 1, this$1$1);
      }
    });
    return iterations;
  };
  skipSequence.__iteratorUncached = function(type, reverse3) {
    var this$1$1 = this;
    if (reverse3) {
      return this.cacheResult().__iterator(type, reverse3);
    }
    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse3);
    var skipping = true;
    var iterations = 0;
    return new Iterator(function() {
      var step;
      var k;
      var v;
      do {
        step = iterator.next();
        if (step.done) {
          if (useKeys || type === ITERATE_VALUES) {
            return step;
          }
          if (type === ITERATE_KEYS) {
            return iteratorValue(type, iterations++, void 0, step);
          }
          return iteratorValue(type, iterations++, step.value[1], step);
        }
        var entry = step.value;
        k = entry[0];
        v = entry[1];
        skipping && (skipping = predicate.call(context, v, k, this$1$1));
      } while (skipping);
      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
    });
  };
  return skipSequence;
}
function concatFactory(collection, values2) {
  var isKeyedCollection = isKeyed(collection);
  var iters = [collection].concat(values2).map(function(v) {
    if (!isCollection(v)) {
      v = isKeyedCollection ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
    } else if (isKeyedCollection) {
      v = KeyedCollection(v);
    }
    return v;
  }).filter(function(v) {
    return v.size !== 0;
  });
  if (iters.length === 0) {
    return collection;
  }
  if (iters.length === 1) {
    var singleton = iters[0];
    if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
      return singleton;
    }
  }
  var concatSeq = new ArraySeq(iters);
  if (isKeyedCollection) {
    concatSeq = concatSeq.toKeyedSeq();
  } else if (!isIndexed(collection)) {
    concatSeq = concatSeq.toSetSeq();
  }
  concatSeq = concatSeq.flatten(true);
  concatSeq.size = iters.reduce(function(sum, seq) {
    if (sum !== void 0) {
      var size = seq.size;
      if (size !== void 0) {
        return sum + size;
      }
    }
  }, 0);
  return concatSeq;
}
function flattenFactory(collection, depth, useKeys) {
  var flatSequence = makeSequence(collection);
  flatSequence.__iterateUncached = function(fn, reverse3) {
    if (reverse3) {
      return this.cacheResult().__iterate(fn, reverse3);
    }
    var iterations = 0;
    var stopped = false;
    function flatDeep(iter, currentDepth) {
      iter.__iterate(function(v, k) {
        if ((!depth || currentDepth < depth) && isCollection(v)) {
          flatDeep(v, currentDepth + 1);
        } else {
          iterations++;
          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
            stopped = true;
          }
        }
        return !stopped;
      }, reverse3);
    }
    flatDeep(collection, 0);
    return iterations;
  };
  flatSequence.__iteratorUncached = function(type, reverse3) {
    if (reverse3) {
      return this.cacheResult().__iterator(type, reverse3);
    }
    var iterator = collection.__iterator(type, reverse3);
    var stack = [];
    var iterations = 0;
    return new Iterator(function() {
      while (iterator) {
        var step = iterator.next();
        if (step.done !== false) {
          iterator = stack.pop();
          continue;
        }
        var v = step.value;
        if (type === ITERATE_ENTRIES) {
          v = v[1];
        }
        if ((!depth || stack.length < depth) && isCollection(v)) {
          stack.push(iterator);
          iterator = v.__iterator(type, reverse3);
        } else {
          return useKeys ? step : iteratorValue(type, iterations++, v, step);
        }
      }
      return iteratorDone();
    });
  };
  return flatSequence;
}
function flatMapFactory(collection, mapper, context) {
  var coerce = collectionClass(collection);
  return collection.toSeq().map(function(v, k) {
    return coerce(mapper.call(context, v, k, collection));
  }).flatten(true);
}
function interposeFactory(collection, separator) {
  var interposedSequence = makeSequence(collection);
  interposedSequence.size = collection.size && collection.size * 2 - 1;
  interposedSequence.__iterateUncached = function(fn, reverse3) {
    var this$1$1 = this;
    var iterations = 0;
    collection.__iterate(
      function(v) {
        return (!iterations || fn(separator, iterations++, this$1$1) !== false) && fn(v, iterations++, this$1$1) !== false;
      },
      reverse3
    );
    return iterations;
  };
  interposedSequence.__iteratorUncached = function(type, reverse3) {
    var iterator = collection.__iterator(ITERATE_VALUES, reverse3);
    var iterations = 0;
    var step;
    return new Iterator(function() {
      if (!step || iterations % 2) {
        step = iterator.next();
        if (step.done) {
          return step;
        }
      }
      return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
    });
  };
  return interposedSequence;
}
function sortFactory(collection, comparator, mapper) {
  if (!comparator) {
    comparator = defaultComparator;
  }
  var isKeyedCollection = isKeyed(collection);
  var index = 0;
  var entries3 = collection.toSeq().map(function(v, k) {
    return [k, v, index++, mapper ? mapper(v, k, collection) : v];
  }).valueSeq().toArray();
  entries3.sort(function(a, b) {
    return comparator(a[3], b[3]) || a[2] - b[2];
  }).forEach(
    isKeyedCollection ? function(v, i) {
      entries3[i].length = 2;
    } : function(v, i) {
      entries3[i] = v[1];
    }
  );
  return isKeyedCollection ? KeyedSeq(entries3) : isIndexed(collection) ? IndexedSeq(entries3) : SetSeq(entries3);
}
function maxFactory(collection, comparator, mapper) {
  if (!comparator) {
    comparator = defaultComparator;
  }
  if (mapper) {
    var entry = collection.toSeq().map(function(v, k) {
      return [v, mapper(v, k, collection)];
    }).reduce(function(a, b) {
      return maxCompare(comparator, a[1], b[1]) ? b : a;
    });
    return entry && entry[0];
  }
  return collection.reduce(function(a, b) {
    return maxCompare(comparator, a, b) ? b : a;
  });
}
function maxCompare(comparator, a, b) {
  var comp = comparator(b, a);
  return comp === 0 && b !== a && (b === void 0 || b === null || b !== b) || comp > 0;
}
function zipWithFactory(keyIter, zipper, iters, zipAll2) {
  var zipSequence = makeSequence(keyIter);
  var sizes = new ArraySeq(iters).map(function(i) {
    return i.size;
  });
  zipSequence.size = zipAll2 ? sizes.max() : sizes.min();
  zipSequence.__iterate = function(fn, reverse3) {
    var iterator = this.__iterator(ITERATE_VALUES, reverse3);
    var step;
    var iterations = 0;
    while (!(step = iterator.next()).done) {
      if (fn(step.value, iterations++, this) === false) {
        break;
      }
    }
    return iterations;
  };
  zipSequence.__iteratorUncached = function(type, reverse3) {
    var iterators = iters.map(
      function(i) {
        return i = Collection(i), getIterator(reverse3 ? i.reverse() : i);
      }
    );
    var iterations = 0;
    var isDone = false;
    return new Iterator(function() {
      var steps;
      if (!isDone) {
        steps = iterators.map(function(i) {
          return i.next();
        });
        isDone = zipAll2 ? steps.every(function(s) {
          return s.done;
        }) : steps.some(function(s) {
          return s.done;
        });
      }
      if (isDone) {
        return iteratorDone();
      }
      return iteratorValue(
        type,
        iterations++,
        zipper.apply(
          null,
          steps.map(function(s) {
            return s.value;
          })
        )
      );
    });
  };
  return zipSequence;
}
function reify(iter, seq) {
  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
}
function validateEntry(entry) {
  if (entry !== Object(entry)) {
    throw new TypeError("Expected [K, V] tuple: " + entry);
  }
}
function collectionClass(collection) {
  return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
}
function makeSequence(collection) {
  return Object.create(
    (isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype
  );
}
function cacheResultThrough() {
  if (this._iter.cacheResult) {
    this._iter.cacheResult();
    this.size = this._iter.size;
    return this;
  }
  return Seq.prototype.cacheResult.call(this);
}
function defaultComparator(a, b) {
  if (a === void 0 && b === void 0) {
    return 0;
  }
  if (a === void 0) {
    return 1;
  }
  if (b === void 0) {
    return -1;
  }
  return a > b ? 1 : a < b ? -1 : 0;
}
function arrCopy(arr, offset) {
  offset = offset || 0;
  var len = Math.max(0, arr.length - offset);
  var newArr = new Array(len);
  for (var ii = 0; ii < len; ii++) {
    newArr[ii] = arr[ii + offset];
  }
  return newArr;
}
function invariant(condition, error) {
  if (!condition) {
    throw new Error(error);
  }
}
function assertNotInfinite(size) {
  invariant(
    size !== Infinity,
    "Cannot perform this action with an infinite size."
  );
}
function coerceKeyPath(keyPath) {
  if (isArrayLike(keyPath) && typeof keyPath !== "string") {
    return keyPath;
  }
  if (isOrdered(keyPath)) {
    return keyPath.toArray();
  }
  throw new TypeError(
    "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
  );
}
function isPlainObject(value) {
  if (!value || typeof value !== "object" || toString2.call(value) !== "[object Object]") {
    return false;
  }
  var proto = Object.getPrototypeOf(value);
  if (proto === null) {
    return true;
  }
  var parentProto = proto;
  var nextProto = Object.getPrototypeOf(proto);
  while (nextProto !== null) {
    parentProto = nextProto;
    nextProto = Object.getPrototypeOf(parentProto);
  }
  return parentProto === proto;
}
function isDataStructure(value) {
  return typeof value === "object" && (isImmutable(value) || Array.isArray(value) || isPlainObject(value));
}
function quoteString(value) {
  try {
    return typeof value === "string" ? JSON.stringify(value) : String(value);
  } catch (_ignoreError) {
    return JSON.stringify(value);
  }
}
function has(collection, key) {
  return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);
}
function get(collection, key, notSetValue) {
  return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
}
function shallowCopy(from) {
  if (Array.isArray(from)) {
    return arrCopy(from);
  }
  var to = {};
  for (var key in from) {
    if (hasOwnProperty.call(from, key)) {
      to[key] = from[key];
    }
  }
  return to;
}
function remove(collection, key) {
  if (!isDataStructure(collection)) {
    throw new TypeError(
      "Cannot update non-data-structure value: " + collection
    );
  }
  if (isImmutable(collection)) {
    if (!collection.remove) {
      throw new TypeError(
        "Cannot update immutable value without .remove() method: " + collection
      );
    }
    return collection.remove(key);
  }
  if (!hasOwnProperty.call(collection, key)) {
    return collection;
  }
  var collectionCopy = shallowCopy(collection);
  if (Array.isArray(collectionCopy)) {
    collectionCopy.splice(key, 1);
  } else {
    delete collectionCopy[key];
  }
  return collectionCopy;
}
function set(collection, key, value) {
  if (!isDataStructure(collection)) {
    throw new TypeError(
      "Cannot update non-data-structure value: " + collection
    );
  }
  if (isImmutable(collection)) {
    if (!collection.set) {
      throw new TypeError(
        "Cannot update immutable value without .set() method: " + collection
      );
    }
    return collection.set(key, value);
  }
  if (hasOwnProperty.call(collection, key) && value === collection[key]) {
    return collection;
  }
  var collectionCopy = shallowCopy(collection);
  collectionCopy[key] = value;
  return collectionCopy;
}
function updateIn$1(collection, keyPath, notSetValue, updater) {
  if (!updater) {
    updater = notSetValue;
    notSetValue = void 0;
  }
  var updatedValue = updateInDeeply(
    isImmutable(collection),
    collection,
    coerceKeyPath(keyPath),
    0,
    notSetValue,
    updater
  );
  return updatedValue === NOT_SET ? notSetValue : updatedValue;
}
function updateInDeeply(inImmutable, existing, keyPath, i, notSetValue, updater) {
  var wasNotSet = existing === NOT_SET;
  if (i === keyPath.length) {
    var existingValue = wasNotSet ? notSetValue : existing;
    var newValue = updater(existingValue);
    return newValue === existingValue ? existing : newValue;
  }
  if (!wasNotSet && !isDataStructure(existing)) {
    throw new TypeError(
      "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i).map(quoteString) + "]: " + existing
    );
  }
  var key = keyPath[i];
  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
  var nextUpdated = updateInDeeply(
    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
    nextExisting,
    keyPath,
    i + 1,
    notSetValue,
    updater
  );
  return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(
    wasNotSet ? inImmutable ? emptyMap() : {} : existing,
    key,
    nextUpdated
  );
}
function setIn$1(collection, keyPath, value) {
  return updateIn$1(collection, keyPath, NOT_SET, function() {
    return value;
  });
}
function setIn(keyPath, v) {
  return setIn$1(this, keyPath, v);
}
function removeIn(collection, keyPath) {
  return updateIn$1(collection, keyPath, function() {
    return NOT_SET;
  });
}
function deleteIn(keyPath) {
  return removeIn(this, keyPath);
}
function update$1(collection, key, notSetValue, updater) {
  return updateIn$1(collection, [key], notSetValue, updater);
}
function update(key, notSetValue, updater) {
  return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);
}
function updateIn(keyPath, notSetValue, updater) {
  return updateIn$1(this, keyPath, notSetValue, updater);
}
function merge$1() {
  var iters = [], len = arguments.length;
  while (len--) iters[len] = arguments[len];
  return mergeIntoKeyedWith(this, iters);
}
function mergeWith$1(merger) {
  var iters = [], len = arguments.length - 1;
  while (len-- > 0) iters[len] = arguments[len + 1];
  if (typeof merger !== "function") {
    throw new TypeError("Invalid merger function: " + merger);
  }
  return mergeIntoKeyedWith(this, iters, merger);
}
function mergeIntoKeyedWith(collection, collections, merger) {
  var iters = [];
  for (var ii = 0; ii < collections.length; ii++) {
    var collection$1 = KeyedCollection(collections[ii]);
    if (collection$1.size !== 0) {
      iters.push(collection$1);
    }
  }
  if (iters.length === 0) {
    return collection;
  }
  if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
    return collection.constructor(iters[0]);
  }
  return collection.withMutations(function(collection2) {
    var mergeIntoCollection = merger ? function(value, key) {
      update$1(
        collection2,
        key,
        NOT_SET,
        function(oldVal) {
          return oldVal === NOT_SET ? value : merger(oldVal, value, key);
        }
      );
    } : function(value, key) {
      collection2.set(key, value);
    };
    for (var ii2 = 0; ii2 < iters.length; ii2++) {
      iters[ii2].forEach(mergeIntoCollection);
    }
  });
}
function merge(collection) {
  var sources = [], len = arguments.length - 1;
  while (len-- > 0) sources[len] = arguments[len + 1];
  return mergeWithSources(collection, sources);
}
function mergeWith(merger, collection) {
  var sources = [], len = arguments.length - 2;
  while (len-- > 0) sources[len] = arguments[len + 2];
  return mergeWithSources(collection, sources, merger);
}
function mergeDeep$1(collection) {
  var sources = [], len = arguments.length - 1;
  while (len-- > 0) sources[len] = arguments[len + 1];
  return mergeDeepWithSources(collection, sources);
}
function mergeDeepWith$1(merger, collection) {
  var sources = [], len = arguments.length - 2;
  while (len-- > 0) sources[len] = arguments[len + 2];
  return mergeDeepWithSources(collection, sources, merger);
}
function mergeDeepWithSources(collection, sources, merger) {
  return mergeWithSources(collection, sources, deepMergerWith(merger));
}
function mergeWithSources(collection, sources, merger) {
  if (!isDataStructure(collection)) {
    throw new TypeError(
      "Cannot merge into non-data-structure value: " + collection
    );
  }
  if (isImmutable(collection)) {
    return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
  }
  var isArray = Array.isArray(collection);
  var merged = collection;
  var Collection3 = isArray ? IndexedCollection : KeyedCollection;
  var mergeItem = isArray ? function(value) {
    if (merged === collection) {
      merged = shallowCopy(merged);
    }
    merged.push(value);
  } : function(value, key) {
    var hasVal = hasOwnProperty.call(merged, key);
    var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
    if (!hasVal || nextVal !== merged[key]) {
      if (merged === collection) {
        merged = shallowCopy(merged);
      }
      merged[key] = nextVal;
    }
  };
  for (var i = 0; i < sources.length; i++) {
    Collection3(sources[i]).forEach(mergeItem);
  }
  return merged;
}
function deepMergerWith(merger) {
  function deepMerger(oldValue, newValue, key) {
    return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
  }
  return deepMerger;
}
function areMergeable(oldDataStructure, newDataStructure) {
  var oldSeq = Seq(oldDataStructure);
  var newSeq = Seq(newDataStructure);
  return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);
}
function mergeDeep() {
  var iters = [], len = arguments.length;
  while (len--) iters[len] = arguments[len];
  return mergeDeepWithSources(this, iters);
}
function mergeDeepWith(merger) {
  var iters = [], len = arguments.length - 1;
  while (len-- > 0) iters[len] = arguments[len + 1];
  return mergeDeepWithSources(this, iters, merger);
}
function mergeIn(keyPath) {
  var iters = [], len = arguments.length - 1;
  while (len-- > 0) iters[len] = arguments[len + 1];
  return updateIn$1(this, keyPath, emptyMap(), function(m) {
    return mergeWithSources(m, iters);
  });
}
function mergeDeepIn(keyPath) {
  var iters = [], len = arguments.length - 1;
  while (len-- > 0) iters[len] = arguments[len + 1];
  return updateIn$1(
    this,
    keyPath,
    emptyMap(),
    function(m) {
      return mergeDeepWithSources(m, iters);
    }
  );
}
function withMutations(fn) {
  var mutable = this.asMutable();
  fn(mutable);
  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
}
function asMutable() {
  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
}
function asImmutable() {
  return this.__ensureOwner();
}
function wasAltered() {
  return this.__altered;
}
function mapIteratorValue(type, entry) {
  return iteratorValue(type, entry[0], entry[1]);
}
function mapIteratorFrame(node, prev) {
  return {
    node,
    index: 0,
    __prev: prev
  };
}
function makeMap(size, root, ownerID, hash2) {
  var map2 = Object.create(MapPrototype);
  map2.size = size;
  map2._root = root;
  map2.__ownerID = ownerID;
  map2.__hash = hash2;
  map2.__altered = false;
  return map2;
}
function emptyMap() {
  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
}
function updateMap(map2, k, v) {
  var newRoot;
  var newSize;
  if (!map2._root) {
    if (v === NOT_SET) {
      return map2;
    }
    newSize = 1;
    newRoot = new ArrayMapNode(map2.__ownerID, [[k, v]]);
  } else {
    var didChangeSize = MakeRef();
    var didAlter = MakeRef();
    newRoot = updateNode(
      map2._root,
      map2.__ownerID,
      0,
      void 0,
      k,
      v,
      didChangeSize,
      didAlter
    );
    if (!didAlter.value) {
      return map2;
    }
    newSize = map2.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
  }
  if (map2.__ownerID) {
    map2.size = newSize;
    map2._root = newRoot;
    map2.__hash = void 0;
    map2.__altered = true;
    return map2;
  }
  return newRoot ? makeMap(newSize, newRoot) : emptyMap();
}
function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
  if (!node) {
    if (value === NOT_SET) {
      return node;
    }
    SetRef(didAlter);
    SetRef(didChangeSize);
    return new ValueNode(ownerID, keyHash, [key, value]);
  }
  return node.update(
    ownerID,
    shift,
    keyHash,
    key,
    value,
    didChangeSize,
    didAlter
  );
}
function isLeafNode(node) {
  return node.constructor === ValueNode || node.constructor === HashCollisionNode;
}
function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
  if (node.keyHash === keyHash) {
    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
  }
  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
  var newNode;
  var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
  return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
}
function createNodes(ownerID, entries3, key, value) {
  if (!ownerID) {
    ownerID = new OwnerID();
  }
  var node = new ValueNode(ownerID, hash(key), [key, value]);
  for (var ii = 0; ii < entries3.length; ii++) {
    var entry = entries3[ii];
    node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
  }
  return node;
}
function packNodes(ownerID, nodes, count2, excluding) {
  var bitmap = 0;
  var packedII = 0;
  var packedNodes = new Array(count2);
  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
    var node = nodes[ii];
    if (node !== void 0 && ii !== excluding) {
      bitmap |= bit;
      packedNodes[packedII++] = node;
    }
  }
  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
}
function expandNodes(ownerID, nodes, bitmap, including, node) {
  var count2 = 0;
  var expandedNodes = new Array(SIZE);
  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
    expandedNodes[ii] = bitmap & 1 ? nodes[count2++] : void 0;
  }
  expandedNodes[including] = node;
  return new HashArrayMapNode(ownerID, count2 + 1, expandedNodes);
}
function popCount(x) {
  x -= x >> 1 & 1431655765;
  x = (x & 858993459) + (x >> 2 & 858993459);
  x = x + (x >> 4) & 252645135;
  x += x >> 8;
  x += x >> 16;
  return x & 127;
}
function setAt(array, idx, val, canEdit) {
  var newArray = canEdit ? array : arrCopy(array);
  newArray[idx] = val;
  return newArray;
}
function spliceIn(array, idx, val, canEdit) {
  var newLen = array.length + 1;
  if (canEdit && idx + 1 === newLen) {
    array[idx] = val;
    return array;
  }
  var newArray = new Array(newLen);
  var after = 0;
  for (var ii = 0; ii < newLen; ii++) {
    if (ii === idx) {
      newArray[ii] = val;
      after = -1;
    } else {
      newArray[ii] = array[ii + after];
    }
  }
  return newArray;
}
function spliceOut(array, idx, canEdit) {
  var newLen = array.length - 1;
  if (canEdit && idx === newLen) {
    array.pop();
    return array;
  }
  var newArray = new Array(newLen);
  var after = 0;
  for (var ii = 0; ii < newLen; ii++) {
    if (ii === idx) {
      after = 1;
    }
    newArray[ii] = array[ii + after];
  }
  return newArray;
}
function isList(maybeList) {
  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
}
function iterateList(list, reverse3) {
  var left = list._origin;
  var right = list._capacity;
  var tailPos = getTailOffset(right);
  var tail = list._tail;
  return iterateNodeOrLeaf(list._root, list._level, 0);
  function iterateNodeOrLeaf(node, level, offset) {
    return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
  }
  function iterateLeaf(node, offset) {
    var array = offset === tailPos ? tail && tail.array : node && node.array;
    var from = offset > left ? 0 : left - offset;
    var to = right - offset;
    if (to > SIZE) {
      to = SIZE;
    }
    return function() {
      if (from === to) {
        return DONE;
      }
      var idx = reverse3 ? --to : from++;
      return array && array[idx];
    };
  }
  function iterateNode(node, level, offset) {
    var values2;
    var array = node && node.array;
    var from = offset > left ? 0 : left - offset >> level;
    var to = (right - offset >> level) + 1;
    if (to > SIZE) {
      to = SIZE;
    }
    return function() {
      while (true) {
        if (values2) {
          var value = values2();
          if (value !== DONE) {
            return value;
          }
          values2 = null;
        }
        if (from === to) {
          return DONE;
        }
        var idx = reverse3 ? --to : from++;
        values2 = iterateNodeOrLeaf(
          array && array[idx],
          level - SHIFT,
          offset + (idx << level)
        );
      }
    };
  }
}
function makeList(origin, capacity, level, root, tail, ownerID, hash2) {
  var list = Object.create(ListPrototype);
  list.size = capacity - origin;
  list._origin = origin;
  list._capacity = capacity;
  list._level = level;
  list._root = root;
  list._tail = tail;
  list.__ownerID = ownerID;
  list.__hash = hash2;
  list.__altered = false;
  return list;
}
function emptyList() {
  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
}
function updateList(list, index, value) {
  index = wrapIndex(list, index);
  if (index !== index) {
    return list;
  }
  if (index >= list.size || index < 0) {
    return list.withMutations(function(list2) {
      index < 0 ? setListBounds(list2, index).set(0, value) : setListBounds(list2, 0, index + 1).set(index, value);
    });
  }
  index += list._origin;
  var newTail = list._tail;
  var newRoot = list._root;
  var didAlter = MakeRef();
  if (index >= getTailOffset(list._capacity)) {
    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
  } else {
    newRoot = updateVNode(
      newRoot,
      list.__ownerID,
      list._level,
      index,
      value,
      didAlter
    );
  }
  if (!didAlter.value) {
    return list;
  }
  if (list.__ownerID) {
    list._root = newRoot;
    list._tail = newTail;
    list.__hash = void 0;
    list.__altered = true;
    return list;
  }
  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
}
function updateVNode(node, ownerID, level, index, value, didAlter) {
  var idx = index >>> level & MASK;
  var nodeHas = node && idx < node.array.length;
  if (!nodeHas && value === void 0) {
    return node;
  }
  var newNode;
  if (level > 0) {
    var lowerNode = node && node.array[idx];
    var newLowerNode = updateVNode(
      lowerNode,
      ownerID,
      level - SHIFT,
      index,
      value,
      didAlter
    );
    if (newLowerNode === lowerNode) {
      return node;
    }
    newNode = editableVNode(node, ownerID);
    newNode.array[idx] = newLowerNode;
    return newNode;
  }
  if (nodeHas && node.array[idx] === value) {
    return node;
  }
  if (didAlter) {
    SetRef(didAlter);
  }
  newNode = editableVNode(node, ownerID);
  if (value === void 0 && idx === newNode.array.length - 1) {
    newNode.array.pop();
  } else {
    newNode.array[idx] = value;
  }
  return newNode;
}
function editableVNode(node, ownerID) {
  if (ownerID && node && ownerID === node.ownerID) {
    return node;
  }
  return new VNode(node ? node.array.slice() : [], ownerID);
}
function listNodeFor(list, rawIndex) {
  if (rawIndex >= getTailOffset(list._capacity)) {
    return list._tail;
  }
  if (rawIndex < 1 << list._level + SHIFT) {
    var node = list._root;
    var level = list._level;
    while (node && level > 0) {
      node = node.array[rawIndex >>> level & MASK];
      level -= SHIFT;
    }
    return node;
  }
}
function setListBounds(list, begin, end) {
  if (begin !== void 0) {
    begin |= 0;
  }
  if (end !== void 0) {
    end |= 0;
  }
  var owner = list.__ownerID || new OwnerID();
  var oldOrigin = list._origin;
  var oldCapacity = list._capacity;
  var newOrigin = oldOrigin + begin;
  var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
    return list;
  }
  if (newOrigin >= newCapacity) {
    return list.clear();
  }
  var newLevel = list._level;
  var newRoot = list._root;
  var offsetShift = 0;
  while (newOrigin + offsetShift < 0) {
    newRoot = new VNode(
      newRoot && newRoot.array.length ? [void 0, newRoot] : [],
      owner
    );
    newLevel += SHIFT;
    offsetShift += 1 << newLevel;
  }
  if (offsetShift) {
    newOrigin += offsetShift;
    oldOrigin += offsetShift;
    newCapacity += offsetShift;
    oldCapacity += offsetShift;
  }
  var oldTailOffset = getTailOffset(oldCapacity);
  var newTailOffset = getTailOffset(newCapacity);
  while (newTailOffset >= 1 << newLevel + SHIFT) {
    newRoot = new VNode(
      newRoot && newRoot.array.length ? [newRoot] : [],
      owner
    );
    newLevel += SHIFT;
  }
  var oldTail = list._tail;
  var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
  if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
    newRoot = editableVNode(newRoot, owner);
    var node = newRoot;
    for (var level = newLevel; level > SHIFT; level -= SHIFT) {
      var idx = oldTailOffset >>> level & MASK;
      node = node.array[idx] = editableVNode(node.array[idx], owner);
    }
    node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
  }
  if (newCapacity < oldCapacity) {
    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
  }
  if (newOrigin >= newTailOffset) {
    newOrigin -= newTailOffset;
    newCapacity -= newTailOffset;
    newLevel = SHIFT;
    newRoot = null;
    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
    offsetShift = 0;
    while (newRoot) {
      var beginIndex = newOrigin >>> newLevel & MASK;
      if (beginIndex !== newTailOffset >>> newLevel & MASK) {
        break;
      }
      if (beginIndex) {
        offsetShift += (1 << newLevel) * beginIndex;
      }
      newLevel -= SHIFT;
      newRoot = newRoot.array[beginIndex];
    }
    if (newRoot && newOrigin > oldOrigin) {
      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
    }
    if (newRoot && newTailOffset < oldTailOffset) {
      newRoot = newRoot.removeAfter(
        owner,
        newLevel,
        newTailOffset - offsetShift
      );
    }
    if (offsetShift) {
      newOrigin -= offsetShift;
      newCapacity -= offsetShift;
    }
  }
  if (list.__ownerID) {
    list.size = newCapacity - newOrigin;
    list._origin = newOrigin;
    list._capacity = newCapacity;
    list._level = newLevel;
    list._root = newRoot;
    list._tail = newTail;
    list.__hash = void 0;
    list.__altered = true;
    return list;
  }
  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
}
function getTailOffset(size) {
  return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
}
function makeOrderedMap(map2, list, ownerID, hash2) {
  var omap = Object.create(OrderedMap.prototype);
  omap.size = map2 ? map2.size : 0;
  omap._map = map2;
  omap._list = list;
  omap.__ownerID = ownerID;
  omap.__hash = hash2;
  omap.__altered = false;
  return omap;
}
function emptyOrderedMap() {
  return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
}
function updateOrderedMap(omap, k, v) {
  var map2 = omap._map;
  var list = omap._list;
  var i = map2.get(k);
  var has5 = i !== void 0;
  var newMap;
  var newList;
  if (v === NOT_SET) {
    if (!has5) {
      return omap;
    }
    if (list.size >= SIZE && list.size >= map2.size * 2) {
      newList = list.filter(function(entry, idx) {
        return entry !== void 0 && i !== idx;
      });
      newMap = newList.toKeyedSeq().map(function(entry) {
        return entry[0];
      }).flip().toMap();
      if (omap.__ownerID) {
        newMap.__ownerID = newList.__ownerID = omap.__ownerID;
      }
    } else {
      newMap = map2.remove(k);
      newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
    }
  } else if (has5) {
    if (v === list.get(i)[1]) {
      return omap;
    }
    newMap = map2;
    newList = list.set(i, [k, v]);
  } else {
    newMap = map2.set(k, list.size);
    newList = list.set(list.size, [k, v]);
  }
  if (omap.__ownerID) {
    omap.size = newMap.size;
    omap._map = newMap;
    omap._list = newList;
    omap.__hash = void 0;
    omap.__altered = true;
    return omap;
  }
  return makeOrderedMap(newMap, newList);
}
function isStack(maybeStack) {
  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
}
function makeStack(size, head2, ownerID, hash2) {
  var map2 = Object.create(StackPrototype);
  map2.size = size;
  map2._head = head2;
  map2.__ownerID = ownerID;
  map2.__hash = hash2;
  map2.__altered = false;
  return map2;
}
function emptyStack() {
  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
}
function isSet(maybeSet) {
  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
}
function isOrderedSet(maybeOrderedSet) {
  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
}
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (!isCollection(b) || a.size !== void 0 && b.size !== void 0 && a.size !== b.size || a.__hash !== void 0 && b.__hash !== void 0 && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
    return false;
  }
  if (a.size === 0 && b.size === 0) {
    return true;
  }
  var notAssociative = !isAssociative(a);
  if (isOrdered(a)) {
    var entries3 = a.entries();
    return b.every(function(v, k) {
      var entry = entries3.next().value;
      return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
    }) && entries3.next().done;
  }
  var flipped = false;
  if (a.size === void 0) {
    if (b.size === void 0) {
      if (typeof a.cacheResult === "function") {
        a.cacheResult();
      }
    } else {
      flipped = true;
      var _ = a;
      a = b;
      b = _;
    }
  }
  var allEqual = true;
  var bSize = b.__iterate(function(v, k) {
    if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
      allEqual = false;
      return false;
    }
  });
  return allEqual && a.size === bSize;
}
function mixin(ctor, methods) {
  var keyCopier = function(key) {
    ctor.prototype[key] = methods[key];
  };
  Object.keys(methods).forEach(keyCopier);
  Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
  return ctor;
}
function toJS(value) {
  if (!value || typeof value !== "object") {
    return value;
  }
  if (!isCollection(value)) {
    if (!isDataStructure(value)) {
      return value;
    }
    value = Seq(value);
  }
  if (isKeyed(value)) {
    var result$1 = {};
    value.__iterate(function(v, k) {
      result$1[k] = toJS(v);
    });
    return result$1;
  }
  var result = [];
  value.__iterate(function(v) {
    result.push(toJS(v));
  });
  return result;
}
function updateSet(set3, newMap) {
  if (set3.__ownerID) {
    set3.size = newMap.size;
    set3._map = newMap;
    return set3;
  }
  return newMap === set3._map ? set3 : newMap.size === 0 ? set3.__empty() : set3.__make(newMap);
}
function makeSet(map2, ownerID) {
  var set3 = Object.create(SetPrototype);
  set3.size = map2 ? map2.size : 0;
  set3._map = map2;
  set3.__ownerID = ownerID;
  return set3;
}
function emptySet() {
  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
}
function getIn$1(collection, searchKeyPath, notSetValue) {
  var keyPath = coerceKeyPath(searchKeyPath);
  var i = 0;
  while (i !== keyPath.length) {
    collection = get(collection, keyPath[i++], NOT_SET);
    if (collection === NOT_SET) {
      return notSetValue;
    }
  }
  return collection;
}
function getIn(searchKeyPath, notSetValue) {
  return getIn$1(this, searchKeyPath, notSetValue);
}
function hasIn$1(collection, keyPath) {
  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
}
function hasIn(searchKeyPath) {
  return hasIn$1(this, searchKeyPath);
}
function toObject() {
  assertNotInfinite(this.size);
  var object = {};
  this.__iterate(function(v, k) {
    object[k] = v;
  });
  return object;
}
function reduce(collection, reducer, reduction, context, useFirst, reverse3) {
  assertNotInfinite(collection.size);
  collection.__iterate(function(v, k, c) {
    if (useFirst) {
      useFirst = false;
      reduction = v;
    } else {
      reduction = reducer.call(context, reduction, v, k, c);
    }
  }, reverse3);
  return reduction;
}
function keyMapper(v, k) {
  return k;
}
function entryMapper(v, k) {
  return [k, v];
}
function not(predicate) {
  return function() {
    return !predicate.apply(this, arguments);
  };
}
function neg(predicate) {
  return function() {
    return -predicate.apply(this, arguments);
  };
}
function defaultZipper() {
  return arrCopy(arguments);
}
function defaultNegComparator(a, b) {
  return a < b ? 1 : a > b ? -1 : 0;
}
function hashCollection(collection) {
  if (collection.size === Infinity) {
    return 0;
  }
  var ordered = isOrdered(collection);
  var keyed = isKeyed(collection);
  var h = ordered ? 1 : 0;
  var size = collection.__iterate(
    keyed ? ordered ? function(v, k) {
      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
    } : function(v, k) {
      h = h + hashMerge(hash(v), hash(k)) | 0;
    } : ordered ? function(v) {
      h = 31 * h + hash(v) | 0;
    } : function(v) {
      h = h + hash(v) | 0;
    }
  );
  return murmurHashOfSize(size, h);
}
function murmurHashOfSize(size, h) {
  h = imul(h, 3432918353);
  h = imul(h << 15 | h >>> -15, 461845907);
  h = imul(h << 13 | h >>> -13, 5);
  h = (h + 3864292196 | 0) ^ size;
  h = imul(h ^ h >>> 16, 2246822507);
  h = imul(h ^ h >>> 13, 3266489909);
  h = smi(h ^ h >>> 16);
  return h;
}
function hashMerge(a, b) {
  return a ^ b + 2654435769 + (a << 6) + (a >> 2) | 0;
}
function makeOrderedSet(map2, ownerID) {
  var set3 = Object.create(OrderedSetPrototype);
  set3.size = map2 ? map2.size : 0;
  set3._map = map2;
  set3.__ownerID = ownerID;
  return set3;
}
function emptyOrderedSet() {
  return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
}
function throwOnInvalidDefaultValues(defaultValues) {
  if (isRecord(defaultValues)) {
    throw new Error(
      "Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead."
    );
  }
  if (isImmutable(defaultValues)) {
    throw new Error(
      "Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead."
    );
  }
  if (defaultValues === null || typeof defaultValues !== "object") {
    throw new Error(
      "Can not call `Record` with a non-object as default values. Use a plain javascript object instead."
    );
  }
}
function makeRecord(likeRecord, values2, ownerID) {
  var record = Object.create(Object.getPrototypeOf(likeRecord));
  record._values = values2;
  record.__ownerID = ownerID;
  return record;
}
function recordName(record) {
  return record.constructor.displayName || record.constructor.name || "Record";
}
function recordSeq(record) {
  return keyedSeqFromValue(record._keys.map(function(k) {
    return [k, record.get(k)];
  }));
}
function setProp(prototype, name) {
  try {
    Object.defineProperty(prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function(value) {
        invariant(this.__ownerID, "Cannot set on an immutable record.");
        this.set(name, value);
      }
    });
  } catch (error) {
  }
}
function fromJS(value, converter) {
  return fromJSWith(
    [],
    converter || defaultConverter,
    value,
    "",
    converter && converter.length > 2 ? [] : void 0,
    { "": value }
  );
}
function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
  if (typeof value !== "string" && !isImmutable(value) && (isArrayLike(value) || hasIterator(value) || isPlainObject(value))) {
    if (~stack.indexOf(value)) {
      throw new TypeError("Cannot convert circular structure to Immutable");
    }
    stack.push(value);
    keyPath && key !== "" && keyPath.push(key);
    var converted = converter.call(
      parentValue,
      key,
      Seq(value).map(
        function(v, k) {
          return fromJSWith(stack, converter, v, k, keyPath, value);
        }
      ),
      keyPath && keyPath.slice()
    );
    stack.pop();
    keyPath && keyPath.pop();
    return converted;
  }
  return value;
}
function defaultConverter(k, v) {
  return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();
}
var DELETE, SHIFT, SIZE, MASK, NOT_SET, IS_COLLECTION_SYMBOL, IS_KEYED_SYMBOL, IS_INDEXED_SYMBOL, Collection, KeyedCollection, IndexedCollection, SetCollection, IS_SEQ_SYMBOL, IS_RECORD_SYMBOL, IS_ORDERED_SYMBOL, ITERATE_KEYS, ITERATE_VALUES, ITERATE_ENTRIES, REAL_ITERATOR_SYMBOL, FAUX_ITERATOR_SYMBOL, ITERATOR_SYMBOL, Iterator, hasOwnProperty, Seq, KeyedSeq, IndexedSeq, SetSeq, ArraySeq, ObjectSeq, CollectionSeq, EMPTY_SEQ, IS_MAP_SYMBOL, imul, defaultValueOf, isExtensible, canDefineProperty, usingWeakMap, weakMap, symbolMap, _objHashUID, UID_HASH_KEY, STRING_HASH_CACHE_MIN_STRLEN, STRING_HASH_CACHE_MAX_SIZE, STRING_HASH_CACHE_SIZE, stringHashCache, ToKeyedSequence, ToIndexedSequence, ToSetSequence, FromEntriesSequence, toString2, Map2, MapPrototype, ArrayMapNode, BitmapIndexedNode, HashArrayMapNode, HashCollisionNode, ValueNode, MapIterator, EMPTY_MAP, MAX_ARRAY_MAP_SIZE, MAX_BITMAP_INDEXED_SIZE, MIN_HASH_ARRAY_MAP_SIZE, IS_LIST_SYMBOL, List, ListPrototype, VNode, DONE, EMPTY_LIST, OrderedMap, EMPTY_ORDERED_MAP, IS_STACK_SYMBOL, Stack, StackPrototype, EMPTY_STACK, IS_SET_SYMBOL, Set2, SetPrototype, EMPTY_SET, Range, EMPTY_RANGE, CollectionPrototype, KeyedCollectionPrototype, IndexedCollectionPrototype, SetCollectionPrototype, OrderedSet, OrderedSetPrototype, EMPTY_ORDERED_SET, PairSorting, Record, RecordPrototype, Repeat, EMPTY_REPEAT, version, Immutable, Iterable, immutable_es_default;
var init_immutable_es = __esm({
  "../../lipdjs/node_modules/immutable/dist/immutable.es.js"() {
    DELETE = "delete";
    SHIFT = 5;
    SIZE = 1 << SHIFT;
    MASK = SIZE - 1;
    NOT_SET = {};
    IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
    IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
    IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
    Collection = function Collection2(value) {
      return isCollection(value) ? value : Seq(value);
    };
    KeyedCollection = function(Collection3) {
      function KeyedCollection2(value) {
        return isKeyed(value) ? value : KeyedSeq(value);
      }
      if (Collection3) KeyedCollection2.__proto__ = Collection3;
      KeyedCollection2.prototype = Object.create(Collection3 && Collection3.prototype);
      KeyedCollection2.prototype.constructor = KeyedCollection2;
      return KeyedCollection2;
    }(Collection);
    IndexedCollection = function(Collection3) {
      function IndexedCollection2(value) {
        return isIndexed(value) ? value : IndexedSeq(value);
      }
      if (Collection3) IndexedCollection2.__proto__ = Collection3;
      IndexedCollection2.prototype = Object.create(Collection3 && Collection3.prototype);
      IndexedCollection2.prototype.constructor = IndexedCollection2;
      return IndexedCollection2;
    }(Collection);
    SetCollection = function(Collection3) {
      function SetCollection2(value) {
        return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
      }
      if (Collection3) SetCollection2.__proto__ = Collection3;
      SetCollection2.prototype = Object.create(Collection3 && Collection3.prototype);
      SetCollection2.prototype.constructor = SetCollection2;
      return SetCollection2;
    }(Collection);
    Collection.Keyed = KeyedCollection;
    Collection.Indexed = IndexedCollection;
    Collection.Set = SetCollection;
    IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
    IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
    IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
    ITERATE_KEYS = 0;
    ITERATE_VALUES = 1;
    ITERATE_ENTRIES = 2;
    REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    FAUX_ITERATOR_SYMBOL = "@@iterator";
    ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
    Iterator = function Iterator2(next) {
      this.next = next;
    };
    Iterator.prototype.toString = function toString() {
      return "[Iterator]";
    };
    Iterator.KEYS = ITERATE_KEYS;
    Iterator.VALUES = ITERATE_VALUES;
    Iterator.ENTRIES = ITERATE_ENTRIES;
    Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
      return this.toString();
    };
    Iterator.prototype[ITERATOR_SYMBOL] = function() {
      return this;
    };
    hasOwnProperty = Object.prototype.hasOwnProperty;
    Seq = function(Collection3) {
      function Seq2(value) {
        return value === void 0 || value === null ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);
      }
      if (Collection3) Seq2.__proto__ = Collection3;
      Seq2.prototype = Object.create(Collection3 && Collection3.prototype);
      Seq2.prototype.constructor = Seq2;
      Seq2.prototype.toSeq = function toSeq3() {
        return this;
      };
      Seq2.prototype.toString = function toString5() {
        return this.__toString("Seq {", "}");
      };
      Seq2.prototype.cacheResult = function cacheResult() {
        if (!this._cache && this.__iterateUncached) {
          this._cache = this.entrySeq().toArray();
          this.size = this._cache.length;
        }
        return this;
      };
      Seq2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var cache = this._cache;
        if (cache) {
          var size = cache.length;
          var i = 0;
          while (i !== size) {
            var entry = cache[reverse3 ? size - ++i : i++];
            if (fn(entry[1], entry[0], this) === false) {
              break;
            }
          }
          return i;
        }
        return this.__iterateUncached(fn, reverse3);
      };
      Seq2.prototype.__iterator = function __iterator2(type, reverse3) {
        var cache = this._cache;
        if (cache) {
          var size = cache.length;
          var i = 0;
          return new Iterator(function() {
            if (i === size) {
              return iteratorDone();
            }
            var entry = cache[reverse3 ? size - ++i : i++];
            return iteratorValue(type, entry[0], entry[1]);
          });
        }
        return this.__iteratorUncached(type, reverse3);
      };
      return Seq2;
    }(Collection);
    KeyedSeq = function(Seq2) {
      function KeyedSeq2(value) {
        return value === void 0 || value === null ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);
      }
      if (Seq2) KeyedSeq2.__proto__ = Seq2;
      KeyedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      KeyedSeq2.prototype.constructor = KeyedSeq2;
      KeyedSeq2.prototype.toKeyedSeq = function toKeyedSeq3() {
        return this;
      };
      return KeyedSeq2;
    }(Seq);
    IndexedSeq = function(Seq2) {
      function IndexedSeq2(value) {
        return value === void 0 || value === null ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);
      }
      if (Seq2) IndexedSeq2.__proto__ = Seq2;
      IndexedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      IndexedSeq2.prototype.constructor = IndexedSeq2;
      IndexedSeq2.of = function of() {
        return IndexedSeq2(arguments);
      };
      IndexedSeq2.prototype.toIndexedSeq = function toIndexedSeq2() {
        return this;
      };
      IndexedSeq2.prototype.toString = function toString5() {
        return this.__toString("Seq [", "]");
      };
      return IndexedSeq2;
    }(Seq);
    SetSeq = function(Seq2) {
      function SetSeq2(value) {
        return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();
      }
      if (Seq2) SetSeq2.__proto__ = Seq2;
      SetSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      SetSeq2.prototype.constructor = SetSeq2;
      SetSeq2.of = function of() {
        return SetSeq2(arguments);
      };
      SetSeq2.prototype.toSetSeq = function toSetSeq2() {
        return this;
      };
      return SetSeq2;
    }(Seq);
    Seq.isSeq = isSeq;
    Seq.Keyed = KeyedSeq;
    Seq.Set = SetSeq;
    Seq.Indexed = IndexedSeq;
    Seq.prototype[IS_SEQ_SYMBOL] = true;
    ArraySeq = function(IndexedSeq2) {
      function ArraySeq2(array) {
        this._array = array;
        this.size = array.length;
      }
      if (IndexedSeq2) ArraySeq2.__proto__ = IndexedSeq2;
      ArraySeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      ArraySeq2.prototype.constructor = ArraySeq2;
      ArraySeq2.prototype.get = function get11(index, notSetValue) {
        return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
      };
      ArraySeq2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var array = this._array;
        var size = array.length;
        var i = 0;
        while (i !== size) {
          var ii = reverse3 ? size - ++i : i++;
          if (fn(array[ii], ii, this) === false) {
            break;
          }
        }
        return i;
      };
      ArraySeq2.prototype.__iterator = function __iterator2(type, reverse3) {
        var array = this._array;
        var size = array.length;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var ii = reverse3 ? size - ++i : i++;
          return iteratorValue(type, ii, array[ii]);
        });
      };
      return ArraySeq2;
    }(IndexedSeq);
    ObjectSeq = function(KeyedSeq2) {
      function ObjectSeq2(object) {
        var keys2 = Object.keys(object).concat(
          Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []
        );
        this._object = object;
        this._keys = keys2;
        this.size = keys2.length;
      }
      if (KeyedSeq2) ObjectSeq2.__proto__ = KeyedSeq2;
      ObjectSeq2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      ObjectSeq2.prototype.constructor = ObjectSeq2;
      ObjectSeq2.prototype.get = function get11(key, notSetValue) {
        if (notSetValue !== void 0 && !this.has(key)) {
          return notSetValue;
        }
        return this._object[key];
      };
      ObjectSeq2.prototype.has = function has5(key) {
        return hasOwnProperty.call(this._object, key);
      };
      ObjectSeq2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var object = this._object;
        var keys2 = this._keys;
        var size = keys2.length;
        var i = 0;
        while (i !== size) {
          var key = keys2[reverse3 ? size - ++i : i++];
          if (fn(object[key], key, this) === false) {
            break;
          }
        }
        return i;
      };
      ObjectSeq2.prototype.__iterator = function __iterator2(type, reverse3) {
        var object = this._object;
        var keys2 = this._keys;
        var size = keys2.length;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var key = keys2[reverse3 ? size - ++i : i++];
          return iteratorValue(type, key, object[key]);
        });
      };
      return ObjectSeq2;
    }(KeyedSeq);
    ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
    CollectionSeq = function(IndexedSeq2) {
      function CollectionSeq2(collection) {
        this._collection = collection;
        this.size = collection.length || collection.size;
      }
      if (IndexedSeq2) CollectionSeq2.__proto__ = IndexedSeq2;
      CollectionSeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      CollectionSeq2.prototype.constructor = CollectionSeq2;
      CollectionSeq2.prototype.__iterateUncached = function __iterateUncached(fn, reverse3) {
        if (reverse3) {
          return this.cacheResult().__iterate(fn, reverse3);
        }
        var collection = this._collection;
        var iterator = getIterator(collection);
        var iterations = 0;
        if (isIterator(iterator)) {
          var step;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
        }
        return iterations;
      };
      CollectionSeq2.prototype.__iteratorUncached = function __iteratorUncached(type, reverse3) {
        if (reverse3) {
          return this.cacheResult().__iterator(type, reverse3);
        }
        var collection = this._collection;
        var iterator = getIterator(collection);
        if (!isIterator(iterator)) {
          return new Iterator(iteratorDone);
        }
        var iterations = 0;
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(type, iterations++, step.value);
        });
      };
      return CollectionSeq2;
    }(IndexedSeq);
    IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
    imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b) {
      a |= 0;
      b |= 0;
      var c = a & 65535;
      var d = b & 65535;
      return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
    };
    defaultValueOf = Object.prototype.valueOf;
    isExtensible = Object.isExtensible;
    canDefineProperty = function() {
      try {
        Object.defineProperty({}, "@", {});
        return true;
      } catch (e) {
        return false;
      }
    }();
    usingWeakMap = typeof WeakMap === "function";
    if (usingWeakMap) {
      weakMap = /* @__PURE__ */ new WeakMap();
    }
    symbolMap = /* @__PURE__ */ Object.create(null);
    _objHashUID = 0;
    UID_HASH_KEY = "__immutablehash__";
    if (typeof Symbol === "function") {
      UID_HASH_KEY = Symbol(UID_HASH_KEY);
    }
    STRING_HASH_CACHE_MIN_STRLEN = 16;
    STRING_HASH_CACHE_MAX_SIZE = 255;
    STRING_HASH_CACHE_SIZE = 0;
    stringHashCache = {};
    ToKeyedSequence = function(KeyedSeq2) {
      function ToKeyedSequence2(indexed, useKeys) {
        this._iter = indexed;
        this._useKeys = useKeys;
        this.size = indexed.size;
      }
      if (KeyedSeq2) ToKeyedSequence2.__proto__ = KeyedSeq2;
      ToKeyedSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      ToKeyedSequence2.prototype.constructor = ToKeyedSequence2;
      ToKeyedSequence2.prototype.get = function get11(key, notSetValue) {
        return this._iter.get(key, notSetValue);
      };
      ToKeyedSequence2.prototype.has = function has5(key) {
        return this._iter.has(key);
      };
      ToKeyedSequence2.prototype.valueSeq = function valueSeq2() {
        return this._iter.valueSeq();
      };
      ToKeyedSequence2.prototype.reverse = function reverse3() {
        var this$1$1 = this;
        var reversedSequence = reverseFactory(this, true);
        if (!this._useKeys) {
          reversedSequence.valueSeq = function() {
            return this$1$1._iter.toSeq().reverse();
          };
        }
        return reversedSequence;
      };
      ToKeyedSequence2.prototype.map = function map2(mapper, context) {
        var this$1$1 = this;
        var mappedSequence = mapFactory(this, mapper, context);
        if (!this._useKeys) {
          mappedSequence.valueSeq = function() {
            return this$1$1._iter.toSeq().map(mapper, context);
          };
        }
        return mappedSequence;
      };
      ToKeyedSequence2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        return this._iter.__iterate(function(v, k) {
          return fn(v, k, this$1$1);
        }, reverse3);
      };
      ToKeyedSequence2.prototype.__iterator = function __iterator2(type, reverse3) {
        return this._iter.__iterator(type, reverse3);
      };
      return ToKeyedSequence2;
    }(KeyedSeq);
    ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
    ToIndexedSequence = function(IndexedSeq2) {
      function ToIndexedSequence2(iter) {
        this._iter = iter;
        this.size = iter.size;
      }
      if (IndexedSeq2) ToIndexedSequence2.__proto__ = IndexedSeq2;
      ToIndexedSequence2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      ToIndexedSequence2.prototype.constructor = ToIndexedSequence2;
      ToIndexedSequence2.prototype.includes = function includes3(value) {
        return this._iter.includes(value);
      };
      ToIndexedSequence2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        var i = 0;
        reverse3 && ensureSize(this);
        return this._iter.__iterate(
          function(v) {
            return fn(v, reverse3 ? this$1$1.size - ++i : i++, this$1$1);
          },
          reverse3
        );
      };
      ToIndexedSequence2.prototype.__iterator = function __iterator2(type, reverse3) {
        var this$1$1 = this;
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse3);
        var i = 0;
        reverse3 && ensureSize(this);
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(
            type,
            reverse3 ? this$1$1.size - ++i : i++,
            step.value,
            step
          );
        });
      };
      return ToIndexedSequence2;
    }(IndexedSeq);
    ToSetSequence = function(SetSeq2) {
      function ToSetSequence2(iter) {
        this._iter = iter;
        this.size = iter.size;
      }
      if (SetSeq2) ToSetSequence2.__proto__ = SetSeq2;
      ToSetSequence2.prototype = Object.create(SetSeq2 && SetSeq2.prototype);
      ToSetSequence2.prototype.constructor = ToSetSequence2;
      ToSetSequence2.prototype.has = function has5(key) {
        return this._iter.includes(key);
      };
      ToSetSequence2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        return this._iter.__iterate(function(v) {
          return fn(v, v, this$1$1);
        }, reverse3);
      };
      ToSetSequence2.prototype.__iterator = function __iterator2(type, reverse3) {
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse3);
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(type, step.value, step.value, step);
        });
      };
      return ToSetSequence2;
    }(SetSeq);
    FromEntriesSequence = function(KeyedSeq2) {
      function FromEntriesSequence2(entries3) {
        this._iter = entries3;
        this.size = entries3.size;
      }
      if (KeyedSeq2) FromEntriesSequence2.__proto__ = KeyedSeq2;
      FromEntriesSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      FromEntriesSequence2.prototype.constructor = FromEntriesSequence2;
      FromEntriesSequence2.prototype.entrySeq = function entrySeq2() {
        return this._iter.toSeq();
      };
      FromEntriesSequence2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        return this._iter.__iterate(function(entry) {
          if (entry) {
            validateEntry(entry);
            var indexedCollection = isCollection(entry);
            return fn(
              indexedCollection ? entry.get(1) : entry[1],
              indexedCollection ? entry.get(0) : entry[0],
              this$1$1
            );
          }
        }, reverse3);
      };
      FromEntriesSequence2.prototype.__iterator = function __iterator2(type, reverse3) {
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse3);
        return new Iterator(function() {
          while (true) {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            if (entry) {
              validateEntry(entry);
              var indexedCollection = isCollection(entry);
              return iteratorValue(
                type,
                indexedCollection ? entry.get(0) : entry[0],
                indexedCollection ? entry.get(1) : entry[1],
                step
              );
            }
          }
        });
      };
      return FromEntriesSequence2;
    }(KeyedSeq);
    ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
    toString2 = Object.prototype.toString;
    Map2 = function(KeyedCollection2) {
      function Map3(value) {
        return value === void 0 || value === null ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map2) {
          var iter = KeyedCollection2(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k) {
            return map2.set(k, v);
          });
        });
      }
      if (KeyedCollection2) Map3.__proto__ = KeyedCollection2;
      Map3.prototype = Object.create(KeyedCollection2 && KeyedCollection2.prototype);
      Map3.prototype.constructor = Map3;
      Map3.of = function of() {
        var keyValues = [], len = arguments.length;
        while (len--) keyValues[len] = arguments[len];
        return emptyMap().withMutations(function(map2) {
          for (var i = 0; i < keyValues.length; i += 2) {
            if (i + 1 >= keyValues.length) {
              throw new Error("Missing value for key: " + keyValues[i]);
            }
            map2.set(keyValues[i], keyValues[i + 1]);
          }
        });
      };
      Map3.prototype.toString = function toString5() {
        return this.__toString("Map {", "}");
      };
      Map3.prototype.get = function get11(k, notSetValue) {
        return this._root ? this._root.get(0, void 0, k, notSetValue) : notSetValue;
      };
      Map3.prototype.set = function set3(k, v) {
        return updateMap(this, k, v);
      };
      Map3.prototype.remove = function remove3(k) {
        return updateMap(this, k, NOT_SET);
      };
      Map3.prototype.deleteAll = function deleteAll(keys2) {
        var collection = Collection(keys2);
        if (collection.size === 0) {
          return this;
        }
        return this.withMutations(function(map2) {
          collection.forEach(function(key) {
            return map2.remove(key);
          });
        });
      };
      Map3.prototype.clear = function clear2() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._root = null;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyMap();
      };
      Map3.prototype.sort = function sort2(comparator) {
        return OrderedMap(sortFactory(this, comparator));
      };
      Map3.prototype.sortBy = function sortBy2(mapper, comparator) {
        return OrderedMap(sortFactory(this, comparator, mapper));
      };
      Map3.prototype.map = function map2(mapper, context) {
        var this$1$1 = this;
        return this.withMutations(function(map3) {
          map3.forEach(function(value, key) {
            map3.set(key, mapper.call(context, value, key, this$1$1));
          });
        });
      };
      Map3.prototype.__iterator = function __iterator2(type, reverse3) {
        return new MapIterator(this, type, reverse3);
      };
      Map3.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        var iterations = 0;
        this._root && this._root.iterate(function(entry) {
          iterations++;
          return fn(entry[1], entry[0], this$1$1);
        }, reverse3);
        return iterations;
      };
      Map3.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyMap();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeMap(this.size, this._root, ownerID, this.__hash);
      };
      return Map3;
    }(KeyedCollection);
    Map2.isMap = isMap;
    MapPrototype = Map2.prototype;
    MapPrototype[IS_MAP_SYMBOL] = true;
    MapPrototype[DELETE] = MapPrototype.remove;
    MapPrototype.removeAll = MapPrototype.deleteAll;
    MapPrototype.setIn = setIn;
    MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
    MapPrototype.update = update;
    MapPrototype.updateIn = updateIn;
    MapPrototype.merge = MapPrototype.concat = merge$1;
    MapPrototype.mergeWith = mergeWith$1;
    MapPrototype.mergeDeep = mergeDeep;
    MapPrototype.mergeDeepWith = mergeDeepWith;
    MapPrototype.mergeIn = mergeIn;
    MapPrototype.mergeDeepIn = mergeDeepIn;
    MapPrototype.withMutations = withMutations;
    MapPrototype.wasAltered = wasAltered;
    MapPrototype.asImmutable = asImmutable;
    MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
    MapPrototype["@@transducer/step"] = function(result, arr) {
      return result.set(arr[0], arr[1]);
    };
    MapPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    ArrayMapNode = function ArrayMapNode2(ownerID, entries3) {
      this.ownerID = ownerID;
      this.entries = entries3;
    };
    ArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      var entries3 = this.entries;
      for (var ii = 0, len = entries3.length; ii < len; ii++) {
        if (is(key, entries3[ii][0])) {
          return entries3[ii][1];
        }
      }
      return notSetValue;
    };
    ArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var entries3 = this.entries;
      var idx = 0;
      var len = entries3.length;
      for (; idx < len; idx++) {
        if (is(key, entries3[idx][0])) {
          break;
        }
      }
      var exists = idx < len;
      if (exists ? entries3[idx][1] === value : removed) {
        return this;
      }
      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);
      if (removed && entries3.length === 1) {
        return;
      }
      if (!exists && !removed && entries3.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries3, key, value);
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries3 : arrCopy(entries3);
      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }
      if (isEditable) {
        this.entries = newEntries;
        return this;
      }
      return new ArrayMapNode(ownerID, newEntries);
    };
    BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    };
    BitmapIndexedNode.prototype.get = function get3(shift, keyHash, key, notSetValue) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(
        shift + SHIFT,
        keyHash,
        key,
        notSetValue
      );
    };
    BitmapIndexedNode.prototype.update = function update3(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;
      if (!exists && value === NOT_SET) {
        return this;
      }
      var idx = popCount(bitmap & bit - 1);
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : void 0;
      var newNode = updateNode(
        node,
        ownerID,
        shift + SHIFT,
        keyHash,
        key,
        value,
        didChangeSize,
        didAlter
      );
      if (newNode === node) {
        return this;
      }
      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }
      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }
      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }
      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };
    HashArrayMapNode = function HashArrayMapNode2(ownerID, count2, nodes) {
      this.ownerID = ownerID;
      this.count = count2;
      this.nodes = nodes;
    };
    HashArrayMapNode.prototype.get = function get4(shift, keyHash, key, notSetValue) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };
    HashArrayMapNode.prototype.update = function update4(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];
      if (removed && !node) {
        return this;
      }
      var newNode = updateNode(
        node,
        ownerID,
        shift + SHIFT,
        keyHash,
        key,
        value,
        didChangeSize,
        didAlter
      );
      if (newNode === node) {
        return this;
      }
      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setAt(nodes, idx, newNode, isEditable);
      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }
      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };
    HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries3) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries3;
    };
    HashCollisionNode.prototype.get = function get5(shift, keyHash, key, notSetValue) {
      var entries3 = this.entries;
      for (var ii = 0, len = entries3.length; ii < len; ii++) {
        if (is(key, entries3[ii][0])) {
          return entries3[ii][1];
        }
      }
      return notSetValue;
    };
    HashCollisionNode.prototype.update = function update5(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var removed = value === NOT_SET;
      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
      }
      var entries3 = this.entries;
      var idx = 0;
      var len = entries3.length;
      for (; idx < len; idx++) {
        if (is(key, entries3[idx][0])) {
          break;
        }
      }
      var exists = idx < len;
      if (exists ? entries3[idx][1] === value : removed) {
        return this;
      }
      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);
      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries3[idx ^ 1]);
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries3 : arrCopy(entries3);
      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }
      if (isEditable) {
        this.entries = newEntries;
        return this;
      }
      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };
    ValueNode = function ValueNode2(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    };
    ValueNode.prototype.get = function get6(shift, keyHash, key, notSetValue) {
      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };
    ValueNode.prototype.update = function update6(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var keyMatch = is(key, this.entry[0]);
      if (keyMatch ? value === this.entry[1] : removed) {
        return this;
      }
      SetRef(didAlter);
      if (removed) {
        SetRef(didChangeSize);
        return;
      }
      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value]);
      }
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
    };
    ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse3) {
      var entries3 = this.entries;
      for (var ii = 0, maxIndex = entries3.length - 1; ii <= maxIndex; ii++) {
        if (fn(entries3[reverse3 ? maxIndex - ii : ii]) === false) {
          return false;
        }
      }
    };
    BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse3) {
      var nodes = this.nodes;
      for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
        var node = nodes[reverse3 ? maxIndex - ii : ii];
        if (node && node.iterate(fn, reverse3) === false) {
          return false;
        }
      }
    };
    ValueNode.prototype.iterate = function(fn, reverse3) {
      return fn(this.entry);
    };
    MapIterator = function(Iterator3) {
      function MapIterator2(map2, type, reverse3) {
        this._type = type;
        this._reverse = reverse3;
        this._stack = map2._root && mapIteratorFrame(map2._root);
      }
      if (Iterator3) MapIterator2.__proto__ = Iterator3;
      MapIterator2.prototype = Object.create(Iterator3 && Iterator3.prototype);
      MapIterator2.prototype.constructor = MapIterator2;
      MapIterator2.prototype.next = function next() {
        var type = this._type;
        var stack = this._stack;
        while (stack) {
          var node = stack.node;
          var index = stack.index++;
          var maxIndex = void 0;
          if (node.entry) {
            if (index === 0) {
              return mapIteratorValue(type, node.entry);
            }
          } else if (node.entries) {
            maxIndex = node.entries.length - 1;
            if (index <= maxIndex) {
              return mapIteratorValue(
                type,
                node.entries[this._reverse ? maxIndex - index : index]
              );
            }
          } else {
            maxIndex = node.nodes.length - 1;
            if (index <= maxIndex) {
              var subNode = node.nodes[this._reverse ? maxIndex - index : index];
              if (subNode) {
                if (subNode.entry) {
                  return mapIteratorValue(type, subNode.entry);
                }
                stack = this._stack = mapIteratorFrame(subNode, stack);
              }
              continue;
            }
          }
          stack = this._stack = this._stack.__prev;
        }
        return iteratorDone();
      };
      return MapIterator2;
    }(Iterator);
    MAX_ARRAY_MAP_SIZE = SIZE / 4;
    MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
    MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
    IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
    List = function(IndexedCollection2) {
      function List2(value) {
        var empty = emptyList();
        if (value === void 0 || value === null) {
          return empty;
        }
        if (isList(value)) {
          return value;
        }
        var iter = IndexedCollection2(value);
        var size = iter.size;
        if (size === 0) {
          return empty;
        }
        assertNotInfinite(size);
        if (size > 0 && size < SIZE) {
          return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
        }
        return empty.withMutations(function(list) {
          list.setSize(size);
          iter.forEach(function(v, i) {
            return list.set(i, v);
          });
        });
      }
      if (IndexedCollection2) List2.__proto__ = IndexedCollection2;
      List2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
      List2.prototype.constructor = List2;
      List2.of = function of() {
        return this(arguments);
      };
      List2.prototype.toString = function toString5() {
        return this.__toString("List [", "]");
      };
      List2.prototype.get = function get11(index, notSetValue) {
        index = wrapIndex(this, index);
        if (index >= 0 && index < this.size) {
          index += this._origin;
          var node = listNodeFor(this, index);
          return node && node.array[index & MASK];
        }
        return notSetValue;
      };
      List2.prototype.set = function set3(index, value) {
        return updateList(this, index, value);
      };
      List2.prototype.remove = function remove3(index) {
        return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
      };
      List2.prototype.insert = function insert(index, value) {
        return this.splice(index, 0, value);
      };
      List2.prototype.clear = function clear2() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = this._origin = this._capacity = 0;
          this._level = SHIFT;
          this._root = this._tail = this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyList();
      };
      List2.prototype.push = function push() {
        var values2 = arguments;
        var oldSize = this.size;
        return this.withMutations(function(list) {
          setListBounds(list, 0, oldSize + values2.length);
          for (var ii = 0; ii < values2.length; ii++) {
            list.set(oldSize + ii, values2[ii]);
          }
        });
      };
      List2.prototype.pop = function pop() {
        return setListBounds(this, 0, -1);
      };
      List2.prototype.unshift = function unshift() {
        var values2 = arguments;
        return this.withMutations(function(list) {
          setListBounds(list, -values2.length);
          for (var ii = 0; ii < values2.length; ii++) {
            list.set(ii, values2[ii]);
          }
        });
      };
      List2.prototype.shift = function shift() {
        return setListBounds(this, 1);
      };
      List2.prototype.concat = function concat2() {
        var arguments$1 = arguments;
        var seqs = [];
        for (var i = 0; i < arguments.length; i++) {
          var argument = arguments$1[i];
          var seq = IndexedCollection2(
            typeof argument !== "string" && hasIterator(argument) ? argument : [argument]
          );
          if (seq.size !== 0) {
            seqs.push(seq);
          }
        }
        if (seqs.length === 0) {
          return this;
        }
        if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
          return this.constructor(seqs[0]);
        }
        return this.withMutations(function(list) {
          seqs.forEach(function(seq2) {
            return seq2.forEach(function(value) {
              return list.push(value);
            });
          });
        });
      };
      List2.prototype.setSize = function setSize(size) {
        return setListBounds(this, 0, size);
      };
      List2.prototype.map = function map2(mapper, context) {
        var this$1$1 = this;
        return this.withMutations(function(list) {
          for (var i = 0; i < this$1$1.size; i++) {
            list.set(i, mapper.call(context, list.get(i), i, this$1$1));
          }
        });
      };
      List2.prototype.slice = function slice3(begin, end) {
        var size = this.size;
        if (wholeSlice(begin, end, size)) {
          return this;
        }
        return setListBounds(
          this,
          resolveBegin(begin, size),
          resolveEnd(end, size)
        );
      };
      List2.prototype.__iterator = function __iterator2(type, reverse3) {
        var index = reverse3 ? this.size : 0;
        var values2 = iterateList(this, reverse3);
        return new Iterator(function() {
          var value = values2();
          return value === DONE ? iteratorDone() : iteratorValue(type, reverse3 ? --index : index++, value);
        });
      };
      List2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var index = reverse3 ? this.size : 0;
        var values2 = iterateList(this, reverse3);
        var value;
        while ((value = values2()) !== DONE) {
          if (fn(value, reverse3 ? --index : index++, this) === false) {
            break;
          }
        }
        return index;
      };
      List2.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyList();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeList(
          this._origin,
          this._capacity,
          this._level,
          this._root,
          this._tail,
          ownerID,
          this.__hash
        );
      };
      return List2;
    }(IndexedCollection);
    List.isList = isList;
    ListPrototype = List.prototype;
    ListPrototype[IS_LIST_SYMBOL] = true;
    ListPrototype[DELETE] = ListPrototype.remove;
    ListPrototype.merge = ListPrototype.concat;
    ListPrototype.setIn = setIn;
    ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
    ListPrototype.update = update;
    ListPrototype.updateIn = updateIn;
    ListPrototype.mergeIn = mergeIn;
    ListPrototype.mergeDeepIn = mergeDeepIn;
    ListPrototype.withMutations = withMutations;
    ListPrototype.wasAltered = wasAltered;
    ListPrototype.asImmutable = asImmutable;
    ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
    ListPrototype["@@transducer/step"] = function(result, arr) {
      return result.push(arr);
    };
    ListPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    VNode = function VNode2(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    };
    VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
      if (index === level ? 1 << level : this.array.length === 0) {
        return this;
      }
      var originIndex = index >>> level & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii = 0; ii < originIndex; ii++) {
          editable.array[ii] = void 0;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };
    VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = index - 1 >>> level & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }
      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }
      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };
    DONE = {};
    OrderedMap = function(Map3) {
      function OrderedMap2(value) {
        return value === void 0 || value === null ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map2) {
          var iter = KeyedCollection(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k) {
            return map2.set(k, v);
          });
        });
      }
      if (Map3) OrderedMap2.__proto__ = Map3;
      OrderedMap2.prototype = Object.create(Map3 && Map3.prototype);
      OrderedMap2.prototype.constructor = OrderedMap2;
      OrderedMap2.of = function of() {
        return this(arguments);
      };
      OrderedMap2.prototype.toString = function toString5() {
        return this.__toString("OrderedMap {", "}");
      };
      OrderedMap2.prototype.get = function get11(k, notSetValue) {
        var index = this._map.get(k);
        return index !== void 0 ? this._list.get(index)[1] : notSetValue;
      };
      OrderedMap2.prototype.clear = function clear2() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._map.clear();
          this._list.clear();
          this.__altered = true;
          return this;
        }
        return emptyOrderedMap();
      };
      OrderedMap2.prototype.set = function set3(k, v) {
        return updateOrderedMap(this, k, v);
      };
      OrderedMap2.prototype.remove = function remove3(k) {
        return updateOrderedMap(this, k, NOT_SET);
      };
      OrderedMap2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        return this._list.__iterate(
          function(entry) {
            return entry && fn(entry[1], entry[0], this$1$1);
          },
          reverse3
        );
      };
      OrderedMap2.prototype.__iterator = function __iterator2(type, reverse3) {
        return this._list.fromEntrySeq().__iterator(type, reverse3);
      };
      OrderedMap2.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newMap = this._map.__ensureOwner(ownerID);
        var newList = this._list.__ensureOwner(ownerID);
        if (!ownerID) {
          if (this.size === 0) {
            return emptyOrderedMap();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          this._map = newMap;
          this._list = newList;
          return this;
        }
        return makeOrderedMap(newMap, newList, ownerID, this.__hash);
      };
      return OrderedMap2;
    }(Map2);
    OrderedMap.isOrderedMap = isOrderedMap;
    OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
    OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
    IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
    Stack = function(IndexedCollection2) {
      function Stack2(value) {
        return value === void 0 || value === null ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);
      }
      if (IndexedCollection2) Stack2.__proto__ = IndexedCollection2;
      Stack2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
      Stack2.prototype.constructor = Stack2;
      Stack2.of = function of() {
        return this(arguments);
      };
      Stack2.prototype.toString = function toString5() {
        return this.__toString("Stack [", "]");
      };
      Stack2.prototype.get = function get11(index, notSetValue) {
        var head2 = this._head;
        index = wrapIndex(this, index);
        while (head2 && index--) {
          head2 = head2.next;
        }
        return head2 ? head2.value : notSetValue;
      };
      Stack2.prototype.peek = function peek() {
        return this._head && this._head.value;
      };
      Stack2.prototype.push = function push() {
        var arguments$1 = arguments;
        if (arguments.length === 0) {
          return this;
        }
        var newSize = this.size + arguments.length;
        var head2 = this._head;
        for (var ii = arguments.length - 1; ii >= 0; ii--) {
          head2 = {
            value: arguments$1[ii],
            next: head2
          };
        }
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head2;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head2);
      };
      Stack2.prototype.pushAll = function pushAll(iter) {
        iter = IndexedCollection2(iter);
        if (iter.size === 0) {
          return this;
        }
        if (this.size === 0 && isStack(iter)) {
          return iter;
        }
        assertNotInfinite(iter.size);
        var newSize = this.size;
        var head2 = this._head;
        iter.__iterate(
          function(value) {
            newSize++;
            head2 = {
              value,
              next: head2
            };
          },
          /* reverse */
          true
        );
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head2;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head2);
      };
      Stack2.prototype.pop = function pop() {
        return this.slice(1);
      };
      Stack2.prototype.clear = function clear2() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._head = void 0;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyStack();
      };
      Stack2.prototype.slice = function slice3(begin, end) {
        if (wholeSlice(begin, end, this.size)) {
          return this;
        }
        var resolvedBegin = resolveBegin(begin, this.size);
        var resolvedEnd = resolveEnd(end, this.size);
        if (resolvedEnd !== this.size) {
          return IndexedCollection2.prototype.slice.call(this, begin, end);
        }
        var newSize = this.size - resolvedBegin;
        var head2 = this._head;
        while (resolvedBegin--) {
          head2 = head2.next;
        }
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head2;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head2);
      };
      Stack2.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyStack();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeStack(this.size, this._head, ownerID, this.__hash);
      };
      Stack2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        if (reverse3) {
          return new ArraySeq(this.toArray()).__iterate(
            function(v, k) {
              return fn(v, k, this$1$1);
            },
            reverse3
          );
        }
        var iterations = 0;
        var node = this._head;
        while (node) {
          if (fn(node.value, iterations++, this) === false) {
            break;
          }
          node = node.next;
        }
        return iterations;
      };
      Stack2.prototype.__iterator = function __iterator2(type, reverse3) {
        if (reverse3) {
          return new ArraySeq(this.toArray()).__iterator(type, reverse3);
        }
        var iterations = 0;
        var node = this._head;
        return new Iterator(function() {
          if (node) {
            var value = node.value;
            node = node.next;
            return iteratorValue(type, iterations++, value);
          }
          return iteratorDone();
        });
      };
      return Stack2;
    }(IndexedCollection);
    Stack.isStack = isStack;
    StackPrototype = Stack.prototype;
    StackPrototype[IS_STACK_SYMBOL] = true;
    StackPrototype.shift = StackPrototype.pop;
    StackPrototype.unshift = StackPrototype.push;
    StackPrototype.unshiftAll = StackPrototype.pushAll;
    StackPrototype.withMutations = withMutations;
    StackPrototype.wasAltered = wasAltered;
    StackPrototype.asImmutable = asImmutable;
    StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
    StackPrototype["@@transducer/step"] = function(result, arr) {
      return result.unshift(arr);
    };
    StackPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
    Set2 = function(SetCollection2) {
      function Set3(value) {
        return value === void 0 || value === null ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set3) {
          var iter = SetCollection2(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v) {
            return set3.add(v);
          });
        });
      }
      if (SetCollection2) Set3.__proto__ = SetCollection2;
      Set3.prototype = Object.create(SetCollection2 && SetCollection2.prototype);
      Set3.prototype.constructor = Set3;
      Set3.of = function of() {
        return this(arguments);
      };
      Set3.fromKeys = function fromKeys(value) {
        return this(KeyedCollection(value).keySeq());
      };
      Set3.intersect = function intersect(sets) {
        sets = Collection(sets).toArray();
        return sets.length ? SetPrototype.intersect.apply(Set3(sets.pop()), sets) : emptySet();
      };
      Set3.union = function union(sets) {
        sets = Collection(sets).toArray();
        return sets.length ? SetPrototype.union.apply(Set3(sets.pop()), sets) : emptySet();
      };
      Set3.prototype.toString = function toString5() {
        return this.__toString("Set {", "}");
      };
      Set3.prototype.has = function has5(value) {
        return this._map.has(value);
      };
      Set3.prototype.add = function add(value) {
        return updateSet(this, this._map.set(value, value));
      };
      Set3.prototype.remove = function remove3(value) {
        return updateSet(this, this._map.remove(value));
      };
      Set3.prototype.clear = function clear2() {
        return updateSet(this, this._map.clear());
      };
      Set3.prototype.map = function map2(mapper, context) {
        var this$1$1 = this;
        var didChanges = false;
        var newMap = updateSet(
          this,
          this._map.mapEntries(function(ref) {
            var v = ref[1];
            var mapped = mapper.call(context, v, v, this$1$1);
            if (mapped !== v) {
              didChanges = true;
            }
            return [mapped, mapped];
          }, context)
        );
        return didChanges ? newMap : this;
      };
      Set3.prototype.union = function union() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        iters = iters.filter(function(x) {
          return x.size !== 0;
        });
        if (iters.length === 0) {
          return this;
        }
        if (this.size === 0 && !this.__ownerID && iters.length === 1) {
          return this.constructor(iters[0]);
        }
        return this.withMutations(function(set3) {
          for (var ii = 0; ii < iters.length; ii++) {
            if (typeof iters[ii] === "string") {
              set3.add(iters[ii]);
            } else {
              SetCollection2(iters[ii]).forEach(function(value) {
                return set3.add(value);
              });
            }
          }
        });
      };
      Set3.prototype.intersect = function intersect() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        if (iters.length === 0) {
          return this;
        }
        iters = iters.map(function(iter) {
          return SetCollection2(iter);
        });
        var toRemove = [];
        this.forEach(function(value) {
          if (!iters.every(function(iter) {
            return iter.includes(value);
          })) {
            toRemove.push(value);
          }
        });
        return this.withMutations(function(set3) {
          toRemove.forEach(function(value) {
            set3.remove(value);
          });
        });
      };
      Set3.prototype.subtract = function subtract() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        if (iters.length === 0) {
          return this;
        }
        iters = iters.map(function(iter) {
          return SetCollection2(iter);
        });
        var toRemove = [];
        this.forEach(function(value) {
          if (iters.some(function(iter) {
            return iter.includes(value);
          })) {
            toRemove.push(value);
          }
        });
        return this.withMutations(function(set3) {
          toRemove.forEach(function(value) {
            set3.remove(value);
          });
        });
      };
      Set3.prototype.sort = function sort2(comparator) {
        return OrderedSet(sortFactory(this, comparator));
      };
      Set3.prototype.sortBy = function sortBy2(mapper, comparator) {
        return OrderedSet(sortFactory(this, comparator, mapper));
      };
      Set3.prototype.wasAltered = function wasAltered3() {
        return this._map.wasAltered();
      };
      Set3.prototype.__iterate = function __iterate2(fn, reverse3) {
        var this$1$1 = this;
        return this._map.__iterate(function(k) {
          return fn(k, k, this$1$1);
        }, reverse3);
      };
      Set3.prototype.__iterator = function __iterator2(type, reverse3) {
        return this._map.__iterator(type, reverse3);
      };
      Set3.prototype.__ensureOwner = function __ensureOwner2(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newMap = this._map.__ensureOwner(ownerID);
        if (!ownerID) {
          if (this.size === 0) {
            return this.__empty();
          }
          this.__ownerID = ownerID;
          this._map = newMap;
          return this;
        }
        return this.__make(newMap, ownerID);
      };
      return Set3;
    }(SetCollection);
    Set2.isSet = isSet;
    SetPrototype = Set2.prototype;
    SetPrototype[IS_SET_SYMBOL] = true;
    SetPrototype[DELETE] = SetPrototype.remove;
    SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
    SetPrototype.withMutations = withMutations;
    SetPrototype.asImmutable = asImmutable;
    SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
    SetPrototype["@@transducer/step"] = function(result, arr) {
      return result.add(arr);
    };
    SetPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    SetPrototype.__empty = emptySet;
    SetPrototype.__make = makeSet;
    Range = function(IndexedSeq2) {
      function Range2(start, end, step) {
        if (!(this instanceof Range2)) {
          return new Range2(start, end, step);
        }
        invariant(step !== 0, "Cannot step a Range by 0");
        start = start || 0;
        if (end === void 0) {
          end = Infinity;
        }
        step = step === void 0 ? 1 : Math.abs(step);
        if (end < start) {
          step = -step;
        }
        this._start = start;
        this._end = end;
        this._step = step;
        this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
        if (this.size === 0) {
          if (EMPTY_RANGE) {
            return EMPTY_RANGE;
          }
          EMPTY_RANGE = this;
        }
      }
      if (IndexedSeq2) Range2.__proto__ = IndexedSeq2;
      Range2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      Range2.prototype.constructor = Range2;
      Range2.prototype.toString = function toString5() {
        if (this.size === 0) {
          return "Range []";
        }
        return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
      };
      Range2.prototype.get = function get11(index, notSetValue) {
        return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
      };
      Range2.prototype.includes = function includes3(searchValue) {
        var possibleIndex = (searchValue - this._start) / this._step;
        return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
      };
      Range2.prototype.slice = function slice3(begin, end) {
        if (wholeSlice(begin, end, this.size)) {
          return this;
        }
        begin = resolveBegin(begin, this.size);
        end = resolveEnd(end, this.size);
        if (end <= begin) {
          return new Range2(0, 0);
        }
        return new Range2(
          this.get(begin, this._end),
          this.get(end, this._end),
          this._step
        );
      };
      Range2.prototype.indexOf = function indexOf2(searchValue) {
        var offsetValue = searchValue - this._start;
        if (offsetValue % this._step === 0) {
          var index = offsetValue / this._step;
          if (index >= 0 && index < this.size) {
            return index;
          }
        }
        return -1;
      };
      Range2.prototype.lastIndexOf = function lastIndexOf2(searchValue) {
        return this.indexOf(searchValue);
      };
      Range2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var size = this.size;
        var step = this._step;
        var value = reverse3 ? this._start + (size - 1) * step : this._start;
        var i = 0;
        while (i !== size) {
          if (fn(value, reverse3 ? size - ++i : i++, this) === false) {
            break;
          }
          value += reverse3 ? -step : step;
        }
        return i;
      };
      Range2.prototype.__iterator = function __iterator2(type, reverse3) {
        var size = this.size;
        var step = this._step;
        var value = reverse3 ? this._start + (size - 1) * step : this._start;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var v = value;
          value += reverse3 ? -step : step;
          return iteratorValue(type, reverse3 ? size - ++i : i++, v);
        });
      };
      Range2.prototype.equals = function equals3(other) {
        return other instanceof Range2 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
      };
      return Range2;
    }(IndexedSeq);
    Collection.isIterable = isCollection;
    Collection.isKeyed = isKeyed;
    Collection.isIndexed = isIndexed;
    Collection.isAssociative = isAssociative;
    Collection.isOrdered = isOrdered;
    Collection.Iterator = Iterator;
    mixin(Collection, {
      // ### Conversion to other types
      toArray: function toArray() {
        assertNotInfinite(this.size);
        var array = new Array(this.size || 0);
        var useTuples = isKeyed(this);
        var i = 0;
        this.__iterate(function(v, k) {
          array[i++] = useTuples ? [k, v] : v;
        });
        return array;
      },
      toIndexedSeq: function toIndexedSeq() {
        return new ToIndexedSequence(this);
      },
      toJS: function toJS$1() {
        return toJS(this);
      },
      toKeyedSeq: function toKeyedSeq() {
        return new ToKeyedSequence(this, true);
      },
      toMap: function toMap() {
        return Map2(this.toKeyedSeq());
      },
      toObject,
      toOrderedMap: function toOrderedMap() {
        return OrderedMap(this.toKeyedSeq());
      },
      toOrderedSet: function toOrderedSet() {
        return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
      },
      toSet: function toSet() {
        return Set2(isKeyed(this) ? this.valueSeq() : this);
      },
      toSetSeq: function toSetSeq() {
        return new ToSetSequence(this);
      },
      toSeq: function toSeq() {
        return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
      },
      toStack: function toStack() {
        return Stack(isKeyed(this) ? this.valueSeq() : this);
      },
      toList: function toList() {
        return List(isKeyed(this) ? this.valueSeq() : this);
      },
      // ### Common JavaScript methods and properties
      toString: function toString3() {
        return "[Collection]";
      },
      __toString: function __toString(head2, tail) {
        if (this.size === 0) {
          return head2 + tail;
        }
        return head2 + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
      },
      // ### ES6 Collection methods (ES6 Array and Map)
      concat: function concat() {
        var values2 = [], len = arguments.length;
        while (len--) values2[len] = arguments[len];
        return reify(this, concatFactory(this, values2));
      },
      includes: function includes(searchValue) {
        return this.some(function(value) {
          return is(value, searchValue);
        });
      },
      entries: function entries() {
        return this.__iterator(ITERATE_ENTRIES);
      },
      every: function every(predicate, context) {
        assertNotInfinite(this.size);
        var returnValue = true;
        this.__iterate(function(v, k, c) {
          if (!predicate.call(context, v, k, c)) {
            returnValue = false;
            return false;
          }
        });
        return returnValue;
      },
      filter: function filter(predicate, context) {
        return reify(this, filterFactory(this, predicate, context, true));
      },
      partition: function partition(predicate, context) {
        return partitionFactory(this, predicate, context);
      },
      find: function find(predicate, context, notSetValue) {
        var entry = this.findEntry(predicate, context);
        return entry ? entry[1] : notSetValue;
      },
      forEach: function forEach(sideEffect, context) {
        assertNotInfinite(this.size);
        return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
      },
      join: function join(separator) {
        assertNotInfinite(this.size);
        separator = separator !== void 0 ? "" + separator : ",";
        var joined = "";
        var isFirst = true;
        this.__iterate(function(v) {
          isFirst ? isFirst = false : joined += separator;
          joined += v !== null && v !== void 0 ? v.toString() : "";
        });
        return joined;
      },
      keys: function keys() {
        return this.__iterator(ITERATE_KEYS);
      },
      map: function map(mapper, context) {
        return reify(this, mapFactory(this, mapper, context));
      },
      reduce: function reduce$1(reducer, initialReduction, context) {
        return reduce(
          this,
          reducer,
          initialReduction,
          context,
          arguments.length < 2,
          false
        );
      },
      reduceRight: function reduceRight(reducer, initialReduction, context) {
        return reduce(
          this,
          reducer,
          initialReduction,
          context,
          arguments.length < 2,
          true
        );
      },
      reverse: function reverse() {
        return reify(this, reverseFactory(this, true));
      },
      slice: function slice(begin, end) {
        return reify(this, sliceFactory(this, begin, end, true));
      },
      some: function some(predicate, context) {
        assertNotInfinite(this.size);
        var returnValue = false;
        this.__iterate(function(v, k, c) {
          if (predicate.call(context, v, k, c)) {
            returnValue = true;
            return false;
          }
        });
        return returnValue;
      },
      sort: function sort(comparator) {
        return reify(this, sortFactory(this, comparator));
      },
      values: function values() {
        return this.__iterator(ITERATE_VALUES);
      },
      // ### More sequential methods
      butLast: function butLast() {
        return this.slice(0, -1);
      },
      isEmpty: function isEmpty() {
        return this.size !== void 0 ? this.size === 0 : !this.some(function() {
          return true;
        });
      },
      count: function count(predicate, context) {
        return ensureSize(
          predicate ? this.toSeq().filter(predicate, context) : this
        );
      },
      countBy: function countBy(grouper, context) {
        return countByFactory(this, grouper, context);
      },
      equals: function equals(other) {
        return deepEqual(this, other);
      },
      entrySeq: function entrySeq() {
        var collection = this;
        if (collection._cache) {
          return new ArraySeq(collection._cache);
        }
        var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
        entriesSequence.fromEntrySeq = function() {
          return collection.toSeq();
        };
        return entriesSequence;
      },
      filterNot: function filterNot(predicate, context) {
        return this.filter(not(predicate), context);
      },
      findEntry: function findEntry(predicate, context, notSetValue) {
        var found = notSetValue;
        this.__iterate(function(v, k, c) {
          if (predicate.call(context, v, k, c)) {
            found = [k, v];
            return false;
          }
        });
        return found;
      },
      findKey: function findKey(predicate, context) {
        var entry = this.findEntry(predicate, context);
        return entry && entry[0];
      },
      findLast: function findLast(predicate, context, notSetValue) {
        return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
      },
      findLastEntry: function findLastEntry(predicate, context, notSetValue) {
        return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
      },
      findLastKey: function findLastKey(predicate, context) {
        return this.toKeyedSeq().reverse().findKey(predicate, context);
      },
      first: function first(notSetValue) {
        return this.find(returnTrue, null, notSetValue);
      },
      flatMap: function flatMap(mapper, context) {
        return reify(this, flatMapFactory(this, mapper, context));
      },
      flatten: function flatten(depth) {
        return reify(this, flattenFactory(this, depth, true));
      },
      fromEntrySeq: function fromEntrySeq() {
        return new FromEntriesSequence(this);
      },
      get: function get7(searchKey, notSetValue) {
        return this.find(function(_, key) {
          return is(key, searchKey);
        }, void 0, notSetValue);
      },
      getIn,
      groupBy: function groupBy(grouper, context) {
        return groupByFactory(this, grouper, context);
      },
      has: function has2(searchKey) {
        return this.get(searchKey, NOT_SET) !== NOT_SET;
      },
      hasIn,
      isSubset: function isSubset(iter) {
        iter = typeof iter.includes === "function" ? iter : Collection(iter);
        return this.every(function(value) {
          return iter.includes(value);
        });
      },
      isSuperset: function isSuperset(iter) {
        iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
        return iter.isSubset(this);
      },
      keyOf: function keyOf(searchValue) {
        return this.findKey(function(value) {
          return is(value, searchValue);
        });
      },
      keySeq: function keySeq() {
        return this.toSeq().map(keyMapper).toIndexedSeq();
      },
      last: function last(notSetValue) {
        return this.toSeq().reverse().first(notSetValue);
      },
      lastKeyOf: function lastKeyOf(searchValue) {
        return this.toKeyedSeq().reverse().keyOf(searchValue);
      },
      max: function max(comparator) {
        return maxFactory(this, comparator);
      },
      maxBy: function maxBy(mapper, comparator) {
        return maxFactory(this, comparator, mapper);
      },
      min: function min(comparator) {
        return maxFactory(
          this,
          comparator ? neg(comparator) : defaultNegComparator
        );
      },
      minBy: function minBy(mapper, comparator) {
        return maxFactory(
          this,
          comparator ? neg(comparator) : defaultNegComparator,
          mapper
        );
      },
      rest: function rest() {
        return this.slice(1);
      },
      skip: function skip(amount) {
        return amount === 0 ? this : this.slice(Math.max(0, amount));
      },
      skipLast: function skipLast(amount) {
        return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
      },
      skipWhile: function skipWhile(predicate, context) {
        return reify(this, skipWhileFactory(this, predicate, context, true));
      },
      skipUntil: function skipUntil(predicate, context) {
        return this.skipWhile(not(predicate), context);
      },
      sortBy: function sortBy(mapper, comparator) {
        return reify(this, sortFactory(this, comparator, mapper));
      },
      take: function take(amount) {
        return this.slice(0, Math.max(0, amount));
      },
      takeLast: function takeLast(amount) {
        return this.slice(-Math.max(0, amount));
      },
      takeWhile: function takeWhile(predicate, context) {
        return reify(this, takeWhileFactory(this, predicate, context));
      },
      takeUntil: function takeUntil(predicate, context) {
        return this.takeWhile(not(predicate), context);
      },
      update: function update7(fn) {
        return fn(this);
      },
      valueSeq: function valueSeq() {
        return this.toIndexedSeq();
      },
      // ### Hashable Object
      hashCode: function hashCode() {
        return this.__hash || (this.__hash = hashCollection(this));
      }
      // ### Internal
      // abstract __iterate(fn, reverse)
      // abstract __iterator(type, reverse)
    });
    CollectionPrototype = Collection.prototype;
    CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
    CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
    CollectionPrototype.toJSON = CollectionPrototype.toArray;
    CollectionPrototype.__toStringMapper = quoteString;
    CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
      return this.toString();
    };
    CollectionPrototype.chain = CollectionPrototype.flatMap;
    CollectionPrototype.contains = CollectionPrototype.includes;
    mixin(KeyedCollection, {
      // ### More sequential methods
      flip: function flip() {
        return reify(this, flipFactory(this));
      },
      mapEntries: function mapEntries(mapper, context) {
        var this$1$1 = this;
        var iterations = 0;
        return reify(
          this,
          this.toSeq().map(function(v, k) {
            return mapper.call(context, [k, v], iterations++, this$1$1);
          }).fromEntrySeq()
        );
      },
      mapKeys: function mapKeys(mapper, context) {
        var this$1$1 = this;
        return reify(
          this,
          this.toSeq().flip().map(function(k, v) {
            return mapper.call(context, k, v, this$1$1);
          }).flip()
        );
      }
    });
    KeyedCollectionPrototype = KeyedCollection.prototype;
    KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
    KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
    KeyedCollectionPrototype.toJSON = toObject;
    KeyedCollectionPrototype.__toStringMapper = function(v, k) {
      return quoteString(k) + ": " + quoteString(v);
    };
    mixin(IndexedCollection, {
      // ### Conversion to other types
      toKeyedSeq: function toKeyedSeq2() {
        return new ToKeyedSequence(this, false);
      },
      // ### ES6 Collection methods (ES6 Array and Map)
      filter: function filter2(predicate, context) {
        return reify(this, filterFactory(this, predicate, context, false));
      },
      findIndex: function findIndex(predicate, context) {
        var entry = this.findEntry(predicate, context);
        return entry ? entry[0] : -1;
      },
      indexOf: function indexOf(searchValue) {
        var key = this.keyOf(searchValue);
        return key === void 0 ? -1 : key;
      },
      lastIndexOf: function lastIndexOf(searchValue) {
        var key = this.lastKeyOf(searchValue);
        return key === void 0 ? -1 : key;
      },
      reverse: function reverse2() {
        return reify(this, reverseFactory(this, false));
      },
      slice: function slice2(begin, end) {
        return reify(this, sliceFactory(this, begin, end, false));
      },
      splice: function splice(index, removeNum) {
        var numArgs = arguments.length;
        removeNum = Math.max(removeNum || 0, 0);
        if (numArgs === 0 || numArgs === 2 && !removeNum) {
          return this;
        }
        index = resolveBegin(index, index < 0 ? this.count() : this.size);
        var spliced = this.slice(0, index);
        return reify(
          this,
          numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
        );
      },
      // ### More collection methods
      findLastIndex: function findLastIndex(predicate, context) {
        var entry = this.findLastEntry(predicate, context);
        return entry ? entry[0] : -1;
      },
      first: function first2(notSetValue) {
        return this.get(0, notSetValue);
      },
      flatten: function flatten2(depth) {
        return reify(this, flattenFactory(this, depth, false));
      },
      get: function get8(index, notSetValue) {
        index = wrapIndex(this, index);
        return index < 0 || this.size === Infinity || this.size !== void 0 && index > this.size ? notSetValue : this.find(function(_, key) {
          return key === index;
        }, void 0, notSetValue);
      },
      has: function has3(index) {
        index = wrapIndex(this, index);
        return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
      },
      interpose: function interpose(separator) {
        return reify(this, interposeFactory(this, separator));
      },
      interleave: function interleave() {
        var collections = [this].concat(arrCopy(arguments));
        var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
        var interleaved = zipped.flatten(true);
        if (zipped.size) {
          interleaved.size = zipped.size * collections.length;
        }
        return reify(this, interleaved);
      },
      keySeq: function keySeq2() {
        return Range(0, this.size);
      },
      last: function last2(notSetValue) {
        return this.get(-1, notSetValue);
      },
      skipWhile: function skipWhile2(predicate, context) {
        return reify(this, skipWhileFactory(this, predicate, context, false));
      },
      zip: function zip() {
        var collections = [this].concat(arrCopy(arguments));
        return reify(this, zipWithFactory(this, defaultZipper, collections));
      },
      zipAll: function zipAll() {
        var collections = [this].concat(arrCopy(arguments));
        return reify(this, zipWithFactory(this, defaultZipper, collections, true));
      },
      zipWith: function zipWith(zipper) {
        var collections = arrCopy(arguments);
        collections[0] = this;
        return reify(this, zipWithFactory(this, zipper, collections));
      }
    });
    IndexedCollectionPrototype = IndexedCollection.prototype;
    IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
    IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
    mixin(SetCollection, {
      // ### ES6 Collection methods (ES6 Array and Map)
      get: function get9(value, notSetValue) {
        return this.has(value) ? value : notSetValue;
      },
      includes: function includes2(value) {
        return this.has(value);
      },
      // ### More sequential methods
      keySeq: function keySeq3() {
        return this.valueSeq();
      }
    });
    SetCollectionPrototype = SetCollection.prototype;
    SetCollectionPrototype.has = CollectionPrototype.includes;
    SetCollectionPrototype.contains = SetCollectionPrototype.includes;
    SetCollectionPrototype.keys = SetCollectionPrototype.values;
    mixin(KeyedSeq, KeyedCollectionPrototype);
    mixin(IndexedSeq, IndexedCollectionPrototype);
    mixin(SetSeq, SetCollectionPrototype);
    OrderedSet = function(Set3) {
      function OrderedSet2(value) {
        return value === void 0 || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set3) {
          var iter = SetCollection(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v) {
            return set3.add(v);
          });
        });
      }
      if (Set3) OrderedSet2.__proto__ = Set3;
      OrderedSet2.prototype = Object.create(Set3 && Set3.prototype);
      OrderedSet2.prototype.constructor = OrderedSet2;
      OrderedSet2.of = function of() {
        return this(arguments);
      };
      OrderedSet2.fromKeys = function fromKeys(value) {
        return this(KeyedCollection(value).keySeq());
      };
      OrderedSet2.prototype.toString = function toString5() {
        return this.__toString("OrderedSet {", "}");
      };
      return OrderedSet2;
    }(Set2);
    OrderedSet.isOrderedSet = isOrderedSet;
    OrderedSetPrototype = OrderedSet.prototype;
    OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
    OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
    OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
    OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;
    OrderedSetPrototype.__empty = emptyOrderedSet;
    OrderedSetPrototype.__make = makeOrderedSet;
    PairSorting = {
      LeftThenRight: -1,
      RightThenLeft: 1
    };
    Record = function Record2(defaultValues, name) {
      var hasInitialized;
      throwOnInvalidDefaultValues(defaultValues);
      var RecordType = function Record3(values2) {
        var this$1$1 = this;
        if (values2 instanceof RecordType) {
          return values2;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values2);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys2 = Object.keys(defaultValues);
          var indices = RecordTypePrototype._indices = {};
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys2;
          RecordTypePrototype._defaultValues = defaultValues;
          for (var i = 0; i < keys2.length; i++) {
            var propName = keys2[i];
            indices[propName] = i;
            if (RecordTypePrototype[propName]) {
              typeof console === "object" && console.warn && console.warn(
                "Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.'
              );
            } else {
              setProp(RecordTypePrototype, propName);
            }
          }
        }
        this.__ownerID = void 0;
        this._values = List().withMutations(function(l) {
          l.setSize(this$1$1._keys.length);
          KeyedCollection(values2).forEach(function(v, k) {
            l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? void 0 : v);
          });
        });
        return this;
      };
      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;
      if (name) {
        RecordType.displayName = name;
      }
      return RecordType;
    };
    Record.prototype.toString = function toString4() {
      var str = recordName(this) + " { ";
      var keys2 = this._keys;
      var k;
      for (var i = 0, l = keys2.length; i !== l; i++) {
        k = keys2[i];
        str += (i ? ", " : "") + k + ": " + quoteString(this.get(k));
      }
      return str + " }";
    };
    Record.prototype.equals = function equals2(other) {
      return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));
    };
    Record.prototype.hashCode = function hashCode2() {
      return recordSeq(this).hashCode();
    };
    Record.prototype.has = function has4(k) {
      return this._indices.hasOwnProperty(k);
    };
    Record.prototype.get = function get10(k, notSetValue) {
      if (!this.has(k)) {
        return notSetValue;
      }
      var index = this._indices[k];
      var value = this._values.get(index);
      return value === void 0 ? this._defaultValues[k] : value;
    };
    Record.prototype.set = function set2(k, v) {
      if (this.has(k)) {
        var newValues = this._values.set(
          this._indices[k],
          v === this._defaultValues[k] ? void 0 : v
        );
        if (newValues !== this._values && !this.__ownerID) {
          return makeRecord(this, newValues);
        }
      }
      return this;
    };
    Record.prototype.remove = function remove2(k) {
      return this.set(k);
    };
    Record.prototype.clear = function clear() {
      var newValues = this._values.clear().setSize(this._keys.length);
      return this.__ownerID ? this : makeRecord(this, newValues);
    };
    Record.prototype.wasAltered = function wasAltered2() {
      return this._values.wasAltered();
    };
    Record.prototype.toSeq = function toSeq2() {
      return recordSeq(this);
    };
    Record.prototype.toJS = function toJS$12() {
      return toJS(this);
    };
    Record.prototype.entries = function entries2() {
      return this.__iterator(ITERATE_ENTRIES);
    };
    Record.prototype.__iterator = function __iterator(type, reverse3) {
      return recordSeq(this).__iterator(type, reverse3);
    };
    Record.prototype.__iterate = function __iterate(fn, reverse3) {
      return recordSeq(this).__iterate(fn, reverse3);
    };
    Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newValues = this._values.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._values = newValues;
        return this;
      }
      return makeRecord(this, newValues, ownerID);
    };
    Record.isRecord = isRecord;
    Record.getDescriptiveName = recordName;
    RecordPrototype = Record.prototype;
    RecordPrototype[IS_RECORD_SYMBOL] = true;
    RecordPrototype[DELETE] = RecordPrototype.remove;
    RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
    RecordPrototype.getIn = getIn;
    RecordPrototype.hasIn = CollectionPrototype.hasIn;
    RecordPrototype.merge = merge$1;
    RecordPrototype.mergeWith = mergeWith$1;
    RecordPrototype.mergeIn = mergeIn;
    RecordPrototype.mergeDeep = mergeDeep;
    RecordPrototype.mergeDeepWith = mergeDeepWith;
    RecordPrototype.mergeDeepIn = mergeDeepIn;
    RecordPrototype.setIn = setIn;
    RecordPrototype.update = update;
    RecordPrototype.updateIn = updateIn;
    RecordPrototype.withMutations = withMutations;
    RecordPrototype.asMutable = asMutable;
    RecordPrototype.asImmutable = asImmutable;
    RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
    RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
    RecordPrototype.inspect = RecordPrototype.toSource = function() {
      return this.toString();
    };
    Repeat = function(IndexedSeq2) {
      function Repeat2(value, times) {
        if (!(this instanceof Repeat2)) {
          return new Repeat2(value, times);
        }
        this._value = value;
        this.size = times === void 0 ? Infinity : Math.max(0, times);
        if (this.size === 0) {
          if (EMPTY_REPEAT) {
            return EMPTY_REPEAT;
          }
          EMPTY_REPEAT = this;
        }
      }
      if (IndexedSeq2) Repeat2.__proto__ = IndexedSeq2;
      Repeat2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      Repeat2.prototype.constructor = Repeat2;
      Repeat2.prototype.toString = function toString5() {
        if (this.size === 0) {
          return "Repeat []";
        }
        return "Repeat [ " + this._value + " " + this.size + " times ]";
      };
      Repeat2.prototype.get = function get11(index, notSetValue) {
        return this.has(index) ? this._value : notSetValue;
      };
      Repeat2.prototype.includes = function includes3(searchValue) {
        return is(this._value, searchValue);
      };
      Repeat2.prototype.slice = function slice3(begin, end) {
        var size = this.size;
        return wholeSlice(begin, end, size) ? this : new Repeat2(
          this._value,
          resolveEnd(end, size) - resolveBegin(begin, size)
        );
      };
      Repeat2.prototype.reverse = function reverse3() {
        return this;
      };
      Repeat2.prototype.indexOf = function indexOf2(searchValue) {
        if (is(this._value, searchValue)) {
          return 0;
        }
        return -1;
      };
      Repeat2.prototype.lastIndexOf = function lastIndexOf2(searchValue) {
        if (is(this._value, searchValue)) {
          return this.size;
        }
        return -1;
      };
      Repeat2.prototype.__iterate = function __iterate2(fn, reverse3) {
        var size = this.size;
        var i = 0;
        while (i !== size) {
          if (fn(this._value, reverse3 ? size - ++i : i++, this) === false) {
            break;
          }
        }
        return i;
      };
      Repeat2.prototype.__iterator = function __iterator2(type, reverse3) {
        var this$1$1 = this;
        var size = this.size;
        var i = 0;
        return new Iterator(
          function() {
            return i === size ? iteratorDone() : iteratorValue(type, reverse3 ? size - ++i : i++, this$1$1._value);
          }
        );
      };
      Repeat2.prototype.equals = function equals3(other) {
        return other instanceof Repeat2 ? is(this._value, other._value) : deepEqual(this, other);
      };
      return Repeat2;
    }(IndexedSeq);
    version = "4.3.7";
    Immutable = {
      version,
      Collection,
      // Note: Iterable is deprecated
      Iterable: Collection,
      Seq,
      Map: Map2,
      OrderedMap,
      List,
      Stack,
      Set: Set2,
      OrderedSet,
      PairSorting,
      Record,
      Range,
      Repeat,
      is,
      fromJS,
      hash,
      isImmutable,
      isCollection,
      isKeyed,
      isIndexed,
      isAssociative,
      isOrdered,
      isValueObject,
      isPlainObject,
      isSeq,
      isList,
      isMap,
      isOrderedMap,
      isStack,
      isSet,
      isOrderedSet,
      isRecord,
      get,
      getIn: getIn$1,
      has,
      hasIn: hasIn$1,
      merge,
      mergeDeep: mergeDeep$1,
      mergeWith,
      mergeDeepWith: mergeDeepWith$1,
      remove,
      removeIn,
      set,
      setIn: setIn$1,
      update: update$1,
      updateIn: updateIn$1
    };
    Iterable = Collection;
    immutable_es_default = Immutable;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/ActionContext.js
var require_ActionContext = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/ActionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionContextKey = exports.ActionContext = void 0;
    var immutable_1 = (init_immutable_es(), __toCommonJS(immutable_es_exports));
    var ActionContext = class _ActionContext {
      constructor(data = {}) {
        this.map = (0, immutable_1.Map)(data);
      }
      /**
       * Will only set the value if the key is not already set.
       */
      setDefault(key, value) {
        return this.has(key) ? this : this.set(key, value);
      }
      set(key, value) {
        return this.setRaw(key.name, value);
      }
      setRaw(key, value) {
        return new _ActionContext(this.map.set(key, value));
      }
      delete(key) {
        return new _ActionContext(this.map.delete(key.name));
      }
      get(key) {
        return this.getRaw(key.name);
      }
      getRaw(key) {
        return this.map.get(key);
      }
      getSafe(key) {
        if (!this.has(key)) {
          throw new Error(`Context entry ${key.name} is required but not available`);
        }
        return this.get(key);
      }
      has(key) {
        return this.hasRaw(key.name);
      }
      hasRaw(key) {
        return this.map.has(key);
      }
      merge(...contexts) {
        let context = this;
        for (const source of contexts) {
          for (const key of source.keys()) {
            context = context.set(key, source.get(key));
          }
        }
        return context;
      }
      keys() {
        return [...this.map.keys()].map((keyName) => new ActionContextKey(keyName));
      }
      toJS() {
        return this.map.toJS();
      }
      toString() {
        return `ActionContext(${JSON.stringify(this.map.toJS())})`;
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `ActionContext(${JSON.stringify(this.map.toJS(), null, "  ")})`;
      }
      /**
       * Convert the given object to an action context object if it is not an action context object yet.
       * If it already is an action context object, return the object as-is.
       * @param maybeActionContext An action context or record.
       * @return {ActionContext} An action context object.
       */
      static ensureActionContext(maybeActionContext) {
        return maybeActionContext instanceof _ActionContext ? maybeActionContext : new _ActionContext((0, immutable_1.Map)(maybeActionContext ?? {}));
      }
    };
    exports.ActionContext = ActionContext;
    var ActionContextKey = class {
      constructor(name) {
        this.name = name;
      }
    };
    exports.ActionContextKey = ActionContextKey;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/Bus.js
var require_Bus = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/Bus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bus = void 0;
    var Bus = class {
      /**
       * All enumerable properties from the `args` object are inherited to this bus.
       *
       * @param {IBusArgs} args Arguments object
       * @param {string} args.name The name for the bus
       * @throws When required arguments are missing.
       */
      constructor(args) {
        this.actors = [];
        this.observers = [];
        this.dependencyLinks = /* @__PURE__ */ new Map();
        Object.assign(this, args);
        this.failMessage = `All actors over bus ${this.name} failed to handle an action`;
      }
      /**
       * Subscribe the given actor to the bus.
       * After this, the given actor can be unsubscribed from the bus by calling {@link Bus#unsubscribe}.
       *
       * An actor that is subscribed multiple times will exist that amount of times in the bus.
       *
       * @param {A} actor The actor to subscribe.
       */
      subscribe(actor) {
        this.actors.push(actor);
        this.reorderForDependencies();
      }
      /**
       * Subscribe the given observer to the bus.
       * After this, the given observer can be unsubscribed from the bus by calling {@link Bus#unsubscribeObserver}.
       *
       * An observer that is subscribed multiple times will exist that amount of times in the bus.
       *
       * @param {ActionObserver<I, O>} observer The observer to subscribe.
       */
      subscribeObserver(observer) {
        this.observers.push(observer);
      }
      /**
       * Unsubscribe the given actor from the bus.
       *
       * An actor that is subscribed multiple times will be unsubscribed only once.
       *
       * @param {A} actor The actor to unsubscribe
       * @return {boolean} If the given actor was successfully unsubscribed,
       *         otherwise it was not subscribed before.
       */
      unsubscribe(actor) {
        const index = this.actors.indexOf(actor);
        if (index >= 0) {
          this.actors.splice(index, 1);
          return true;
        }
        return false;
      }
      /**
       * Unsubscribe the given observer from the bus.
       *
       * An observer that is subscribed multiple times will be unsubscribed only once.
       *
       * @param {ActionObserver<I, O>} observer The observer to unsubscribe.
       * @return {boolean} If the given observer was successfully unsubscribed,
       *         otherwise it was not subscribed before.
       */
      unsubscribeObserver(observer) {
        const index = this.observers.indexOf(observer);
        if (index >= 0) {
          this.observers.splice(index, 1);
          return true;
        }
        return false;
      }
      /**
       * Publish an action to all actors in the bus to test if they can run the action.
       *
       * @param {I} action An action to publish
       * @return {IActorReply<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,
       *         O extends IActorOutput>[]}
       *         An array of reply objects. Each object contains a reference to the actor,
       *         and a promise to its {@link Actor#test} result.
       */
      publish(action) {
        return this.actors.map((actor) => ({ actor, reply: actor.test(action) }));
      }
      /**
       * Invoked when an action was run by an actor.
       *
       * @param actor               The action on which the {@link Actor#run} method was invoked.
       * @param {I}          action The original action input.
       * @param {Promise<O>} output A promise resolving to the final action output.
       */
      onRun(actor, action, output) {
        for (const observer of this.observers) {
          observer.onRun(actor, action, output);
        }
      }
      /**
       * Indicate that the given actor has the given actor dependencies.
       *
       * This will ensure that the given actor will be present in the bus *before* the given dependencies.
       *
       * @param {A} dependent A dependent actor that will be placed before the given actors.
       * @param {A[]} dependencies Actor dependencies that will be placed after the given actor.
       */
      addDependencies(dependent, dependencies) {
        for (const dependency of dependencies) {
          let existingDependencies = this.dependencyLinks.get(dependency);
          if (!existingDependencies) {
            existingDependencies = [];
            this.dependencyLinks.set(dependency, existingDependencies);
          }
          existingDependencies.push(dependent);
        }
        this.reorderForDependencies();
      }
      /**
       * Reorder the bus based on all present dependencies.
       */
      reorderForDependencies() {
        if (this.dependencyLinks.size > 0) {
          const actorsAfter = [];
          for (const actorAfter of this.dependencyLinks.keys()) {
            const dependentPos = this.actors.indexOf(actorAfter);
            if (dependentPos >= 0) {
              this.actors.splice(dependentPos, 1);
              actorsAfter.push(actorAfter);
            }
          }
          while (actorsAfter.length > 0) {
            let activeActorAfterId = -1;
            for (let i = 0; i < actorsAfter.length; i++) {
              let validLink = true;
              for (const dependency of this.dependencyLinks.get(actorsAfter[i])) {
                if (!this.actors.includes(dependency) && actorsAfter.includes(dependency)) {
                  validLink = false;
                  break;
                }
              }
              if (validLink) {
                activeActorAfterId = i;
                break;
              }
            }
            if (activeActorAfterId < 0) {
              throw new Error(`Cyclic dependency links detected in bus ${this.name}`);
            }
            const activeActorAfter = actorsAfter.splice(activeActorAfterId, 1)[0];
            this.actors.push(activeActorAfter);
          }
        }
      }
    };
    exports.Bus = Bus;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/BusIndexed.js
var require_BusIndexed = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/BusIndexed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusIndexed = void 0;
    var Bus_1 = require_Bus();
    var BusIndexed = class extends Bus_1.Bus {
      /**
       * All enumerable properties from the `args` object are inherited to this bus.
       *
       * @param {IBusIndexedArgs} args Arguments object
       * @param {string} args.name The name for the bus
       * @throws When required arguments are missing.
       */
      constructor(args) {
        super(args);
        this.actorsIndex = {};
      }
      subscribe(actor) {
        const actorIds = this.getActorIdentifiers(actor) ?? ["_undefined_"];
        for (const actorId of actorIds) {
          let actors = this.actorsIndex[actorId];
          if (!actors) {
            actors = this.actorsIndex[actorId] = [];
          }
          actors.push(actor);
          super.subscribe(actor);
        }
      }
      unsubscribe(actor) {
        const actorIds = this.getActorIdentifiers(actor) ?? ["_undefined_"];
        let unsubscribed = false;
        for (const actorId of actorIds) {
          const actors = this.actorsIndex[actorId];
          if (actors) {
            const i = actors.indexOf(actor);
            if (i >= 0) {
              actors.splice(i, 1);
            }
            if (actors.length === 0) {
              delete this.actorsIndex[actorId];
            }
          }
          unsubscribed = unsubscribed || super.unsubscribe(actor);
        }
        return unsubscribed;
      }
      publish(action) {
        const actionId = this.getActionIdentifier(action);
        if (actionId) {
          const actors = [...this.actorsIndex[actionId] || [], ...this.actorsIndex._undefined_ || []];
          return actors.map((actor) => ({ actor, reply: actor.test(action) }));
        }
        return super.publish(action);
      }
      getActorIdentifiers(actor) {
        const identifierValue = this.actorIdentifierFields.reduce((object, field) => object[field], actor);
        if (!identifierValue) {
          return;
        }
        return Array.isArray(identifierValue) ? identifierValue : [identifierValue];
      }
      getActionIdentifier(action) {
        return this.actionIdentifierFields.reduce((object, field) => object[field], action);
      }
    };
    exports.BusIndexed = BusIndexed;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/ContextEntries.js
var require_ContextEntries = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/ContextEntries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONTEXT_KEY_LOGGER = void 0;
    var ActionContext_1 = require_ActionContext();
    exports.CONTEXT_KEY_LOGGER = new ActionContext_1.ActionContextKey("@comunica/core:log");
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/ActionObserver.js
var require_ActionObserver = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/ActionObserver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserver = void 0;
    var ActionObserver = class {
      /**
       * All enumerable properties from the `args` object are inherited to this observer.
       *
       * The observer will NOT automatically subscribe to the given bus when this constructor is called.
       *
       * @param {IActionObserverArgs<I extends IAction, O extends IActorOutput>} args Arguments object
       * @throws When required arguments are missing.
       */
      constructor(args) {
        Object.assign(this, args);
      }
    };
    exports.ActionObserver = ActionObserver;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/Actor.js
var require_Actor = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/Actor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Actor = void 0;
    var ContextEntries_1 = require_ContextEntries();
    var Actor = class _Actor {
      /**
       * All enumerable properties from the `args` object are inherited to this actor.
       *
       * The actor will subscribe to the given bus when this constructor is called.
       *
       * @param {IActorArgs<I extends IAction, T extends IActorTest, O extends IActorOutput>} args Arguments object
       * @param {string} args.name The name for this actor.
       * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus
       *        The bus this actor subscribes to.
       * @throws When required arguments are missing.
       */
      constructor(args) {
        this.beforeActors = [];
        Object.assign(this, args);
        this.bus.subscribe(this);
        if (this.beforeActors.length > 0) {
          this.bus.addDependencies(this, this.beforeActors);
        }
        if (args.busFailMessage) {
          this.bus.failMessage = args.busFailMessage;
        }
      }
      /**
       * Get the logger from the given context.
       * @param {ActionContext} context An optional context.
       * @return {Logger} The logger or undefined.
       */
      static getContextLogger(context) {
        return context.get(ContextEntries_1.CONTEXT_KEY_LOGGER);
      }
      /**
       * Run the given action on this actor
       * AND invokes the {@link Bus#onRun} method.
       *
       * @param {I} action The action to run.
       * @return {Promise<T>} A promise that resolves to the run result.
       */
      runObservable(action, sideData) {
        const output = this.run(action, sideData);
        this.bus.onRun(this, action, output);
        return output;
      }
      /* Proxy methods for the (optional) logger that is defined in the context */
      getDefaultLogData(context, data) {
        const dataActual = data ? data() : {};
        dataActual.actor = this.name;
        return dataActual;
      }
      logTrace(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.trace(message, this.getDefaultLogData(context, data));
        }
      }
      logDebug(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.debug(message, this.getDefaultLogData(context, data));
        }
      }
      logInfo(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.info(message, this.getDefaultLogData(context, data));
        }
      }
      logWarn(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.warn(message, this.getDefaultLogData(context, data));
        }
      }
      logError(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.error(message, this.getDefaultLogData(context, data));
        }
      }
      logFatal(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.fatal(message, this.getDefaultLogData(context, data));
        }
      }
    };
    exports.Actor = Actor;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/Mediator.js
var require_Mediator = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/Mediator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mediator = void 0;
    var Mediator = class _Mediator {
      /**
       * All enumerable properties from the `args` object are inherited to this mediator.
       *
       * @param {IMediatorArgs<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,
       * O extends IActorOutput>} args Arguments object
       * @param {string} args.name The name for this mediator.
       * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus
       *        The bus this mediator will mediate over.
       * @throws When required arguments are missing.
       */
      constructor(args) {
        Object.assign(this, args);
      }
      /**
       * Publish the given action in the bus.
       *
       * This will send the test action on all actors in the bus.
       * All actor replies will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {IActorReply<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>[]}
       * The list of actor replies.
       */
      publish(action) {
        const actors = this.bus.publish(action);
        if (actors.length === 0) {
          throw new Error(`No actors are able to reply to a message in the bus ${this.bus.name}`);
        }
        return actors;
      }
      /**
       * Mediate for the given action to get an actor.
       *
       * This will send the test action on all actors in the bus.
       * The actor that tests _best_ will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {Promise<O extends IActorOutput>} A promise that resolves to the _best_ actor.
       */
      async mediateActor(action) {
        return await this.mediateWith(action, this.publish(action));
      }
      /**
       * Mediate for the given action.
       *
       * This will send the test action on all actors in the bus.
       * The action will be run on the actor that tests _best_,
       * of which the result will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {Promise<O extends IActorOutput>} A promise that resolves to the mediation result.
       */
      async mediateTestable(action) {
        const actorResult = await this.mediateActor(action);
        return actorResult.mapAsync((actor, sideData) => actor.runObservable(action, sideData));
      }
      /**
       * Mediate for the given action.
       *
       * This will send the test action on all actors in the bus.
       * The action will be run on the actor that tests _best_,
       * of which the result will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {Promise<O extends IActorOutput>} A promise that resolves to the mediation result.
       */
      async mediate(action) {
        const testable = await this.mediateTestable(action);
        return testable.getOrThrow();
      }
      /**
       * Construct a human-friendly failure message that accumulates the given actors's failure messages.
       * @param action The action that was executed.
       * @param actorFailures The failure messages that were collected from actor tests based on the given executed action.
       * @protected
       */
      constructFailureMessage(action, actorFailures) {
        const prefix = `
        `;
        const failMessage = this.bus.failMessage.replaceAll(/\$\{(.*?)\}/gu, (match, key) => _Mediator.getObjectValue({ action }, key.split(".")) || match);
        return `${failMessage}
    Error messages of failing actors:${prefix}${actorFailures.join(prefix)}`;
      }
      static getObjectValue(obj, path) {
        if (path.length === 0) {
          return obj;
        }
        if (obj) {
          return _Mediator.getObjectValue(obj[path[0]], path.slice(1));
        }
        return void 0;
      }
    };
    exports.Mediator = Mediator;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/TestResult.js
var require_TestResult = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/TestResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestResultFailed = exports.TestResultPassed = exports.failTest = exports.passTestVoidWithSideData = exports.passTestWithSideData = exports.passTestVoid = exports.passTest = void 0;
    function passTest(value) {
      return new TestResultPassed(value, void 0);
    }
    exports.passTest = passTest;
    function passTestVoid() {
      return new TestResultPassed(true, void 0);
    }
    exports.passTestVoid = passTestVoid;
    function passTestWithSideData(value, sideData) {
      return new TestResultPassed(value, sideData);
    }
    exports.passTestWithSideData = passTestWithSideData;
    function passTestVoidWithSideData(sideData) {
      return new TestResultPassed(true, sideData);
    }
    exports.passTestVoidWithSideData = passTestVoidWithSideData;
    function failTest(message) {
      return new TestResultFailed(message);
    }
    exports.failTest = failTest;
    var TestResultPassed = class _TestResultPassed {
      constructor(passValue, sideData) {
        this.value = passValue;
        this.sideData = sideData;
      }
      /**
       * Check if the test has passed.
       * If true, it will contain a value.
       */
      isPassed() {
        return true;
      }
      /**
       * Check if the test has failed.
       * If true, it will contain a failure message.
       */
      isFailed() {
        return false;
      }
      /**
       * Get the value of the passed test, or undefined if the test failed.
       */
      get() {
        return this.value;
      }
      /**
       * Get the value of the passed test, or throw an error if the test failed.
       */
      getOrThrow() {
        return this.value;
      }
      /**
       * The side data that will be passed to run.
       */
      getSideData() {
        return this.sideData;
      }
      /**
       * Get the failure message callback of the failed test, or undefined if the test passed.
       */
      getFailMessage() {
        return void 0;
      }
      /**
       * For passed tests, map the passed value to another value.
       * Failed tests will remain unchanged.
       *
       * This will not mutate the test result, and instead return a new test result.
       *
       * @param mapper A function that will transform the passed value.
       */
      map(mapper) {
        return new _TestResultPassed(mapper(this.value, this.sideData), this.sideData);
      }
      /**
       * For passed tests, asynchronously map the passed value to another value.
       * Failed tests will remain unchanged.
       *
       * This will not mutate the test result, and instead return a new test result.
       *
       * @param mapper A function that will transform the passed value.
       */
      async mapAsync(mapper) {
        return new _TestResultPassed(await mapper(this.value, this.sideData), this.sideData);
      }
    };
    exports.TestResultPassed = TestResultPassed;
    var TestResultFailed = class {
      constructor(failMessage) {
        this.failMessage = failMessage;
      }
      /**
       * Check if the test has passed.
       * If true, it will contain a value.
       */
      isPassed() {
        return false;
      }
      /**
       * Check if the test has failed.
       * If true, it will contain a failure message.
       */
      isFailed() {
        return true;
      }
      /**
       * Get the value of the passed test, or undefined if the test failed.
       */
      get() {
        return void 0;
      }
      /**
       * Get the value of the passed test, or throw an error if the test failed.
       */
      getOrThrow() {
        throw new Error(this.getFailMessage());
      }
      /**
       * The side data that will be passed to run.
       */
      getSideData() {
        throw new Error(this.getFailMessage());
      }
      /**
       * Get the failure message callback of the failed test, or undefined if the test passed.
       */
      getFailMessage() {
        return this.failMessage;
      }
      /**
       * For passed tests, map the passed value to another value.
       * Failed tests will remain unchanged.
       *
       * This will not mutate the test result, and instead return a new test result.
       */
      map() {
        return this;
      }
      /**
       * For passed tests, asynchronously map the passed value to another value.
       * Failed tests will remain unchanged.
       *
       * This will not mutate the test result, and instead return a new test result.
       */
      async mapAsync() {
        return this;
      }
    };
    exports.TestResultFailed = TestResultFailed;
  }
});

// ../../lipdjs/node_modules/@comunica/core/lib/index.js
var require_lib = __commonJS({
  "../../lipdjs/node_modules/@comunica/core/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActionContext(), exports);
    __exportStar(require_Bus(), exports);
    __exportStar(require_BusIndexed(), exports);
    __exportStar(require_ContextEntries(), exports);
    __exportStar(require_ActionObserver(), exports);
    __exportStar(require_Actor(), exports);
    __exportStar(require_Mediator(), exports);
    __exportStar(require_TestResult(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-init/lib/ActorInit.js
var require_ActorInit = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-init/lib/ActorInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInit = void 0;
    var core_1 = require_lib();
    var ActorInit = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Initialization failed: none of the configured actors were to initialize} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorInit = ActorInit;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-init/lib/index.js
var require_lib2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-init/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorInit(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-init-query/lib/ActorInitQueryBase.js
var require_ActorInitQueryBase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-init-query/lib/ActorInitQueryBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInitQueryBase = void 0;
    var bus_init_1 = require_lib2();
    var core_1 = require_lib();
    var ActorInitQueryBase = class extends bus_init_1.ActorInit {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(_action) {
        throw new Error("ActorInitSparql#run is not supported in the browser.");
      }
    };
    exports.ActorInitQueryBase = ActorInitQueryBase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-init-query/lib/ActorInitQuery-browser.js
var require_ActorInitQuery_browser = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-init-query/lib/ActorInitQuery-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInitQuery = void 0;
    var ActorInitQueryBase_1 = require_ActorInitQueryBase();
    if (typeof process === "undefined") {
      globalThis.process = require_browser();
    }
    var ActorInitQuery = class extends ActorInitQueryBase_1.ActorInitQueryBase {
    };
    exports.ActorInitQuery = ActorInitQuery;
  }
});

// ../../lipdjs/node_modules/@comunica/context-entries/lib/Keys.js
var require_Keys = __commonJS({
  "../../lipdjs/node_modules/@comunica/context-entries/lib/Keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeysStatistics = exports.KeysRdfJoin = exports.KeysMergeBindingsContext = exports.KeysRdfUpdateQuads = exports.KeysQuerySourceIdentify = exports.KeysRdfParseHtmlScript = exports.KeysRdfParseJsonLd = exports.KeysQueryOperation = exports.KeysExpressionEvaluator = exports.KeysInitQuery = exports.KeysHttpProxy = exports.KeysHttpMemento = exports.KeysHttpWayback = exports.KeysHttp = exports.KeysCore = void 0;
    var core_1 = require_lib();
    exports.KeysCore = {
      // We create the core context keys in @comunica/core to avoid a cyclic dependency
      /**
       * A logger instance.
       */
      log: core_1.CONTEXT_KEY_LOGGER
    };
    exports.KeysHttp = {
      /**
       * Include credentials flags.
       */
      includeCredentials: new core_1.ActionContextKey("@comunica/bus-http:include-credentials"),
      /**
       * Authentication for a source as a "username:password"-pair.
       */
      auth: new core_1.ActionContextKey("@comunica/bus-http:auth"),
      /**
       * Fetch function implementation.
       */
      fetch: new core_1.ActionContextKey("@comunica/bus-http:fetch"),
      /**
       * HTTP request timeout in milliseconds.
       */
      httpTimeout: new core_1.ActionContextKey("@comunica/bus-http:http-timeout"),
      /**
       * Makes the HTTP timeout not only apply until the response starts streaming in
       * but until the response is fully consumed.
       */
      httpBodyTimeout: new core_1.ActionContextKey("@comunica/bus-http:http-body-timeout"),
      /**
       * Number of retries to make on failed network calls. This only takes effect
       * on errors thrown during the initial fetch() call and not while streaming the body.
       */
      httpRetryCount: new core_1.ActionContextKey("@comunica/bus-http:http-retry-count"),
      /**
       * The fallback retry delay in milliseconds. This value is used when a server does not
       * send a delay value in the Retry-After header or if the header value is incorrectly formatted.
       */
      httpRetryDelayFallback: new core_1.ActionContextKey("@comunica/bus-http:http-retry-delay-fallback"),
      /**
       * The upper limit for the retry delay in milliseconds. When a server requests a delay larger than this,
       * the engine will consider it unavailable until the specified timestamp is close enough.
       */
      httpRetryDelayLimit: new core_1.ActionContextKey("@comunica/bus-http:http-retry-delay-limit"),
      /**
       * HTTP status codes that should always trigger a retry, regardless of the default behaviour.
       * This can be used to, for example, force retries on server-side errors in the 500 range.
       */
      httpRetryStatusCodes: new core_1.ActionContextKey("@comunica/bus-http:http-retry-status-codes")
    };
    exports.KeysHttpWayback = {
      /**
       * Use the WayBack machine to get the most recent representation of a file if a link is broken.
       * @default false
       */
      recoverBrokenLinks: new core_1.ActionContextKey("@comunica/bus-http:recover-broken-links")
    };
    exports.KeysHttpMemento = {
      /**
       * The desired datetime for Memento datetime-negotiation.
       */
      datetime: new core_1.ActionContextKey("@comunica/actor-http-memento:datetime")
    };
    exports.KeysHttpProxy = {
      /**
       * Interface.
       */
      httpProxyHandler: new core_1.ActionContextKey("@comunica/actor-http-proxy:httpProxyHandler")
    };
    exports.KeysInitQuery = {
      /**
       * The unidentified sources to query over.
       */
      querySourcesUnidentified: new core_1.ActionContextKey("@comunica/actor-init-query:querySourcesUnidentified"),
      /**
       * Variables that have to be pre-bound to values in the query.
       */
      initialBindings: new core_1.ActionContextKey("@comunica/actor-init-query:initialBindings"),
      /**
       * The provided query's format.
       * Defaults to { language: 'sparql', version: '1.1' }
       */
      queryFormat: new core_1.ActionContextKey("@comunica/actor-init-query:queryFormat"),
      /**
       * Which GraphQL bindings should be singularized.
       */
      graphqlSingularizeVariables: new core_1.ActionContextKey("@comunica/actor-init-query:singularizeVariables"),
      /**
       * If HTTP and parsing failures are ignored.
       */
      lenient: new core_1.ActionContextKey("@comunica/actor-init-query:lenient"),
      /**
       * The original query string.
       */
      queryString: new core_1.ActionContextKey("@comunica/actor-init-query:queryString"),
      /**
       * The original parsed query.
       */
      query: new core_1.ActionContextKey("@comunica/actor-init-query:query"),
      /**
       * The query's base IRI.
       */
      baseIRI: new core_1.ActionContextKey("@comunica/actor-init-query:baseIRI"),
      /**
       * Object to cache function argument overload resolutions.
       * Defaults to an object that is reused across query executions.
       */
      functionArgumentsCache: new core_1.ActionContextKey("@comunica/actor-init-query:functionArgumentsCache"),
      /**
       * A timestamp representing the current time.
       * This is required for certain SPARQL operations such as NOW().
       */
      queryTimestamp: new core_1.ActionContextKey("@comunica/actor-init-query:queryTimestamp"),
      /**
       * A high resolution timestamp representing the time elapsed since Performance.timeOrigin`.
       * It can be used to precisely measure durations from the start of query execution.
       */
      queryTimestampHighResolution: new core_1.ActionContextKey("@comunica/actor-init-query:queryTimestampHighResolution"),
      /**
       * @range {functionNamedNode: RDF.NamedNode) => ((args: RDF.Term[]) => Promise<RDF.Term>) | undefined}
       * Extension function creator for a given function IRI.
       * Returned value should be an async function implementation.
       * Undefined may be returned if no implementation exists for the given function IRI.
       *
       * The dictionary-based extensionFunctions context entry may be used instead, but not simultaneously.
       */
      extensionFunctionCreator: new core_1.ActionContextKey("@comunica/actor-init-query:extensionFunctionCreator"),
      /**
       * Dictionary of extension functions.
       * Key is the IRI of the function, and value is the async function implementation.
       *
       * The callback-based extensionFunctionCreator context entry may be used instead, but not simultaneously.
       */
      extensionFunctions: new core_1.ActionContextKey("@comunica/actor-init-query:extensionFunctions"),
      /**
       * Enables manipulation of the CLI arguments and their processing.
       */
      cliArgsHandlers: new core_1.ActionContextKey("@comunica/actor-init-query:cliArgsHandlers"),
      /**
       * Explain mode of the query. Can be 'parsed', 'logical', 'physical', or 'physical-json'.
       */
      explain: new core_1.ActionContextKey("@comunica/actor-init-query:explain"),
      /**
       * Logs the used physical operators
       */
      physicalQueryPlanLogger: new core_1.ActionContextKey("@comunica/actor-init-query:physicalQueryPlanLogger"),
      /**
       * The current physical operator within the query plan.
       *              This is used to pass parent-child relationships for invoking the query plan logger.
       */
      physicalQueryPlanNode: new core_1.ActionContextKey("@comunica/actor-init-query:physicalQueryPlanNode"),
      /**
       * A JSON-LD context
       */
      jsonLdContext: new core_1.ActionContextKey("@context"),
      /**
       * A boolean value denoting whether caching is disabled or not.
       */
      invalidateCache: new core_1.ActionContextKey("@comunica/actor-init-query:invalidateCache"),
      /**
       * The data factory for creating terms and quads.
       */
      dataFactory: new core_1.ActionContextKey("@comunica/actor-init-query:dataFactory"),
      /**
       * A boolean value denoting whether results should be deduplicated or not.
       */
      distinctConstruct: new core_1.ActionContextKey("@comunica/actor-init-query:distinctConstruct")
    };
    exports.KeysExpressionEvaluator = {
      extensionFunctionCreator: new core_1.ActionContextKey("@comunica/utils-expression-evaluator:extensionFunctionCreator"),
      superTypeProvider: new core_1.ActionContextKey("@comunica/utils-expression-evaluator:superTypeProvider"),
      defaultTimeZone: new core_1.ActionContextKey("@comunica/utils-expression-evaluator:defaultTimeZone"),
      actionContext: new core_1.ActionContextKey("@comunica/utils-expression-evaluator:actionContext")
    };
    exports.KeysQueryOperation = {
      /**
       * Context entry for the current query operation.
       */
      operation: new core_1.ActionContextKey("@comunica/bus-query-operation:operation"),
      /**
       * @type {any} The metadata from the left streams within a join operation.
       */
      joinLeftMetadata: new core_1.ActionContextKey("@comunica/bus-query-operation:joinLeftMetadata"),
      /**
       * An array of metadata from the right streams within a join operation.
       */
      joinRightMetadatas: new core_1.ActionContextKey("@comunica/bus-query-operation:joinRightMetadatas"),
      /**
       * Indicates the bindings that were used to bind the operation.
       */
      joinBindings: new core_1.ActionContextKey("@comunica/bus-query-operation:joinBindings"),
      /**
       * Flag for indicating that only read operations are allowed, defaults to false.
       */
      readOnly: new core_1.ActionContextKey("@comunica/bus-query-operation:readOnly"),
      /**
       * An internal context entry to mark that a property path with arbitrary length and a distinct key is being processed.
       */
      isPathArbitraryLengthDistinctKey: new core_1.ActionContextKey("@comunica/bus-query-operation:isPathArbitraryLengthDistinct"),
      /**
       * An indicator that the stream will be limited to the given number of elements afterwards.
       */
      limitIndicator: new core_1.ActionContextKey("@comunica/bus-query-operation:limitIndicator"),
      /**
       * If the default graph should also contain the union of all named graphs.
       */
      unionDefaultGraph: new core_1.ActionContextKey("@comunica/bus-query-operation:unionDefaultGraph"),
      /**
       * The sources to query over.
       */
      querySources: new core_1.ActionContextKey("@comunica/bus-query-operation:querySources")
    };
    exports.KeysRdfParseJsonLd = {
      /**
       * @range {IDocumentLoader}
       */
      documentLoader: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:documentLoader"),
      /**
       * @range {boolean}
       */
      strictValues: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:strictValues"),
      /**
       * @range {Record<string, any>}
       */
      parserOptions: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:parserOptions")
    };
    exports.KeysRdfParseHtmlScript = {
      /**
       * An internal context flag to determine if the engine is already processing an HTML script tag.
       */
      processingHtmlScript: new core_1.ActionContextKey("@comunica/actor-rdf-parse-html-script:processingHtmlScript"),
      /**
       * If all HTML script tags must be considered.
       */
      extractAllScripts: new core_1.ActionContextKey("extractAllScripts")
    };
    exports.KeysQuerySourceIdentify = {
      /**
       * A map containing unique IDs for each source
       */
      sourceIds: new core_1.ActionContextKey("@comunica/bus-query-source-identify:sourceIds"),
      /**
       * Hypermedia sources mapping to their aggregated store.
       */
      hypermediaSourcesAggregatedStores: new core_1.ActionContextKey("@comunica/bus-query-source-identify:hypermediaSourcesAggregatedStores"),
      /**
       * If links may be traversed from this source.
       * This means that sources annotated with this flag are considered incomplete until all links have been traversed.
       */
      traverse: new core_1.ActionContextKey("@comunica/bus-query-source-identify:traverse")
    };
    exports.KeysRdfUpdateQuads = {
      /**
       * A data destination.
       */
      destination: new core_1.ActionContextKey("@comunica/bus-rdf-update-quads:destination")
    };
    exports.KeysMergeBindingsContext = {
      /**
       * The data sources required to produce the binding
       */
      sourcesBinding: new core_1.ActionContextKey("@comunica/bus-merge-bindings-context:sourcesBinding")
    };
    exports.KeysRdfJoin = {
      /**
       * The last physical join actor that was executed.
       */
      lastPhysicalJoin: new core_1.ActionContextKey("@comunica/bus-rdf-join:lastPhysicalJoin")
    };
    exports.KeysStatistics = {
      /**
       * All discovered links during query execution. Not all of them will necessarily be dereferenced.
       */
      discoveredLinks: new core_1.ActionContextKey("@comunica/statistic:discoveredLinks"),
      /**
       * Information about what links are dereferenced and when
       */
      dereferencedLinks: new core_1.ActionContextKey("@comunica/statistic:dereferencedLinks"),
      /**
       * Intermediate results produced during query execution
       */
      intermediateResults: new core_1.ActionContextKey("@comunica/statistic:intermediateResults")
    };
  }
});

// ../../lipdjs/node_modules/@comunica/context-entries/lib/index.js
var require_lib3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/context-entries/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Keys(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-init-query/lib/QueryEngineBase.js
var require_QueryEngineBase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-init-query/lib/QueryEngineBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngineBase = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var QueryEngineBase = class _QueryEngineBase {
      constructor(actorInitQuery) {
        this.actorInitQuery = actorInitQuery;
      }
      async queryBindings(query, context) {
        return this.queryOfType(query, context, "bindings");
      }
      async queryQuads(query, context) {
        return this.queryOfType(query, context, "quads");
      }
      async queryBoolean(query, context) {
        return this.queryOfType(query, context, "boolean");
      }
      async queryVoid(query, context) {
        return this.queryOfType(query, context, "void");
      }
      async queryOfType(query, context, expectedType) {
        const result = await this.query(query, context);
        if (result.resultType === expectedType) {
          return await result.execute();
        }
        throw new Error(`Query result type '${expectedType}' was expected, while '${result.resultType}' was found.`);
      }
      /**
       * Evaluate the given query
       * @param query A query string or algebra.
       * @param context An optional query context.
       * @return {Promise<QueryType>} A promise that resolves to the query output.
       */
      async query(query, context) {
        const output = await this.queryOrExplain(query, context);
        if ("explain" in output) {
          throw new Error(`Tried to explain a query when in query-only mode`);
        }
        return output;
      }
      /**
       * Explain the given query
       * @param query A query string or algebra.
       * @param context An optional query context.
       * @param explainMode The explain mode.
       * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to
       *                                                               the query output or explanation.
       */
      async explain(query, context, explainMode) {
        context.explain = explainMode;
        const output = await this.queryOrExplain(query, context);
        return output;
      }
      /**
       * Evaluate or explain the given query
       * @param query A query string or algebra.
       * @param context An optional query context.
       * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to
       *                                                               the query output or explanation.
       */
      async queryOrExplain(query, context) {
        const actionContext = core_1.ActionContext.ensureActionContext(context);
        if (actionContext.get(context_entries_1.KeysInitQuery.invalidateCache)) {
          await this.invalidateHttpCache();
        }
        const { result } = await this.actorInitQuery.mediatorQueryProcess.mediate({ query, context: actionContext });
        if ("explain" in result) {
          return result;
        }
        return _QueryEngineBase.internalToFinalResult(result);
      }
      /**
       * @param context An optional context.
       * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.
       */
      async getResultMediaTypes(context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;
      }
      /**
       * @param context An optional context.
       * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.
       */
      async getResultMediaTypeFormats(context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;
      }
      /**
       * Convert a query result to a string stream based on a certain media type.
       * @param {IQueryOperationResult} queryResult A query result.
       * @param {string} mediaType A media type.
       * @param {ActionContext} context An optional context.
       * @return {Promise<IActorQueryResultSerializeOutput>} A text stream.
       */
      async resultToString(queryResult, mediaType, context) {
        context = core_1.ActionContext.ensureActionContext(context);
        if (!mediaType) {
          switch (queryResult.resultType) {
            case "bindings":
              mediaType = "application/json";
              break;
            case "quads":
              mediaType = "application/trig";
              break;
            default:
              mediaType = "simple";
              break;
          }
        }
        const handle = { ...await _QueryEngineBase.finalToInternalResult(queryResult), context };
        return (await this.actorInitQuery.mediatorQueryResultSerialize.mediate({ context, handle, handleMediaType: mediaType })).handle;
      }
      /**
       * Invalidate all internal caches related to the given page URL.
       * If no page URL is given, then all pages will be invalidated.
       * @param {string} url The page URL to invalidate.
       * @param context An optional ActionContext to pass to the actors.
       * @return {Promise<any>} A promise resolving when the caches have been invalidated.
       */
      invalidateHttpCache(url, context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return this.actorInitQuery.mediatorHttpInvalidate.mediate({ url, context });
      }
      /**
       * Convert an internal query result to a final one.
       * @param internalResult An intermediary query result.
       */
      static internalToFinalResult(internalResult) {
        switch (internalResult.type) {
          case "bindings":
            return {
              resultType: "bindings",
              execute: async () => internalResult.bindingsStream,
              metadata: async () => {
                const meta = await internalResult.metadata();
                meta.variables = meta.variables.map((variable) => variable.variable);
                return meta;
              },
              context: internalResult.context
            };
          case "quads":
            return {
              resultType: "quads",
              execute: async () => internalResult.quadStream,
              metadata: async () => await internalResult.metadata(),
              context: internalResult.context
            };
          case "boolean":
            return {
              resultType: "boolean",
              execute: async () => internalResult.execute(),
              context: internalResult.context
            };
          case "void":
            return {
              resultType: "void",
              execute: async () => internalResult.execute(),
              context: internalResult.context
            };
        }
      }
      /**
       * Convert a final query result to an internal one.
       * @param finalResult A final query result.
       */
      static async finalToInternalResult(finalResult) {
        switch (finalResult.resultType) {
          case "bindings":
            return {
              type: "bindings",
              bindingsStream: await finalResult.execute(),
              metadata: async () => {
                const meta = await finalResult.metadata();
                meta.variables = meta.variables.map((variable) => ({ variable, canBeUndef: false }));
                return meta;
              }
            };
          case "quads":
            return {
              type: "quads",
              quadStream: await finalResult.execute(),
              metadata: async () => await finalResult.metadata()
            };
          case "boolean":
            return {
              type: "boolean",
              execute: () => finalResult.execute()
            };
          case "void":
            return {
              type: "void",
              execute: () => finalResult.execute()
            };
        }
      }
    };
    exports.QueryEngineBase = QueryEngineBase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-init-query/lib/index-browser.js
var require_index_browser = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-init-query/lib/index-browser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngineBase = void 0;
    __exportStar(require_ActorInitQueryBase(), exports);
    __exportStar(require_ActorInitQuery_browser(), exports);
    var QueryEngineBase_1 = require_QueryEngineBase();
    Object.defineProperty(exports, "QueryEngineBase", { enumerable: true, get: function() {
      return QueryEngineBase_1.QueryEngineBase;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/Bindings.js
var require_Bindings = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/Bindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/ComunicaDataFactory.js
var require_ComunicaDataFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/ComunicaDataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IActionContext.js
var require_IActionContext = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IActionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IAggregatedStore.js
var require_IAggregatedStore = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IAggregatedStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/ICliArgsHandler.js
var require_ICliArgsHandler = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/ICliArgsHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IDataDestination.js
var require_IDataDestination = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IDataDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IDataset.js
var require_IDataset = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IDataset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IJoinEntry.js
var require_IJoinEntry = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IJoinEntry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IMetadata.js
var require_IMetadata = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IPhysicalQueryPlanLogger.js
var require_IPhysicalQueryPlanLogger = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IPhysicalQueryPlanLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IProxyHandler.js
var require_IProxyHandler = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IProxyHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IQueryContext.js
var require_IQueryContext = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IQueryContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IQueryEngine.js
var require_IQueryEngine = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IQueryEngine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IQueryOperationResult.js
var require_IQueryOperationResult = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IQueryOperationResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/IQuerySource.js
var require_IQuerySource = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/IQuerySource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/statistics/IStatisticBase.js
var require_IStatisticBase = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/statistics/IStatisticBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/statistics/IDiscoverEventData.js
var require_IDiscoverEventData = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/statistics/IDiscoverEventData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/statistics/IPartialResult.js
var require_IPartialResult = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/statistics/IPartialResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/ILink.js
var require_ILink = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/ILink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/Logger.js
var require_Logger = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/Logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var Logger = class _Logger {
      /**
       * Convert a string-based logging level to a numerical logging level.
       * @param level A string-based logging level
       * @return The numerical logging level, or undefined.
       */
      static getLevelOrdinal(level) {
        return _Logger.LEVELS[level];
      }
    };
    exports.Logger = Logger;
    Logger.LEVELS = {
      trace: 0,
      debug: 1,
      info: 2,
      warn: 3,
      error: 4,
      fatal: 5
    };
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/ExpressionEvaluator.js
var require_ExpressionEvaluator = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/ExpressionEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionType = void 0;
    var ExpressionType;
    (function(ExpressionType2) {
      ExpressionType2["Aggregate"] = "aggregate";
      ExpressionType2["Existence"] = "existence";
      ExpressionType2["Operator"] = "operator";
      ExpressionType2["Term"] = "term";
      ExpressionType2["Variable"] = "variable";
    })(ExpressionType || (exports.ExpressionType = ExpressionType = {}));
  }
});

// ../../lipdjs/node_modules/@comunica/types/lib/index.js
var require_lib4 = __commonJS({
  "../../lipdjs/node_modules/@comunica/types/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Bindings(), exports);
    __exportStar(require_ComunicaDataFactory(), exports);
    __exportStar(require_IActionContext(), exports);
    __exportStar(require_IAggregatedStore(), exports);
    __exportStar(require_ICliArgsHandler(), exports);
    __exportStar(require_IDataDestination(), exports);
    __exportStar(require_IDataset(), exports);
    __exportStar(require_IJoinEntry(), exports);
    __exportStar(require_IMetadata(), exports);
    __exportStar(require_IPhysicalQueryPlanLogger(), exports);
    __exportStar(require_IProxyHandler(), exports);
    __exportStar(require_IQueryContext(), exports);
    __exportStar(require_IQueryEngine(), exports);
    __exportStar(require_IQueryOperationResult(), exports);
    __exportStar(require_IQuerySource(), exports);
    __exportStar(require_IStatisticBase(), exports);
    __exportStar(require_IDiscoverEventData(), exports);
    __exportStar(require_IPartialResult(), exports);
    __exportStar(require_ILink(), exports);
    __exportStar(require_Logger(), exports);
    __exportStar(require_ExpressionEvaluator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/logger-void/lib/LoggerVoid.js
var require_LoggerVoid = __commonJS({
  "../../lipdjs/node_modules/@comunica/logger-void/lib/LoggerVoid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoggerVoid = void 0;
    var types_1 = require_lib4();
    var LoggerVoid = class extends types_1.Logger {
      debug() {
      }
      error() {
      }
      fatal() {
      }
      info() {
      }
      trace() {
      }
      warn() {
      }
    };
    exports.LoggerVoid = LoggerVoid;
  }
});

// ../../lipdjs/node_modules/@comunica/logger-void/lib/index.js
var require_lib5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/logger-void/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_LoggerVoid(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-function-factory/lib/ActorFunctionFactory.js
var require_ActorFunctionFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-function-factory/lib/ActorFunctionFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorFunctionFactory = exports.ActorFunctionFactory = void 0;
    var core_1 = require_lib();
    var ActorFunctionFactory = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       * \ @defaultNested {<default_bus> a <cbff:components/BusFunctionFactory.jsonld#BusFunctionFactory>} bus
       * \ @defaultNested {Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorFunctionFactory = ActorFunctionFactory;
    var MediatorFunctionFactory = class extends core_1.Mediator {
    };
    exports.MediatorFunctionFactory = MediatorFunctionFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-function-factory/lib/ActorFunctionFactoryDedicated.js
var require_ActorFunctionFactoryDedicated = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-function-factory/lib/ActorFunctionFactoryDedicated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryDedicated = void 0;
    var core_1 = require_lib();
    var ActorFunctionFactory_1 = require_ActorFunctionFactory();
    var ActorFunctionFactoryDedicated = class extends ActorFunctionFactory_1.ActorFunctionFactory {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (this.functionNames.includes(action.functionName) && (this.termFunction || !action.requireTermExpression)) {
          return (0, core_1.passTestVoid)();
        }
        return (0, core_1.failTest)(`Actor ${this.name} can not provide implementation for "${action.functionName}", only for ${this.termFunction ? "" : "non-termExpression "}${this.functionNames.join(" and ")}.`);
      }
    };
    exports.ActorFunctionFactoryDedicated = ActorFunctionFactoryDedicated;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-function-factory/lib/BusFunctionFactory.js
var require_BusFunctionFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-function-factory/lib/BusFunctionFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusFunctionFactory = void 0;
    var core_1 = require_lib();
    var BusFunctionFactory = class extends core_1.BusIndexed {
      constructor(args) {
        super({
          ...args,
          actorIdentifierFields: ["functionNames"],
          actionIdentifierFields: ["functionName"]
        });
      }
    };
    exports.BusFunctionFactory = BusFunctionFactory;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/BlankNode.js
var require_BlankNode = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/BlankNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNode = void 0;
    var BlankNode = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNode = BlankNode;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/DefaultGraph.js
var require_DefaultGraph = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/DefaultGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGraph = void 0;
    var DefaultGraph = class {
      constructor() {
        this.termType = "DefaultGraph";
        this.value = "";
      }
      equals(other) {
        return !!other && other.termType === "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph;
    DefaultGraph.INSTANCE = new DefaultGraph();
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/NamedNode.js
var require_NamedNode = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/NamedNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedNode = void 0;
    var NamedNode = class {
      constructor(value) {
        this.termType = "NamedNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "NamedNode" && other.value === this.value;
      }
    };
    exports.NamedNode = NamedNode;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/Literal.js
var require_Literal = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/Literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Literal = void 0;
    var NamedNode_1 = require_NamedNode();
    var Literal = class _Literal {
      constructor(value, languageOrDatatype) {
        this.termType = "Literal";
        this.value = value;
        if (typeof languageOrDatatype === "string") {
          this.language = languageOrDatatype;
          this.datatype = _Literal.RDF_LANGUAGE_STRING;
        } else if (languageOrDatatype) {
          this.language = "";
          this.datatype = languageOrDatatype;
        } else {
          this.language = "";
          this.datatype = _Literal.XSD_STRING;
        }
      }
      equals(other) {
        return !!other && other.termType === "Literal" && other.value === this.value && other.language === this.language && this.datatype.equals(other.datatype);
      }
    };
    exports.Literal = Literal;
    Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    Literal.XSD_STRING = new NamedNode_1.NamedNode("http://www.w3.org/2001/XMLSchema#string");
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/Quad.js
var require_Quad = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/Quad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quad = void 0;
    var Quad = class {
      constructor(subject, predicate, object, graph) {
        this.termType = "Quad";
        this.value = "";
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
      }
      equals(other) {
        return !!other && (other.termType === "Quad" || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Quad = Quad;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/Variable.js
var require_Variable = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Variable2 = class {
      constructor(value) {
        this.termType = "Variable";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "Variable" && other.value === this.value;
      }
    };
    exports.Variable = Variable2;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/lib/DataFactory.js
var require_DataFactory = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/lib/DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFactory = void 0;
    var BlankNode_1 = require_BlankNode();
    var DefaultGraph_1 = require_DefaultGraph();
    var Literal_1 = require_Literal();
    var NamedNode_1 = require_NamedNode();
    var Quad_1 = require_Quad();
    var Variable_1 = require_Variable();
    var dataFactoryCounter = 0;
    var DataFactory = class {
      constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
      }
      /**
       * @param value The IRI for the named node.
       * @return A new instance of NamedNode.
       * @see NamedNode
       */
      namedNode(value) {
        return new NamedNode_1.NamedNode(value);
      }
      /**
       * @param value The optional blank node identifier.
       * @return A new instance of BlankNode.
       *         If the `value` parameter is undefined a new identifier
       *         for the blank node is generated for each call.
       * @see BlankNode
       */
      blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
      }
      /**
       * @param value              The literal value.
       * @param languageOrDatatype The optional language or datatype.
       *                           If `languageOrDatatype` is a NamedNode,
       *                           then it is used for the value of `NamedNode.datatype`.
       *                           Otherwise `languageOrDatatype` is used for the value
       *                           of `NamedNode.language`.
       * @return A new instance of Literal.
       * @see Literal
       */
      literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
      }
      /**
       * This method is optional.
       * @param value The variable name
       * @return A new instance of Variable.
       * @see Variable
       */
      variable(value) {
        return new Variable_1.Variable(value);
      }
      /**
       * @return An instance of DefaultGraph.
       */
      defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
      }
      /**
       * @param subject   The quad subject term.
       * @param predicate The quad predicate term.
       * @param object    The quad object term.
       * @param graph     The quad graph term.
       * @return A new instance of Quad.
       * @see Quad
       */
      quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
      }
      /**
       * Create a deep copy of the given term using this data factory.
       * @param original An RDF term.
       * @return A deep copy of the given term.
       */
      fromTerm(original) {
        switch (original.termType) {
          case "NamedNode":
            return this.namedNode(original.value);
          case "BlankNode":
            return this.blankNode(original.value);
          case "Literal":
            if (original.language) {
              return this.literal(original.value, original.language);
            }
            if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
              return this.literal(original.value, this.fromTerm(original.datatype));
            }
            return this.literal(original.value);
          case "Variable":
            return this.variable(original.value);
          case "DefaultGraph":
            return this.defaultGraph();
          case "Quad":
            return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
      }
      /**
       * Create a deep copy of the given quad using this data factory.
       * @param original An RDF quad.
       * @return A deep copy of the given quad.
       */
      fromQuad(original) {
        return this.fromTerm(original);
      }
      /**
       * Reset the internal blank node counter.
       */
      resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
      }
    };
    exports.DataFactory = DataFactory;
  }
});

// ../../lipdjs/node_modules/rdf-data-factory/index.js
var require_rdf_data_factory = __commonJS({
  "../../lipdjs/node_modules/rdf-data-factory/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNode(), exports);
    __exportStar(require_DataFactory(), exports);
    __exportStar(require_DefaultGraph(), exports);
    __exportStar(require_Literal(), exports);
    __exportStar(require_NamedNode(), exports);
    __exportStar(require_Quad(), exports);
    __exportStar(require_Variable(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-string/lib/TermUtil.js
var require_TermUtil = __commonJS({
  "../../lipdjs/node_modules/rdf-string/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringQuadToQuad = exports.quadToStringQuad = exports.stringToTerm = exports.getLiteralLanguage = exports.getLiteralType = exports.getLiteralValue = exports.termToString = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return "_:" + term.value;
        case "Literal":
          const literalValue = term;
          return '"' + literalValue.value + '"' + (literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" ? "^^" + literalValue.datatype.value : "") + (literalValue.language ? "@" + literalValue.language : "");
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : " " + termToString(term.graph)}>>`;
        case "Variable":
          return "?" + term.value;
        case "DefaultGraph":
          return term.value;
      }
    }
    exports.termToString = termToString;
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1];
    }
    exports.getLiteralValue = getLiteralValue;
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    exports.getLiteralType = getLiteralType;
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] ? match[1].toLowerCase() : "";
    }
    exports.getLiteralLanguage = getLiteralLanguage;
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || !value.length) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.substr(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.substr(1));
        case '"':
          const language = getLiteralLanguage(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language || type);
        case "<":
        default:
          if (value[0] === "<" && value.length > 4 && value[1] === "<" && value[value.length - 1] === ">" && value[value.length - 2] === ">") {
            const terms = value.slice(2, -2).trim();
            let stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            let inQuote = false;
            for (let i = 0; i < terms.length; i++) {
              const char = terms[i];
              if (char === "<")
                ignoreTags++;
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error("Found closing tag without opening tag in " + value);
                } else {
                  ignoreTags--;
                }
              }
              if (char === '"') {
                let escaped = false;
                let j = i;
                while (j-- > 0 && terms[j] === "\\") {
                  escaped = !escaped;
                }
                if (!escaped) {
                  inQuote = !inQuote;
                }
              }
              if (char === " " && !inQuote && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i));
                while (terms[i + 1] === " ") {
                  i += 1;
                }
                lastIndex = i + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error("Found opening tag without closing tag in " + value);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error("Nested quad syntax error " + value);
            }
            stringTerms = stringTerms.map((term) => term.startsWith("<") && !term.includes(" ") ? term.slice(1, -1) : term);
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          return dataFactory.namedNode(value);
      }
    }
    exports.stringToTerm = stringToTerm;
    function quadToStringQuad(q) {
      return {
        subject: termToString(q.subject),
        predicate: termToString(q.predicate),
        object: termToString(q.object),
        graph: termToString(q.graph)
      };
    }
    exports.quadToStringQuad = quadToStringQuad;
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
    exports.stringQuadToQuad = stringQuadToQuad;
  }
});

// ../../lipdjs/node_modules/rdf-string/index.js
var require_rdf_string = __commonJS({
  "../../lipdjs/node_modules/rdf-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// ../../lipdjs/node_modules/fast-deep-equal/es6/index.js
var require_es6 = __commonJS({
  "../../lipdjs/node_modules/fast-deep-equal/es6/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        if (a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          for (i of a.entries())
            if (!b.has(i[0])) return false;
          for (i of a.entries())
            if (!equal(i[1], b.get(i[0]))) return false;
          return true;
        }
        if (a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          for (i of a.entries())
            if (!b.has(i[0])) return false;
          return true;
        }
        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys2[i];
          if (!equal(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/lib/algebra.js
var require_algebra = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/lib/algebra.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expressionTypes = exports.types = void 0;
    var types;
    (function(types2) {
      types2["ALT"] = "alt";
      types2["ASK"] = "ask";
      types2["BGP"] = "bgp";
      types2["CONSTRUCT"] = "construct";
      types2["DESCRIBE"] = "describe";
      types2["DISTINCT"] = "distinct";
      types2["EXPRESSION"] = "expression";
      types2["EXTEND"] = "extend";
      types2["FILTER"] = "filter";
      types2["FROM"] = "from";
      types2["GRAPH"] = "graph";
      types2["GROUP"] = "group";
      types2["INV"] = "inv";
      types2["JOIN"] = "join";
      types2["LEFT_JOIN"] = "leftjoin";
      types2["LINK"] = "link";
      types2["MINUS"] = "minus";
      types2["NOP"] = "nop";
      types2["NPS"] = "nps";
      types2["ONE_OR_MORE_PATH"] = "OneOrMorePath";
      types2["ORDER_BY"] = "orderby";
      types2["PATH"] = "path";
      types2["PATTERN"] = "pattern";
      types2["PROJECT"] = "project";
      types2["REDUCED"] = "reduced";
      types2["SEQ"] = "seq";
      types2["SERVICE"] = "service";
      types2["SLICE"] = "slice";
      types2["UNION"] = "union";
      types2["VALUES"] = "values";
      types2["ZERO_OR_MORE_PATH"] = "ZeroOrMorePath";
      types2["ZERO_OR_ONE_PATH"] = "ZeroOrOnePath";
      types2["COMPOSITE_UPDATE"] = "compositeupdate";
      types2["DELETE_INSERT"] = "deleteinsert";
      types2["LOAD"] = "load";
      types2["CLEAR"] = "clear";
      types2["CREATE"] = "create";
      types2["DROP"] = "drop";
      types2["ADD"] = "add";
      types2["MOVE"] = "move";
      types2["COPY"] = "copy";
    })(types = exports.types || (exports.types = {}));
    var expressionTypes;
    (function(expressionTypes2) {
      expressionTypes2["AGGREGATE"] = "aggregate";
      expressionTypes2["EXISTENCE"] = "existence";
      expressionTypes2["NAMED"] = "named";
      expressionTypes2["OPERATOR"] = "operator";
      expressionTypes2["TERM"] = "term";
      expressionTypes2["WILDCARD"] = "wildcard";
    })(expressionTypes = exports.expressionTypes || (exports.expressionTypes = {}));
  }
});

// ../../lipdjs/node_modules/sparqljs/lib/Wildcard.js
var require_Wildcard = __commonJS({
  "../../lipdjs/node_modules/sparqljs/lib/Wildcard.js"(exports, module) {
    var Wildcard = class {
      constructor() {
        return WILDCARD || this;
      }
      equals(other) {
        return other && this.termType === other.termType;
      }
    };
    Object.defineProperty(Wildcard.prototype, "value", {
      enumerable: true,
      value: "*"
    });
    Object.defineProperty(Wildcard.prototype, "termType", {
      enumerable: true,
      value: "Wildcard"
    });
    var WILDCARD = new Wildcard();
    module.exports.Wildcard = Wildcard;
  }
});

// ../../lipdjs/node_modules/sparqljs/lib/SparqlParser.js
var require_SparqlParser = __commonJS({
  "../../lipdjs/node_modules/sparqljs/lib/SparqlParser.js"(exports, module) {
    var SparqlParser = function() {
      var o = function(k, v, o2, l) {
        for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v) ;
        return o2;
      }, $V0 = [6, 12, 13, 15, 16, 24, 32, 36, 41, 45, 100, 110, 113, 115, 116, 123, 126, 131, 197, 224, 229, 308, 329, 330, 331, 332, 333], $V1 = [2, 247], $V2 = [100, 110, 113, 115, 116, 123, 126, 131, 329, 330, 331, 332, 333], $V3 = [2, 409], $V4 = [1, 18], $V5 = [1, 27], $V6 = [13, 16, 45, 197, 224, 229, 308], $V7 = [28, 29, 53], $V8 = [28, 53], $V9 = [1, 42], $Va = [1, 45], $Vb = [1, 41], $Vc = [1, 44], $Vd = [123, 126], $Ve = [1, 67], $Vf = [39, 45, 87], $Vg = [13, 16, 45, 197, 224, 308], $Vh = [1, 87], $Vi = [2, 281], $Vj = [1, 86], $Vk = [13, 16, 45, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vl = [6, 28, 29, 53, 63, 70, 73, 81, 83, 85], $Vm = [6, 13, 16, 28, 29, 53, 63, 70, 73, 81, 83, 85, 87, 308], $Vn = [6, 13, 16, 28, 29, 45, 53, 63, 70, 73, 81, 82, 83, 85, 87, 89, 197, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314], $Vo = [6, 13, 16, 28, 29, 31, 39, 45, 47, 48, 53, 63, 70, 73, 81, 82, 83, 85, 87, 89, 109, 112, 121, 123, 126, 128, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346], $Vp = [13, 16, 308], $Vq = [112, 132, 327, 334], $Vr = [13, 16, 112, 132, 308], $Vs = [1, 111], $Vt = [1, 117], $Vu = [112, 132, 327, 328, 334], $Vv = [13, 16, 112, 132, 308, 328], $Vw = [28, 29, 45, 53, 87], $Vx = [1, 138], $Vy = [1, 151], $Vz = [1, 128], $VA = [1, 127], $VB = [1, 129], $VC = [1, 140], $VD = [1, 141], $VE = [1, 142], $VF = [1, 143], $VG = [1, 144], $VH = [1, 145], $VI = [1, 147], $VJ = [1, 148], $VK = [2, 457], $VL = [1, 158], $VM = [1, 159], $VN = [1, 160], $VO = [1, 152], $VP = [1, 153], $VQ = [1, 156], $VR = [1, 171], $VS = [1, 172], $VT = [1, 173], $VU = [1, 174], $VV = [1, 175], $VW = [1, 176], $VX = [1, 167], $VY = [1, 168], $VZ = [1, 169], $V_ = [1, 170], $V$ = [1, 157], $V01 = [1, 166], $V11 = [1, 161], $V21 = [1, 162], $V31 = [1, 163], $V41 = [1, 164], $V51 = [1, 165], $V61 = [6, 13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335], $V71 = [1, 195], $V81 = [6, 31, 73, 81, 83, 85], $V91 = [2, 285], $Va1 = [1, 199], $Vb1 = [1, 201], $Vc1 = [6, 31, 70, 73, 81, 83, 85], $Vd1 = [2, 283], $Ve1 = [1, 207], $Vf1 = [1, 218], $Vg1 = [1, 223], $Vh1 = [1, 219], $Vi1 = [1, 225], $Vj1 = [1, 226], $Vk1 = [1, 224], $Vl1 = [6, 63, 70, 73, 81, 83, 85], $Vm1 = [1, 236], $Vn1 = [2, 334], $Vo1 = [1, 243], $Vp1 = [1, 241], $Vq1 = [6, 193], $Vr1 = [2, 349], $Vs1 = [2, 339], $Vt1 = [28, 128], $Vu1 = [47, 48, 193, 272], $Vv1 = [47, 48, 193, 242, 272], $Vw1 = [47, 48, 193, 242, 246, 272], $Vx1 = [47, 48, 193, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 341, 342, 343, 344, 345, 346], $Vy1 = [39, 47, 48, 193, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 338, 341, 342, 343, 344, 345, 346], $Vz1 = [1, 271], $VA1 = [1, 270], $VB1 = [6, 13, 16, 29, 31, 39, 45, 47, 48, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], $VC1 = [1, 281], $VD1 = [1, 280], $VE1 = [13, 16, 29, 31, 39, 45, 47, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346], $VF1 = [45, 89], $VG1 = [13, 16, 29, 31, 39, 45, 47, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346], $VH1 = [13, 16, 31, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $VI1 = [31, 89], $VJ1 = [48, 87], $VK1 = [6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337, 338], $VL1 = [6, 13, 16, 39, 45, 48, 82, 87, 89, 231, 263, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337, 338, 340], $VM1 = [1, 313], $VN1 = [6, 85], $VO1 = [6, 31, 81, 83, 85], $VP1 = [2, 361], $VQ1 = [2, 353], $VR1 = [1, 343], $VS1 = [31, 112, 335], $VT1 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $VU1 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335], $VV1 = [6, 109, 193], $VW1 = [31, 112], $VX1 = [13, 16, 45, 82, 87, 224, 263, 265, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312, 346, 347, 348, 349, 350, 351], $VY1 = [1, 390], $VZ1 = [1, 391], $V_1 = [13, 16, 87, 197, 308, 314], $V$1 = [13, 16, 39, 45, 82, 87, 224, 263, 265, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312, 346, 347, 348, 349, 350, 351], $V02 = [1, 417], $V12 = [1, 418], $V22 = [13, 16, 48, 197, 229, 308], $V32 = [6, 31, 85], $V42 = [6, 13, 16, 31, 45, 73, 81, 83, 85, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $V52 = [6, 13, 16, 29, 31, 45, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 346, 347, 348, 349, 350, 351], $V62 = [29, 31, 85, 112, 159, 160, 161, 163, 164], $V72 = [1, 443], $V82 = [1, 444], $V92 = [1, 449], $Va2 = [31, 112, 193, 232, 318, 335], $Vb2 = [13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vc2 = [13, 16, 31, 45, 48, 82, 87, 89, 112, 193, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Vd2 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Ve2 = [13, 16, 31, 48, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $Vf2 = [31, 45], $Vg2 = [1, 507], $Vh2 = [1, 508], $Vi2 = [6, 13, 16, 29, 31, 39, 45, 47, 48, 63, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], $Vj2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 335], $Vk2 = [6, 13, 16, 31, 45, 70, 73, 81, 83, 85, 87, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $Vl2 = [13, 16, 31, 45, 48, 82, 87, 89, 112, 193, 197, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Vm2 = [2, 352], $Vn2 = [13, 16, 197, 308, 314], $Vo2 = [1, 565], $Vp2 = [6, 13, 16, 31, 45, 76, 78, 81, 83, 85, 87, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $Vq2 = [13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vr2 = [13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335], $Vs2 = [13, 16, 87, 308], $Vt2 = [2, 364], $Vu2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 193, 232, 318, 335], $Vv2 = [31, 112, 193, 232, 272, 318, 335], $Vw2 = [2, 359], $Vx2 = [13, 16, 48, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $Vy2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 193, 232, 272, 318, 335], $Vz2 = [13, 16, 31, 45, 82, 87, 89, 112, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $VA2 = [2, 347];
      var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "QueryOrUpdate": 3, "Prologue": 4, "QueryOrUpdate_group0": 5, "EOF": 6, "Query": 7, "Qry": 8, "Query_option0": 9, "Prologue_repetition0": 10, "BaseDecl": 11, "BASE": 12, "IRIREF": 13, "PrefixDecl": 14, "PREFIX": 15, "PNAME_NS": 16, "SelectClauseWildcard": 17, "Qry_repetition0": 18, "WhereClause": 19, "SolutionModifierNoGroup": 20, "SelectClauseVars": 21, "Qry_repetition1": 22, "SolutionModifier": 23, "CONSTRUCT": 24, "ConstructTemplate": 25, "Qry_repetition2": 26, "Qry_repetition3": 27, "WHERE": 28, "{": 29, "Qry_option0": 30, "}": 31, "DESCRIBE": 32, "Qry_group0": 33, "Qry_repetition4": 34, "Qry_option1": 35, "ASK": 36, "Qry_repetition5": 37, "SelectClauseBase": 38, "*": 39, "SelectClauseVars_repetition_plus0": 40, "SELECT": 41, "SelectClauseBase_option0": 42, "SelectClauseItem": 43, "Var": 44, "(": 45, "Expression": 46, "AS": 47, ")": 48, "SubSelect": 49, "SubSelect_option0": 50, "SubSelect_option1": 51, "DatasetClause": 52, "FROM": 53, "DatasetClause_option0": 54, "iri": 55, "WhereClause_option0": 56, "GroupGraphPattern": 57, "SolutionModifier_option0": 58, "SolutionModifierNoGroup_option0": 59, "SolutionModifierNoGroup_option1": 60, "SolutionModifierNoGroup_option2": 61, "GroupClause": 62, "GROUP": 63, "BY": 64, "GroupClause_repetition_plus0": 65, "GroupCondition": 66, "BuiltInCall": 67, "FunctionCall": 68, "HavingClause": 69, "HAVING": 70, "HavingClause_repetition_plus0": 71, "OrderClause": 72, "ORDER": 73, "OrderClause_repetition_plus0": 74, "OrderCondition": 75, "ASC": 76, "BrackettedExpression": 77, "DESC": 78, "Constraint": 79, "LimitOffsetClauses": 80, "LIMIT": 81, "INTEGER": 82, "OFFSET": 83, "ValuesClause": 84, "VALUES": 85, "InlineData": 86, "VAR": 87, "InlineData_repetition0": 88, "NIL": 89, "InlineData_repetition1": 90, "InlineData_repetition_plus2": 91, "InlineData_repetition3": 92, "DataBlock": 93, "DataBlockValueList": 94, "DataBlockValueList_repetition_plus0": 95, "Update": 96, "Update_repetition0": 97, "Update1": 98, "Update_option0": 99, "LOAD": 100, "Update1_option0": 101, "Update1_option1": 102, "Update1_group0": 103, "Update1_option2": 104, "GraphRefAll": 105, "Update1_group1": 106, "Update1_option3": 107, "GraphOrDefault": 108, "TO": 109, "CREATE": 110, "Update1_option4": 111, "GRAPH": 112, "INSERTDATA": 113, "QuadPattern": 114, "DELETEDATA": 115, "DELETEWHERE": 116, "Update1_option5": 117, "InsertDeleteClause": 118, "Update1_repetition0": 119, "IntoGraphClause": 120, "INTO": 121, "GraphRef": 122, "DELETE": 123, "InsertDeleteClause_option0": 124, "InsertClause": 125, "INSERT": 126, "UsingClause": 127, "USING": 128, "UsingClause_option0": 129, "WithClause": 130, "WITH": 131, "DEFAULT": 132, "GraphOrDefault_option0": 133, "GraphRefAll_group0": 134, "Quads": 135, "Quads_option0": 136, "Quads_repetition0": 137, "QuadsNotTriples": 138, "VarOrIri": 139, "QuadsNotTriples_option0": 140, "QuadsNotTriples_option1": 141, "QuadsNotTriples_option2": 142, "TriplesTemplate": 143, "TriplesTemplate_repetition0": 144, "TriplesSameSubject": 145, "TriplesTemplate_option0": 146, "GroupGraphPatternSub": 147, "GroupGraphPatternSub_option0": 148, "GroupGraphPatternSub_repetition0": 149, "GroupGraphPatternSubTail": 150, "GraphPatternNotTriples": 151, "GroupGraphPatternSubTail_option0": 152, "GroupGraphPatternSubTail_option1": 153, "TriplesBlock": 154, "TriplesBlock_repetition0": 155, "TriplesSameSubjectPath": 156, "TriplesBlock_option0": 157, "GroupOrUnionGraphPattern": 158, "OPTIONAL": 159, "MINUS": 160, "SERVICE": 161, "GraphPatternNotTriples_option0": 162, "FILTER": 163, "BIND": 164, "InlineDataOneVar": 165, "InlineDataFull": 166, "InlineDataOneVar_repetition0": 167, "InlineDataFull_repetition0": 168, "InlineDataFull_repetition_plus1": 169, "InlineDataFull_repetition2": 170, "DataBlockValue": 171, "Literal": 172, "QuotedTriple": 173, "UNDEF": 174, "GroupOrUnionGraphPattern_repetition0": 175, "ArgList": 176, "ArgList_option0": 177, "ArgList_repetition0": 178, "ExpressionList": 179, "ExpressionList_repetition0": 180, "ConstructTemplate_option0": 181, "ConstructTriples": 182, "ConstructTriples_repetition0": 183, "ConstructTriples_option0": 184, "VarOrTermOrQuotedTP": 185, "PropertyListNotEmpty": 186, "TriplesNode": 187, "PropertyList": 188, "PropertyList_option0": 189, "VerbObjectList": 190, "PropertyListNotEmpty_repetition0": 191, "SemiOptionalVerbObjectList": 192, ";": 193, "SemiOptionalVerbObjectList_option0": 194, "Verb": 195, "ObjectList": 196, "a": 197, "ObjectList_repetition0": 198, "Object": 199, "GraphNode": 200, "Object_option0": 201, "PropertyListPathNotEmpty": 202, "TriplesNodePath": 203, "TriplesSameSubjectPath_option0": 204, "O": 205, "PropertyListPathNotEmpty_repetition0": 206, "PropertyListPathNotEmptyTail": 207, "O_group0": 208, "ObjectListPath": 209, "ObjectListPath_repetition0": 210, "ObjectPath": 211, "GraphNodePath": 212, "ObjectPath_option0": 213, "Path": 214, "Path_repetition0": 215, "PathSequence": 216, "PathSequence_repetition0": 217, "PathEltOrInverse": 218, "PathElt": 219, "PathPrimary": 220, "PathElt_option0": 221, "PathEltOrInverse_option0": 222, "IriOrA": 223, "!": 224, "PathNegatedPropertySet": 225, "PathOneInPropertySet": 226, "PathNegatedPropertySet_repetition0": 227, "PathNegatedPropertySet_option0": 228, "^": 229, "TriplesNode_repetition_plus0": 230, "[": 231, "]": 232, "TriplesNodePath_repetition_plus0": 233, "VarOrTermOrQuotedTPExpr": 234, "VarOrTerm": 235, "GraphTerm": 236, "BlankNode": 237, "ConditionalOrExpression": 238, "ConditionalAndExpression": 239, "ConditionalOrExpression_repetition0": 240, "ConditionalOrExpressionTail": 241, "||": 242, "RelationalExpression": 243, "ConditionalAndExpression_repetition0": 244, "ConditionalAndExpressionTail": 245, "&&": 246, "NumericExpression": 247, "RelationalExpression_group0": 248, "RelationalExpression_option0": 249, "IN": 250, "MultiplicativeExpression": 251, "NumericExpression_repetition0": 252, "AdditiveExpressionTail": 253, "AdditiveExpressionTail_group0": 254, "NumericLiteralPositive": 255, "AdditiveExpressionTail_repetition0": 256, "NumericLiteralNegative": 257, "AdditiveExpressionTail_repetition1": 258, "UnaryExpression": 259, "MultiplicativeExpression_repetition0": 260, "MultiplicativeExpressionTail": 261, "MultiplicativeExpressionTail_group0": 262, "+": 263, "PrimaryExpression": 264, "-": 265, "ExprQuotedTP": 266, "Aggregate": 267, "FUNC_ARITY0": 268, "FUNC_ARITY1": 269, "FUNC_ARITY1_SPARQL_STAR": 270, "FUNC_ARITY2": 271, ",": 272, "FUNC_ARITY3": 273, "FUNC_ARITY3_SPARQL_STAR": 274, "BuiltInCall_group0": 275, "BOUND": 276, "BNODE": 277, "BuiltInCall_option0": 278, "EXISTS": 279, "COUNT": 280, "Aggregate_option0": 281, "Aggregate_group0": 282, "FUNC_AGGREGATE": 283, "Aggregate_option1": 284, "GROUP_CONCAT": 285, "Aggregate_option2": 286, "Aggregate_option3": 287, "GroupConcatSeparator": 288, "SEPARATOR": 289, "=": 290, "String": 291, "LANGTAG": 292, "^^": 293, "DECIMAL": 294, "DOUBLE": 295, "BOOLEAN": 296, "INTEGER_POSITIVE": 297, "DECIMAL_POSITIVE": 298, "DOUBLE_POSITIVE": 299, "INTEGER_NEGATIVE": 300, "DECIMAL_NEGATIVE": 301, "DOUBLE_NEGATIVE": 302, "STRING_LITERAL1": 303, "STRING_LITERAL2": 304, "STRING_LITERAL_LONG1": 305, "STRING_LITERAL_LONG2": 306, "PrefixedName": 307, "PNAME_LN": 308, "BLANK_NODE_LABEL": 309, "ANON": 310, "QuotedTP": 311, "<<": 312, "qtSubjectOrObject": 313, ">>": 314, "DataValueTerm": 315, "AnnotationPattern": 316, "{|": 317, "|}": 318, "AnnotationPatternPath": 319, "ExprVarOrTerm": 320, "QueryOrUpdate_group0_option0": 321, "Prologue_repetition0_group0": 322, "Qry_group0_repetition_plus0": 323, "SelectClauseBase_option0_group0": 324, "DISTINCT": 325, "REDUCED": 326, "NAMED": 327, "SILENT": 328, "CLEAR": 329, "DROP": 330, "ADD": 331, "MOVE": 332, "COPY": 333, "ALL": 334, ".": 335, "UNION": 336, "|": 337, "/": 338, "PathElt_option0_group0": 339, "?": 340, "!=": 341, "<": 342, ">": 343, "<=": 344, ">=": 345, "NOT": 346, "CONCAT": 347, "COALESCE": 348, "SUBSTR": 349, "REGEX": 350, "REPLACE": 351, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "EOF", 12: "BASE", 13: "IRIREF", 15: "PREFIX", 16: "PNAME_NS", 24: "CONSTRUCT", 28: "WHERE", 29: "{", 31: "}", 32: "DESCRIBE", 36: "ASK", 39: "*", 41: "SELECT", 45: "(", 47: "AS", 48: ")", 53: "FROM", 63: "GROUP", 64: "BY", 70: "HAVING", 73: "ORDER", 76: "ASC", 78: "DESC", 81: "LIMIT", 82: "INTEGER", 83: "OFFSET", 85: "VALUES", 87: "VAR", 89: "NIL", 100: "LOAD", 109: "TO", 110: "CREATE", 112: "GRAPH", 113: "INSERTDATA", 115: "DELETEDATA", 116: "DELETEWHERE", 121: "INTO", 123: "DELETE", 126: "INSERT", 128: "USING", 131: "WITH", 132: "DEFAULT", 159: "OPTIONAL", 160: "MINUS", 161: "SERVICE", 163: "FILTER", 164: "BIND", 174: "UNDEF", 193: ";", 197: "a", 224: "!", 229: "^", 231: "[", 232: "]", 242: "||", 246: "&&", 250: "IN", 263: "+", 265: "-", 268: "FUNC_ARITY0", 269: "FUNC_ARITY1", 270: "FUNC_ARITY1_SPARQL_STAR", 271: "FUNC_ARITY2", 272: ",", 273: "FUNC_ARITY3", 274: "FUNC_ARITY3_SPARQL_STAR", 276: "BOUND", 277: "BNODE", 279: "EXISTS", 280: "COUNT", 283: "FUNC_AGGREGATE", 285: "GROUP_CONCAT", 289: "SEPARATOR", 290: "=", 292: "LANGTAG", 293: "^^", 294: "DECIMAL", 295: "DOUBLE", 296: "BOOLEAN", 297: "INTEGER_POSITIVE", 298: "DECIMAL_POSITIVE", 299: "DOUBLE_POSITIVE", 300: "INTEGER_NEGATIVE", 301: "DECIMAL_NEGATIVE", 302: "DOUBLE_NEGATIVE", 303: "STRING_LITERAL1", 304: "STRING_LITERAL2", 305: "STRING_LITERAL_LONG1", 306: "STRING_LITERAL_LONG2", 308: "PNAME_LN", 309: "BLANK_NODE_LABEL", 310: "ANON", 312: "<<", 314: ">>", 317: "{|", 318: "|}", 325: "DISTINCT", 326: "REDUCED", 327: "NAMED", 328: "SILENT", 329: "CLEAR", 330: "DROP", 331: "ADD", 332: "MOVE", 333: "COPY", 334: "ALL", 335: ".", 336: "UNION", 337: "|", 338: "/", 340: "?", 341: "!=", 342: "<", 343: ">", 344: "<=", 345: ">=", 346: "NOT", 347: "CONCAT", 348: "COALESCE", 349: "SUBSTR", 350: "REGEX", 351: "REPLACE" },
        productions_: [0, [3, 3], [7, 2], [4, 1], [11, 2], [14, 3], [8, 4], [8, 4], [8, 5], [8, 7], [8, 5], [8, 4], [17, 2], [21, 2], [38, 2], [43, 1], [43, 5], [49, 4], [49, 4], [52, 3], [19, 2], [23, 2], [20, 3], [62, 3], [66, 1], [66, 1], [66, 3], [66, 5], [66, 1], [69, 2], [72, 3], [75, 2], [75, 2], [75, 1], [75, 1], [80, 2], [80, 2], [80, 4], [80, 4], [84, 2], [86, 4], [86, 4], [86, 6], [86, 2], [94, 3], [96, 3], [98, 4], [98, 3], [98, 5], [98, 4], [98, 2], [98, 2], [98, 2], [98, 5], [120, 2], [118, 3], [118, 1], [125, 2], [127, 3], [130, 2], [108, 1], [108, 2], [122, 2], [105, 1], [105, 1], [114, 3], [135, 2], [138, 7], [143, 3], [57, 3], [57, 3], [147, 2], [150, 3], [154, 3], [151, 1], [151, 2], [151, 2], [151, 3], [151, 4], [151, 2], [151, 6], [151, 1], [93, 1], [93, 1], [165, 4], [166, 4], [166, 6], [171, 1], [171, 1], [171, 1], [171, 1], [158, 2], [79, 1], [79, 1], [79, 1], [68, 2], [176, 1], [176, 5], [179, 1], [179, 4], [25, 3], [182, 3], [145, 2], [145, 2], [188, 1], [186, 2], [192, 2], [190, 2], [195, 1], [195, 1], [196, 2], [199, 2], [156, 2], [156, 2], [202, 2], [207, 1], [207, 2], [205, 2], [209, 2], [211, 2], [214, 2], [216, 2], [219, 2], [218, 2], [220, 1], [220, 2], [220, 3], [225, 1], [225, 1], [225, 4], [226, 1], [226, 2], [187, 3], [187, 3], [203, 3], [203, 3], [200, 1], [200, 1], [212, 1], [212, 1], [234, 1], [235, 1], [235, 1], [139, 1], [139, 1], [44, 1], [236, 1], [236, 1], [236, 1], [236, 1], [46, 1], [238, 2], [241, 2], [239, 2], [245, 2], [243, 1], [243, 3], [243, 4], [247, 2], [253, 2], [253, 2], [253, 2], [251, 2], [261, 2], [259, 2], [259, 2], [259, 2], [259, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [77, 3], [67, 1], [67, 2], [67, 4], [67, 4], [67, 6], [67, 8], [67, 8], [67, 2], [67, 4], [67, 2], [67, 4], [67, 3], [267, 5], [267, 5], [267, 6], [288, 4], [172, 1], [172, 2], [172, 3], [172, 1], [172, 1], [172, 1], [172, 1], [172, 1], [172, 1], [255, 1], [255, 1], [255, 1], [257, 1], [257, 1], [257, 1], [291, 1], [291, 1], [291, 1], [291, 1], [55, 1], [55, 1], [307, 1], [307, 1], [237, 1], [237, 1], [311, 5], [173, 5], [313, 1], [313, 1], [313, 1], [313, 1], [313, 1], [315, 1], [315, 1], [315, 1], [185, 1], [185, 1], [185, 1], [316, 3], [319, 3], [266, 5], [320, 1], [320, 1], [320, 1], [223, 1], [223, 1], [321, 0], [321, 1], [5, 1], [5, 1], [5, 1], [9, 0], [9, 1], [322, 1], [322, 1], [10, 0], [10, 2], [18, 0], [18, 2], [22, 0], [22, 2], [26, 0], [26, 2], [27, 0], [27, 2], [30, 0], [30, 1], [323, 1], [323, 2], [33, 1], [33, 1], [34, 0], [34, 2], [35, 0], [35, 1], [37, 0], [37, 2], [40, 1], [40, 2], [324, 1], [324, 1], [42, 0], [42, 1], [50, 0], [50, 1], [51, 0], [51, 1], [54, 0], [54, 1], [56, 0], [56, 1], [58, 0], [58, 1], [59, 0], [59, 1], [60, 0], [60, 1], [61, 0], [61, 1], [65, 1], [65, 2], [71, 1], [71, 2], [74, 1], [74, 2], [88, 0], [88, 2], [90, 0], [90, 2], [91, 1], [91, 2], [92, 0], [92, 2], [95, 1], [95, 2], [97, 0], [97, 4], [99, 0], [99, 2], [101, 0], [101, 1], [102, 0], [102, 1], [103, 1], [103, 1], [104, 0], [104, 1], [106, 1], [106, 1], [106, 1], [107, 0], [107, 1], [111, 0], [111, 1], [117, 0], [117, 1], [119, 0], [119, 2], [124, 0], [124, 1], [129, 0], [129, 1], [133, 0], [133, 1], [134, 1], [134, 1], [134, 1], [136, 0], [136, 1], [137, 0], [137, 2], [140, 0], [140, 1], [141, 0], [141, 1], [142, 0], [142, 1], [144, 0], [144, 3], [146, 0], [146, 1], [148, 0], [148, 1], [149, 0], [149, 2], [152, 0], [152, 1], [153, 0], [153, 1], [155, 0], [155, 3], [157, 0], [157, 1], [162, 0], [162, 1], [167, 0], [167, 2], [168, 0], [168, 2], [169, 1], [169, 2], [170, 0], [170, 2], [175, 0], [175, 3], [177, 0], [177, 1], [178, 0], [178, 3], [180, 0], [180, 3], [181, 0], [181, 1], [183, 0], [183, 3], [184, 0], [184, 1], [189, 0], [189, 1], [191, 0], [191, 2], [194, 0], [194, 1], [198, 0], [198, 3], [201, 0], [201, 1], [204, 0], [204, 1], [206, 0], [206, 2], [208, 1], [208, 1], [210, 0], [210, 3], [213, 0], [213, 1], [215, 0], [215, 3], [217, 0], [217, 3], [339, 1], [339, 1], [339, 1], [221, 0], [221, 1], [222, 0], [222, 1], [227, 0], [227, 3], [228, 0], [228, 1], [230, 1], [230, 2], [233, 1], [233, 2], [240, 0], [240, 2], [244, 0], [244, 2], [248, 1], [248, 1], [248, 1], [248, 1], [248, 1], [248, 1], [249, 0], [249, 1], [252, 0], [252, 2], [254, 1], [254, 1], [256, 0], [256, 2], [258, 0], [258, 2], [260, 0], [260, 2], [262, 1], [262, 1], [275, 1], [275, 1], [275, 1], [275, 1], [275, 1], [278, 0], [278, 1], [281, 0], [281, 1], [282, 1], [282, 1], [284, 0], [284, 1], [286, 0], [286, 1], [287, 0], [287, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              $$[$0 - 1] = $$[$0 - 1] || {};
              if (Parser2.base)
                $$[$0 - 1].base = Parser2.base;
              Parser2.base = "";
              $$[$0 - 1].prefixes = Parser2.prefixes;
              Parser2.prefixes = null;
              if (Parser2.pathOnly) {
                if ($$[$0 - 1].type === "path" || "termType" in $$[$0 - 1]) {
                  return $$[$0 - 1];
                }
                throw new Error("Received full SPARQL query in path only mode");
              } else if ($$[$0 - 1].type === "path" || "termType" in $$[$0 - 1]) {
                throw new Error("Received only path in full SPARQL mode");
              }
              if ($$[$0 - 1].type === "update") {
                const insertBnodesAll = {};
                for (const update8 of $$[$0 - 1].updates) {
                  if (update8.updateType === "insert") {
                    const insertBnodes = {};
                    for (const operation2 of update8.insert) {
                      if (operation2.type === "bgp" || operation2.type === "graph") {
                        for (const triple2 of operation2.triples) {
                          if (triple2.subject.termType === "BlankNode")
                            insertBnodes[triple2.subject.value] = true;
                          if (triple2.predicate.termType === "BlankNode")
                            insertBnodes[triple2.predicate.value] = true;
                          if (triple2.object.termType === "BlankNode")
                            insertBnodes[triple2.object.value] = true;
                        }
                      }
                    }
                    for (const bnode of Object.keys(insertBnodes)) {
                      if (insertBnodesAll[bnode]) {
                        throw new Error("Detected reuse blank node across different INSERT DATA clauses");
                      }
                      insertBnodesAll[bnode] = true;
                    }
                  }
                }
              }
              return $$[$0 - 1];
              break;
            case 2:
              this.$ = { ...$$[$0 - 1], ...$$[$0], type: "query" };
              break;
            case 4:
              Parser2.base = resolveIRI($$[$0]);
              break;
            case 5:
              if (!Parser2.prefixes) Parser2.prefixes = {};
              $$[$0 - 1] = $$[$0 - 1].substr(0, $$[$0 - 1].length - 1);
              $$[$0] = resolveIRI($$[$0]);
              Parser2.prefixes[$$[$0 - 1]] = $$[$0];
              break;
            case 6:
              this.$ = { ...$$[$0 - 3], ...groupDatasets($$[$0 - 2]), ...$$[$0 - 1], ...$$[$0] };
              break;
            case 7:
              if (!Parser2.skipValidation) {
                const counts = flatten3($$[$0 - 3].variables.map((vars) => getAggregatesOfExpression(vars.expression))).some((agg) => agg.aggregation === "count" && !(agg.expression instanceof Wildcard));
                if (counts || $$[$0].group) {
                  for (const selectVar of $$[$0 - 3].variables) {
                    if (selectVar.termType === "Variable") {
                      if (!$$[$0].group || !$$[$0].group.map((groupVar) => getExpressionId(groupVar)).includes(getExpressionId(selectVar))) {
                        throw Error("Projection of ungrouped variable (?" + getExpressionId(selectVar) + ")");
                      }
                    } else if (getAggregatesOfExpression(selectVar.expression).length === 0) {
                      const usedVars = getVariablesFromExpression(selectVar.expression);
                      for (const usedVar of usedVars) {
                        if (!$$[$0].group || !$$[$0].group.map || !$$[$0].group.map((groupVar) => getExpressionId(groupVar)).includes(getExpressionId(usedVar))) {
                          throw Error("Use of ungrouped variable in projection of operation (?" + getExpressionId(usedVar) + ")");
                        }
                      }
                    }
                  }
                }
              }
              const subqueries = $$[$0 - 1].where.filter((w) => w.type === "query");
              if (subqueries.length > 0) {
                const selectedVarIds2 = $$[$0 - 3].variables.filter((v) => v.variable && v.variable.value).map((v) => v.variable.value);
                const subqueryIds = flatten3(subqueries.map((sub) => sub.variables)).map((v) => v.value || v.variable.value);
                for (const selectedVarId of selectedVarIds2) {
                  if (subqueryIds.indexOf(selectedVarId) >= 0) {
                    throw Error("Target id of 'AS' (?" + selectedVarId + ") already used in subquery");
                  }
                }
              }
              this.$ = extend($$[$0 - 3], groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 8:
              this.$ = extend({ queryType: "CONSTRUCT", template: $$[$0 - 3] }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 9:
              this.$ = extend({ queryType: "CONSTRUCT", template: $$[$0 - 2] = $$[$0 - 2] ? $$[$0 - 2].triples : [] }, groupDatasets($$[$0 - 5]), { where: [{ type: "bgp", triples: appendAllTo([], $$[$0 - 2]) }] }, $$[$0]);
              break;
            case 10:
              this.$ = extend({ queryType: "DESCRIBE", variables: $$[$0 - 3] === "*" ? [new Wildcard()] : $$[$0 - 3] }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 11:
              this.$ = extend({ queryType: "ASK" }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 12:
              this.$ = extend($$[$0 - 1], { variables: [new Wildcard()] });
              break;
            case 13:
              const selectedVarIds = $$[$0].map((v) => v.value || v.variable.value);
              const duplicates = getDuplicatesInArray(selectedVarIds);
              if (duplicates.length > 0) {
                throw Error("Two or more of the resulting columns have the same name (?" + duplicates[0] + ")");
              }
              this.$ = extend($$[$0 - 1], { variables: $$[$0] });
              break;
            case 14:
              this.$ = extend({ queryType: "SELECT" }, $$[$0] && ($$[$0 - 1] = lowercase($$[$0]), $$[$0] = {}, $$[$0][$$[$0 - 1]] = true, $$[$0]));
              break;
            case 16:
            case 27:
              this.$ = expression($$[$0 - 3], { variable: $$[$0 - 1] });
              break;
            case 17:
            case 18:
              this.$ = extend($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], { type: "query" });
              break;
            case 19:
            case 58:
              this.$ = { iri: $$[$0], named: !!$$[$0 - 1] };
              break;
            case 20:
              this.$ = { where: $$[$0].patterns };
              break;
            case 21:
              this.$ = extend($$[$0 - 1], $$[$0]);
              break;
            case 22:
              this.$ = extend($$[$0 - 2], $$[$0 - 1], $$[$0]);
              break;
            case 23:
              this.$ = { group: $$[$0] };
              break;
            case 24:
            case 25:
            case 28:
            case 31:
            case 33:
            case 34:
              this.$ = expression($$[$0]);
              break;
            case 26:
              this.$ = expression($$[$0 - 1]);
              break;
            case 29:
              this.$ = { having: $$[$0] };
              break;
            case 30:
              this.$ = { order: $$[$0] };
              break;
            case 32:
              this.$ = expression($$[$0], { descending: true });
              break;
            case 35:
              this.$ = { limit: toInt($$[$0]) };
              break;
            case 36:
              this.$ = { offset: toInt($$[$0]) };
              break;
            case 37:
              this.$ = { limit: toInt($$[$0 - 2]), offset: toInt($$[$0]) };
              break;
            case 38:
              this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0 - 2]) };
              break;
            case 39:
            case 43:
              this.$ = { type: "values", values: $$[$0] };
              break;
            case 40:
            case 84:
              this.$ = $$[$0 - 1].map((v) => ({ [$$[$0 - 3]]: v }));
              break;
            case 41:
            case 85:
              this.$ = $$[$0 - 1].map(() => ({}));
              break;
            case 42:
            case 86:
              var length = $$[$0 - 4].length;
              $$[$0 - 4] = $$[$0 - 4].map(toVar);
              this.$ = $$[$0 - 1].map(function(values2) {
                if (values2.length !== length)
                  throw Error("Inconsistent VALUES length");
                var valuesObject = {};
                for (var i = 0; i < length; i++)
                  valuesObject["?" + $$[$0 - 4][i].value] = values2[i];
                return valuesObject;
              });
              break;
            case 44:
            case 65:
            case 100:
            case 126:
            case 175:
              this.$ = $$[$0 - 1];
              break;
            case 45:
              this.$ = { type: "update", updates: appendTo($$[$0 - 2], $$[$0 - 1]) };
              break;
            case 46:
              this.$ = extend({ type: "load", silent: !!$$[$0 - 2], source: $$[$0 - 1] }, $$[$0] && { destination: $$[$0] });
              break;
            case 47:
              this.$ = { type: lowercase($$[$0 - 2]), silent: !!$$[$0 - 1], graph: $$[$0] };
              break;
            case 48:
              this.$ = { type: lowercase($$[$0 - 4]), silent: !!$$[$0 - 3], source: $$[$0 - 2], destination: $$[$0] };
              break;
            case 49:
              this.$ = { type: "create", silent: !!$$[$0 - 2], graph: { type: "graph", name: $$[$0] } };
              break;
            case 50:
              this.$ = { updateType: "insert", insert: ensureNoVariables($$[$0]) };
              break;
            case 51:
              this.$ = { updateType: "delete", delete: ensureNoBnodes(ensureNoVariables($$[$0])) };
              break;
            case 52:
              this.$ = { updateType: "deletewhere", delete: ensureNoBnodes($$[$0]) };
              break;
            case 53:
              this.$ = { updateType: "insertdelete", ...$$[$0 - 4], ...$$[$0 - 3], ...groupDatasets($$[$0 - 2], "using"), where: $$[$0].patterns };
              break;
            case 54:
            case 57:
            case 62:
            case 167:
            case 191:
            case 236:
              this.$ = $$[$0];
              break;
            case 55:
              this.$ = { delete: ensureNoBnodes($$[$0 - 1]), insert: $$[$0] || [] };
              break;
            case 56:
              this.$ = { delete: [], insert: $$[$0] };
              break;
            case 59:
              this.$ = { graph: $$[$0] };
              break;
            case 60:
              this.$ = { type: "graph", default: true };
              break;
            case 61:
            case 63:
              this.$ = { type: "graph", name: $$[$0] };
              break;
            case 64:
              this.$ = { [lowercase($$[$0])]: true };
              break;
            case 66:
              this.$ = $$[$0 - 1] ? unionAll($$[$0], [$$[$0 - 1]]) : unionAll($$[$0]);
              break;
            case 67:
              var graph = extend($$[$0 - 3] || { triples: [] }, { type: "graph", name: $$[$0 - 5] });
              this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
              break;
            case 68:
            case 73:
              this.$ = { type: "bgp", triples: unionAll($$[$0 - 2], [$$[$0 - 1]]) };
              break;
            case 69:
              this.$ = { type: "group", patterns: [$$[$0 - 1]] };
              break;
            case 70:
              for (const binding of $$[$0 - 1].filter((el) => el.type === "bind")) {
                const index = $$[$0 - 1].indexOf(binding);
                const boundVars = /* @__PURE__ */ new Set();
                for (const el of $$[$0 - 1].slice(0, index)) {
                  if (el.type === "group" || el.type === "bgp") {
                    getBoundVarsFromGroupGraphPattern(el).forEach((boundVar) => boundVars.add(boundVar));
                  }
                }
                if (boundVars.has(binding.variable.value)) {
                  throw Error("Variable used to bind is already bound (?" + binding.variable.value + ")");
                }
              }
              this.$ = { type: "group", patterns: $$[$0 - 1] };
              break;
            case 71:
              this.$ = $$[$0 - 1] ? unionAll([$$[$0 - 1]], $$[$0]) : unionAll($$[$0]);
              break;
            case 72:
              this.$ = $$[$0] ? [$$[$0 - 2], $$[$0]] : $$[$0 - 2];
              break;
            case 75:
              this.$ = extend($$[$0], { type: "optional" });
              break;
            case 76:
              this.$ = extend($$[$0], { type: "minus" });
              break;
            case 77:
              this.$ = extend($$[$0], { type: "graph", name: $$[$0 - 1] });
              break;
            case 78:
              this.$ = extend($$[$0], { type: "service", name: $$[$0 - 1], silent: !!$$[$0 - 2] });
              break;
            case 79:
              this.$ = { type: "filter", expression: $$[$0] };
              break;
            case 80:
              this.$ = { type: "bind", variable: $$[$0 - 1], expression: $$[$0 - 3] };
              break;
            case 89:
              this.$ = ensureSparqlStar($$[$0]);
              break;
            case 90:
              this.$ = void 0;
              break;
            case 91:
              this.$ = $$[$0 - 1].length ? { type: "union", patterns: unionAll($$[$0 - 1].map(degroupSingle), [degroupSingle($$[$0])]) } : $$[$0];
              break;
            case 95:
              this.$ = { ...$$[$0], function: $$[$0 - 1] };
              break;
            case 96:
              this.$ = { type: "functionCall", args: [] };
              break;
            case 97:
              this.$ = { type: "functionCall", args: appendTo($$[$0 - 2], $$[$0 - 1]), distinct: !!$$[$0 - 3] };
              break;
            case 98:
            case 115:
            case 128:
            case 247:
            case 249:
            case 251:
            case 253:
            case 255:
            case 263:
            case 267:
            case 297:
            case 299:
            case 303:
            case 307:
            case 328:
            case 341:
            case 349:
            case 355:
            case 361:
            case 367:
            case 369:
            case 373:
            case 375:
            case 379:
            case 381:
            case 385:
            case 391:
            case 395:
            case 401:
            case 405:
            case 409:
            case 411:
            case 420:
            case 428:
            case 430:
            case 440:
            case 444:
            case 446:
            case 448:
              this.$ = [];
              break;
            case 99:
              this.$ = appendTo($$[$0 - 2], $$[$0 - 1]);
              break;
            case 101:
              this.$ = unionAll($$[$0 - 2], [$$[$0 - 1]]);
              break;
            case 102:
            case 112:
              this.$ = applyAnnotations($$[$0].map((t) => extend(triple($$[$0 - 1]), t)));
              break;
            case 103:
              this.$ = applyAnnotations(appendAllTo($$[$0].map((t) => extend(triple($$[$0 - 1].entity), t)), $$[$0 - 1].triples));
              break;
            case 105:
              this.$ = unionAll([$$[$0 - 1]], $$[$0]);
              break;
            case 106:
              this.$ = unionAll($$[$0]);
              break;
            case 107:
              this.$ = objectListToTriples($$[$0 - 1], $$[$0]);
              break;
            case 109:
            case 237:
              this.$ = Parser2.factory.namedNode(RDF_TYPE);
              break;
            case 110:
            case 118:
              this.$ = appendTo($$[$0 - 1], $$[$0]);
              break;
            case 111:
              this.$ = $$[$0] ? { annotation: $$[$0], object: $$[$0 - 1] } : $$[$0 - 1];
              break;
            case 113:
              this.$ = !$$[$0] ? $$[$0 - 1].triples : applyAnnotations(appendAllTo($$[$0].map((t) => extend(triple($$[$0 - 1].entity), t)), $$[$0 - 1].triples));
              break;
            case 114:
              this.$ = objectListToTriples(...$$[$0 - 1], $$[$0]);
              break;
            case 116:
              this.$ = objectListToTriples(...$$[$0]);
              break;
            case 117:
            case 159:
            case 163:
              this.$ = [$$[$0 - 1], $$[$0]];
              break;
            case 119:
              this.$ = $$[$0] ? { object: $$[$0 - 1], annotation: $$[$0] } : $$[$0 - 1];
              ;
              break;
            case 120:
              this.$ = $$[$0 - 1].length ? path("|", appendTo($$[$0 - 1], $$[$0])) : $$[$0];
              break;
            case 121:
              this.$ = $$[$0 - 1].length ? path("/", appendTo($$[$0 - 1], $$[$0])) : $$[$0];
              break;
            case 122:
              this.$ = $$[$0] ? path($$[$0], [$$[$0 - 1]]) : $$[$0 - 1];
              break;
            case 123:
              this.$ = $$[$0 - 1] ? path($$[$0 - 1], [$$[$0]]) : $$[$0];
              ;
              break;
            case 125:
            case 131:
              this.$ = path($$[$0 - 1], [$$[$0]]);
              break;
            case 129:
              this.$ = path("|", appendTo($$[$0 - 2], $$[$0 - 1]));
              break;
            case 132:
            case 134:
              this.$ = createList($$[$0 - 1]);
              break;
            case 133:
            case 135:
              this.$ = createAnonymousObject($$[$0 - 1]);
              break;
            case 140:
              this.$ = { entity: $$[$0], triples: [] };
              break;
            case 145:
              this.$ = toVar($$[$0]);
              break;
            case 149:
              this.$ = Parser2.factory.namedNode(RDF_NIL);
              break;
            case 151:
            case 153:
            case 158:
            case 162:
              this.$ = createOperationTree($$[$0 - 1], $$[$0]);
              break;
            case 152:
              this.$ = ["||", $$[$0]];
              break;
            case 154:
              this.$ = ["&&", $$[$0]];
              break;
            case 156:
              this.$ = operation($$[$0 - 1], [$$[$0 - 2], $$[$0]]);
              break;
            case 157:
              this.$ = operation($$[$0 - 2] ? "notin" : "in", [$$[$0 - 3], $$[$0]]);
              break;
            case 160:
              this.$ = ["+", createOperationTree($$[$0 - 1], $$[$0])];
              break;
            case 161:
              var negatedLiteral = createTypedLiteral($$[$0 - 1].value.replace("-", ""), $$[$0 - 1].datatype);
              this.$ = ["-", createOperationTree(negatedLiteral, $$[$0])];
              break;
            case 164:
              this.$ = operation("UPLUS", [$$[$0]]);
              break;
            case 165:
              this.$ = operation($$[$0 - 1], [$$[$0]]);
              break;
            case 166:
              this.$ = operation("UMINUS", [$$[$0]]);
              break;
            case 177:
              this.$ = operation(lowercase($$[$0 - 1]));
              break;
            case 178:
              this.$ = operation(lowercase($$[$0 - 3]), [$$[$0 - 1]]);
              break;
            case 179:
              this.$ = ensureSparqlStar(operation(lowercase($$[$0 - 3]), [$$[$0 - 1]]));
              break;
            case 180:
              this.$ = operation(lowercase($$[$0 - 5]), [$$[$0 - 3], $$[$0 - 1]]);
              break;
            case 181:
              this.$ = operation(lowercase($$[$0 - 7]), [$$[$0 - 5], $$[$0 - 3], $$[$0 - 1]]);
              break;
            case 182:
              this.$ = ensureSparqlStar(operation(lowercase($$[$0 - 7]), [$$[$0 - 5], $$[$0 - 3], $$[$0 - 1]]));
              break;
            case 183:
              this.$ = operation(lowercase($$[$0 - 1]), $$[$0]);
              break;
            case 184:
              this.$ = operation("bound", [toVar($$[$0 - 1])]);
              break;
            case 185:
              this.$ = operation($$[$0 - 1], []);
              break;
            case 186:
              this.$ = operation($$[$0 - 3], [$$[$0 - 1]]);
              break;
            case 187:
              this.$ = operation($$[$0 - 2] ? "notexists" : "exists", [degroupSingle($$[$0])]);
              break;
            case 188:
            case 189:
              this.$ = expression($$[$0 - 1], { type: "aggregate", aggregation: lowercase($$[$0 - 4]), distinct: !!$$[$0 - 2] });
              break;
            case 190:
              this.$ = expression($$[$0 - 2], { type: "aggregate", aggregation: lowercase($$[$0 - 5]), distinct: !!$$[$0 - 3], separator: typeof $$[$0 - 1] === "string" ? $$[$0 - 1] : " " });
              break;
            case 192:
              this.$ = createTypedLiteral($$[$0]);
              break;
            case 193:
              this.$ = createLangLiteral($$[$0 - 1], lowercase($$[$0].substr(1)));
              break;
            case 194:
              this.$ = createTypedLiteral($$[$0 - 2], $$[$0]);
              break;
            case 195:
            case 204:
              this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
              break;
            case 196:
            case 205:
              this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
              break;
            case 197:
            case 206:
              this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
              break;
            case 200:
              this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_BOOLEAN);
              break;
            case 201:
              this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
              break;
            case 202:
              this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
              break;
            case 203:
              this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
              break;
            case 207:
            case 208:
              this.$ = unescapeString($$[$0], 1);
              break;
            case 209:
            case 210:
              this.$ = unescapeString($$[$0], 3);
              break;
            case 211:
              this.$ = Parser2.factory.namedNode(resolveIRI($$[$0]));
              break;
            case 213:
              var namePos = $$[$0].indexOf(":"), prefix = $$[$0].substr(0, namePos), expansion = Parser2.prefixes[prefix];
              if (!expansion) throw new Error("Unknown prefix: " + prefix);
              var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
              this.$ = Parser2.factory.namedNode(uriString);
              break;
            case 214:
              $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
              if (!($$[$0] in Parser2.prefixes)) throw new Error("Unknown prefix: " + $$[$0]);
              var uriString = resolveIRI(Parser2.prefixes[$$[$0]]);
              this.$ = Parser2.factory.namedNode(uriString);
              break;
            case 215:
              this.$ = blank($$[$0].replace(/^(_:)/, ""));
              ;
              break;
            case 216:
              this.$ = blank();
              break;
            case 217:
            case 218:
            case 232:
              this.$ = ensureSparqlStar(nestedTriple($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]));
              break;
            case 230:
            case 231:
              this.$ = ensureSparqlStar($$[$0 - 1]);
              break;
            case 248:
            case 250:
            case 252:
            case 254:
            case 256:
            case 260:
            case 264:
            case 268:
            case 270:
            case 292:
            case 294:
            case 296:
            case 298:
            case 300:
            case 302:
            case 304:
            case 306:
            case 329:
            case 342:
            case 356:
            case 368:
            case 370:
            case 372:
            case 374:
            case 392:
            case 402:
            case 425:
            case 427:
            case 429:
            case 431:
            case 441:
            case 445:
            case 447:
            case 449:
              $$[$0 - 1].push($$[$0]);
              break;
            case 259:
            case 269:
            case 291:
            case 293:
            case 295:
            case 301:
            case 305:
            case 371:
            case 424:
            case 426:
              this.$ = [$$[$0]];
              break;
            case 308:
              $$[$0 - 3].push($$[$0 - 2]);
              break;
            case 350:
            case 362:
            case 376:
            case 380:
            case 382:
            case 386:
            case 396:
            case 406:
            case 410:
            case 412:
            case 421:
              $$[$0 - 2].push($$[$0 - 1]);
              break;
          }
        },
        table: [o($V0, $V1, { 3: 1, 4: 2, 10: 3 }), { 1: [3] }, o($V2, [2, 307], { 5: 4, 7: 5, 321: 6, 214: 7, 8: 8, 96: 9, 215: 10, 17: 11, 21: 12, 97: 16, 38: 17, 6: [2, 238], 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 24: [1, 13], 32: [1, 14], 36: [1, 15], 41: $V4 }), o([6, 13, 16, 24, 32, 36, 41, 45, 100, 110, 113, 115, 116, 123, 126, 131, 197, 224, 229, 308, 329, 330, 331, 332, 333], [2, 3], { 322: 19, 11: 20, 14: 21, 12: [1, 22], 15: [1, 23] }), { 6: [1, 24] }, { 6: [2, 240] }, { 6: [2, 241] }, { 6: [2, 242] }, { 6: [2, 243], 9: 25, 84: 26, 85: $V5 }, { 6: [2, 239] }, o($V6, [2, 411], { 216: 28, 217: 29 }), o($V7, [2, 249], { 18: 30 }), o($V7, [2, 251], { 22: 31 }), o($V8, [2, 255], { 25: 32, 27: 33, 29: [1, 34] }), { 13: $V9, 16: $Va, 33: 35, 39: [1, 37], 44: 39, 55: 40, 87: $Vb, 139: 38, 307: 43, 308: $Vc, 323: 36 }, o($V7, [2, 267], { 37: 46 }), o($Vd, [2, 326], { 98: 47, 103: 49, 106: 50, 117: 55, 130: 61, 100: [1, 48], 110: [1, 51], 113: [1, 52], 115: [1, 53], 116: [1, 54], 131: [1, 62], 329: [1, 56], 330: [1, 57], 331: [1, 58], 332: [1, 59], 333: [1, 60] }), { 39: [1, 63], 40: 64, 43: 65, 44: 66, 45: $Ve, 87: $Vb }, o($Vf, [2, 273], { 42: 68, 324: 69, 325: [1, 70], 326: [1, 71] }), o($V0, [2, 248]), o($V0, [2, 245]), o($V0, [2, 246]), { 13: [1, 72] }, { 16: [1, 73] }, { 1: [2, 1] }, { 6: [2, 2] }, { 6: [2, 244] }, { 45: [1, 77], 85: [1, 78], 86: 74, 87: [1, 75], 89: [1, 76] }, o([6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], [2, 120], { 337: [1, 79] }), o($Vg, [2, 418], { 218: 80, 222: 81, 229: [1, 82] }), { 19: 83, 28: $Vh, 29: $Vi, 52: 84, 53: $Vj, 56: 85 }, { 19: 88, 28: $Vh, 29: $Vi, 52: 89, 53: $Vj, 56: 85 }, o($V7, [2, 253], { 26: 90 }), { 28: [1, 91], 52: 92, 53: $Vj }, o($Vk, [2, 385], { 181: 93, 182: 94, 183: 95, 31: [2, 383] }), o($Vl, [2, 263], { 34: 96 }), o($Vl, [2, 261], { 44: 39, 55: 40, 307: 43, 139: 97, 13: $V9, 16: $Va, 87: $Vb, 308: $Vc }), o($Vl, [2, 262]), o($Vm, [2, 259]), o($Vn, [2, 143]), o($Vn, [2, 144]), o([6, 13, 16, 28, 29, 31, 39, 45, 47, 48, 53, 63, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], [2, 145]), o($Vo, [2, 211]), o($Vo, [2, 212]), o($Vo, [2, 213]), o($Vo, [2, 214]), { 19: 98, 28: $Vh, 29: $Vi, 52: 99, 53: $Vj, 56: 85 }, { 6: [2, 309], 99: 100, 193: [1, 101] }, o($Vp, [2, 311], { 101: 102, 328: [1, 103] }), o($Vq, [2, 317], { 104: 104, 328: [1, 105] }), o($Vr, [2, 322], { 107: 106, 328: [1, 107] }), { 111: 108, 112: [2, 324], 328: [1, 109] }, { 29: $Vs, 114: 110 }, { 29: $Vs, 114: 112 }, { 29: $Vs, 114: 113 }, { 118: 114, 123: [1, 115], 125: 116, 126: $Vt }, o($Vu, [2, 315]), o($Vu, [2, 316]), o($Vv, [2, 319]), o($Vv, [2, 320]), o($Vv, [2, 321]), o($Vd, [2, 327]), { 13: $V9, 16: $Va, 55: 118, 307: 43, 308: $Vc }, o($V7, [2, 12]), o($V7, [2, 13], { 44: 66, 43: 119, 45: $Ve, 87: $Vb }), o($Vw, [2, 269]), o($Vw, [2, 15]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 120, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vf, [2, 14]), o($Vf, [2, 274]), o($Vf, [2, 271]), o($Vf, [2, 272]), o($V0, [2, 4]), { 13: [1, 177] }, o($V61, [2, 39]), { 29: [1, 178] }, { 29: [1, 179] }, { 87: [1, 181], 91: 180 }, { 45: [1, 187], 87: [1, 185], 89: [1, 186], 93: 182, 165: 183, 166: 184 }, o($V6, [2, 410]), o([6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337], [2, 121], { 338: [1, 188] }), { 13: $V9, 16: $Va, 45: [1, 193], 55: 194, 197: $V71, 219: 189, 220: 190, 223: 191, 224: [1, 192], 307: 43, 308: $Vc }, o($Vg, [2, 419]), o($V81, $V91, { 20: 196, 59: 197, 69: 198, 70: $Va1 }), o($V7, [2, 250]), { 29: $Vb1, 57: 200 }, o($Vp, [2, 279], { 54: 202, 327: [1, 203] }), { 29: [2, 282] }, o($Vc1, $Vd1, { 23: 204, 58: 205, 62: 206, 63: $Ve1 }), o($V7, [2, 252]), { 19: 208, 28: $Vh, 29: $Vi, 52: 209, 53: $Vj, 56: 85 }, { 29: [1, 210] }, o($V8, [2, 256]), { 31: [1, 211] }, { 31: [2, 384] }, { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 145: 212, 172: 221, 185: 213, 187: 214, 231: $Vh1, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl1, [2, 265], { 56: 85, 35: 227, 52: 228, 19: 229, 28: $Vh, 29: $Vi, 53: $Vj }), o($Vm, [2, 260]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 230, 63: $Ve1 }), o($V7, [2, 268]), { 6: [2, 45] }, o($V0, $V1, { 10: 3, 4: 231 }), { 13: $V9, 16: $Va, 55: 232, 307: 43, 308: $Vc }, o($Vp, [2, 312]), { 105: 233, 112: $Vm1, 122: 234, 132: [1, 237], 134: 235, 327: [1, 238], 334: [1, 239] }, o($Vq, [2, 318]), o($Vp, $Vn1, { 108: 240, 133: 242, 112: $Vo1, 132: $Vp1 }), o($Vr, [2, 323]), { 112: [1, 244] }, { 112: [2, 325] }, o($Vq1, [2, 50]), o($Vk, $Vr1, { 135: 245, 136: 246, 143: 247, 144: 248, 31: $Vs1, 112: $Vs1 }), o($Vq1, [2, 51]), o($Vq1, [2, 52]), o($Vt1, [2, 328], { 119: 249 }), { 29: $Vs, 114: 250 }, o($Vt1, [2, 56]), { 29: $Vs, 114: 251 }, o($Vd, [2, 59]), o($Vw, [2, 270]), { 47: [1, 252] }, o($Vu1, [2, 150]), o($Vv1, [2, 428], { 240: 253 }), o($Vw1, [2, 430], { 244: 254 }), o($Vw1, [2, 155], { 248: 255, 249: 256, 250: [2, 438], 290: [1, 257], 341: [1, 258], 342: [1, 259], 343: [1, 260], 344: [1, 261], 345: [1, 262], 346: [1, 263] }), o($Vx1, [2, 440], { 252: 264 }), o($Vy1, [2, 448], { 260: 265 }), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 266, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 267, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 268, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vy1, [2, 167]), o($Vy1, [2, 168]), o($Vy1, [2, 169]), o($Vy1, [2, 170], { 176: 269, 45: $Vz1, 89: $VA1 }), o($Vy1, [2, 171]), o($Vy1, [2, 172]), o($Vy1, [2, 173]), o($Vy1, [2, 174]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 272, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 176]), { 89: [1, 273] }, { 45: [1, 274] }, { 45: [1, 275] }, { 45: [1, 276] }, { 45: [1, 277] }, { 45: [1, 278] }, { 45: $VC1, 89: $VD1, 179: 279 }, { 45: [1, 282] }, { 45: [1, 284], 89: [1, 283] }, { 279: [1, 285] }, o($VE1, [2, 192], { 292: [1, 286], 293: [1, 287] }), o($VE1, [2, 195]), o($VE1, [2, 196]), o($VE1, [2, 197]), o($VE1, [2, 198]), o($VE1, [2, 199]), o($VE1, [2, 200]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 82: $Vy, 87: $Vb, 139: 289, 172: 291, 255: 154, 257: 155, 266: 290, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 320: 288 }, { 45: [1, 292] }, { 45: [1, 293] }, { 45: [1, 294] }, o($VF1, [2, 452]), o($VF1, [2, 453]), o($VF1, [2, 454]), o($VF1, [2, 455]), o($VF1, [2, 456]), { 279: [2, 458] }, o($VG1, [2, 207]), o($VG1, [2, 208]), o($VG1, [2, 209]), o($VG1, [2, 210]), o($VE1, [2, 201]), o($VE1, [2, 202]), o($VE1, [2, 203]), o($VE1, [2, 204]), o($VE1, [2, 205]), o($VE1, [2, 206]), o($V0, [2, 5]), o($VH1, [2, 297], { 88: 295 }), o($VI1, [2, 299], { 90: 296 }), { 48: [1, 297], 87: [1, 298] }, o($VJ1, [2, 301]), o($V61, [2, 43]), o($V61, [2, 82]), o($V61, [2, 83]), { 29: [1, 299] }, { 29: [1, 300] }, { 87: [1, 302], 169: 301 }, o($V6, [2, 412]), o($VK1, [2, 123]), o($VK1, [2, 416], { 221: 303, 339: 304, 39: [1, 306], 263: [1, 307], 340: [1, 305] }), o($VL1, [2, 124]), { 13: $V9, 16: $Va, 45: [1, 311], 55: 194, 89: [1, 310], 197: $V71, 223: 312, 225: 308, 226: 309, 229: $VM1, 307: 43, 308: $Vc }, o($V6, $V3, { 215: 10, 214: 314 }), o($VL1, [2, 236]), o($VL1, [2, 237]), o($VN1, [2, 6]), o($VO1, [2, 287], { 60: 315, 72: 316, 73: [1, 317] }), o($V81, [2, 286]), { 13: $V9, 16: $Va, 45: $Vx, 55: 323, 67: 321, 68: 322, 71: 318, 77: 320, 79: 319, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o([6, 31, 63, 70, 73, 81, 83, 85], [2, 20]), o($Vk, $VP1, { 38: 17, 49: 324, 147: 325, 17: 326, 21: 327, 148: 328, 154: 329, 155: 330, 29: $VQ1, 31: $VQ1, 85: $VQ1, 112: $VQ1, 159: $VQ1, 160: $VQ1, 161: $VQ1, 163: $VQ1, 164: $VQ1, 41: $V4 }), { 13: $V9, 16: $Va, 55: 331, 307: 43, 308: $Vc }, o($Vp, [2, 280]), o($VN1, [2, 7]), o($V81, $V91, { 59: 197, 69: 198, 20: 332, 70: $Va1 }), o($Vc1, [2, 284]), { 64: [1, 333] }, o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 334, 63: $Ve1 }), o($V7, [2, 254]), o($Vk, $Vr1, { 144: 248, 30: 335, 143: 336, 31: [2, 257] }), o($V7, [2, 100]), { 31: [2, 387], 184: 337, 335: [1, 338] }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 339, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VS1, [2, 389], { 44: 39, 55: 40, 307: 43, 190: 340, 195: 341, 139: 342, 188: 344, 189: 345, 186: 346, 13: $V9, 16: $Va, 87: $Vb, 197: $VR1, 308: $Vc }), o($VT1, [2, 227]), o($VT1, [2, 228]), o($VT1, [2, 229]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 200: 348, 230: 347, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 352, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VT1, [2, 146]), o($VT1, [2, 147]), o($VT1, [2, 148]), o($VT1, [2, 149]), { 13: $V9, 16: $Va, 44: 354, 55: 355, 82: $Vy, 87: $Vb, 172: 357, 237: 356, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 358, 312: $Vk1, 313: 353 }, o($VU1, [2, 215]), o($VU1, [2, 216]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 359, 63: $Ve1 }), o($Vl, [2, 264]), o($Vl1, [2, 266]), o($VN1, [2, 11]), o($V2, [2, 308], { 6: [2, 310] }), o($Vq1, [2, 313], { 102: 360, 120: 361, 121: [1, 362] }), o($Vq1, [2, 47]), o($Vq1, [2, 63]), o($Vq1, [2, 64]), { 13: $V9, 16: $Va, 55: 363, 307: 43, 308: $Vc }, o($Vq1, [2, 336]), o($Vq1, [2, 337]), o($Vq1, [2, 338]), { 109: [1, 364] }, o($VV1, [2, 60]), { 13: $V9, 16: $Va, 55: 365, 307: 43, 308: $Vc }, o($Vp, [2, 335]), { 13: $V9, 16: $Va, 55: 366, 307: 43, 308: $Vc }, { 31: [1, 367] }, o($VW1, [2, 341], { 137: 368 }), o($VW1, [2, 340]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 145: 369, 172: 221, 185: 213, 187: 214, 231: $Vh1, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, { 28: [1, 370], 127: 371, 128: [1, 372] }, o($Vt1, [2, 330], { 124: 373, 125: 374, 126: $Vt }), o($Vt1, [2, 57]), { 44: 375, 87: $Vb }, o($Vu1, [2, 151], { 241: 376, 242: [1, 377] }), o($Vv1, [2, 153], { 245: 378, 246: [1, 379] }), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 247: 380, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 250: [1, 381] }, o($VX1, [2, 432]), o($VX1, [2, 433]), o($VX1, [2, 434]), o($VX1, [2, 435]), o($VX1, [2, 436]), o($VX1, [2, 437]), { 250: [2, 439] }, o([47, 48, 193, 242, 246, 250, 272, 290, 341, 342, 343, 344, 345, 346], [2, 158], { 253: 382, 254: 383, 255: 384, 257: 385, 263: [1, 386], 265: [1, 387], 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW }), o($Vx1, [2, 162], { 261: 388, 262: 389, 39: $VY1, 338: $VZ1 }), o($Vy1, [2, 164]), o($Vy1, [2, 165]), o($Vy1, [2, 166]), o($VB1, [2, 95]), o($VB1, [2, 96]), o($VX1, [2, 377], { 177: 392, 325: [1, 393] }), { 48: [1, 394] }, o($VB1, [2, 177]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 395, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 396, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 397, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 398, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 399, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 183]), o($VB1, [2, 98]), o($VX1, [2, 381], { 180: 400 }), { 87: [1, 401] }, o($VB1, [2, 185]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 402, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 29: $Vb1, 57: 403 }, o($VE1, [2, 193]), { 13: $V9, 16: $Va, 55: 404, 307: 43, 308: $Vc }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 195: 405, 197: $VR1, 307: 43, 308: $Vc }, o($V_1, [2, 233]), o($V_1, [2, 234]), o($V_1, [2, 235]), o($V$1, [2, 459], { 281: 406, 325: [1, 407] }), o($VX1, [2, 463], { 284: 408, 325: [1, 409] }), o($VX1, [2, 465], { 286: 410, 325: [1, 411] }), { 13: $V9, 16: $Va, 31: [1, 412], 55: 414, 82: $Vy, 171: 413, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 419], 89: [1, 420] }, { 29: [1, 421] }, o($VJ1, [2, 302]), o($VH1, [2, 367], { 167: 422 }), o($VI1, [2, 369], { 168: 423 }), { 48: [1, 424], 87: [1, 425] }, o($VJ1, [2, 371]), o($VK1, [2, 122]), o($VK1, [2, 417]), o($VK1, [2, 413]), o($VK1, [2, 414]), o($VK1, [2, 415]), o($VL1, [2, 125]), o($VL1, [2, 127]), o($VL1, [2, 128]), o($V22, [2, 420], { 227: 426 }), o($VL1, [2, 130]), { 13: $V9, 16: $Va, 55: 194, 197: $V71, 223: 427, 307: 43, 308: $Vc }, { 48: [1, 428] }, o($V32, [2, 289], { 61: 429, 80: 430, 81: [1, 431], 83: [1, 432] }), o($VO1, [2, 288]), { 64: [1, 433] }, o($V81, [2, 29], { 307: 43, 267: 139, 275: 146, 278: 149, 77: 320, 67: 321, 68: 322, 55: 323, 79: 434, 13: $V9, 16: $Va, 45: $Vx, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($V42, [2, 293]), o($V52, [2, 92]), o($V52, [2, 93]), o($V52, [2, 94]), { 45: $Vz1, 89: $VA1, 176: 269 }, { 31: [1, 435] }, { 31: [1, 436] }, { 19: 437, 28: $Vh, 29: $Vi, 56: 85 }, { 19: 438, 28: $Vh, 29: $Vi, 56: 85 }, o($V62, [2, 355], { 149: 439 }), o($V62, [2, 354]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 156: 440, 172: 221, 185: 441, 203: 442, 231: $V82, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl, [2, 19]), o($V32, [2, 21]), { 13: $V9, 16: $Va, 44: 450, 45: $V92, 55: 323, 65: 445, 66: 446, 67: 447, 68: 448, 87: $Vb, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VN1, [2, 8]), { 31: [1, 451] }, { 31: [2, 258] }, { 31: [2, 101] }, o($Vk, [2, 386], { 31: [2, 388] }), o($VS1, [2, 102]), o($Va2, [2, 391], { 191: 452 }), o($Vk, [2, 395], { 196: 453, 198: 454 }), o($Vk, [2, 108]), o($Vk, [2, 109]), o($VS1, [2, 103]), o($VS1, [2, 104]), o($VS1, [2, 390]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 48: [1, 455], 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 200: 456, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vb2, [2, 424]), o($Vc2, [2, 136]), o($Vc2, [2, 137]), o($Vd2, [2, 140]), { 232: [1, 457] }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 195: 458, 197: $VR1, 307: 43, 308: $Vc }, o($V_1, [2, 219]), o($V_1, [2, 220]), o($V_1, [2, 221]), o($V_1, [2, 222]), o($V_1, [2, 223]), o($VN1, [2, 10]), o($Vq1, [2, 46]), o($Vq1, [2, 314]), { 112: $Vm1, 122: 459 }, o($Vq1, [2, 62]), o($Vp, $Vn1, { 133: 242, 108: 460, 112: $Vo1, 132: $Vp1 }), o($VV1, [2, 61]), o($Vq1, [2, 49]), o([6, 28, 126, 128, 193], [2, 65]), { 31: [2, 66], 112: [1, 462], 138: 461 }, o($VW1, [2, 351], { 146: 463, 335: [1, 464] }), { 29: $Vb1, 57: 465 }, o($Vt1, [2, 329]), o($Vp, [2, 332], { 129: 466, 327: [1, 467] }), o($Vt1, [2, 55]), o($Vt1, [2, 331]), { 48: [1, 468] }, o($Vv1, [2, 429]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 239: 469, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vw1, [2, 431]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 243: 470, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vw1, [2, 156]), { 45: $VC1, 89: $VD1, 179: 471 }, o($Vx1, [2, 441]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 251: 472, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vy1, [2, 444], { 256: 473 }), o($Vy1, [2, 446], { 258: 474 }), o($VX1, [2, 442]), o($VX1, [2, 443]), o($Vy1, [2, 449]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 255: 154, 257: 155, 259: 475, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 450]), o($VX1, [2, 451]), o($VX1, [2, 379], { 178: 476 }), o($VX1, [2, 378]), o([6, 13, 16, 29, 31, 39, 45, 47, 48, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], [2, 175]), { 48: [1, 477] }, { 48: [1, 478] }, { 272: [1, 479] }, { 272: [1, 480] }, { 272: [1, 481] }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 482, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 48: [1, 483] }, { 48: [1, 484] }, o($VB1, [2, 187]), o($VE1, [2, 194]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 82: $Vy, 87: $Vb, 139: 289, 172: 291, 255: 154, 257: 155, 266: 290, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 320: 485 }, { 13: $V9, 16: $Va, 39: [1, 487], 44: 136, 45: $Vx, 46: 488, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 282: 486, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($V$1, [2, 460]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 489, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 464]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 490, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 466]), o($V61, [2, 40]), o($VH1, [2, 298]), o($Ve2, [2, 87]), o($Ve2, [2, 88]), o($Ve2, [2, 89]), o($Ve2, [2, 90]), { 13: $V9, 16: $Va, 55: 492, 82: $Vy, 172: 493, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 311: 494, 312: $Vk1, 315: 491 }, o($V61, [2, 41]), o($VI1, [2, 300]), o($Vf2, [2, 303], { 92: 495 }), { 13: $V9, 16: $Va, 31: [1, 496], 55: 414, 82: $Vy, 171: 497, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 498], 89: [1, 499] }, { 29: [1, 500] }, o($VJ1, [2, 372]), { 13: $V9, 16: $Va, 48: [2, 422], 55: 194, 197: $V71, 223: 312, 226: 502, 228: 501, 229: $VM1, 307: 43, 308: $Vc }, o($VL1, [2, 131]), o($VL1, [2, 126]), o($V32, [2, 22]), o($V32, [2, 290]), { 82: [1, 503] }, { 82: [1, 504] }, { 13: $V9, 16: $Va, 44: 510, 45: $Vx, 55: 323, 67: 321, 68: 322, 74: 505, 75: 506, 76: $Vg2, 77: 320, 78: $Vh2, 79: 509, 87: $Vb, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($V42, [2, 294]), o($Vi2, [2, 69]), o($Vi2, [2, 70]), o($V81, $V91, { 59: 197, 69: 198, 20: 511, 70: $Va1 }), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 512, 63: $Ve1 }), { 29: [2, 375], 31: [2, 71], 84: 522, 85: $V5, 112: [1, 518], 150: 513, 151: 514, 158: 515, 159: [1, 516], 160: [1, 517], 161: [1, 519], 163: [1, 520], 164: [1, 521], 175: 523 }, o($V62, [2, 363], { 157: 524, 335: [1, 525] }), o($V6, $V3, { 215: 10, 202: 526, 205: 527, 208: 528, 214: 529, 44: 530, 87: $Vb }), o($Vj2, [2, 399], { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 204: 531, 202: 532, 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 87: $Vb }), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 212: 534, 231: $V82, 233: 533, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($V6, $V3, { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 202: 537, 87: $Vb }), o($Vc1, [2, 23], { 307: 43, 267: 139, 275: 146, 278: 149, 55: 323, 67: 447, 68: 448, 44: 450, 66: 538, 13: $V9, 16: $Va, 45: $V92, 87: $Vb, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($Vk2, [2, 291]), o($Vk2, [2, 24]), o($Vk2, [2, 25]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 539, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vk2, [2, 28]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 540, 63: $Ve1 }), o([31, 112, 232, 318, 335], [2, 105], { 192: 541, 193: [1, 542] }), o($Va2, [2, 107]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 199: 543, 200: 544, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl2, [2, 132]), o($Vb2, [2, 425]), o($Vl2, [2, 133]), { 13: $V9, 16: $Va, 44: 354, 55: 355, 82: $Vy, 87: $Vb, 172: 357, 237: 356, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 358, 312: $Vk1, 313: 545 }, o($Vq1, [2, 54]), o($Vq1, [2, 48]), o($VW1, [2, 342]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 546, 307: 43, 308: $Vc }, o($VW1, [2, 68]), o($Vk, [2, 350], { 31: $Vm2, 112: $Vm2 }), o($Vq1, [2, 53]), { 13: $V9, 16: $Va, 55: 547, 307: 43, 308: $Vc }, o($Vp, [2, 333]), o($Vw, [2, 16]), o($Vv1, [2, 152]), o($Vw1, [2, 154]), o($Vw1, [2, 157]), o($Vx1, [2, 159]), o($Vx1, [2, 160], { 262: 389, 261: 548, 39: $VY1, 338: $VZ1 }), o($Vx1, [2, 161], { 262: 389, 261: 549, 39: $VY1, 338: $VZ1 }), o($Vy1, [2, 163]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 550, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 178]), o($VB1, [2, 179]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 551, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 552, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 553, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 48: [1, 554], 272: [1, 555] }, o($VB1, [2, 184]), o($VB1, [2, 186]), { 314: [1, 556] }, { 48: [1, 557] }, { 48: [2, 461] }, { 48: [2, 462] }, { 48: [1, 558] }, { 48: [2, 467], 193: [1, 561], 287: 559, 288: 560 }, { 13: $V9, 16: $Va, 55: 194, 197: $V71, 223: 562, 307: 43, 308: $Vc }, o($Vn2, [2, 224]), o($Vn2, [2, 225]), o($Vn2, [2, 226]), { 31: [1, 563], 45: $Vo2, 94: 564 }, o($V61, [2, 84]), o($VH1, [2, 368]), o($V61, [2, 85]), o($VI1, [2, 370]), o($Vf2, [2, 373], { 170: 566 }), { 48: [1, 567] }, { 48: [2, 423], 337: [1, 568] }, o($V32, [2, 35], { 83: [1, 569] }), o($V32, [2, 36], { 81: [1, 570] }), o($VO1, [2, 30], { 307: 43, 267: 139, 275: 146, 278: 149, 77: 320, 67: 321, 68: 322, 55: 323, 79: 509, 44: 510, 75: 571, 13: $V9, 16: $Va, 45: $Vx, 76: $Vg2, 78: $Vh2, 87: $Vb, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($Vp2, [2, 295]), { 45: $Vx, 77: 572 }, { 45: $Vx, 77: 573 }, o($Vp2, [2, 33]), o($Vp2, [2, 34]), { 31: [2, 275], 50: 574, 84: 575, 85: $V5 }, { 31: [2, 277], 51: 576, 84: 577, 85: $V5 }, o($V62, [2, 356]), o($Vq2, [2, 357], { 152: 578, 335: [1, 579] }), o($Vr2, [2, 74]), { 29: $Vb1, 57: 580 }, { 29: $Vb1, 57: 581 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 582, 307: 43, 308: $Vc }, o($Vs2, [2, 365], { 162: 583, 328: [1, 584] }), { 13: $V9, 16: $Va, 45: $Vx, 55: 323, 67: 321, 68: 322, 77: 320, 79: 585, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 45: [1, 586] }, o($Vr2, [2, 81]), { 29: $Vb1, 57: 587 }, o($V62, [2, 73]), o($Vk, [2, 362], { 29: $Vt2, 31: $Vt2, 85: $Vt2, 112: $Vt2, 159: $Vt2, 160: $Vt2, 161: $Vt2, 163: $Vt2, 164: $Vt2 }), o($Vj2, [2, 112]), o($Vu2, [2, 401], { 206: 588 }), o($Vk, [2, 405], { 209: 589, 210: 590 }), o($Vk, [2, 403]), o($Vk, [2, 404]), o($Vj2, [2, 113]), o($Vj2, [2, 400]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 48: [1, 591], 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 212: 592, 231: $V82, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vb2, [2, 426]), o($Vd2, [2, 138]), o($Vd2, [2, 139]), { 232: [1, 593] }, o($Vk2, [2, 292]), { 47: [1, 595], 48: [1, 594] }, o($VN1, [2, 9]), o($Va2, [2, 392]), o($Va2, [2, 393], { 44: 39, 55: 40, 307: 43, 195: 341, 139: 342, 194: 596, 190: 597, 13: $V9, 16: $Va, 87: $Vb, 197: $VR1, 308: $Vc }), o($Va2, [2, 110], { 272: [1, 598] }), o($Vv2, [2, 397], { 201: 599, 316: 600, 317: [1, 601] }), { 314: [1, 602] }, { 29: [1, 603] }, o($Vt1, [2, 58]), o($Vy1, [2, 445]), o($Vy1, [2, 447]), { 48: [1, 604], 272: [1, 605] }, { 48: [1, 606] }, { 272: [1, 607] }, { 272: [1, 608] }, o($VB1, [2, 99]), o($VX1, [2, 382]), o([13, 16, 39, 47, 48, 87, 193, 197, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 308, 314, 338, 341, 342, 343, 344, 345, 346], [2, 232]), o($VB1, [2, 188]), o($VB1, [2, 189]), { 48: [1, 609] }, { 48: [2, 468] }, { 289: [1, 610] }, { 13: $V9, 16: $Va, 55: 492, 82: $Vy, 172: 493, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 311: 494, 312: $Vk1, 315: 611 }, o($V61, [2, 42]), o($Vf2, [2, 304]), { 13: $V9, 16: $Va, 55: 414, 82: $Vy, 95: 612, 171: 613, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 614], 45: $Vo2, 94: 615 }, o($VL1, [2, 129]), o($V22, [2, 421]), { 82: [1, 616] }, { 82: [1, 617] }, o($Vp2, [2, 296]), o($Vp2, [2, 31]), o($Vp2, [2, 32]), { 31: [2, 17] }, { 31: [2, 276] }, { 31: [2, 18] }, { 31: [2, 278] }, o($Vk, $VP1, { 155: 330, 153: 618, 154: 619, 29: $Vw2, 31: $Vw2, 85: $Vw2, 112: $Vw2, 159: $Vw2, 160: $Vw2, 161: $Vw2, 163: $Vw2, 164: $Vw2 }), o($Vq2, [2, 358]), o($Vr2, [2, 75]), o($Vr2, [2, 76]), { 29: $Vb1, 57: 620 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 621, 307: 43, 308: $Vc }, o($Vs2, [2, 366]), o($Vr2, [2, 79]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 622, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vr2, [2, 91], { 336: [1, 623] }), o([29, 31, 85, 112, 159, 160, 161, 163, 164, 232, 318, 335], [2, 114], { 207: 624, 193: [1, 625] }), o($Vu2, [2, 117]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 211: 626, 212: 627, 231: $V82, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($VT1, [2, 134]), o($Vb2, [2, 427]), o($VT1, [2, 135]), o($Vk2, [2, 26]), { 44: 628, 87: $Vb }, o($Va2, [2, 106]), o($Va2, [2, 394]), o($Vk, [2, 396]), o($Vv2, [2, 111]), o($Vv2, [2, 398]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 629, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VU1, [2, 217]), o($Vk, $Vr1, { 144: 248, 140: 630, 143: 631, 31: [2, 343] }), o($VB1, [2, 97]), o($VX1, [2, 380]), o($VB1, [2, 180]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 632, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 633, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 190]), { 290: [1, 634] }, { 314: [1, 635] }, { 13: $V9, 16: $Va, 48: [1, 636], 55: 414, 82: $Vy, 171: 637, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, o($Vx2, [2, 305]), o($V61, [2, 86]), o($Vf2, [2, 374]), o($V32, [2, 37]), o($V32, [2, 38]), o($V62, [2, 72]), o($V62, [2, 360]), o($Vr2, [2, 77]), { 29: $Vb1, 57: 638 }, { 47: [1, 639] }, { 29: [2, 376] }, o($Vu2, [2, 402]), o($Vu2, [2, 115], { 215: 10, 208: 528, 214: 529, 44: 530, 205: 640, 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 87: $Vb }), o($Vu2, [2, 118], { 272: [1, 641] }), o($Vy2, [2, 407], { 213: 642, 319: 643, 317: [1, 644] }), { 48: [1, 645] }, { 318: [1, 646] }, { 31: [1, 647] }, { 31: [2, 344] }, { 48: [1, 648] }, { 48: [1, 649] }, { 291: 650, 303: $VX, 304: $VY, 305: $VZ, 306: $V_ }, o($Ve2, [2, 218]), o($Vf2, [2, 44]), o($Vx2, [2, 306]), o($Vr2, [2, 78]), { 44: 651, 87: $Vb }, o($Vu2, [2, 116]), o($Vk, [2, 406]), o($Vy2, [2, 119]), o($Vy2, [2, 408]), o($V6, $V3, { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 202: 652, 87: $Vb }), o($Vk2, [2, 27]), o($Vv2, [2, 230]), o($Vz2, [2, 345], { 141: 653, 335: [1, 654] }), o($VB1, [2, 181]), o($VB1, [2, 182]), { 48: [2, 191] }, { 48: [1, 655] }, { 318: [1, 656] }, o($Vk, $Vr1, { 144: 248, 142: 657, 143: 658, 31: $VA2, 112: $VA2 }), o($Vz2, [2, 346]), o($Vr2, [2, 80]), o($Vy2, [2, 231]), o($VW1, [2, 67]), o($VW1, [2, 348])],
        defaultActions: { 5: [2, 240], 6: [2, 241], 7: [2, 242], 9: [2, 239], 24: [2, 1], 25: [2, 2], 26: [2, 244], 87: [2, 282], 94: [2, 384], 100: [2, 45], 109: [2, 325], 166: [2, 458], 263: [2, 439], 336: [2, 258], 337: [2, 101], 487: [2, 461], 488: [2, 462], 560: [2, 468], 574: [2, 17], 575: [2, 276], 576: [2, 18], 577: [2, 278], 623: [2, 376], 631: [2, 344], 650: [2, 191] },
        parseError: function parseError(str, hash2) {
          if (hash2.recoverable) {
            this.trace(str);
          } else {
            var error = new Error(str);
            error.hash = hash2;
            throw error;
          }
        },
        parse: function parse2(input) {
          var self2 = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          var args = lstack.slice.call(arguments, 1);
          var lexer2 = Object.create(this.lexer);
          var sharedState = { yy: {} };
          for (var k in this.yy) {
            if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
              sharedState.yy[k] = this.yy[k];
            }
          }
          lexer2.setInput(input, sharedState.yy);
          sharedState.yy.lexer = lexer2;
          sharedState.yy.parser = this;
          if (typeof lexer2.yylloc == "undefined") {
            lexer2.yylloc = {};
          }
          var yyloc = lexer2.yylloc;
          lstack.push(yyloc);
          var ranges = lexer2.options && lexer2.options.ranges;
          if (typeof sharedState.yy.parseError === "function") {
            this.parseError = sharedState.yy.parseError;
          } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
          }
          function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
          }
          _token_stack:
            var lex = function() {
              var token;
              token = lexer2.lex() || EOF;
              if (typeof token !== "number") {
                token = self2.symbols_[token] || token;
              }
              return token;
            };
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
          while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
              }
              action = table[state] && table[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer2.showPosition) {
                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + lexer2.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
              }
              this.parseError(errStr, {
                text: lexer2.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer2.yylineno,
                loc: yyloc,
                expected
              });
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(lexer2.yytext);
                lstack.push(lexer2.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = lexer2.yyleng;
                  yytext = lexer2.yytext;
                  yylineno = lexer2.yylineno;
                  yyloc = lexer2.yylloc;
                  if (recovering > 0) {
                    recovering--;
                  }
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                  yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                  ];
                }
                r = this.performAction.apply(yyval, [
                  yytext,
                  yyleng,
                  yylineno,
                  sharedState.yy,
                  action[1],
                  vstack,
                  lstack
                ].concat(args));
                if (typeof r !== "undefined") {
                  return r;
                }
                if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var Wildcard = require_Wildcard().Wildcard;
      var RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#", RDF_TYPE = RDF + "type", RDF_FIRST = RDF + "first", RDF_REST = RDF + "rest", RDF_NIL = RDF + "nil", XSD = "http://www.w3.org/2001/XMLSchema#", XSD_INTEGER = XSD + "integer", XSD_DECIMAL = XSD + "decimal", XSD_DOUBLE = XSD + "double", XSD_BOOLEAN = XSD + "boolean";
      var base = "", basePath = "", baseRoot = "";
      function lowercase(string) {
        return string.toLowerCase();
      }
      function appendTo(array, item) {
        return array.push(item), array;
      }
      function appendAllTo(array, items) {
        return array.push.apply(array, items), array;
      }
      function extend(base2) {
        if (!base2) base2 = {};
        for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
          for (var name in arg)
            base2[name] = arg[name];
        return base2;
      }
      function unionAll() {
        var union = [];
        for (var i = 0, l = arguments.length; i < l; i++)
          union = union.concat.apply(union, arguments[i]);
        return union;
      }
      function resolveIRI(iri) {
        if (iri[0] === "<")
          iri = iri.substring(1, iri.length - 1);
        if (/^[a-z][a-z0-9.+-]*:/i.test(iri))
          return iri;
        if (!Parser2.base)
          throw new Error("Cannot resolve relative IRI " + iri + " because no base IRI was set.");
        if (base !== Parser2.base) {
          base = Parser2.base;
          basePath = base.replace(/[^\/:]*$/, "");
          baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
        }
        switch (iri[0]) {
          case void 0:
            return base;
          case "#":
            return base + iri;
          case "?":
            return base.replace(/(?:\?.*)?$/, iri);
          case "/":
            return baseRoot + iri;
          default:
            return basePath + iri;
        }
      }
      function toVar(variable) {
        if (variable) {
          var first3 = variable[0];
          if (first3 === "?" || first3 === "$") return Parser2.factory.variable(variable.substr(1));
        }
        return variable;
      }
      function operation(operatorName, args) {
        return { type: "operation", operator: operatorName, args: args || [] };
      }
      function expression(expr, attr) {
        var expression2 = { expression: expr === "*" ? new Wildcard() : expr };
        if (attr)
          for (var a in attr)
            expression2[a] = attr[a];
        return expression2;
      }
      function path(type, items) {
        return { type: "path", pathType: type, items };
      }
      function createOperationTree(initialExpression, operationList) {
        for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
          initialExpression = operation(item[0], [initialExpression, item[1]]);
        return initialExpression;
      }
      function groupDatasets(fromClauses, groupName) {
        var defaults = [], named = [], l = fromClauses.length, fromClause, group = {};
        if (!l)
          return null;
        for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
          (fromClause.named ? named : defaults).push(fromClause.iri);
        group[groupName || "from"] = { default: defaults, named };
        return group;
      }
      function toInt(string) {
        return parseInt(string, 10);
      }
      function degroupSingle(group) {
        return group.type === "group" && group.patterns.length === 1 ? group.patterns[0] : group;
      }
      function createTypedLiteral(value, type) {
        if (type && type.termType !== "NamedNode") {
          type = Parser2.factory.namedNode(type);
        }
        return Parser2.factory.literal(value, type);
      }
      function createLangLiteral(value, lang) {
        return Parser2.factory.literal(value, lang);
      }
      function nestedTriple(subject, predicate, object) {
        if (!("termType" in predicate)) {
          throw new Error("Nested triples cannot contain paths");
        }
        return Parser2.factory.quad(subject, predicate, object);
      }
      function triple(subject, predicate, object, annotations) {
        var triple2 = {};
        if (subject != null) triple2.subject = subject;
        if (predicate != null) triple2.predicate = predicate;
        if (object != null) triple2.object = object;
        if (annotations != null) triple2.annotations = annotations;
        return triple2;
      }
      function blank(name) {
        if (typeof name === "string") {
          if (name.startsWith("e_")) return Parser2.factory.blankNode(name);
          return Parser2.factory.blankNode("e_" + name);
        }
        return Parser2.factory.blankNode("g_" + blankId++);
      }
      ;
      var blankId = 0;
      Parser2._resetBlanks = function() {
        blankId = 0;
      };
      var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g, escapeReplacements = {
        "\\": "\\",
        "'": "'",
        '"': '"',
        "t": "	",
        "b": "\b",
        "n": "\n",
        "r": "\r",
        "f": "\f"
      }, partialSurrogatesWithoutEndpoint = /[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/, fromCharCode = String.fromCharCode;
      function unescapeString(string, trimLength) {
        string = string.substring(trimLength, string.length - trimLength);
        try {
          string = string.replace(escapeSequence, function(sequence, unicode4, unicode8, escapedChar) {
            var charCode;
            if (unicode4) {
              charCode = parseInt(unicode4, 16);
              if (isNaN(charCode)) throw new Error();
              return fromCharCode(charCode);
            } else if (unicode8) {
              charCode = parseInt(unicode8, 16);
              if (isNaN(charCode)) throw new Error();
              if (charCode < 65535) return fromCharCode(charCode);
              return fromCharCode(55296 + ((charCode -= 65536) >> 10), 56320 + (charCode & 1023));
            } else {
              var replacement = escapeReplacements[escapedChar];
              if (!replacement) throw new Error();
              return replacement;
            }
          });
        } catch (error) {
          return "";
        }
        if (partialSurrogatesWithoutEndpoint.exec(string)) {
          throw new Error("Invalid unicode codepoint of surrogate pair without corresponding codepoint in " + string);
        }
        return string;
      }
      function createList(objects) {
        var list = blank(), head2 = list, listItems = [], listTriples, triples = [];
        objects.forEach(function(o2) {
          listItems.push(o2.entity);
          appendAllTo(triples, o2.triples);
        });
        for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l; )
          listTriples[j++] = triple(head2, Parser2.factory.namedNode(RDF_FIRST), listItems[i]), listTriples[j++] = triple(head2, Parser2.factory.namedNode(RDF_REST), head2 = ++i < l ? blank() : Parser2.factory.namedNode(RDF_NIL));
        return { entity: list, triples: appendAllTo(listTriples, triples) };
      }
      function createAnonymousObject(propertyList) {
        var entity = blank();
        return {
          entity,
          triples: propertyList.map(function(t) {
            return extend(triple(entity), t);
          })
        };
      }
      function objectListToTriples(predicate, objectList, otherTriples) {
        var objects = [], triples = [];
        objectList.forEach(function(l) {
          let annotation = null;
          if (l.annotation) {
            annotation = l.annotation;
            l = l.object;
          }
          objects.push(triple(null, predicate, l.entity, annotation));
          appendAllTo(triples, l.triples);
        });
        return unionAll(objects, otherTriples || [], triples);
      }
      function mergeAdjacentBGPs(groups) {
        var merged = [], currentBgp;
        for (var i = 0, group; group = groups[i]; i++) {
          switch (group.type) {
            case "bgp":
              if (group.triples.length) {
                if (!currentBgp)
                  appendTo(merged, currentBgp = group);
                else
                  appendAllTo(currentBgp.triples, group.triples);
              }
              break;
            default:
              if (!group.patterns || group.patterns.length > 0) {
                appendTo(merged, group);
                currentBgp = null;
              }
          }
        }
        return merged;
      }
      function getExpressionId(expression2) {
        return expression2.variable ? expression2.variable.value : expression2.value || expression2.expression.value;
      }
      function getAggregatesOfExpression(expression2) {
        if (!expression2) {
          return [];
        }
        if (expression2.type === "aggregate") {
          return [expression2];
        } else if (expression2.type === "operation") {
          const aggregates = [];
          for (const arg of expression2.args) {
            aggregates.push(...getAggregatesOfExpression(arg));
          }
          return aggregates;
        }
        return [];
      }
      function getVariablesFromExpression(expression2) {
        const variables = /* @__PURE__ */ new Set();
        const visitExpression = function(expr) {
          if (!expr) {
            return;
          }
          if (expr.termType === "Variable") {
            variables.add(expr);
          } else if (expr.type === "operation") {
            expr.args.forEach(visitExpression);
          }
        };
        visitExpression(expression2);
        return variables;
      }
      function flatten3(input, depth = 1, stack = []) {
        for (const item of input) {
          if (depth > 0 && item instanceof Array) {
            flatten3(item, depth - 1, stack);
          } else {
            stack.push(item);
          }
        }
        return stack;
      }
      function isVariable(term) {
        return term.termType === "Variable";
      }
      function getBoundVarsFromGroupGraphPattern(pattern) {
        if (pattern.triples) {
          const boundVars = [];
          for (const triple2 of pattern.triples) {
            if (isVariable(triple2.subject)) boundVars.push(triple2.subject.value);
            if (isVariable(triple2.predicate)) boundVars.push(triple2.predicate.value);
            if (isVariable(triple2.object)) boundVars.push(triple2.object.value);
          }
          return boundVars;
        } else if (pattern.patterns) {
          const boundVars = [];
          for (const pat of pattern.patterns) {
            boundVars.push(...getBoundVarsFromGroupGraphPattern(pat));
          }
          return boundVars;
        }
        return [];
      }
      function getDuplicatesInArray(array) {
        const sortedArray = array.slice().sort();
        const duplicates = [];
        for (let i = 0; i < sortedArray.length - 1; i++) {
          if (sortedArray[i + 1] == sortedArray[i]) {
            duplicates.push(sortedArray[i]);
          }
        }
        return duplicates;
      }
      function ensureSparqlStar(value) {
        if (!Parser2.sparqlStar) {
          throw new Error("SPARQL-star support is not enabled");
        }
        return value;
      }
      function _applyAnnotations(subject, annotations, arr) {
        for (const annotation of annotations) {
          const t = triple(
            // If the annotation already has a subject then just push the
            // annotation to the upper scope as it is a blank node introduced
            // from a pattern like :s :p :o {| :p1 [ :p2 :o2; :p3 :o3 ] |}
            "subject" in annotation ? annotation.subject : subject,
            annotation.predicate,
            annotation.object
          );
          arr.push(t);
          if (annotation.annotations) {
            _applyAnnotations(nestedTriple(
              subject,
              annotation.predicate,
              annotation.object
            ), annotation.annotations, arr);
          }
        }
      }
      function applyAnnotations(triples) {
        if (Parser2.sparqlStar) {
          const newTriples = [];
          triples.forEach((t) => {
            const s = triple(t.subject, t.predicate, t.object);
            newTriples.push(s);
            if (t.annotations) {
              _applyAnnotations(nestedTriple(t.subject, t.predicate, t.object), t.annotations, newTriples);
            }
          });
          return newTriples;
        }
        return triples;
      }
      function ensureSparqlStarNestedQuads(value) {
        if (!Parser2.sparqlStarNestedQuads) {
          throw new Error("Lenient SPARQL-star support with nested quads is not enabled");
        }
        return value;
      }
      function ensureNoVariables(operations) {
        for (const operation2 of operations) {
          if (operation2.type === "graph" && operation2.name.termType === "Variable") {
            throw new Error("Detected illegal variable in GRAPH");
          }
          if (operation2.type === "bgp" || operation2.type === "graph") {
            for (const triple2 of operation2.triples) {
              if (triple2.subject.termType === "Variable" || triple2.predicate.termType === "Variable" || triple2.object.termType === "Variable") {
                throw new Error("Detected illegal variable in BGP");
              }
            }
          }
        }
        return operations;
      }
      function ensureNoBnodes(operations) {
        for (const operation2 of operations) {
          if (operation2.type === "bgp") {
            for (const triple2 of operation2.triples) {
              if (triple2.subject.termType === "BlankNode" || triple2.predicate.termType === "BlankNode" || triple2.object.termType === "BlankNode") {
                throw new Error("Detected illegal blank node in BGP");
              }
            }
          }
        }
        return operations;
      }
      var lexer = /* @__PURE__ */ function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str, hash2) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str, hash2);
            } else {
              throw new Error(str);
            }
          },
          // resets the lexer, sets new input
          setInput: function(input, yy) {
            this.yy = yy || this.yy || {};
            this._input = input;
            this._more = this._backtrack = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
            };
            if (this.options.ranges) {
              this.yylloc.range = [0, 0];
            }
            this.offset = 0;
            return this;
          },
          // consumes and returns one char from the input
          input: function() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges) {
              this.yylloc.range[1]++;
            }
            this._input = this._input.slice(1);
            return ch;
          },
          // unshifts one char (or a string) into the input
          unput: function(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            this.yyleng = this.yytext.length;
            return this;
          },
          // When called from action, caches matched text and appends it on next action
          more: function() {
            this._more = true;
            return this;
          },
          // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
          reject: function() {
            if (this.options.backtrack_lexer) {
              this._backtrack = true;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
            return this;
          },
          // retain first n characters of the match
          less: function(n) {
            this.unput(this.match.slice(n));
          },
          // displays already matched input, i.e. for error messages
          pastInput: function() {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          // displays upcoming input, i.e. for error messages
          upcomingInput: function() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          // displays the character position where the lexing error occurred, i.e. for error messages
          showPosition: function() {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
          },
          // test the lexed token: return FALSE when not a match, otherwise return token
          test_match: function(match, indexed_rule) {
            var token, lines, backup;
            if (this.options.backtrack_lexer) {
              backup = {
                yylineno: this.yylineno,
                yylloc: {
                  first_line: this.yylloc.first_line,
                  last_line: this.last_line,
                  first_column: this.yylloc.first_column,
                  last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
              };
              if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
              }
            }
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno += lines.length;
            }
            this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
            };
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input) {
              this.done = false;
            }
            if (token) {
              return token;
            } else if (this._backtrack) {
              for (var k in backup) {
                this[k] = backup[k];
              }
              return false;
            }
            return false;
          },
          // return next match in input
          next: function() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) {
              this.done = true;
            }
            var token, match, tempMatch, index;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                  token = this.test_match(tempMatch, rules[i]);
                  if (token !== false) {
                    return token;
                  } else if (this._backtrack) {
                    match = false;
                    continue;
                  } else {
                    return false;
                  }
                } else if (!this.options.flex) {
                  break;
                }
              }
            }
            if (match) {
              token = this.test_match(match, rules[index]);
              if (token !== false) {
                return token;
              }
              return false;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
          },
          // return next match that has a token
          lex: function lex() {
            var r = this.next();
            if (r) {
              return r;
            } else {
              return this.lex();
            }
          },
          // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          // pop the previously active lexer condition state off the condition stack
          popState: function popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
              return this.conditionStack.pop();
            } else {
              return this.conditionStack[0];
            }
          },
          // produce the lexer rule set which is active for the currently active lexer condition state
          _currentRules: function _currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            } else {
              return this.conditions["INITIAL"].rules;
            }
          },
          // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
          topState: function topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) {
              return this.conditionStack[n];
            } else {
              return "INITIAL";
            }
          },
          // alias for begin(condition)
          pushState: function pushState(condition) {
            this.begin(condition);
          },
          // return the number of states currently on the stack
          stateStackSize: function stateStackSize() {
            return this.conditionStack.length;
          },
          options: { "flex": true, "case-insensitive": true },
          performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
              case 0:
                break;
              case 1:
                return 12;
                break;
              case 2:
                return 15;
                break;
              case 3:
                return 41;
                break;
              case 4:
                return 325;
                break;
              case 5:
                return 326;
                break;
              case 6:
                return 45;
                break;
              case 7:
                return 47;
                break;
              case 8:
                return 48;
                break;
              case 9:
                return 39;
                break;
              case 10:
                return 24;
                break;
              case 11:
                return 28;
                break;
              case 12:
                return 29;
                break;
              case 13:
                return 31;
                break;
              case 14:
                return 32;
                break;
              case 15:
                return 36;
                break;
              case 16:
                return 53;
                break;
              case 17:
                return 327;
                break;
              case 18:
                return 63;
                break;
              case 19:
                return 64;
                break;
              case 20:
                return 70;
                break;
              case 21:
                return 73;
                break;
              case 22:
                return 76;
                break;
              case 23:
                return 78;
                break;
              case 24:
                return 81;
                break;
              case 25:
                return 83;
                break;
              case 26:
                return 85;
                break;
              case 27:
                return 193;
                break;
              case 28:
                return 100;
                break;
              case 29:
                return 328;
                break;
              case 30:
                return 121;
                break;
              case 31:
                return 329;
                break;
              case 32:
                return 330;
                break;
              case 33:
                return 110;
                break;
              case 34:
                return 331;
                break;
              case 35:
                return 109;
                break;
              case 36:
                return 332;
                break;
              case 37:
                return 333;
                break;
              case 38:
                return 113;
                break;
              case 39:
                return 115;
                break;
              case 40:
                return 116;
                break;
              case 41:
                return 131;
                break;
              case 42:
                return 123;
                break;
              case 43:
                return 126;
                break;
              case 44:
                return 128;
                break;
              case 45:
                return 132;
                break;
              case 46:
                return 112;
                break;
              case 47:
                return 334;
                break;
              case 48:
                return 335;
                break;
              case 49:
                return 159;
                break;
              case 50:
                return 161;
                break;
              case 51:
                return 164;
                break;
              case 52:
                return 174;
                break;
              case 53:
                return 160;
                break;
              case 54:
                return 336;
                break;
              case 55:
                return 163;
                break;
              case 56:
                return 312;
                break;
              case 57:
                return 314;
                break;
              case 58:
                return 317;
                break;
              case 59:
                return 318;
                break;
              case 60:
                return 272;
                break;
              case 61:
                return 197;
                break;
              case 62:
                return 337;
                break;
              case 63:
                return 338;
                break;
              case 64:
                return 229;
                break;
              case 65:
                return 340;
                break;
              case 66:
                return 263;
                break;
              case 67:
                return 224;
                break;
              case 68:
                return 231;
                break;
              case 69:
                return 232;
                break;
              case 70:
                return 242;
                break;
              case 71:
                return 246;
                break;
              case 72:
                return 290;
                break;
              case 73:
                return 341;
                break;
              case 74:
                return 342;
                break;
              case 75:
                return 343;
                break;
              case 76:
                return 344;
                break;
              case 77:
                return 345;
                break;
              case 78:
                return 250;
                break;
              case 79:
                return 346;
                break;
              case 80:
                return 265;
                break;
              case 81:
                return 276;
                break;
              case 82:
                return 277;
                break;
              case 83:
                return 268;
                break;
              case 84:
                return 269;
                break;
              case 85:
                return 270;
                break;
              case 86:
                return 271;
                break;
              case 87:
                return 347;
                break;
              case 88:
                return 348;
                break;
              case 89:
                return 273;
                break;
              case 90:
                return 274;
                break;
              case 91:
                return 350;
                break;
              case 92:
                return 349;
                break;
              case 93:
                return 351;
                break;
              case 94:
                return 279;
                break;
              case 95:
                return 280;
                break;
              case 96:
                return 283;
                break;
              case 97:
                return 285;
                break;
              case 98:
                return 289;
                break;
              case 99:
                return 293;
                break;
              case 100:
                return 296;
                break;
              case 101:
                return 13;
                break;
              case 102:
                return 16;
                break;
              case 103:
                return 308;
                break;
              case 104:
                return 309;
                break;
              case 105:
                return 87;
                break;
              case 106:
                return 292;
                break;
              case 107:
                return 82;
                break;
              case 108:
                return 294;
                break;
              case 109:
                return 295;
                break;
              case 110:
                return 297;
                break;
              case 111:
                return 298;
                break;
              case 112:
                return 299;
                break;
              case 113:
                return 300;
                break;
              case 114:
                return 301;
                break;
              case 115:
                return 302;
                break;
              case 116:
                return "EXPONENT";
                break;
              case 117:
                return 303;
                break;
              case 118:
                return 304;
                break;
              case 119:
                return 305;
                break;
              case 120:
                return 306;
                break;
              case 121:
                return 89;
                break;
              case 122:
                return 310;
                break;
              case 123:
                return 6;
                break;
              case 124:
                return "INVALID";
                break;
              case 125:
                console.log(yy_.yytext);
                break;
            }
          },
          rules: [/^(?:\s+|(#[^\n\r]*))/i, /^(?:BASE)/i, /^(?:PREFIX)/i, /^(?:SELECT)/i, /^(?:DISTINCT)/i, /^(?:REDUCED)/i, /^(?:\()/i, /^(?:AS)/i, /^(?:\))/i, /^(?:\*)/i, /^(?:CONSTRUCT)/i, /^(?:WHERE)/i, /^(?:\{)/i, /^(?:\})/i, /^(?:DESCRIBE)/i, /^(?:ASK)/i, /^(?:FROM)/i, /^(?:NAMED)/i, /^(?:GROUP)/i, /^(?:BY)/i, /^(?:HAVING)/i, /^(?:ORDER)/i, /^(?:ASC)/i, /^(?:DESC)/i, /^(?:LIMIT)/i, /^(?:OFFSET)/i, /^(?:VALUES)/i, /^(?:;)/i, /^(?:LOAD)/i, /^(?:SILENT)/i, /^(?:INTO)/i, /^(?:CLEAR)/i, /^(?:DROP)/i, /^(?:CREATE)/i, /^(?:ADD)/i, /^(?:TO)/i, /^(?:MOVE)/i, /^(?:COPY)/i, /^(?:INSERT((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i, /^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i, /^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)WHERE)/i, /^(?:WITH)/i, /^(?:DELETE)/i, /^(?:INSERT)/i, /^(?:USING)/i, /^(?:DEFAULT)/i, /^(?:GRAPH)/i, /^(?:ALL)/i, /^(?:\.)/i, /^(?:OPTIONAL)/i, /^(?:SERVICE)/i, /^(?:BIND)/i, /^(?:UNDEF)/i, /^(?:MINUS)/i, /^(?:UNION)/i, /^(?:FILTER)/i, /^(?:<<)/i, /^(?:>>)/i, /^(?:\{\|)/i, /^(?:\|\})/i, /^(?:,)/i, /^(?:a)/i, /^(?:\|)/i, /^(?:\/)/i, /^(?:\^)/i, /^(?:\?)/i, /^(?:\+)/i, /^(?:!)/i, /^(?:\[)/i, /^(?:\])/i, /^(?:\|\|)/i, /^(?:&&)/i, /^(?:=)/i, /^(?:!=)/i, /^(?:<)/i, /^(?:>)/i, /^(?:<=)/i, /^(?:>=)/i, /^(?:IN)/i, /^(?:NOT)/i, /^(?:-)/i, /^(?:BOUND)/i, /^(?:BNODE)/i, /^(?:(RAND|NOW|UUID|STRUUID))/i, /^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i, /^(?:(SUBJECT|PREDICATE|OBJECT|isTRIPLE))/i, /^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i, /^(?:CONCAT)/i, /^(?:COALESCE)/i, /^(?:IF)/i, /^(?:TRIPLE)/i, /^(?:REGEX)/i, /^(?:SUBSTR)/i, /^(?:REPLACE)/i, /^(?:EXISTS)/i, /^(?:COUNT)/i, /^(?:SUM|MIN|MAX|AVG|SAMPLE)/i, /^(?:GROUP_CONCAT)/i, /^(?:SEPARATOR)/i, /^(?:\^\^)/i, /^(?:true|false)/i, /^(?:(<(?:[^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i, /^(?:((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:))/i, /^(?:(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:)((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i, /^(?:(_:(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?))/i, /^(?:([\?\$]((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])*)))/i, /^(?:(@[a-zA-Z]+(?:-[a-zA-Z0-9]+)*))/i, /^(?:([0-9]+))/i, /^(?:([0-9]*\.[0-9]+))/i, /^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i, /^(?:(\+([0-9]+)))/i, /^(?:(\+([0-9]*\.[0-9]+)))/i, /^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:(-([0-9]+)))/i, /^(?:(-([0-9]*\.[0-9]+)))/i, /^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:([eE][+-]?[0-9]+))/i, /^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*'))/i, /^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*"))/i, /^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*'''))/i, /^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*"""))/i, /^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i, /^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i, /^(?:$)/i, /^(?:.)/i, /^(?:.)/i],
          conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "inclusive": true } }
        };
        return lexer2;
      }();
      parser.lexer = lexer;
      function Parser2() {
        this.yy = {};
      }
      Parser2.prototype = parser;
      parser.Parser = Parser2;
      return new Parser2();
    }();
    module.exports = SparqlParser;
  }
});

// ../../lipdjs/node_modules/sparqljs/lib/SparqlGenerator.js
var require_SparqlGenerator = __commonJS({
  "../../lipdjs/node_modules/sparqljs/lib/SparqlGenerator.js"(exports, module) {
    var XSD_INTEGER = "http://www.w3.org/2001/XMLSchema#integer";
    var XSD_STRING = "http://www.w3.org/2001/XMLSchema#string";
    function Generator(options) {
      this._options = options = options || {};
      var prefixes = options.prefixes || {};
      this._prefixByIri = {};
      var prefixIris = [];
      for (var prefix in prefixes) {
        var iri = prefixes[prefix];
        if (isString(iri)) {
          this._prefixByIri[iri] = prefix;
          prefixIris.push(iri);
        }
      }
      var iriList = prefixIris.join("|").replace(/[\]\/\(\)\*\+\?\.\\\$]/g, "\\$&");
      this._prefixRegex = new RegExp("^(" + iriList + ")([a-zA-Z][\\-_a-zA-Z0-9]*)$");
      this._usedPrefixes = {};
      this._sparqlStar = options.sparqlStar;
      this._indent = isString(options.indent) ? options.indent : "  ";
      this._newline = isString(options.newline) ? options.newline : "\n";
      this._explicitDatatype = Boolean(options.explicitDatatype);
    }
    Generator.prototype.toQuery = function(q) {
      var query = "";
      if (q.queryType)
        query += q.queryType.toUpperCase() + " ";
      if (q.reduced)
        query += "REDUCED ";
      if (q.distinct)
        query += "DISTINCT ";
      if (q.variables) {
        query += mapJoin(q.variables, void 0, function(variable) {
          if (/^[?$]/.test(variable))
            return variable;
          else if (isTerm(variable))
            return this.toEntity(variable);
          else
            return "(" + this.toExpression(variable.expression) + " AS " + variableToString(variable.variable) + ")";
        }, this) + " ";
      } else if (q.template)
        query += this.group(q.template, true) + this._newline;
      if (q.from)
        query += this.graphs("FROM ", q.from.default) + this.graphs("FROM NAMED ", q.from.named);
      if (q.where)
        query += "WHERE " + this.group(q.where, true) + this._newline;
      if (q.updates)
        query += mapJoin(q.updates, ";" + this._newline, this.toUpdate, this);
      if (q.group)
        query += "GROUP BY " + mapJoin(q.group, void 0, function(it) {
          var result = isTerm(it.expression) ? this.toEntity(it.expression) : "(" + this.toExpression(it.expression) + ")";
          return it.variable ? "(" + result + " AS " + variableToString(it.variable) + ")" : result;
        }, this) + this._newline;
      if (q.having)
        query += "HAVING (" + mapJoin(q.having, void 0, this.toExpression, this) + ")" + this._newline;
      if (q.order)
        query += "ORDER BY " + mapJoin(q.order, void 0, function(it) {
          var expr = "(" + this.toExpression(it.expression) + ")";
          return !it.descending ? expr : "DESC " + expr;
        }, this) + this._newline;
      if (q.offset)
        query += "OFFSET " + q.offset + this._newline;
      if (q.limit)
        query += "LIMIT " + q.limit + this._newline;
      if (q.values)
        query += this.values(q);
      query = this.baseAndPrefixes(q) + query;
      return query.trim();
    };
    Generator.prototype.baseAndPrefixes = function(q) {
      var base = q.base ? "BASE <" + q.base + ">" + this._newline : "";
      var prefixes = "";
      for (var key in q.prefixes) {
        if (this._options.allPrefixes || this._usedPrefixes[key])
          prefixes += "PREFIX " + key + ": <" + q.prefixes[key] + ">" + this._newline;
      }
      return base + prefixes;
    };
    Generator.prototype.toPattern = function(pattern) {
      var type = pattern.type || pattern instanceof Array && "array" || (pattern.subject && pattern.predicate && pattern.object ? "triple" : "");
      if (!(type in this))
        throw new Error("Unknown entry type: " + type);
      return this[type](pattern);
    };
    Generator.prototype.triple = function(t) {
      return this.toEntity(t.subject) + " " + this.toEntity(t.predicate) + " " + this.toEntity(t.object) + ".";
    };
    Generator.prototype.array = function(items) {
      return mapJoin(items, this._newline, this.toPattern, this);
    };
    Generator.prototype.bgp = function(bgp) {
      return this.encodeTriples(bgp.triples);
    };
    Generator.prototype.encodeTriples = function(triples) {
      if (!triples.length)
        return "";
      var parts = [], subject = void 0, predicate = void 0;
      for (var i = 0; i < triples.length; i++) {
        var triple = triples[i];
        if (!equalTerms(triple.subject, subject)) {
          if (subject)
            parts.push("." + this._newline);
          subject = triple.subject;
          predicate = triple.predicate;
          parts.push(this.toEntity(subject), " ", this.toEntity(predicate));
        } else if (!equalTerms(triple.predicate, predicate)) {
          predicate = triple.predicate;
          parts.push(";" + this._newline, this._indent, this.toEntity(predicate));
        } else {
          parts.push(",");
        }
        parts.push(" ", this.toEntity(triple.object));
      }
      parts.push(".");
      return parts.join("");
    };
    Generator.prototype.graph = function(graph) {
      return "GRAPH " + this.toEntity(graph.name) + " " + this.group(graph);
    };
    Generator.prototype.graphs = function(keyword, graphs) {
      return !graphs || graphs.length === 0 ? "" : mapJoin(graphs, "", function(g) {
        return keyword + this.toEntity(g) + this._newline;
      }, this);
    };
    Generator.prototype.group = function(group, inline) {
      group = inline !== true ? this.array(group.patterns || group.triples) : this.toPattern(group.type !== "group" ? group : group.patterns);
      return group.indexOf(this._newline) === -1 ? "{ " + group + " }" : "{" + this._newline + this.indent(group) + this._newline + "}";
    };
    Generator.prototype.query = function(query) {
      return this.toQuery(query);
    };
    Generator.prototype.filter = function(filter3) {
      return "FILTER(" + this.toExpression(filter3.expression) + ")";
    };
    Generator.prototype.bind = function(bind) {
      return "BIND(" + this.toExpression(bind.expression) + " AS " + variableToString(bind.variable) + ")";
    };
    Generator.prototype.optional = function(optional) {
      return "OPTIONAL " + this.group(optional);
    };
    Generator.prototype.union = function(union) {
      return mapJoin(union.patterns, this._newline + "UNION" + this._newline, function(p) {
        return this.group(p, true);
      }, this);
    };
    Generator.prototype.minus = function(minus) {
      return "MINUS " + this.group(minus);
    };
    Generator.prototype.values = function(valuesList) {
      var keys2 = Object.keys(valuesList.values.reduce(function(keyHash, values2) {
        for (var key in values2) keyHash[key] = true;
        return keyHash;
      }, {}));
      var lparen, rparen;
      if (keys2.length === 1) {
        lparen = rparen = "";
      } else {
        lparen = "(";
        rparen = ")";
      }
      return "VALUES " + lparen + keys2.join(" ") + rparen + " {" + this._newline + mapJoin(valuesList.values, this._newline, function(values2) {
        return "  " + lparen + mapJoin(keys2, void 0, function(key) {
          return values2[key] ? this.toEntity(values2[key]) : "UNDEF";
        }, this) + rparen;
      }, this) + this._newline + "}";
    };
    Generator.prototype.service = function(service) {
      return "SERVICE " + (service.silent ? "SILENT " : "") + this.toEntity(service.name) + " " + this.group(service);
    };
    Generator.prototype.toExpression = function(expr) {
      if (isTerm(expr)) {
        return this.toEntity(expr);
      }
      switch (expr.type.toLowerCase()) {
        case "aggregate":
          return expr.aggregation.toUpperCase() + "(" + (expr.distinct ? "DISTINCT " : "") + this.toExpression(expr.expression) + (typeof expr.separator === "string" ? '; SEPARATOR = "' + expr.separator.replace(escape, escapeReplacer) + '"' : "") + ")";
        case "functioncall":
          return this.toEntity(expr.function) + "(" + mapJoin(expr.args, ", ", this.toExpression, this) + ")";
        case "operation":
          var operator = expr.operator.toUpperCase(), args = expr.args || [];
          switch (expr.operator.toLowerCase()) {
            case "<":
            case ">":
            case ">=":
            case "<=":
            case "&&":
            case "||":
            case "=":
            case "!=":
            case "+":
            case "-":
            case "*":
            case "/":
              return (isTerm(args[0]) ? this.toEntity(args[0]) : "(" + this.toExpression(args[0]) + ")") + " " + operator + " " + (isTerm(args[1]) ? this.toEntity(args[1]) : "(" + this.toExpression(args[1]) + ")");
            case "!":
              return "!(" + this.toExpression(args[0]) + ")";
            case "uplus":
              return "+(" + this.toExpression(args[0]) + ")";
            case "uminus":
              return "-(" + this.toExpression(args[0]) + ")";
            case "notin":
              operator = "NOT IN";
            case "in":
              return this.toExpression(args[0]) + " " + operator + "(" + (isString(args[1]) ? args[1] : mapJoin(args[1], ", ", this.toExpression, this)) + ")";
            case "notexists":
              operator = "NOT EXISTS";
            case "exists":
              return operator + " " + this.group(args[0], true);
            default:
              return operator + "(" + mapJoin(args, ", ", this.toExpression, this) + ")";
          }
        default:
          throw new Error("Unknown expression type: " + expr.type);
      }
    };
    Generator.prototype.toEntity = function(value) {
      if (isTerm(value)) {
        switch (value.termType) {
          case "Wildcard":
            return "*";
          case "Variable":
            return variableToString(value);
          case "BlankNode":
            return "_:" + value.value;
          case "Literal":
            var lexical = value.value || "", language = value.language || "", datatype = value.datatype;
            value = '"' + lexical.replace(escape, escapeReplacer) + '"';
            if (language) {
              value += "@" + language;
            } else if (datatype) {
              if (!this._explicitDatatype) {
                switch (datatype.value) {
                  case XSD_STRING:
                    return value;
                  case XSD_INTEGER:
                    if (/^\d+$/.test(lexical))
                      return lexical + " ";
                }
              }
              value += "^^" + this.encodeIRI(datatype.value);
            }
            return value;
          case "Quad":
            if (!this._sparqlStar)
              throw new Error("SPARQL* support is not enabled");
            if (value.graph && value.graph.termType !== "DefaultGraph") {
              return "<< GRAPH " + this.toEntity(value.graph) + " { " + this.toEntity(value.subject) + " " + this.toEntity(value.predicate) + " " + this.toEntity(value.object) + " }  >>";
            } else {
              return "<< " + this.toEntity(value.subject) + " " + this.toEntity(value.predicate) + " " + this.toEntity(value.object) + " >>";
            }
          default:
            return this.encodeIRI(value.value);
        }
      } else {
        var items = value.items.map(this.toEntity, this), path = value.pathType;
        switch (path) {
          case "^":
          case "!":
            return path + items[0];
          case "*":
          case "+":
          case "?":
            return "(" + items[0] + path + ")";
          default:
            return "(" + items.join(path) + ")";
        }
      }
    };
    var escape = /["\\\t\n\r\b\f]/g;
    var escapeReplacer = function(c) {
      return escapeReplacements[c];
    };
    var escapeReplacements = {
      "\\": "\\\\",
      '"': '\\"',
      "	": "\\t",
      "\n": "\\n",
      "\r": "\\r",
      "\b": "\\b",
      "\f": "\\f"
    };
    Generator.prototype.encodeIRI = function(iri) {
      var prefixMatch = this._prefixRegex.exec(iri);
      if (prefixMatch) {
        var prefix = this._prefixByIri[prefixMatch[1]];
        this._usedPrefixes[prefix] = true;
        return prefix + ":" + prefixMatch[2];
      }
      return "<" + iri + ">";
    };
    Generator.prototype.toUpdate = function(update8) {
      switch (update8.type || update8.updateType) {
        case "load":
          return "LOAD" + (update8.source ? " " + this.toEntity(update8.source) : "") + (update8.destination ? " INTO GRAPH " + this.toEntity(update8.destination) : "");
        case "insert":
          return "INSERT DATA " + this.group(update8.insert, true);
        case "delete":
          return "DELETE DATA " + this.group(update8.delete, true);
        case "deletewhere":
          return "DELETE WHERE " + this.group(update8.delete, true);
        case "insertdelete":
          return (update8.graph ? "WITH " + this.toEntity(update8.graph) + this._newline : "") + (update8.delete.length ? "DELETE " + this.group(update8.delete, true) + this._newline : "") + (update8.insert.length ? "INSERT " + this.group(update8.insert, true) + this._newline : "") + (update8.using ? this.graphs("USING ", update8.using.default) : "") + (update8.using ? this.graphs("USING NAMED ", update8.using.named) : "") + "WHERE " + this.group(update8.where, true);
        case "add":
        case "copy":
        case "move":
          return update8.type.toUpperCase() + " " + (update8.silent ? "SILENT " : "") + (update8.source.default ? "DEFAULT" : this.toEntity(update8.source.name)) + " TO " + this.toEntity(update8.destination.name);
        case "create":
        case "clear":
        case "drop":
          return update8.type.toUpperCase() + (update8.silent ? " SILENT " : " ") + (update8.graph.default ? "DEFAULT" : update8.graph.named ? "NAMED" : update8.graph.all ? "ALL" : "GRAPH " + this.toEntity(update8.graph.name));
        default:
          throw new Error("Unknown update query type: " + update8.type);
      }
    };
    Generator.prototype.indent = function(text) {
      return text.replace(/^/gm, this._indent);
    };
    function variableToString(variable) {
      return "?" + variable.value;
    }
    function isString(object) {
      return typeof object === "string";
    }
    function isTerm(object) {
      return typeof object.termType === "string";
    }
    function equalTerms(term1, term2) {
      if (!term1 || !isTerm(term1)) {
        return false;
      }
      if (!term2 || !isTerm(term2)) {
        return false;
      }
      if (term1.termType !== term2.termType) {
        return false;
      }
      switch (term1.termType) {
        case "Literal":
          return term1.value === term2.value && term1.language === term2.language && equalTerms(term1.datatype, term2.datatype);
        case "Quad":
          return equalTerms(term1.subject, term2.subject) && equalTerms(term1.predicate, term2.predicate) && equalTerms(term1.object, term2.object) && equalTerms(term1.graph, term2.graph);
        default:
          return term1.value === term2.value;
      }
    }
    function mapJoin(array, sep, func, self2) {
      return array.map(func, self2).join(isString(sep) ? sep : " ");
    }
    function _Generator(options = {}) {
      return {
        stringify: function(query) {
          var currentOptions = Object.create(options);
          currentOptions.prefixes = query.prefixes;
          return new Generator(currentOptions).toQuery(query);
        },
        createGenerator: function() {
          return new Generator(options);
        }
      };
    }
    module.exports = {
      Generator: _Generator
    };
  }
});

// ../../lipdjs/node_modules/sparqljs/sparql.js
var require_sparql = __commonJS({
  "../../lipdjs/node_modules/sparqljs/sparql.js"(exports, module) {
    var { Parser: Parser2 } = require_SparqlParser();
    var { Generator } = require_SparqlGenerator();
    var { Wildcard } = require_Wildcard();
    var { DataFactory } = require_rdf_data_factory();
    function _Parser({
      prefixes,
      baseIRI,
      factory,
      pathOnly,
      sparqlStar,
      skipValidation,
      skipUngroupedVariableCheck
    } = {}) {
      const prefixesCopy = {};
      for (const prefix in prefixes ?? {})
        prefixesCopy[prefix] = prefixes[prefix];
      const parser = new Parser2();
      parser.parse = function() {
        Parser2.base = baseIRI || "";
        Parser2.prefixes = Object.create(prefixesCopy);
        Parser2.factory = factory || new DataFactory();
        Parser2.sparqlStar = Boolean(sparqlStar);
        Parser2.pathOnly = Boolean(pathOnly);
        Parser2.skipValidation = Boolean(skipValidation) || Boolean(skipUngroupedVariableCheck);
        return Parser2.prototype.parse.apply(parser, arguments);
      };
      parser._resetBlanks = Parser2._resetBlanks;
      return parser;
    }
    module.exports = {
      Parser: _Parser,
      Generator,
      Wildcard
    };
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/lib/factory.js
var require_factory = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/lib/factory.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var A = __importStar(require_algebra());
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var sparqljs_1 = require_sparql();
    var Factory = class {
      constructor(dataFactory) {
        this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
        this.stringType = this.createTerm("http://www.w3.org/2001/XMLSchema#string");
      }
      createAlt(input, flatten3 = true) {
        return this.flattenMulti({ type: A.types.ALT, input }, flatten3);
      }
      createAsk(input) {
        return { type: A.types.ASK, input };
      }
      createBoundAggregate(variable, aggregate, expression, distinct, separator) {
        const result = this.createAggregateExpression(aggregate, expression, distinct, separator);
        result.variable = variable;
        return result;
      }
      createBgp(patterns) {
        return { type: A.types.BGP, patterns };
      }
      createConstruct(input, template) {
        return { type: A.types.CONSTRUCT, input, template };
      }
      createDescribe(input, terms) {
        return { type: A.types.DESCRIBE, input, terms };
      }
      createDistinct(input) {
        return { type: A.types.DISTINCT, input };
      }
      createExtend(input, variable, expression) {
        return { type: A.types.EXTEND, input, variable, expression };
      }
      createFrom(input, def, named) {
        return { type: A.types.FROM, input, default: def, named };
      }
      createFilter(input, expression) {
        return { type: A.types.FILTER, input, expression };
      }
      createGraph(input, name) {
        return { type: A.types.GRAPH, input, name };
      }
      createGroup(input, variables, aggregates) {
        return { type: A.types.GROUP, input, variables, aggregates };
      }
      createInv(path) {
        return { type: A.types.INV, path };
      }
      createJoin(input, flatten3 = true) {
        return this.flattenMulti({ type: A.types.JOIN, input }, flatten3);
      }
      createLeftJoin(left, right, expression) {
        if (expression)
          return { type: A.types.LEFT_JOIN, input: [left, right], expression };
        return { type: A.types.LEFT_JOIN, input: [left, right] };
      }
      createLink(iri) {
        return { type: A.types.LINK, iri };
      }
      createMinus(left, right) {
        return { type: A.types.MINUS, input: [left, right] };
      }
      createNop() {
        return { type: A.types.NOP };
      }
      createNps(iris) {
        return { type: A.types.NPS, iris };
      }
      createOneOrMorePath(path) {
        return { type: A.types.ONE_OR_MORE_PATH, path };
      }
      createOrderBy(input, expressions) {
        return { type: A.types.ORDER_BY, input, expressions };
      }
      createPath(subject, predicate, object, graph) {
        if (graph)
          return { type: A.types.PATH, subject, predicate, object, graph };
        return { type: A.types.PATH, subject, predicate, object, graph: this.dataFactory.defaultGraph() };
      }
      createPattern(subject, predicate, object, graph) {
        const pattern = this.dataFactory.quad(subject, predicate, object, graph);
        pattern.type = A.types.PATTERN;
        return pattern;
      }
      createProject(input, variables) {
        return { type: A.types.PROJECT, input, variables };
      }
      createReduced(input) {
        return { type: A.types.REDUCED, input };
      }
      createSeq(input, flatten3 = true) {
        return this.flattenMulti({ type: A.types.SEQ, input }, flatten3);
      }
      createService(input, name, silent) {
        return { type: A.types.SERVICE, input, name, silent: Boolean(silent) };
      }
      createSlice(input, start, length) {
        start = start || 0;
        if (length !== void 0)
          return { type: A.types.SLICE, input, start, length };
        return { type: A.types.SLICE, input, start };
      }
      createUnion(input, flatten3 = true) {
        return this.flattenMulti({ type: A.types.UNION, input }, flatten3);
      }
      createValues(variables, bindings) {
        return { type: A.types.VALUES, variables, bindings };
      }
      createZeroOrMorePath(path) {
        return { type: A.types.ZERO_OR_MORE_PATH, path };
      }
      createZeroOrOnePath(path) {
        return { type: A.types.ZERO_OR_ONE_PATH, path };
      }
      createAggregateExpression(aggregator, expression, distinct, separator) {
        if (separator)
          return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator, expression, separator, distinct };
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator, expression, distinct };
      }
      createExistenceExpression(not2, input) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.EXISTENCE, not: not2, input };
      }
      createNamedExpression(name, args) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.NAMED, name, args };
      }
      createOperatorExpression(operator, args) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.OPERATOR, operator, args };
      }
      createTermExpression(term) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.TERM, term };
      }
      createWildcardExpression() {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.WILDCARD, wildcard: new sparqljs_1.Wildcard() };
      }
      createTerm(str) {
        if (str[0] === "$") {
          str = str.replace("$", "?");
        }
        return (0, rdf_string_1.stringToTerm)(str, this.dataFactory);
      }
      // Update functions
      createCompositeUpdate(updates) {
        return { type: A.types.COMPOSITE_UPDATE, updates };
      }
      createDeleteInsert(deleteQuads, insertQuads, where) {
        const result = { type: A.types.DELETE_INSERT };
        if (deleteQuads)
          result.delete = deleteQuads;
        if (insertQuads)
          result.insert = insertQuads;
        if (where)
          result.where = where;
        return result;
      }
      createLoad(source, destination, silent) {
        const result = { type: A.types.LOAD, source };
        if (destination)
          result.destination = destination;
        return this.addSilent(result, Boolean(silent));
      }
      createClear(source, silent) {
        return this.addSilent({ type: A.types.CLEAR, source }, Boolean(silent));
      }
      createCreate(source, silent) {
        return this.addSilent({ type: A.types.CREATE, source }, Boolean(silent));
      }
      createDrop(source, silent) {
        return this.addSilent({ type: A.types.DROP, source }, Boolean(silent));
      }
      createAdd(source, destination, silent) {
        return this.addSilent({ type: A.types.ADD, source, destination }, Boolean(silent));
      }
      createMove(source, destination, silent) {
        return this.addSilent({ type: A.types.MOVE, source, destination }, Boolean(silent));
      }
      createCopy(source, destination, silent) {
        return this.addSilent({ type: A.types.COPY, source, destination }, Boolean(silent));
      }
      addSilent(input, silent) {
        if (silent)
          input.silent = silent;
        return input;
      }
      flattenMulti(input, flatten3) {
        if (!flatten3) {
          return input;
        }
        const type = input.type;
        const children = input.input;
        let newChildren = [];
        for (const child of children) {
          if (child.type === type) {
            newChildren.push(...child.input);
          } else {
            newChildren.push(child);
          }
        }
        input.input = newChildren;
        return input;
      }
    };
    exports.default = Factory;
  }
});

// ../../lipdjs/node_modules/rdf-terms/lib/QuadTermUtil.js
var require_QuadTermUtil = __commonJS({
  "../../lipdjs/node_modules/rdf-terms/lib/QuadTermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchPatternMappings = exports.matchPatternComplete = exports.matchPattern = exports.matchTerm = exports.getValueNestedPath = exports.someTermsNested = exports.someTerms = exports.everyTermsNested = exports.everyTerms = exports.reduceTermsNested = exports.reduceTerms = exports.mapTermsNested = exports.mapTerms = exports.filterQuadTermNamesNested = exports.filterQuadTermNames = exports.filterTermsNested = exports.filterTerms = exports.forEachTermsNested = exports.forEachTerms = exports.collectNamedTerms = exports.getNamedTerms = exports.getTermsNested = exports.getTerms = exports.TRIPLE_TERM_NAMES = exports.QUAD_TERM_NAMES = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    exports.QUAD_TERM_NAMES = ["subject", "predicate", "object", "graph"];
    exports.TRIPLE_TERM_NAMES = ["subject", "predicate", "object"];
    function getTerms(quad, ignoreDefaultGraph) {
      if (ignoreDefaultGraph && quad.graph.termType === "DefaultGraph") {
        return [quad.subject, quad.predicate, quad.object];
      }
      return [quad.subject, quad.predicate, quad.object, quad.graph];
    }
    exports.getTerms = getTerms;
    function getTermsNested(quad, ignoreDefaultGraph) {
      const terms = [];
      for (const term of getTerms(quad, ignoreDefaultGraph)) {
        if (term.termType === "Quad") {
          getTermsNested(term, ignoreDefaultGraph).forEach((subTerm) => terms.push(subTerm));
        } else {
          terms.push(term);
        }
      }
      return terms;
    }
    exports.getTermsNested = getTermsNested;
    function getNamedTerms(quad) {
      return [
        { key: "subject", value: quad.subject },
        { key: "predicate", value: quad.predicate },
        { key: "object", value: quad.object },
        { key: "graph", value: quad.graph }
      ];
    }
    exports.getNamedTerms = getNamedTerms;
    function collectNamedTerms(namedTerms, defaultCb, dataFactory) {
      const elements = {};
      namedTerms.forEach((namedTerm) => elements[namedTerm.key] = namedTerm.value);
      if (defaultCb) {
        elements.subject = elements.subject || defaultCb("subject");
        elements.predicate = elements.predicate || defaultCb("predicate");
        elements.object = elements.object || defaultCb("object");
        elements.graph = elements.graph || defaultCb("graph");
      }
      return (dataFactory || DF).quad(elements.subject, elements.predicate, elements.object, elements.graph);
    }
    exports.collectNamedTerms = collectNamedTerms;
    function forEachTerms(quad, cb) {
      cb(quad.subject, "subject");
      cb(quad.predicate, "predicate");
      cb(quad.object, "object");
      cb(quad.graph, "graph");
    }
    exports.forEachTerms = forEachTerms;
    function forEachTermsNested(quad, cb, keys2 = []) {
      if (quad.subject.termType === "Quad") {
        forEachTermsNested(quad.subject, cb, [...keys2, "subject"]);
      } else {
        cb(quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        forEachTermsNested(quad.predicate, cb, [...keys2, "predicate"]);
      } else {
        cb(quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        forEachTermsNested(quad.object, cb, [...keys2, "object"]);
      } else {
        cb(quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        forEachTermsNested(quad.graph, cb, [...keys2, "graph"]);
      } else {
        cb(quad.graph, [...keys2, "graph"]);
      }
    }
    exports.forEachTermsNested = forEachTermsNested;
    function filterTerms(quad, filter3) {
      const terms = [];
      if (filter3(quad.subject, "subject")) {
        terms.push(quad.subject);
      }
      if (filter3(quad.predicate, "predicate")) {
        terms.push(quad.predicate);
      }
      if (filter3(quad.object, "object")) {
        terms.push(quad.object);
      }
      if (filter3(quad.graph, "graph")) {
        terms.push(quad.graph);
      }
      return terms;
    }
    exports.filterTerms = filterTerms;
    function filterTermsNested(quad, filter3, keys2 = []) {
      let terms = [];
      if (quad.subject.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.subject, filter3, [...keys2, "subject"])];
      } else {
        if (filter3(quad.subject, [...keys2, "subject"])) {
          terms.push(quad.subject);
        }
      }
      if (quad.predicate.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.predicate, filter3, [...keys2, "predicate"])];
      } else {
        if (filter3(quad.predicate, [...keys2, "predicate"])) {
          terms.push(quad.predicate);
        }
      }
      if (quad.object.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.object, filter3, [...keys2, "object"])];
      } else {
        if (filter3(quad.object, [...keys2, "object"])) {
          terms.push(quad.object);
        }
      }
      if (quad.graph.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.graph, filter3, [...keys2, "graph"])];
      } else {
        if (filter3(quad.graph, [...keys2, "graph"])) {
          terms.push(quad.graph);
        }
      }
      return terms;
    }
    exports.filterTermsNested = filterTermsNested;
    function filterQuadTermNames(quad, filter3) {
      const names = [];
      if (filter3(quad.subject, "subject")) {
        names.push("subject");
      }
      if (filter3(quad.predicate, "predicate")) {
        names.push("predicate");
      }
      if (filter3(quad.object, "object")) {
        names.push("object");
      }
      if (filter3(quad.graph, "graph")) {
        names.push("graph");
      }
      return names;
    }
    exports.filterQuadTermNames = filterQuadTermNames;
    function filterQuadTermNamesNested(quad, filter3, keys2 = []) {
      let names = [];
      const keysS = [...keys2, "subject"];
      if (quad.subject.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.subject, filter3, keysS)];
      } else {
        if (filter3(quad.subject, keysS)) {
          names.push(keysS);
        }
      }
      const keysP = [...keys2, "predicate"];
      if (quad.predicate.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.predicate, filter3, keysP)];
      } else {
        if (filter3(quad.predicate, keysP)) {
          names.push(keysP);
        }
      }
      const keysO = [...keys2, "object"];
      if (quad.object.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.object, filter3, keysO)];
      } else {
        if (filter3(quad.object, keysO)) {
          names.push(keysO);
        }
      }
      const keysG = [...keys2, "graph"];
      if (quad.graph.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.graph, filter3, keysG)];
      } else {
        if (filter3(quad.graph, keysG)) {
          names.push(keysG);
        }
      }
      return names;
    }
    exports.filterQuadTermNamesNested = filterQuadTermNamesNested;
    function mapTerms(quad, mapper, dataFactory) {
      return (dataFactory || DF).quad(mapper(quad.subject, "subject"), mapper(quad.predicate, "predicate"), mapper(quad.object, "object"), mapper(quad.graph, "graph"));
    }
    exports.mapTerms = mapTerms;
    function mapTermsNested(quad, mapper, dataFactory, keys2 = []) {
      return (dataFactory || DF).quad(quad.subject.termType === "Quad" ? mapTermsNested(quad.subject, mapper, dataFactory, [...keys2, "subject"]) : mapper(quad.subject, [...keys2, "subject"]), quad.predicate.termType === "Quad" ? mapTermsNested(quad.predicate, mapper, dataFactory, [...keys2, "predicate"]) : mapper(quad.predicate, [...keys2, "predicate"]), quad.object.termType === "Quad" ? mapTermsNested(quad.object, mapper, dataFactory, [...keys2, "object"]) : mapper(quad.object, [...keys2, "object"]), quad.graph.termType === "Quad" ? mapTermsNested(quad.graph, mapper, dataFactory, [...keys2, "graph"]) : mapper(quad.graph, [...keys2, "graph"]));
    }
    exports.mapTermsNested = mapTermsNested;
    function reduceTerms(quad, reducer, initialValue) {
      let value = initialValue;
      value = reducer(value, quad.subject, "subject");
      value = reducer(value, quad.predicate, "predicate");
      value = reducer(value, quad.object, "object");
      return reducer(value, quad.graph, "graph");
    }
    exports.reduceTerms = reduceTerms;
    function reduceTermsNested(quad, reducer, initialValue, keys2 = []) {
      let value = initialValue;
      if (quad.subject.termType === "Quad") {
        value = reduceTermsNested(quad.subject, reducer, value, [...keys2, "subject"]);
      } else {
        value = reducer(value, quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        value = reduceTermsNested(quad.predicate, reducer, value, [...keys2, "predicate"]);
      } else {
        value = reducer(value, quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        value = reduceTermsNested(quad.object, reducer, value, [...keys2, "object"]);
      } else {
        value = reducer(value, quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        value = reduceTermsNested(quad.graph, reducer, value, [...keys2, "graph"]);
      } else {
        value = reducer(value, quad.graph, [...keys2, "graph"]);
      }
      return value;
    }
    exports.reduceTermsNested = reduceTermsNested;
    function everyTerms(quad, checker) {
      return checker(quad.subject, "subject") && checker(quad.predicate, "predicate") && checker(quad.object, "object") && checker(quad.graph, "graph");
    }
    exports.everyTerms = everyTerms;
    function everyTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? everyTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) && (quad.predicate.termType === "Quad" ? everyTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) && (quad.object.termType === "Quad" ? everyTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) && (quad.graph.termType === "Quad" ? everyTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    exports.everyTermsNested = everyTermsNested;
    function someTerms(quad, checker) {
      return checker(quad.subject, "subject") || checker(quad.predicate, "predicate") || checker(quad.object, "object") || checker(quad.graph, "graph");
    }
    exports.someTerms = someTerms;
    function someTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? someTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) || (quad.predicate.termType === "Quad" ? someTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) || (quad.object.termType === "Quad" ? someTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) || (quad.graph.termType === "Quad" ? someTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    exports.someTermsNested = someTermsNested;
    function getValueNestedPath(term, keys2) {
      if (keys2.length === 0) {
        return term;
      }
      if (term.termType === "Quad") {
        return getValueNestedPath(term[keys2[0]], keys2.slice(1));
      }
      throw new Error(`Tried to get ${keys2[0]} from term of type ${term.termType}`);
    }
    exports.getValueNestedPath = getValueNestedPath;
    function matchTerm(termA, termB) {
      return !termB || termB.termType === "Variable" || termB.termType === "Quad" && termA.termType === "Quad" && matchPatternComplete(termA, termB) || termB.equals(termA);
    }
    exports.matchTerm = matchTerm;
    function matchPattern(quad, subject, predicate, object, graph) {
      return matchTerm(quad.subject, subject) && matchTerm(quad.predicate, predicate) && matchTerm(quad.object, object) && matchTerm(quad.graph, graph);
    }
    exports.matchPattern = matchPattern;
    function matchPatternComplete(quad, pattern) {
      return matchPattern(quad, pattern.subject, pattern.predicate, pattern.object, pattern.graph);
    }
    exports.matchPatternComplete = matchPatternComplete;
    function matchPatternMappings(quad, pattern, opt = {}) {
      const map2 = {};
      function match(_pattern, _quad) {
        return everyTerms(_pattern, (t1, key) => {
          var _a, _b;
          const t2 = _quad[key];
          switch (t1.termType) {
            case "Variable":
              return opt.skipVarMapping && t2.termType === "Variable" || ((_b = (_a = map2[t1.value]) === null || _a === void 0 ? void 0 : _a.equals(t2)) !== null && _b !== void 0 ? _b : (map2[t1.value] = t2, true));
            case "Quad":
              return t2.termType === "Quad" && match(t1, t2);
            default:
              return t1.equals(t2);
          }
        });
      }
      return match(pattern, quad) && (opt.returnMappings ? map2 : true);
    }
    exports.matchPatternMappings = matchPatternMappings;
  }
});

// ../../lipdjs/node_modules/rdf-terms/lib/TermUtil.js
var require_TermUtil2 = __commonJS({
  "../../lipdjs/node_modules/rdf-terms/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getQuads = exports.getDefaultGraphs = exports.getVariables = exports.getLiterals = exports.getBlankNodes = exports.getNamedNodes = exports.getTermsOfType = exports.uniqTerms = exports.TERM_TYPES = void 0;
    var rdf_string_1 = require_rdf_string();
    exports.TERM_TYPES = ["NamedNode", "BlankNode", "Literal", "Variable", "DefaultGraph", "Quad"];
    function uniqTerms(terms) {
      const hash2 = {};
      return terms.filter((term) => {
        const termString = (0, rdf_string_1.termToString)(term);
        return !(termString in hash2) && (hash2[termString] = true);
      });
    }
    exports.uniqTerms = uniqTerms;
    function getTermsOfType(terms, termType) {
      return terms.filter((term) => term.termType === termType);
    }
    exports.getTermsOfType = getTermsOfType;
    function getNamedNodes(terms) {
      return getTermsOfType(terms, "NamedNode");
    }
    exports.getNamedNodes = getNamedNodes;
    function getBlankNodes(terms) {
      return getTermsOfType(terms, "BlankNode");
    }
    exports.getBlankNodes = getBlankNodes;
    function getLiterals(terms) {
      return getTermsOfType(terms, "Literal");
    }
    exports.getLiterals = getLiterals;
    function getVariables(terms) {
      return getTermsOfType(terms, "Variable");
    }
    exports.getVariables = getVariables;
    function getDefaultGraphs(terms) {
      return getTermsOfType(terms, "DefaultGraph");
    }
    exports.getDefaultGraphs = getDefaultGraphs;
    function getQuads(terms) {
      return getTermsOfType(terms, "Quad");
    }
    exports.getQuads = getQuads;
  }
});

// ../../lipdjs/node_modules/rdf-terms/index.js
var require_rdf_terms = __commonJS({
  "../../lipdjs/node_modules/rdf-terms/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QuadTermUtil(), exports);
    __exportStar(require_TermUtil2(), exports);
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/lib/util.js
var require_util = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/lib/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var algebra_1 = require_algebra();
    var factory_1 = __importDefault(require_factory());
    var rdf_terms_1 = require_rdf_terms();
    var Util = class _Util {
      /**
       * Flattens an array of arrays to an array.
       * @param arr - Array of arrays
       */
      static flatten(arr) {
        return Array.prototype.concat(...arr).filter((x) => x);
      }
      /**
       * Outputs a JSON object corresponding to the input algebra-like.
       */
      static objectify(algebra) {
        if (algebra.termType) {
          if (algebra.termType === "Quad") {
            return {
              type: "pattern",
              termType: "Quad",
              subject: _Util.objectify(algebra.subject),
              predicate: _Util.objectify(algebra.predicate),
              object: _Util.objectify(algebra.object),
              graph: _Util.objectify(algebra.graph)
            };
          } else {
            let result = { termType: algebra.termType, value: algebra.value };
            if (algebra.language)
              result.language = algebra.language;
            if (algebra.datatype)
              result.datatype = _Util.objectify(algebra.datatype);
            return result;
          }
        }
        if (Array.isArray(algebra))
          return algebra.map((e) => _Util.objectify(e));
        if (algebra === Object(algebra)) {
          let result = {};
          for (let key of Object.keys(algebra))
            result[key] = _Util.objectify(algebra[key]);
          return result;
        }
        return algebra;
      }
      /**
       * Detects all in-scope variables.
       * In practice this means iterating through the entire algebra tree, finding all variables,
       * and stopping when a project function is found.
       * @param {Operation} op - Input algebra tree.
       * @returns {Variable[]} - List of unique in-scope variables.
       */
      static inScopeVariables(op) {
        const variables = [];
        function addVariable(v) {
          if (!variables.find((v2) => v.value === v2.value))
            variables.push(v);
        }
        function recurseTerm(quad) {
          if (quad.subject.termType === "Variable")
            addVariable(quad.subject);
          if (quad.predicate.termType === "Variable")
            addVariable(quad.predicate);
          if (quad.object.termType === "Variable")
            addVariable(quad.object);
          if (quad.graph.termType === "Variable")
            addVariable(quad.graph);
          if (quad.subject.termType === "Quad")
            recurseTerm(quad.subject);
          if (quad.predicate.termType === "Quad")
            recurseTerm(quad.predicate);
          if (quad.object.termType === "Quad")
            recurseTerm(quad.object);
          if (quad.graph.termType === "Quad")
            recurseTerm(quad.graph);
        }
        _Util.recurseOperation(op, {
          [algebra_1.types.EXPRESSION]: (op2) => {
            if (op2.expressionType === algebra_1.expressionTypes.AGGREGATE && op2.variable) {
              addVariable(op2.variable);
            }
            return true;
          },
          [algebra_1.types.EXTEND]: (op2) => {
            addVariable(op2.variable);
            return true;
          },
          [algebra_1.types.GRAPH]: (op2) => {
            if (op2.name.termType === "Variable")
              addVariable(op2.name);
            return true;
          },
          [algebra_1.types.GROUP]: (op2) => {
            op2.variables.forEach(addVariable);
            return true;
          },
          [algebra_1.types.PATH]: (op2) => {
            if (op2.subject.termType === "Variable")
              addVariable(op2.subject);
            if (op2.object.termType === "Variable")
              addVariable(op2.object);
            if (op2.graph.termType === "Variable")
              addVariable(op2.graph);
            if (op2.subject.termType === "Quad")
              recurseTerm(op2.subject);
            if (op2.object.termType === "Quad")
              recurseTerm(op2.object);
            if (op2.graph.termType === "Quad")
              recurseTerm(op2.graph);
            return true;
          },
          [algebra_1.types.PATTERN]: (op2) => {
            recurseTerm(op2);
            return true;
          },
          [algebra_1.types.PROJECT]: (op2) => {
            op2.variables.forEach(addVariable);
            return false;
          },
          [algebra_1.types.SERVICE]: (op2) => {
            if (op2.name.termType === "Variable")
              addVariable(op2.name);
            return true;
          },
          [algebra_1.types.VALUES]: (op2) => {
            op2.variables.forEach(addVariable);
            return true;
          }
        });
        return variables;
      }
      /**
       * Recurses through the given algebra tree
       * A map of callback functions can be provided for individual Operation types to gather data.
       * The return value of those callbacks should indicate whether recursion should be applied or not.
       * Making modifications will change the original input object.
       * @param {Operation} op - The Operation to recurse on.
       * @param { [type: string]: (op: Operation) => boolean } callbacks - A map of required callback Operations.
       */
      static recurseOperation(op, callbacks) {
        let result = op;
        let doRecursion = true;
        const callback = callbacks[op.type];
        if (callback)
          doRecursion = callback(op);
        if (!doRecursion)
          return;
        let recurseOp = (op2) => _Util.recurseOperation(op2, callbacks);
        switch (result.type) {
          case algebra_1.types.ALT:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.ASK:
            recurseOp(result.input);
            break;
          case algebra_1.types.BGP:
            result.patterns.forEach(recurseOp);
            break;
          case algebra_1.types.CONSTRUCT:
            recurseOp(result.input);
            result.template.map(recurseOp);
            break;
          case algebra_1.types.DESCRIBE:
            recurseOp(result.input);
            break;
          case algebra_1.types.DISTINCT:
            recurseOp(result.input);
            break;
          case algebra_1.types.EXPRESSION:
            if (result.expressionType === algebra_1.expressionTypes.EXISTENCE) {
              recurseOp(result.input);
            }
            break;
          case algebra_1.types.EXTEND:
            recurseOp(result.input);
            recurseOp(result.expression);
            break;
          case algebra_1.types.FILTER:
            recurseOp(result.input);
            recurseOp(result.expression);
            break;
          case algebra_1.types.FROM:
            recurseOp(result.input);
            break;
          case algebra_1.types.GRAPH:
            recurseOp(result.input);
            break;
          case algebra_1.types.GROUP:
            recurseOp(result.input);
            result.aggregates.forEach(recurseOp);
            break;
          case algebra_1.types.INV:
            recurseOp(result.path);
            break;
          case algebra_1.types.JOIN:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.LEFT_JOIN:
            result.input.map(recurseOp);
            if (result.expression)
              recurseOp(result.expression);
            break;
          case algebra_1.types.LINK:
            break;
          case algebra_1.types.MINUS:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.NOP:
            break;
          case algebra_1.types.NPS:
            break;
          case algebra_1.types.ONE_OR_MORE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.ORDER_BY:
            recurseOp(result.input);
            result.expressions.forEach(recurseOp);
            break;
          case algebra_1.types.PATH:
            recurseOp(result.predicate);
            break;
          case algebra_1.types.PATTERN:
            break;
          case algebra_1.types.PROJECT:
            recurseOp(result.input);
            break;
          case algebra_1.types.REDUCED:
            recurseOp(result.input);
            break;
          case algebra_1.types.SEQ:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.SERVICE:
            recurseOp(result.input);
            break;
          case algebra_1.types.SLICE:
            recurseOp(result.input);
            break;
          case algebra_1.types.UNION:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.VALUES:
            break;
          case algebra_1.types.ZERO_OR_MORE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.ZERO_OR_ONE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.COMPOSITE_UPDATE:
            result.updates.forEach((update8) => recurseOp(update8));
            break;
          case algebra_1.types.DELETE_INSERT:
            if (result.delete)
              result.delete.forEach((pattern) => recurseOp(pattern));
            if (result.insert)
              result.insert.forEach((pattern) => recurseOp(pattern));
            if (result.where)
              recurseOp(result.where);
            break;
          case algebra_1.types.LOAD:
            break;
          case algebra_1.types.CLEAR:
            break;
          case algebra_1.types.CREATE:
            break;
          case algebra_1.types.DROP:
            break;
          case algebra_1.types.ADD:
            break;
          case algebra_1.types.MOVE:
            break;
          case algebra_1.types.COPY:
            break;
          default:
            throw new Error(`Unknown Operation type ${result.type}`);
        }
      }
      /**
       * Creates a deep copy of the given Operation.
       * Creates shallow copies of the non-Operation values.
       * A map of callback functions can be provided for individual Operation types
       * to specifically modify the given objects before triggering recursion.
       * The return value of those callbacks should indicate whether recursion should be applied to this returned object or not.
       * @param {Operation} op - The Operation to recurse on.
       * @param callbacks - A map of required callback Operations.
       * @param {Factory} factory - Factory used to create new Operations. Will use default factory if none is provided.
       * @returns {Operation} - The copied result.
       */
      static mapOperation(op, callbacks, factory) {
        let result = op;
        let doRecursion = true;
        let copyMetadata = true;
        factory = factory || new factory_1.default();
        const callback = callbacks[op.type];
        if (callback) {
          const recurseResult = callback(op, factory);
          result = recurseResult.result;
          doRecursion = recurseResult.recurse;
          copyMetadata = recurseResult.copyMetadata !== false;
        }
        let toCopyMetadata;
        if (copyMetadata && (result.metadata || op.metadata)) {
          toCopyMetadata = { ...result.metadata, ...op.metadata };
        }
        if (!doRecursion) {
          if (toCopyMetadata) {
            result.metadata = toCopyMetadata;
          }
          return result;
        }
        let mapOp = (op2) => _Util.mapOperation(op2, callbacks, factory);
        switch (result.type) {
          case algebra_1.types.ALT:
            result = factory.createAlt(result.input.map(mapOp));
            break;
          case algebra_1.types.ASK:
            result = factory.createAsk(mapOp(result.input));
            break;
          case algebra_1.types.BGP:
            result = factory.createBgp(result.patterns.map(mapOp));
            break;
          case algebra_1.types.CONSTRUCT:
            result = factory.createConstruct(mapOp(result.input), result.template.map(mapOp));
            break;
          case algebra_1.types.DESCRIBE:
            result = factory.createDescribe(mapOp(result.input), result.terms);
            break;
          case algebra_1.types.DISTINCT:
            result = factory.createDistinct(mapOp(result.input));
            break;
          case algebra_1.types.EXPRESSION:
            result = _Util.mapExpression(result, callbacks, factory);
            break;
          case algebra_1.types.EXTEND:
            result = factory.createExtend(mapOp(result.input), result.variable, mapOp(result.expression));
            break;
          case algebra_1.types.FILTER:
            result = factory.createFilter(mapOp(result.input), mapOp(result.expression));
            break;
          case algebra_1.types.FROM:
            result = factory.createFrom(mapOp(result.input), [...result.default], [...result.named]);
            break;
          case algebra_1.types.GRAPH:
            result = factory.createGraph(mapOp(result.input), result.name);
            break;
          case algebra_1.types.GROUP:
            result = factory.createGroup(mapOp(result.input), [].concat(result.variables), result.aggregates.map(mapOp));
            break;
          case algebra_1.types.INV:
            result = factory.createInv(mapOp(result.path));
            break;
          case algebra_1.types.JOIN:
            result = factory.createJoin(result.input.map(mapOp));
            break;
          case algebra_1.types.LEFT_JOIN:
            result = factory.createLeftJoin(mapOp(result.input[0]), mapOp(result.input[1]), result.expression ? mapOp(result.expression) : void 0);
            break;
          case algebra_1.types.LINK:
            result = factory.createLink(result.iri);
            break;
          case algebra_1.types.MINUS:
            result = factory.createMinus(mapOp(result.input[0]), mapOp(result.input[1]));
            break;
          case algebra_1.types.NOP:
            result = factory.createNop();
            break;
          case algebra_1.types.NPS:
            result = factory.createNps([].concat(result.iris));
            break;
          case algebra_1.types.ONE_OR_MORE_PATH:
            result = factory.createOneOrMorePath(mapOp(result.path));
            break;
          case algebra_1.types.ORDER_BY:
            result = factory.createOrderBy(mapOp(result.input), result.expressions.map(mapOp));
            break;
          case algebra_1.types.PATH:
            result = factory.createPath(result.subject, mapOp(result.predicate), result.object, result.graph);
            break;
          case algebra_1.types.PATTERN:
            result = factory.createPattern(result.subject, result.predicate, result.object, result.graph);
            break;
          case algebra_1.types.PROJECT:
            result = factory.createProject(mapOp(result.input), [...result.variables]);
            break;
          case algebra_1.types.REDUCED:
            result = factory.createReduced(mapOp(result.input));
            break;
          case algebra_1.types.SEQ:
            result = factory.createSeq(result.input.map(mapOp));
            break;
          case algebra_1.types.SERVICE:
            result = factory.createService(mapOp(result.input), result.name, result.silent);
            break;
          case algebra_1.types.SLICE:
            result = factory.createSlice(mapOp(result.input), result.start, result.length);
            break;
          case algebra_1.types.UNION:
            result = factory.createUnion(result.input.map(mapOp));
            break;
          case algebra_1.types.VALUES:
            result = factory.createValues([].concat(result.variables), result.bindings.map((b) => Object.assign({}, b)));
            break;
          case algebra_1.types.ZERO_OR_MORE_PATH:
            result = factory.createZeroOrMorePath(mapOp(result.path));
            break;
          case algebra_1.types.ZERO_OR_ONE_PATH:
            result = factory.createZeroOrOnePath(mapOp(result.path));
            break;
          case algebra_1.types.COMPOSITE_UPDATE:
            result = factory.createCompositeUpdate(result.updates.map(mapOp));
            break;
          case algebra_1.types.DELETE_INSERT:
            result = factory.createDeleteInsert(result.delete ? result.delete.map(mapOp) : void 0, result.insert ? result.insert.map(mapOp) : void 0, result.where ? mapOp(result.where) : void 0);
            break;
          case algebra_1.types.LOAD:
            result = factory.createLoad(result.source, result.destination, result.silent);
            break;
          case algebra_1.types.CLEAR:
            result = factory.createClear(result.source, result.silent);
            break;
          case algebra_1.types.CREATE:
            result = factory.createCreate(result.source, result.silent);
            break;
          case algebra_1.types.DROP:
            result = factory.createDrop(result.source, result.silent);
            break;
          case algebra_1.types.ADD:
            result = factory.createAdd(result.source, result.destination);
            break;
          case algebra_1.types.MOVE:
            result = factory.createMove(result.source, result.destination);
            break;
          case algebra_1.types.COPY:
            result = factory.createCopy(result.source, result.destination);
            break;
          default:
            throw new Error(`Unknown Operation type ${result.type}`);
        }
        if (toCopyMetadata) {
          result.metadata = toCopyMetadata;
        }
        return result;
      }
      /**
       * Similar to the {@link mapOperation} function but specifically for expressions.
       * Both functions call each other while copying.
       * Should not be called directly since it does not execute the callbacks, these happen in {@link mapOperation}.
       * @param {Expression} expr - The Operation to recurse on.
       * @param callbacks - A map of required callback Operations.
       * @param {Factory} factory - Factory used to create new Operations. Will use default factory if none is provided.
       * @returns {Operation} - The copied result.
       */
      static mapExpression(expr, callbacks, factory) {
        let result = expr;
        let doRecursion = true;
        factory = factory || new factory_1.default();
        const callback = callbacks[expr.expressionType];
        if (callback)
          ({ result, recurse: doRecursion } = callback(expr, factory));
        if (!doRecursion)
          return result;
        let mapOp = (op) => _Util.mapOperation(op, callbacks, factory);
        switch (expr.expressionType) {
          case algebra_1.expressionTypes.AGGREGATE:
            if (expr.variable) {
              return factory.createBoundAggregate(expr.variable, expr.aggregator, mapOp(expr.expression), expr.distinct, expr.separator);
            }
            return factory.createAggregateExpression(expr.aggregator, mapOp(expr.expression), expr.distinct, expr.separator);
          case algebra_1.expressionTypes.EXISTENCE:
            return factory.createExistenceExpression(expr.not, mapOp(expr.input));
          case algebra_1.expressionTypes.NAMED:
            return factory.createNamedExpression(expr.name, expr.args.map(mapOp));
          case algebra_1.expressionTypes.OPERATOR:
            return factory.createOperatorExpression(expr.operator, expr.args.map(mapOp));
          case algebra_1.expressionTypes.TERM:
            return factory.createTermExpression(expr.term);
          case algebra_1.expressionTypes.WILDCARD:
            return factory.createWildcardExpression();
          default:
            throw new Error(`Unknown Expression type ${expr.expressionType}`);
        }
      }
      /**
       * Creates a deep clone of the operation.
       * This is syntactic sugar for calling {@link mapOperation} without callbacks.
       * @param {Operation} op - The operation to copy.
       * @returns {Operation} - The deep copy.
       */
      static cloneOperation(op) {
        return _Util.mapOperation(op, {});
      }
      /**
       * Creates a deep clone of the expression.
       * This is syntactic sugar for calling {@link mapExpression} without callbacks.
       * @param {Expression} expr - The operation to copy.
       * @returns {Expression} - The deep copy.
       */
      static cloneExpression(expr) {
        return _Util.mapExpression(expr, {});
      }
      static createUniqueVariable(label, variables, dataFactory) {
        let counter = 0;
        let labelLoop = label;
        while (variables[labelLoop]) {
          labelLoop = `${label}${counter++}`;
        }
        return dataFactory.variable(labelLoop);
      }
      // separate terms from wildcard since we handle them differently
      static isSimpleTerm(term) {
        return term.termType !== void 0 && term.termType !== "Quad" && term.termType !== "Wildcard";
      }
      static isQuad(term) {
        return term.termType === "Quad";
      }
      static hasQuadVariables(quad) {
        return (0, rdf_terms_1.someTermsNested)(quad, (term) => term.termType === "Variable");
      }
      static isWildcard(term) {
        return term.termType === "Wildcard";
      }
    };
    exports.default = Util;
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/lib/sparqlAlgebra.js
var require_sparqlAlgebra = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/lib/sparqlAlgebra.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var equal = require_es6();
    var rdf_string_1 = require_rdf_string();
    var Algebra = __importStar(require_algebra());
    var factory_1 = __importDefault(require_factory());
    var util_1 = __importDefault(require_util());
    var Parser2 = require_sparql().Parser;
    var types = Algebra.types;
    var variables = /* @__PURE__ */ new Set();
    var varCount = 0;
    var useQuads = false;
    var factory;
    function translate(sparql, options) {
      options = options || {};
      factory = new factory_1.default(options.dataFactory);
      let query;
      if (isString(sparql)) {
        let parser = new Parser2(options);
        parser._resetBlanks();
        query = parser.parse(sparql);
      } else {
        query = sparql;
      }
      return translateQuery(query, options.quads, options.blankToVariable);
    }
    exports.default = translate;
    function translateQuery(sparql, quads, blankToVariable) {
      variables = /* @__PURE__ */ new Set();
      varCount = 0;
      useQuads = Boolean(quads);
      if (!sparql.type)
        return factory.createNop();
      if (sparql.type !== "query" && sparql.type !== "update")
        throw new Error("Translate only works on complete query or update objects.");
      let res;
      findAllVariables(sparql);
      if (sparql.type === "query") {
        const group = { type: "group", patterns: sparql.where || [] };
        res = translateGraphPattern(group);
        res = translateAggregates(sparql, res);
      } else if (sparql.type === "update") {
        res = translateUpdate(sparql);
      }
      if (blankToVariable) {
        res = translateBlankNodesToVariables(res);
      }
      return res;
    }
    function isString(str) {
      return typeof str === "string";
    }
    function isTerm(term) {
      return Boolean(term === null || term === void 0 ? void 0 : term.termType);
    }
    function isTriple(triple) {
      return triple.subject && triple.predicate && triple.object;
    }
    function isVariable(term) {
      return (term === null || term === void 0 ? void 0 : term.termType) === "Variable";
    }
    function findAllVariables(thingy) {
      if (isTerm(thingy)) {
        if (isVariable(thingy)) {
          variables.add(`?${thingy.value}`);
        }
      } else if (Array.isArray(thingy)) {
        for (const entry of thingy)
          findAllVariables(entry);
      } else if (thingy && typeof thingy === "object") {
        for (let key of Object.keys(thingy)) {
          if (key.startsWith("?")) {
            variables.add(key);
          } else if (key.startsWith("$")) {
            variables.add(`?${key.slice(1)}`);
          }
          findAllVariables(thingy[key]);
        }
      }
    }
    function inScopeVariables(thingy) {
      let inScope = {};
      if (isTriple(thingy)) {
        const result = [
          inScopeVariables(thingy.subject),
          inScopeVariables(thingy.predicate),
          inScopeVariables(thingy.object),
          thingy.graph ? inScopeVariables(thingy.graph) : {}
        ];
        Object.assign(inScope, ...result);
      } else if (isTerm(thingy)) {
        if (isVariable(thingy))
          inScope[thingy.value] = thingy;
      } else if (thingy.type === "bgp") {
        const quads = thingy.triples;
        Object.assign(inScope, ...quads.map(inScopeVariables));
      } else if (thingy.type === "path") {
        Object.assign(inScope, ...thingy.items.map(inScopeVariables));
      } else if (thingy.type === "group" || thingy.type === "union" || thingy.type === "optional") {
        Object.assign(inScope, ...thingy.patterns.map(inScopeVariables));
      } else if (thingy.type === "service" || thingy.type === "graph") {
        Object.assign(inScope, inScopeVariables(thingy.name));
        Object.assign(inScope, ...thingy.patterns.map(inScopeVariables));
      } else if (thingy.type === "bind") {
        Object.assign(inScope, inScopeVariables(thingy.variable));
      } else if (thingy.type === "values") {
        if (thingy.values.length > 0) {
          const vars = Object.keys(thingy.values[0]).map((v) => factory.createTerm(v));
          Object.assign(inScope, ...vars.map(inScopeVariables));
        }
      } else if (thingy.type === "query") {
        if (thingy.queryType === "SELECT" || thingy.queryType === "DESCRIBE") {
          if (thingy.where && thingy.variables.some(util_1.default.isWildcard))
            Object.assign(inScope, ...thingy.where.map(inScopeVariables));
          for (const v of thingy.variables) {
            if (isVariable(v))
              Object.assign(inScope, inScopeVariables(v));
            else if (v.variable)
              Object.assign(inScope, inScopeVariables(v.variable));
          }
          if (thingy.queryType === "SELECT") {
            if (thingy.group) {
              for (const g of thingy.group) {
                if (g.variable)
                  Object.assign(inScope, inScopeVariables(g.variable));
              }
            }
            if (thingy.values) {
              const values2 = { type: "values", values: thingy.values };
              Object.assign(inScope, inScopeVariables(values2));
            }
          }
        }
      }
      return inScope;
    }
    function translateGraphPattern(thingy) {
      if (thingy.type === "bgp") {
        return translateBgp(thingy);
      }
      if (thingy.type === "union")
        return factory.createUnion(thingy.patterns.map((p) => {
          if (p.type !== "group")
            p = { type: "group", patterns: [p] };
          return translateGraphPattern(p);
        }));
      if (thingy.type === "graph") {
        const group = { type: "group", patterns: thingy.patterns };
        let result = translateGraphPattern(group);
        if (useQuads)
          result = recurseGraph(result, thingy.name);
        else
          result = factory.createGraph(result, thingy.name);
        return result;
      }
      if (thingy.type === "values")
        return translateInlineData(thingy);
      if (thingy.type === "query")
        return translateQuery(thingy, useQuads, false);
      if (thingy.type === "group") {
        let filters = [];
        let nonfilters = [];
        for (let pattern of thingy.patterns)
          (pattern.type === "filter" ? filters : nonfilters).push(pattern);
        let result = nonfilters.reduce(accumulateGroupGraphPattern, factory.createBgp([]));
        let expressions = filters.map((filter3) => translateExpression(filter3.expression));
        if (expressions.length > 0)
          result = factory.createFilter(result, expressions.reduce((acc, exp) => factory.createOperatorExpression("&&", [acc, exp])));
        return result;
      }
      throw new Error(`Unexpected type: ${thingy.type}`);
    }
    function translateExpression(exp) {
      if (util_1.default.isSimpleTerm(exp))
        return factory.createTermExpression(exp);
      if (util_1.default.isQuad(exp)) {
        if (util_1.default.hasQuadVariables(exp))
          return factory.createOperatorExpression("triple", [
            translateExpression(exp.subject),
            translateExpression(exp.predicate),
            translateExpression(exp.object)
          ]);
        else
          return factory.createTermExpression(exp);
      }
      if (util_1.default.isWildcard(exp))
        return factory.createWildcardExpression();
      if ("aggregation" in exp)
        return factory.createAggregateExpression(exp.aggregation, translateExpression(exp.expression), Boolean(exp.distinct), exp.separator);
      if ("function" in exp)
        return factory.createNamedExpression(exp.function, exp.args.map(translateExpression));
      if ("operator" in exp) {
        if (exp.operator === "exists" || exp.operator === "notexists")
          return factory.createExistenceExpression(exp.operator === "notexists", translateGraphPattern(exp.args[0]));
        if (exp.operator === "in" || exp.operator === "notin")
          exp.args = [exp.args[0]].concat(exp.args[1]);
        return factory.createOperatorExpression(exp.operator, exp.args.map(translateExpression));
      }
      throw new Error(`Unknown expression: ${JSON.stringify(exp)}`);
    }
    function translateBgp(thingy) {
      let patterns = [];
      let joins = [];
      for (let t of thingy.triples) {
        if ("pathType" in t.predicate) {
          let path = translatePath(t);
          for (let p of path) {
            if (p.type === types.PATH) {
              if (patterns.length > 0)
                joins.push(factory.createBgp(patterns));
              patterns = [];
              joins.push(p);
            } else
              patterns.push(p);
          }
        } else
          patterns.push(translateQuad(t));
      }
      if (patterns.length > 0)
        joins.push(factory.createBgp(patterns));
      if (joins.length === 1)
        return joins[0];
      return factory.createJoin(joins);
    }
    function translatePath(triple) {
      let sub = triple.subject;
      let pred = translatePathPredicate(triple.predicate);
      let obj = triple.object;
      return simplifyPath(sub, pred, obj);
    }
    function translatePathPredicate(predicate) {
      if (util_1.default.isSimpleTerm(predicate)) {
        if (predicate.termType === "NamedNode")
          return factory.createLink(predicate);
        else
          throw new Error(`Path predicate should be a NamedNode, got ${JSON.stringify(predicate)}`);
      }
      if (predicate.pathType === "^")
        return factory.createInv(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "!") {
        let normals = [];
        let inverted = [];
        let items;
        if ("pathType" in predicate.items[0] && predicate.items[0].pathType === "|")
          items = predicate.items[0].items;
        else
          items = predicate.items;
        for (let item of items) {
          if (util_1.default.isSimpleTerm(item))
            normals.push(item);
          else if (item.pathType === "^")
            inverted.push(item.items[0]);
          else
            throw new Error(`Unexpected item: ${JSON.stringify(item)}`);
        }
        let normalElement = factory.createNps(normals);
        let invertedElement = factory.createInv(factory.createNps(inverted));
        if (inverted.length === 0)
          return normalElement;
        if (normals.length === 0)
          return invertedElement;
        return factory.createAlt([normalElement, invertedElement]);
      }
      if (predicate.pathType === "/")
        return factory.createSeq(predicate.items.map(translatePathPredicate));
      if (predicate.pathType === "|")
        return factory.createAlt(predicate.items.map(translatePathPredicate));
      if (predicate.pathType === "*")
        return factory.createZeroOrMorePath(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "+")
        return factory.createOneOrMorePath(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "?")
        return factory.createZeroOrOnePath(translatePathPredicate(predicate.items[0]));
      throw new Error(`Unable to translate path expression ${JSON.stringify(predicate)}`);
    }
    function simplifyPath(subject, predicate, object) {
      if (predicate.type === types.LINK)
        return [factory.createPattern(subject, predicate.iri, object)];
      if (predicate.type === types.INV)
        return simplifyPath(object, predicate.path, subject);
      if (predicate.type === types.SEQ) {
        let joiner = subject;
        return util_1.default.flatten(predicate.input.map((subOp, i) => {
          const nextJoiner = i === predicate.input.length - 1 ? object : generateFreshVar();
          const simplifiedPath = simplifyPath(joiner, subOp, nextJoiner);
          if (nextJoiner.termType === "Variable") {
            joiner = nextJoiner;
          }
          return simplifiedPath;
        }));
      }
      return [factory.createPath(subject, predicate, object)];
    }
    function generateFreshVar() {
      let v = `?var${varCount++}`;
      if (variables.has(v))
        return generateFreshVar();
      variables.add(v);
      return factory.createTerm(v);
    }
    function translateQuad(quad) {
      if ("pathType" in quad.predicate) {
        throw new Error("Trying to translate property path to quad.");
      }
      return factory.createPattern(quad.subject, quad.predicate, quad.object, quad.graph);
    }
    var typeVals = Object.values(types);
    function recurseGraph(thingy, graph, replacement) {
      if (thingy.type === types.GRAPH) {
        if (replacement) {
          throw new Error("Recursing through nested GRAPH statements with a replacement is impossible.");
        }
        thingy = recurseGraph(thingy.input, thingy.name);
      } else if (thingy.type === types.SERVICE) {
      } else if (thingy.type === types.BGP)
        thingy.patterns = thingy.patterns.map((quad) => {
          if (replacement) {
            if (quad.subject.equals(graph))
              quad.subject = replacement;
            if (quad.predicate.equals(graph))
              quad.predicate = replacement;
            if (quad.object.equals(graph))
              quad.object = replacement;
          }
          if (quad.graph.termType === "DefaultGraph")
            quad.graph = graph;
          return quad;
        });
      else if (thingy.type === types.PATH) {
        if (replacement) {
          if (thingy.subject.equals(graph))
            thingy.subject = replacement;
          if (thingy.object.equals(graph))
            thingy.object = replacement;
        }
        if (thingy.graph.termType === "DefaultGraph")
          thingy.graph = graph;
      } else if (thingy.type === types.PROJECT && !replacement) {
        if (!thingy.variables.some((v) => v.equals(graph)))
          replacement = generateFreshVar();
        thingy.input = recurseGraph(thingy.input, graph, replacement);
      } else if (thingy.type === types.EXTEND && !replacement) {
        if (thingy.variable.equals(graph))
          replacement = generateFreshVar();
        thingy.input = recurseGraph(thingy.input, graph, replacement);
      } else {
        for (let key of Object.keys(thingy)) {
          if (Array.isArray(thingy[key]))
            thingy[key] = thingy[key].map((x) => recurseGraph(x, graph, replacement));
          else if (typeVals.indexOf(thingy[key].type) >= 0)
            thingy[key] = recurseGraph(thingy[key], graph, replacement);
          else if (replacement && isVariable(thingy[key]) && thingy[key].equals(graph))
            thingy[key] = replacement;
        }
      }
      return thingy;
    }
    function accumulateGroupGraphPattern(G, E) {
      if (E.type === "optional") {
        const A = translateGraphPattern({ type: "group", patterns: E.patterns });
        if (A.type === types.FILTER) {
          G = factory.createLeftJoin(G, A.input, A.expression);
        } else
          G = factory.createLeftJoin(G, A);
      } else if (E.type === "minus") {
        const A = translateGraphPattern({ type: "group", patterns: E.patterns });
        G = factory.createMinus(G, A);
      } else if (E.type === "bind")
        G = factory.createExtend(G, E.variable, translateExpression(E.expression));
      else if (E.type === "service") {
        const group = { type: "group", patterns: E.patterns };
        const A = factory.createService(translateGraphPattern(group), E.name, E.silent);
        G = simplifiedJoin(G, A);
      } else {
        const A = translateGraphPattern(E);
        G = simplifiedJoin(G, A);
      }
      return G;
    }
    function simplifiedJoin(G, A) {
      if (G.type === types.BGP && A.type === types.BGP)
        G = factory.createBgp([...G.patterns, ...A.patterns]);
      else if (G.type === types.BGP && G.patterns.length === 0)
        G = A;
      else if (A.type === types.BGP && A.patterns.length === 0) {
      } else
        G = factory.createJoin([G, A]);
      return G;
    }
    function translateInlineData(values2) {
      let variables2 = (values2.values.length === 0 ? [] : Object.keys(values2.values[0])).map(factory.createTerm.bind(factory));
      let bindings = values2.values.map((binding) => {
        let keys2 = Object.keys(binding);
        keys2 = keys2.filter((k) => binding[k] !== void 0);
        let map2 = {};
        for (let key of keys2)
          map2[key] = binding[key];
        return map2;
      });
      return factory.createValues(variables2, bindings);
    }
    function translateAggregates(query, res) {
      const select = query;
      const E = [];
      const A = {};
      select.variables = select.variables && select.variables.map((val) => mapAggregate(val, A));
      select.having = select.having && select.having.map((val) => mapAggregate(val, A));
      select.order = select.order && select.order.map((val) => mapAggregate(val, A));
      if (select.group || Object.keys(A).length > 0) {
        const aggregates = Object.keys(A).map((v) => translateBoundAggregate(A[v], factory.createTerm(v)));
        const vars = [];
        if (select.group) {
          for (const e of select.group) {
            if (util_1.default.isSimpleTerm(e.expression)) {
              vars.push(e.expression);
            } else {
              const v = "variable" in e ? e.variable : generateFreshVar();
              res = factory.createExtend(res, v, translateExpression(e.expression));
              vars.push(v);
            }
          }
        }
        res = factory.createGroup(res, vars, aggregates);
      }
      if (select.having)
        for (let filter3 of select.having)
          res = factory.createFilter(res, translateExpression(filter3));
      if (query.values)
        res = factory.createJoin([res, translateInlineData(query)]);
      let PV = [];
      if (query.queryType === "SELECT" || query.queryType === "DESCRIBE") {
        if (query.variables.some((e) => e && util_1.default.isWildcard(e)))
          PV = Object.values(inScopeVariables(query)).sort((left, right) => left.value.localeCompare(right.value));
        else {
          for (let v of query.variables) {
            if (isVariable(v) || !("variable" in v))
              PV.push(v);
            else if (v.variable) {
              PV.push(v.variable);
              E.push(v);
            }
          }
        }
      }
      for (let v of E)
        res = factory.createExtend(res, v.variable, translateExpression(v.expression));
      if (select.order)
        res = factory.createOrderBy(res, select.order.map((exp) => {
          let result = translateExpression(exp.expression);
          if (exp.descending)
            result = factory.createOperatorExpression("desc", [result]);
          return result;
        }));
      if (query.queryType === "SELECT")
        res = factory.createProject(res, PV);
      if (select.distinct)
        res = factory.createDistinct(res);
      if (select.reduced)
        res = factory.createReduced(res);
      if (query.queryType === "CONSTRUCT")
        res = factory.createConstruct(res, (query.template || []).map(translateQuad));
      else if (query.queryType === "ASK")
        res = factory.createAsk(res);
      else if (query.queryType === "DESCRIBE")
        res = factory.createDescribe(res, PV);
      if (select.offset || select.limit)
        res = factory.createSlice(res, select.offset || 0, select.limit);
      if (select.from)
        res = factory.createFrom(res, select.from.default, select.from.named);
      return res;
    }
    function mapAggregate(thingy, aggregates) {
      if ("type" in thingy && thingy.type === "aggregate") {
        let found = false;
        let v;
        for (let key of Object.keys(aggregates)) {
          if (equal(aggregates[key], thingy)) {
            v = factory.createTerm(key);
            found = true;
            break;
          }
        }
        if (!found) {
          v = generateFreshVar();
          aggregates[(0, rdf_string_1.termToString)(v)] = thingy;
        }
        return v;
      }
      if ("expression" in thingy && thingy.expression)
        return { ...thingy, expression: mapAggregate(thingy.expression, aggregates) };
      if ("args" in thingy && thingy.args)
        return { ...thingy, args: thingy.args.map((subthingy) => mapAggregate(subthingy, aggregates)) };
      return thingy;
    }
    function translateBoundAggregate(thingy, v) {
      if (thingy.type !== "aggregate" || !thingy.aggregation)
        throw new Error(`Unexpected input: ${JSON.stringify(thingy)}`);
      const A = translateExpression(thingy);
      A.variable = v;
      return A;
    }
    function translateUpdate(thingy) {
      if (thingy.updates.length === 1)
        return translateSingleUpdate(thingy.updates[0]);
      return factory.createCompositeUpdate(thingy.updates.map(translateSingleUpdate));
    }
    function translateSingleUpdate(thingy) {
      if ("type" in thingy) {
        if (thingy.type === "load")
          return translateUpdateGraphLoad(thingy);
        if (thingy.type === "clear" || thingy.type === "create" || thingy.type === "drop")
          return translateUpdateGraph(thingy);
        if (thingy.type === "add" || thingy.type === "copy" || thingy.type === "move")
          return translateUpdateGraphShortcut(thingy);
      } else if (thingy.updateType === "insertdelete" || thingy.updateType === "deletewhere" || thingy.updateType === "delete" || thingy.updateType === "insert")
        return translateInsertDelete(thingy);
      throw new Error(`Unknown update type ${JSON.stringify(thingy)}`);
    }
    function translateInsertDelete(thingy) {
      if (!useQuads)
        throw new Error("INSERT/DELETE operations are only supported with quads option enabled");
      let deleteTriples = [];
      let insertTriples = [];
      let where;
      if (thingy.delete)
        deleteTriples = util_1.default.flatten(thingy.delete.map((input) => translateUpdateTriplesBlock(input, thingy.graph)));
      if (thingy.insert)
        insertTriples = util_1.default.flatten(thingy.insert.map((input) => translateUpdateTriplesBlock(input, thingy.graph)));
      if (thingy.where && thingy.where.length > 0) {
        where = translateGraphPattern({ type: "group", patterns: thingy.where });
        const use = thingy.using;
        if (use)
          where = factory.createFrom(where, use.default, use.named);
        else if (thingy.graph)
          where = recurseGraph(where, thingy.graph);
      } else if (thingy.updateType === "deletewhere" && deleteTriples.length > 0) {
        where = factory.createBgp(deleteTriples);
      }
      return factory.createDeleteInsert(deleteTriples.length > 0 ? deleteTriples : void 0, insertTriples.length > 0 ? insertTriples : void 0, where);
    }
    function translateUpdateTriplesBlock(thingy, graph) {
      let currentGraph = graph;
      if (thingy.type === "graph")
        currentGraph = thingy.name;
      let currentTriples = thingy.triples;
      if (currentGraph)
        currentTriples = currentTriples.map((triple) => Object.assign(triple, { graph: currentGraph }));
      return currentTriples.map(translateQuad);
    }
    function translateUpdateGraph(thingy) {
      let source;
      if (util_1.default.isSimpleTerm(thingy.graph))
        source = thingy.graph;
      else if (thingy.graph.all)
        source = "ALL";
      else if (thingy.graph.default)
        source = "DEFAULT";
      else if (thingy.graph.named)
        source = "NAMED";
      else
        source = thingy.graph.name;
      switch (thingy.type) {
        case "clear":
          return factory.createClear(source, thingy.silent);
        case "create":
          return factory.createCreate(source, thingy.silent);
        case "drop":
          return factory.createDrop(source, thingy.silent);
      }
    }
    function translateUpdateGraphLoad(thingy) {
      return factory.createLoad(thingy.source, thingy.destination, thingy.silent);
    }
    function translateUpdateGraphShortcut(thingy) {
      const source = thingy.source.default ? "DEFAULT" : thingy.source.name;
      const destination = thingy.destination.default ? "DEFAULT" : thingy.destination.name;
      switch (thingy.type) {
        case "copy":
          return factory.createCopy(source, destination, thingy.silent);
        case "move":
          return factory.createMove(source, destination, thingy.silent);
        case "add":
          return factory.createAdd(source, destination, thingy.silent);
      }
    }
    function translateBlankNodesToVariables(res) {
      const blankToVariableMapping = {};
      const variablesRaw = Array.from(variables).reduce((acc, variable) => {
        acc[variable] = true;
        return acc;
      }, {});
      return util_1.default.mapOperation(res, {
        [Algebra.types.DELETE_INSERT]: (op) => {
          return {
            result: factory.createDeleteInsert(op.delete, op.insert, op.where && translateBlankNodesToVariables(op.where)),
            recurse: false
          };
        },
        [Algebra.types.PATH]: (op, factory2) => {
          return {
            result: factory2.createPath(blankToVariable(op.subject), op.predicate, blankToVariable(op.object), blankToVariable(op.graph)),
            recurse: false
          };
        },
        [Algebra.types.PATTERN]: (op, factory2) => {
          return {
            result: factory2.createPattern(blankToVariable(op.subject), blankToVariable(op.predicate), blankToVariable(op.object), blankToVariable(op.graph)),
            recurse: false
          };
        },
        [Algebra.types.CONSTRUCT]: (op) => {
          return {
            result: factory.createConstruct(translateBlankNodesToVariables(op.input), op.template),
            recurse: false
          };
        }
      });
      function blankToVariable(term) {
        if (term.termType === "BlankNode") {
          let variable = blankToVariableMapping[term.value];
          if (!variable) {
            variable = util_1.default.createUniqueVariable(term.value, variablesRaw, factory.dataFactory);
            variablesRaw[variable.value] = true;
            blankToVariableMapping[term.value] = variable;
          }
          return variable;
        }
        return term;
      }
    }
  }
});

// ../../lipdjs/node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "../../lipdjs/node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// ../../lipdjs/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../lipdjs/node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/utils.js
var require_utils = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils = require_utils();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update8(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils = require_utils();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update8(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var assert = require_minimalistic_assert();
    function Hmac(hash2, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash2, key, enc);
      this.Hash = hash2;
      this.blockSize = hash2.blockSize / 8;
      this.outSize = hash2.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
      for (i = 0; i < key.length; i++)
        key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++)
        key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update8(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// ../../lipdjs/node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "../../lipdjs/node_modules/hash.js/lib/hash.js"(exports) {
    var hash2 = exports;
    hash2.utils = require_utils();
    hash2.common = require_common();
    hash2.sha = require_sha();
    hash2.ripemd = require_ripemd();
    hash2.hmac = require_hmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  }
});

// ../../lipdjs/node_modules/rdf-isomorphic/lib/RdfIsomorphic.js
var require_RdfIsomorphic = __commonJS({
  "../../lipdjs/node_modules/rdf-isomorphic/lib/RdfIsomorphic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTermGrounded = exports.termToSignature = exports.quadToSignature = exports.sha1hex = exports.hashTerm = exports.hashTerms = exports.getGraphBlankNodes = exports.uniqGraph = exports.deindexGraph = exports.indexGraph = exports.getQuadsWithoutBlankNodes = exports.getQuadsWithBlankNodes = exports.hasValue = exports.hashValues = exports.getBijectionInner = exports.getBijection = exports.isomorphic = void 0;
    var hash_js_1 = require_hash();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    function isomorphic(graphA, graphB) {
      return !!getBijection(graphA, graphB);
    }
    exports.isomorphic = isomorphic;
    function getBijection(graphA, graphB) {
      const nonBlankIndexA = indexGraph(getQuadsWithoutBlankNodes(graphA));
      const nonBlankIndexB = indexGraph(getQuadsWithoutBlankNodes(graphB));
      if (Object.keys(nonBlankIndexA).length !== Object.keys(nonBlankIndexB).length) {
        return null;
      }
      for (const key in nonBlankIndexA) {
        if (nonBlankIndexA[key] !== nonBlankIndexB[key]) {
          return null;
        }
      }
      const blankQuadsA = uniqGraph(getQuadsWithBlankNodes(graphA));
      const blankQuadsB = uniqGraph(getQuadsWithBlankNodes(graphB));
      const blankNodesA = getGraphBlankNodes(graphA);
      const blankNodesB = getGraphBlankNodes(graphB);
      return getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB);
    }
    exports.getBijection = getBijection;
    function getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB, groundedHashesA, groundedHashesB) {
      if (!groundedHashesA) {
        groundedHashesA = {};
      }
      if (!groundedHashesB) {
        groundedHashesB = {};
      }
      const [hashesA, ungroundedHashesA] = hashTerms(blankQuadsA, blankNodesA, groundedHashesA);
      const [hashesB, ungroundedHashesB] = hashTerms(blankQuadsB, blankNodesB, groundedHashesB);
      if (Object.keys(hashesA).length !== Object.keys(hashesB).length) {
        return null;
      }
      for (const hashKeyA in hashesA) {
        if (!hasValue(hashesB, hashesA[hashKeyA])) {
          return null;
        }
      }
      let bijection = {};
      for (const blankNodeA of blankNodesA) {
        const blankNodeAString = rdf_string_1.termToString(blankNodeA);
        const blankNodeAHash = ungroundedHashesA[blankNodeAString];
        for (const blankNodeBString in ungroundedHashesB) {
          if (ungroundedHashesB[blankNodeBString] === blankNodeAHash) {
            bijection[blankNodeAString] = blankNodeBString;
            delete ungroundedHashesB[blankNodeBString];
            break;
          }
        }
      }
      if (!arraysEqual(Object.keys(bijection).sort(), blankNodesA.map(rdf_string_1.termToString).sort()) || !arraysEqual(hashValues(bijection).sort(), blankNodesB.map(rdf_string_1.termToString).sort())) {
        bijection = null;
        for (const blankNodeA of blankNodesA) {
          const blankNodeAString = rdf_string_1.termToString(blankNodeA);
          if (!hashesA[blankNodeAString]) {
            for (const blankNodeB of blankNodesB) {
              const blankNodeBString = rdf_string_1.termToString(blankNodeB);
              if (!hashesB[blankNodeBString]) {
                if (ungroundedHashesA[blankNodeAString] === ungroundedHashesB[blankNodeBString]) {
                  const hash2 = sha1hex(blankNodeAString);
                  bijection = getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB, Object.assign(Object.assign({}, hashesA), { [blankNodeAString]: hash2 }), Object.assign(Object.assign({}, hashesB), { [blankNodeBString]: hash2 }));
                }
              }
            }
          }
        }
      }
      return bijection;
    }
    exports.getBijectionInner = getBijectionInner;
    function arraysEqual(array1, array2) {
      if (array1.length !== array2.length) {
        return false;
      }
      for (let i = array1.length; i--; ) {
        if (array1[i] !== array2[i]) {
          return false;
        }
      }
      return true;
    }
    function hashValues(hash2) {
      const arr = [];
      for (const e in hash2) {
        arr.push(hash2[e]);
      }
      return arr;
    }
    exports.hashValues = hashValues;
    function hasValue(hash2, value) {
      for (const hashValue in hash2) {
        if (hash2[hashValue] === value) {
          return true;
        }
      }
      return false;
    }
    exports.hasValue = hasValue;
    function getQuadsWithBlankNodes(graph) {
      return graph.filter((quad) => rdf_terms_1.someTerms(quad, (value) => {
        return value.termType === "BlankNode" || value.termType === "Quad" && rdf_terms_1.getTermsNested(value).some((term) => term.termType === "BlankNode");
      }));
    }
    exports.getQuadsWithBlankNodes = getQuadsWithBlankNodes;
    function getQuadsWithoutBlankNodes(graph) {
      return graph.filter((quad) => rdf_terms_1.everyTerms(quad, (value) => {
        return value.termType !== "BlankNode" && !(value.termType === "Quad" && rdf_terms_1.getTermsNested(value).some((term) => term.termType === "BlankNode"));
      }));
    }
    exports.getQuadsWithoutBlankNodes = getQuadsWithoutBlankNodes;
    function indexGraph(graph) {
      const index = {};
      for (const quad of graph) {
        index[JSON.stringify(rdf_string_1.quadToStringQuad(quad))] = true;
      }
      return index;
    }
    exports.indexGraph = indexGraph;
    function deindexGraph(indexedGraph) {
      return Object.keys(indexedGraph).map((str) => rdf_string_1.stringQuadToQuad(JSON.parse(str)));
    }
    exports.deindexGraph = deindexGraph;
    function uniqGraph(graph) {
      return deindexGraph(indexGraph(graph));
    }
    exports.uniqGraph = uniqGraph;
    function getGraphBlankNodes(graph) {
      return rdf_terms_1.uniqTerms(graph.map((quad) => rdf_terms_1.getBlankNodes(rdf_terms_1.getTermsNested(quad))).reduce((acc, val) => acc.concat(val), []));
    }
    exports.getGraphBlankNodes = getGraphBlankNodes;
    function hashTerms(quads, terms, groundedHashes) {
      const hashes = Object.assign({}, groundedHashes);
      const ungroundedHashes = {};
      let hashNeeded = true;
      while (hashNeeded) {
        const initialGroundedNodesCount = Object.keys(hashes).length;
        for (const term of terms) {
          const termString = rdf_string_1.termToString(term);
          if (!hashes[termString]) {
            const [grounded, hash2] = hashTerm(term, quads, hashes);
            if (grounded) {
              hashes[termString] = hash2;
            }
            ungroundedHashes[termString] = hash2;
          }
        }
        const uniques = {};
        for (const termKey in ungroundedHashes) {
          const hash2 = ungroundedHashes[termKey];
          if (uniques[hash2] === void 0) {
            uniques[hash2] = termKey;
          } else {
            uniques[hash2] = false;
          }
        }
        for (const hash2 in uniques) {
          const value = uniques[hash2];
          if (value) {
            hashes[value] = hash2;
          }
        }
        hashNeeded = initialGroundedNodesCount !== Object.keys(hashes).length;
      }
      return [hashes, ungroundedHashes];
    }
    exports.hashTerms = hashTerms;
    function hashTerm(term, quads, hashes) {
      const quadSignatures = [];
      let grounded = true;
      for (const quad of quads) {
        const terms = rdf_terms_1.getTermsNested(quad);
        if (terms.some((quadTerm) => quadTerm.equals(term))) {
          quadSignatures.push(quadToSignature(quad, hashes, term));
          for (const quadTerm of terms) {
            if (!isTermGrounded(quadTerm, hashes) && !quadTerm.equals(term)) {
              grounded = false;
            }
          }
        }
      }
      const hash2 = sha1hex(quadSignatures.sort().join(""));
      return [grounded, hash2];
    }
    exports.hashTerm = hashTerm;
    function sha1hex(data) {
      return hash_js_1.sha1().update(data).digest("hex");
    }
    exports.sha1hex = sha1hex;
    function quadToSignature(quad, hashes, term) {
      return rdf_terms_1.getTerms(quad).map((quadTerm) => termToSignature(quadTerm, hashes, term)).join("|");
    }
    exports.quadToSignature = quadToSignature;
    function termToSignature(term, hashes, target) {
      if (term.equals(target)) {
        return "@self";
      } else if (term.termType === "BlankNode") {
        return hashes[rdf_string_1.termToString(term)] || "@blank";
      } else if (term.termType === "Quad") {
        return `<${quadToSignature(term, hashes, target)}>`;
      } else {
        return rdf_string_1.termToString(term);
      }
    }
    exports.termToSignature = termToSignature;
    function isTermGrounded(term, hashes) {
      return term.termType !== "BlankNode" && !(term.termType === "Quad" && rdf_terms_1.getTermsNested(term).some((subTerm) => !isTermGrounded(subTerm, hashes))) || !!hashes[rdf_string_1.termToString(term)];
    }
    exports.isTermGrounded = isTermGrounded;
  }
});

// ../../lipdjs/node_modules/rdf-isomorphic/index.js
var require_rdf_isomorphic = __commonJS({
  "../../lipdjs/node_modules/rdf-isomorphic/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_RdfIsomorphic(), exports);
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/lib/sparql.js
var require_sparql2 = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/lib/sparql.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toSparqlJs = exports.toSparql = void 0;
    var rdf_isomorphic_1 = require_rdf_isomorphic();
    var rdf_string_1 = require_rdf_string();
    var sparqljs_1 = require_sparql();
    var Algebra = __importStar(require_algebra());
    var factory_1 = __importDefault(require_factory());
    var util_1 = __importDefault(require_util());
    var types = Algebra.types;
    var eTypes = Algebra.expressionTypes;
    var context;
    var factory = new factory_1.default();
    function toSparql(op, options = {}) {
      let generator = new sparqljs_1.Generator(options);
      return generator.stringify(toSparqlJs(op));
    }
    exports.toSparql = toSparql;
    function toSparqlJs(op) {
      resetContext();
      op = removeQuads(op);
      let result = translateOperation(op);
      if (result.type === "group")
        return result.patterns[0];
      return result;
    }
    exports.toSparqlJs = toSparqlJs;
    function resetContext() {
      context = { project: false, extend: [], group: [], aggregates: [], order: [] };
    }
    function translateOperation(op) {
      if (op.type !== types.EXTEND && op.type !== types.ORDER_BY && op.type !== types.GRAPH)
        context.project = false;
      switch (op.type) {
        case types.EXPRESSION:
          return translateExpression(op);
        case types.ASK:
          return translateProject(op, types.ASK);
        case types.BGP:
          return translateBgp(op);
        case types.CONSTRUCT:
          return translateConstruct(op);
        case types.DESCRIBE:
          return translateProject(op, types.DESCRIBE);
        case types.DISTINCT:
          return translateDistinct(op);
        case types.EXTEND:
          return translateExtend(op);
        case types.FROM:
          return translateFrom(op);
        case types.FILTER:
          return translateFilter(op);
        case types.GRAPH:
          return translateGraph(op);
        case types.GROUP:
          return translateGroup(op);
        case types.JOIN:
          return translateJoin(op);
        case types.LEFT_JOIN:
          return translateLeftJoin(op);
        case types.MINUS:
          return translateMinus(op);
        case types.NOP:
          return {};
        case types.ORDER_BY:
          return translateOrderBy(op);
        case types.PATH:
          return translatePath(op);
        case types.PATTERN:
          return translatePattern(op);
        case types.PROJECT:
          return translateProject(op, types.PROJECT);
        case types.REDUCED:
          return translateReduced(op);
        case types.SERVICE:
          return translateService(op);
        case types.SLICE:
          return translateSlice(op);
        case types.UNION:
          return translateUnion(op);
        case types.VALUES:
          return translateValues(op);
        case types.COMPOSITE_UPDATE:
          return translateCompositeUpdate(op);
        case types.DELETE_INSERT:
          return translateDeleteInsert(op);
        case types.LOAD:
          return translateLoad(op);
        case types.CLEAR:
          return translateClear(op);
        case types.CREATE:
          return translateCreate(op);
        case types.DROP:
          return translateDrop(op);
        case types.ADD:
          return translateAdd(op);
        case types.MOVE:
          return translateMove(op);
        case types.COPY:
          return translateCopy(op);
      }
      throw new Error(`Unknown Operation type ${op.type}`);
    }
    function translateExpression(expr) {
      switch (expr.expressionType) {
        case eTypes.AGGREGATE:
          return translateAggregateExpression(expr);
        case eTypes.EXISTENCE:
          return translateExistenceExpression(expr);
        case eTypes.NAMED:
          return translateNamedExpression(expr);
        case eTypes.OPERATOR:
          return translateOperatorExpression(expr);
        case eTypes.TERM:
          return translateTermExpression(expr);
        case eTypes.WILDCARD:
          return translateWildcardExpression(expr);
      }
      throw new Error(`Unknown Expression Operation type ${expr.expressionType}`);
    }
    function translatePathComponent(path) {
      switch (path.type) {
        case types.ALT:
          return translateAlt(path);
        case types.INV:
          return translateInv(path);
        case types.LINK:
          return translateLink(path);
        case types.NPS:
          return translateNps(path);
        case types.ONE_OR_MORE_PATH:
          return translateOneOrMorePath(path);
        case types.SEQ:
          return translateSeq(path);
        case types.ZERO_OR_MORE_PATH:
          return translateZeroOrMorePath(path);
        case types.ZERO_OR_ONE_PATH:
          return translateZeroOrOnePath(path);
      }
      throw new Error(`Unknown Path type ${path.type}`);
    }
    function translateTerm(term) {
      return (0, rdf_string_1.termToString)(term);
    }
    function translateAggregateExpression(expr) {
      const result = {
        expression: translateExpression(expr.expression),
        type: "aggregate",
        aggregation: expr.aggregator,
        distinct: expr.distinct
      };
      if (expr.separator)
        result.separator = expr.separator;
      return result;
    }
    function translateExistenceExpression(expr) {
      return {
        type: "operation",
        operator: expr.not ? "notexists" : "exists",
        args: [{
          type: "group",
          patterns: util_1.default.flatten([translateOperation(expr.input)])
        }]
      };
    }
    function translateNamedExpression(expr) {
      return {
        type: "functionCall",
        // Wrong typings
        function: expr.name,
        args: expr.args.map(translateExpression)
      };
    }
    function translateOperatorExpression(expr) {
      if (expr.operator === "desc") {
        const result2 = { expression: translateExpression(expr.args[0]) };
        result2.descending = true;
        return result2;
      }
      const result = {
        type: "operation",
        operator: expr.operator,
        args: expr.args.map(translateExpression)
      };
      if (result.operator === "in" || result.operator === "notin")
        result.args = [result.args[0]].concat([result.args.slice(1)]);
      return result;
    }
    function translateTermExpression(expr) {
      return expr.term;
    }
    function translateWildcardExpression(expr) {
      return expr.wildcard;
    }
    function arrayToPattern(input) {
      if (!Array.isArray(input))
        return input;
      if (input.length === 1)
        return input[0];
      return {
        type: "group",
        patterns: input
      };
    }
    function translateBoundAggregate(op) {
      return op;
    }
    function translateBgp(op) {
      let patterns = op.patterns.map(translatePattern);
      if (patterns.length === 0)
        return null;
      return {
        type: "bgp",
        triples: patterns
      };
    }
    function translateConstruct(op) {
      return {
        type: "query",
        prefixes: {},
        queryType: "CONSTRUCT",
        template: op.template.map(translatePattern),
        where: util_1.default.flatten([
          translateOperation(op.input)
        ])
      };
    }
    function translateDistinct(op) {
      let result = translateOperation(op.input);
      result.patterns[0].distinct = true;
      return result;
    }
    function translateExtend(op) {
      if (context.project) {
        context.extend.push(op);
        return translateOperation(op.input);
      }
      return util_1.default.flatten([
        translateOperation(op.input),
        {
          type: "bind",
          variable: op.variable,
          expression: translateExpression(op.expression)
        }
      ]);
    }
    function translateFrom(op) {
      const result = translateOperation(op.input);
      let obj = result;
      if (result.type === "group") {
        obj = result.patterns[0];
      }
      obj.from = {
        default: op.default,
        named: op.named
      };
      return result;
    }
    function translateFilter(op) {
      return {
        type: "group",
        patterns: util_1.default.flatten([
          translateOperation(op.input),
          { type: "filter", expression: translateExpression(op.expression) }
        ])
      };
    }
    function translateGraph(op) {
      return {
        type: "graph",
        patterns: util_1.default.flatten([translateOperation(op.input)]),
        name: op.name
      };
    }
    function translateGroup(op) {
      const input = translateOperation(op.input);
      const aggs = op.aggregates.map(translateBoundAggregate);
      context.aggregates.push(...aggs);
      context.group.push(...op.variables);
      return input;
    }
    function translateJoin(op) {
      const arr = util_1.default.flatten(op.input.map(translateOperation));
      return arr.reduce((result, val) => {
        if (val.type !== "bgp" || result.length == 0 || result[result.length - 1].type !== "bgp") {
          result.push(val);
        } else {
          result[result.length - 1].triples.push(...val.triples);
        }
        return result;
      }, []);
    }
    function translateLeftJoin(op) {
      const leftjoin = {
        type: "optional",
        patterns: [
          translateOperation(op.input[1])
        ]
      };
      if (op.expression) {
        leftjoin.patterns.push({
          type: "filter",
          expression: translateExpression(op.expression)
        });
      }
      leftjoin.patterns = util_1.default.flatten(leftjoin.patterns);
      return util_1.default.flatten([
        translateOperation(op.input[0]),
        leftjoin
      ]);
    }
    function translateMinus(op) {
      let patterns = translateOperation(op.input[1]);
      if (patterns.type === "group")
        patterns = patterns.patterns;
      if (!Array.isArray(patterns))
        patterns = [patterns];
      return util_1.default.flatten([
        translateOperation(op.input[0]),
        {
          type: "minus",
          patterns
        }
      ]);
    }
    function translateOrderBy(op) {
      context.order.push(...op.expressions);
      return translateOperation(op.input);
    }
    function translatePath(op) {
      return {
        type: "bgp",
        triples: [{
          subject: op.subject,
          predicate: translatePathComponent(op.predicate),
          object: op.object
        }]
      };
    }
    function translatePattern(op) {
      return {
        subject: op.subject,
        predicate: op.predicate,
        object: op.object
      };
    }
    function replaceAggregatorVariables(s, map2) {
      let st = util_1.default.isSimpleTerm(s) ? translateTerm(s) : s;
      if (typeof st === "string") {
        if (map2[st])
          return map2[st];
      } else if (Array.isArray(s)) {
        s = s.map((e) => replaceAggregatorVariables(e, map2));
      } else {
        for (let key of Object.keys(s))
          s[key] = replaceAggregatorVariables(s[key], map2);
      }
      return s;
    }
    function translateProject(op, type) {
      const result = {
        type: "query",
        prefixes: {}
      };
      const select = result;
      let variables;
      if (type === types.PROJECT) {
        result.queryType = "SELECT";
        variables = op.variables;
      } else if (type === types.ASK) {
        result.queryType = "ASK";
      } else if (type === types.DESCRIBE) {
        result.queryType = "DESCRIBE";
        variables = op.terms;
      }
      const extend = context.extend;
      const group = context.group;
      const aggregates = context.aggregates;
      const order = context.order;
      resetContext();
      context.project = true;
      let input = util_1.default.flatten([translateOperation(op.input)]);
      if (input.length === 1 && input[0].type === "group")
        input = input[0].patterns;
      result.where = input;
      let aggregators = {};
      for (let agg of context.aggregates)
        aggregators[translateTerm(agg.variable)] = translateExpression(agg);
      let extensions = {};
      for (let i = context.extend.length - 1; i >= 0; --i) {
        let e = context.extend[i];
        extensions[translateTerm(e.variable)] = replaceAggregatorVariables(translateExpression(e.expression), aggregators);
      }
      if (context.group.length > 0)
        select.group = context.group.map((variable) => {
          let v = translateTerm(variable);
          if (extensions[v]) {
            let result2 = extensions[v];
            delete extensions[v];
            return {
              variable,
              expression: result2
            };
          }
          return { expression: variable };
        });
      if (context.order.length > 0)
        select.order = context.order.map(translateOperation).map((o) => o.descending ? o : { expression: o });
      if (variables) {
        select.variables = variables.map((term) => {
          let v = translateTerm(term);
          if (extensions[v]) {
            let result2 = extensions[v];
            delete extensions[v];
            return {
              variable: term,
              expression: result2
            };
          }
          return term;
        });
        if (select.variables.length === 0)
          select.variables = [new sparqljs_1.Wildcard()];
      }
      const extensionEntries = Object.entries(extensions);
      if (extensionEntries.length > 0) {
        select.where = select.where || [];
        for (const [key, value] of extensionEntries) {
          select.where.push({
            type: "bind",
            variable: (0, rdf_string_1.stringToTerm)(key),
            expression: value
          });
        }
      }
      if (result.where.length > 0 && result.where[result.where.length - 1].type === "filter") {
        const filter3 = result.where[result.where.length - 1];
        if (objectContainsValues(filter3, Object.keys(aggregators))) {
          select.having = util_1.default.flatten([replaceAggregatorVariables(filter3.expression, aggregators)]);
          result.where.splice(-1);
        }
      }
      context.extend = extend;
      context.group = group;
      context.aggregates = aggregates;
      context.order = order;
      return { type: "group", patterns: [select] };
    }
    function objectContainsValues(o, vals) {
      if (util_1.default.isSimpleTerm(o))
        return vals.indexOf(translateTerm(o)) >= 0;
      if (Array.isArray(o))
        return o.some((e) => objectContainsValues(e, vals));
      if (o === Object(o))
        return Object.keys(o).some((key) => objectContainsValues(o[key], vals));
      return vals.indexOf(o) >= 0;
    }
    function translateReduced(op) {
      let result = translateOperation(op.input);
      result.patterns[0].reduced = true;
      return result;
    }
    function translateService(op) {
      let patterns = translateOperation(op.input);
      if (patterns.type === "group")
        patterns = patterns.patterns;
      if (!Array.isArray(patterns))
        patterns = [patterns];
      return {
        type: "service",
        // Typings are wrong, name can also be a variable
        name: op.name,
        silent: op.silent,
        patterns
      };
    }
    function translateSlice(op) {
      let result = translateOperation(op.input);
      let obj = result;
      if (result.type && result.type === "group")
        obj = result.patterns[0];
      if (op.start !== 0)
        obj.offset = op.start;
      if (op.length !== void 0)
        obj.limit = op.length;
      return result;
    }
    function translateUnion(op) {
      return {
        type: "union",
        patterns: op.input.map(translateOperation).map(arrayToPattern)
      };
    }
    function translateValues(op) {
      return {
        type: "values",
        values: op.bindings.map((binding) => {
          let result = {};
          for (let v of op.variables) {
            let s = `?${v.value}`;
            if (binding[s])
              result[s] = binding[s];
            else
              result[s] = void 0;
          }
          return result;
        })
      };
    }
    function translateAlt(path) {
      const mapped = path.input.map(translatePathComponent);
      if (mapped.every((entry) => "pathType" in entry && entry.pathType === "!")) {
        return {
          type: "path",
          pathType: "!",
          items: [{
            type: "path",
            pathType: "|",
            items: util_1.default.flatten(mapped.map((entry) => entry.items))
          }]
        };
      }
      return {
        type: "path",
        pathType: "|",
        items: mapped
      };
    }
    function translateInv(path) {
      if (path.path.type === types.NPS) {
        const inv = path.path.iris.map((iri) => {
          return {
            type: "path",
            pathType: "^",
            items: [iri]
          };
        });
        if (inv.length <= 1)
          return {
            type: "path",
            pathType: "!",
            items: inv
          };
        return {
          type: "path",
          pathType: "!",
          items: [{
            type: "path",
            pathType: "|",
            items: inv
          }]
        };
      }
      return {
        type: "path",
        pathType: "^",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateLink(path) {
      return path.iri;
    }
    function translateNps(path) {
      if (path.iris.length <= 1)
        return {
          type: "path",
          pathType: "!",
          items: path.iris
        };
      return {
        type: "path",
        pathType: "!",
        items: [{
          type: "path",
          pathType: "|",
          items: path.iris
        }]
      };
    }
    function translateOneOrMorePath(path) {
      return {
        type: "path",
        pathType: "+",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateSeq(path) {
      return {
        type: "path",
        pathType: "/",
        items: path.input.map(translatePathComponent)
      };
    }
    function translateZeroOrMorePath(path) {
      return {
        type: "path",
        pathType: "*",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateZeroOrOnePath(path) {
      return {
        type: "path",
        // Typings are missing this path
        pathType: "?",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateCompositeUpdate(op) {
      const updates = op.updates.map((update8) => {
        const result = translateOperation(update8);
        return result.updates[0];
      });
      return { prefixes: {}, type: "update", updates };
    }
    function translateDeleteInsert(op) {
      var _a;
      let where = op.where;
      let use = void 0;
      if (where && where.type === types.FROM) {
        let from = where;
        where = from.input;
        use = { default: from.default, named: from.named };
      }
      const updates = [{
        updateType: "insertdelete",
        delete: convertUpdatePatterns(op.delete || []),
        insert: convertUpdatePatterns(op.insert || [])
      }];
      if (use)
        updates[0].using = use;
      if (!where || where.type === types.BGP && where.patterns.length === 0)
        updates[0].where = [];
      else {
        const graphs = [];
        let result = translateOperation(removeQuadsRecursive(where, graphs));
        if (result.type === "group")
          updates[0].where = result.patterns;
        else
          updates[0].where = [result];
        if (graphs.length > 0) {
          if (graphs.length !== 1)
            throw new Error("This is unexpected and might indicate an error in graph handling for updates.");
          if (((_a = graphs[0]) === null || _a === void 0 ? void 0 : _a.value) !== "")
            updates[0].where = [{ type: "graph", patterns: updates[0].where, name: graphs[0] }];
        }
      }
      if (!op.delete && !op.where) {
        updates[0].updateType = "insert";
        delete updates[0].delete;
        delete updates[0].where;
      } else if (!op.insert && !op.where) {
        delete updates[0].insert;
        delete updates[0].where;
        if (op.delete.some((pattern) => pattern.subject.termType === "Variable" || pattern.predicate.termType === "Variable" || pattern.object.termType === "Variable"))
          updates[0].updateType = "deletewhere";
        else
          updates[0].updateType = "delete";
      } else if (!op.insert && op.where && op.where.type === "bgp") {
        if ((0, rdf_isomorphic_1.isomorphic)(op.delete, op.where.patterns)) {
          delete updates[0].where;
          updates[0].updateType = "deletewhere";
        }
      }
      return { prefixes: {}, type: "update", updates };
    }
    function translateLoad(op) {
      const updates = [{ type: "load", silent: Boolean(op.silent), source: op.source }];
      if (op.destination)
        updates[0].destination = op.destination;
      return { prefixes: {}, type: "update", updates };
    }
    function translateClear(op) {
      return translateClearCreateDrop(op, "clear");
    }
    function translateCreate(op) {
      return translateClearCreateDrop(op, "create");
    }
    function translateDrop(op) {
      return translateClearCreateDrop(op, "drop");
    }
    function translateClearCreateDrop(op, type) {
      const updates = [{ type, silent: Boolean(op.silent) }];
      if (op.source === "DEFAULT")
        updates[0].graph = { default: true };
      else if (op.source === "NAMED")
        updates[0].graph = { named: true };
      else if (op.source === "ALL")
        updates[0].graph = { all: true };
      else
        updates[0].graph = { type: "graph", name: op.source };
      return { prefixes: {}, type: "update", updates };
    }
    function translateAdd(op) {
      return translateUpdateGraphShortcut(op, "add");
    }
    function translateMove(op) {
      return translateUpdateGraphShortcut(op, "move");
    }
    function translateCopy(op) {
      return translateUpdateGraphShortcut(op, "copy");
    }
    function translateUpdateGraphShortcut(op, type) {
      const updates = [{ type, silent: Boolean(op.silent) }];
      updates[0].source = op.source === "DEFAULT" ? { type: "graph", default: true } : { type: "graph", name: op.source };
      updates[0].destination = op.destination === "DEFAULT" ? { type: "graph", default: true } : { type: "graph", name: op.destination };
      return { prefixes: {}, type: "update", updates };
    }
    function convertUpdatePatterns(patterns) {
      if (!patterns)
        return [];
      const graphs = {};
      patterns.forEach((pattern) => {
        const graph = pattern.graph.value;
        if (!graphs[graph])
          graphs[graph] = [];
        graphs[graph].push(pattern);
      });
      return Object.keys(graphs).map((graph) => {
        if (graph === "")
          return { type: "bgp", triples: graphs[graph].map(translatePattern) };
        return { type: "graph", triples: graphs[graph].map(translatePattern), name: graphs[graph][0].graph };
      });
    }
    function removeQuads(op) {
      return removeQuadsRecursive(op, []);
    }
    function removeQuadsRecursive(op, graphs) {
      if (Array.isArray(op))
        return op.map((sub) => removeQuadsRecursive(sub, graphs));
      if (!op.type)
        return op;
      if (op.type === types.DELETE_INSERT)
        return op;
      if ((op.type === types.PATTERN || op.type === types.PATH) && op.graph) {
        graphs.push(op.graph);
        if (op.graph.name !== "")
          return op.type === types.PATTERN ? factory.createPattern(op.subject, op.predicate, op.object) : factory.createPath(op.subject, op.predicate, op.object);
        return op;
      }
      const result = {};
      const keyGraphs = {};
      const globalNames = {};
      for (let key of Object.keys(op)) {
        const newGraphs = [];
        result[key] = removeQuadsRecursive(op[key], newGraphs);
        if (newGraphs.length > 0) {
          keyGraphs[key] = newGraphs;
          for (const graph of newGraphs) {
            globalNames[graph.value] = graph;
          }
        }
      }
      const graphNameSet = Object.keys(globalNames);
      if (graphNameSet.length > 0) {
        if (graphNameSet.length === 1 && ![types.PROJECT, types.SERVICE].includes(op.type))
          graphs.push(globalNames[graphNameSet[0]]);
        else if (op.type === types.BGP) {
          return splitBgpToGraphs(op, keyGraphs.patterns);
        } else {
          for (let key of Object.keys(keyGraphs)) {
            const value = result[key];
            if (Array.isArray(value))
              result[key] = value.map((child, idx) => keyGraphs[key][0].value === "" ? child : factory.createGraph(child, keyGraphs[key][idx]));
            else if (keyGraphs[key][0].value !== "")
              result[key] = factory.createGraph(value, keyGraphs[key][0]);
          }
        }
      }
      return result;
    }
    function splitBgpToGraphs(op, graphs) {
      var _a;
      const graphPatterns = {};
      for (let i = 0; i < op.patterns.length; ++i) {
        const pattern = op.patterns[i];
        const graphName = graphs[i].value;
        graphPatterns[graphName] = (_a = graphPatterns[graphName]) !== null && _a !== void 0 ? _a : { patterns: [], graph: graphs[i] };
        graphPatterns[graphName].patterns.push(pattern);
      }
      let children = [];
      for (const [graphName, { patterns, graph }] of Object.entries(graphPatterns)) {
        const bgp = factory.createBgp(patterns);
        children.push(graphName === "" ? bgp : factory.createGraph(bgp, graph));
      }
      let join3 = children[0];
      for (let i = 1; i < children.length; ++i)
        join3 = factory.createJoin([join3, children[i]]);
      return join3;
    }
  }
});

// ../../lipdjs/node_modules/sparqlalgebrajs/index.js
var require_sparqlalgebrajs = __commonJS({
  "../../lipdjs/node_modules/sparqlalgebrajs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = exports.toSparqlJs = exports.toSparql = exports.Factory = exports.Algebra = exports.translate = void 0;
    var sparqlAlgebra_1 = __importDefault(require_sparqlAlgebra());
    exports.translate = sparqlAlgebra_1.default;
    var Algebra = __importStar(require_algebra());
    exports.Algebra = Algebra;
    var factory_1 = __importDefault(require_factory());
    exports.Factory = factory_1.default;
    var sparql_1 = require_sparql2();
    Object.defineProperty(exports, "toSparql", { enumerable: true, get: function() {
      return sparql_1.toSparql;
    } });
    Object.defineProperty(exports, "toSparqlJs", { enumerable: true, get: function() {
      return sparql_1.toSparqlJs;
    } });
    var util_1 = __importDefault(require_util());
    exports.Util = util_1.default;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Expressions.js
var require_Expressions = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Expressions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asTermType = void 0;
    function asTermType(type) {
      if (type === "namedNode" || type === "literal" || type === "blankNode" || type === "quad") {
        return type;
      }
      return void 0;
    }
    exports.asTermType = asTermType;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Variable.js
var require_Variable2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var types_1 = require_lib4();
    var Variable2 = class {
      constructor(name) {
        this.expressionType = types_1.ExpressionType.Variable;
        this.name = name;
      }
    };
    exports.Variable = Variable2;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Consts.js
var require_Consts = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Consts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlOperator = exports.TypeURL = exports.typedLiteral = exports.TypeAlias = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var TypeAlias;
    (function(TypeAlias2) {
      TypeAlias2["SPARQL_NUMERIC"] = "SPARQL_NUMERIC";
      TypeAlias2["SPARQL_STRINGLY"] = "SPARQL_STRINGLY";
    })(TypeAlias || (exports.TypeAlias = TypeAlias = {}));
    var DF = new rdf_data_factory_1.DataFactory();
    function typedLiteral(value, type) {
      return DF.literal(value, DF.namedNode(type));
    }
    exports.typedLiteral = typedLiteral;
    var TypeURL;
    (function(TypeURL2) {
      TypeURL2["XSD_ANY_URI"] = "http://www.w3.org/2001/XMLSchema#anyURI";
      TypeURL2["XSD_STRING"] = "http://www.w3.org/2001/XMLSchema#string";
      TypeURL2["RDF_LANG_STRING"] = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
      TypeURL2["XSD_BOOLEAN"] = "http://www.w3.org/2001/XMLSchema#boolean";
      TypeURL2["XSD_DATE_TIME"] = "http://www.w3.org/2001/XMLSchema#dateTime";
      TypeURL2["XSD_DATE_TIME_STAMP"] = "http://www.w3.org/2001/XMLSchema#dateTimeStamp";
      TypeURL2["XSD_DATE"] = "http://www.w3.org/2001/XMLSchema#date";
      TypeURL2["XSD_G_MONTH"] = "http://www.w3.org/2001/XMLSchema#gMonth";
      TypeURL2["XSD_G_MONTHDAY"] = "http://www.w3.org/2001/XMLSchema#gMonthDay";
      TypeURL2["XSD_G_YEAR"] = "http://www.w3.org/2001/XMLSchema#gYear";
      TypeURL2["XSD_G_YEAR_MONTH"] = "http://www.w3.org/2001/XMLSchema#gYearMonth";
      TypeURL2["XSD_TIME"] = "http://www.w3.org/2001/XMLSchema#time";
      TypeURL2["XSD_G_DAY"] = "http://www.w3.org/2001/XMLSchema#gDay";
      TypeURL2["XSD_DECIMAL"] = "http://www.w3.org/2001/XMLSchema#decimal";
      TypeURL2["XSD_FLOAT"] = "http://www.w3.org/2001/XMLSchema#float";
      TypeURL2["XSD_DOUBLE"] = "http://www.w3.org/2001/XMLSchema#double";
      TypeURL2["XSD_INTEGER"] = "http://www.w3.org/2001/XMLSchema#integer";
      TypeURL2["XSD_NON_POSITIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#nonPositiveInteger";
      TypeURL2["XSD_NEGATIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#negativeInteger";
      TypeURL2["XSD_LONG"] = "http://www.w3.org/2001/XMLSchema#long";
      TypeURL2["XSD_INT"] = "http://www.w3.org/2001/XMLSchema#int";
      TypeURL2["XSD_SHORT"] = "http://www.w3.org/2001/XMLSchema#short";
      TypeURL2["XSD_BYTE"] = "http://www.w3.org/2001/XMLSchema#byte";
      TypeURL2["XSD_NON_NEGATIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#nonNegativeInteger";
      TypeURL2["XSD_POSITIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#positiveInteger";
      TypeURL2["XSD_UNSIGNED_LONG"] = "http://www.w3.org/2001/XMLSchema#unsignedLong";
      TypeURL2["XSD_UNSIGNED_INT"] = "http://www.w3.org/2001/XMLSchema#unsignedInt";
      TypeURL2["XSD_UNSIGNED_SHORT"] = "http://www.w3.org/2001/XMLSchema#unsignedShort";
      TypeURL2["XSD_UNSIGNED_BYTE"] = "http://www.w3.org/2001/XMLSchema#unsignedByte";
      TypeURL2["XSD_NORMALIZED_STRING"] = "http://www.w3.org/2001/XMLSchema#normalizedString";
      TypeURL2["XSD_TOKEN"] = "http://www.w3.org/2001/XMLSchema#token";
      TypeURL2["XSD_LANGUAGE"] = "http://www.w3.org/2001/XMLSchema#language";
      TypeURL2["XSD_NM_TOKEN"] = "http://www.w3.org/2001/XMLSchema#NMTOKEN";
      TypeURL2["XSD_NAME"] = "http://www.w3.org/2001/XMLSchema#name";
      TypeURL2["XSD_NC_NAME"] = "http://www.w3.org/2001/XMLSchema#NCName";
      TypeURL2["XSD_ENTITY"] = "http://www.w3.org/2001/XMLSchema#ENTITY";
      TypeURL2["XSD_ID"] = "http://www.w3.org/2001/XMLSchema#ID";
      TypeURL2["XSD_ID_REF"] = "http://www.w3.org/2001/XMLSchema#IDREF";
      TypeURL2["XSD_DURATION"] = "http://www.w3.org/2001/XMLSchema#duration";
      TypeURL2["XSD_YEAR_MONTH_DURATION"] = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";
      TypeURL2["XSD_DAY_TIME_DURATION"] = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";
    })(TypeURL || (exports.TypeURL = TypeURL = {}));
    var SparqlOperator;
    (function(SparqlOperator2) {
      SparqlOperator2["NOT"] = "!";
      SparqlOperator2["UMINUS"] = "uminus";
      SparqlOperator2["UPLUS"] = "uplus";
      SparqlOperator2["LOGICAL_OR"] = "||";
      SparqlOperator2["LOGICAL_AND"] = "&&";
      SparqlOperator2["EQUAL"] = "=";
      SparqlOperator2["NOT_EQUAL"] = "!=";
      SparqlOperator2["LT"] = "<";
      SparqlOperator2["GT"] = ">";
      SparqlOperator2["LTE"] = "<=";
      SparqlOperator2["GTE"] = ">=";
      SparqlOperator2["SAME_TERM"] = "sameterm";
      SparqlOperator2["IN"] = "in";
      SparqlOperator2["NOT_IN"] = "notin";
      SparqlOperator2["MULTIPLICATION"] = "*";
      SparqlOperator2["DIVISION"] = "/";
      SparqlOperator2["ADDITION"] = "+";
      SparqlOperator2["SUBTRACTION"] = "-";
      SparqlOperator2["IS_IRI"] = "isiri";
      SparqlOperator2["IS_URI"] = "isuri";
      SparqlOperator2["IS_BLANK"] = "isblank";
      SparqlOperator2["IS_LITERAL"] = "isliteral";
      SparqlOperator2["IS_NUMERIC"] = "isnumeric";
      SparqlOperator2["STR"] = "str";
      SparqlOperator2["LANG"] = "lang";
      SparqlOperator2["DATATYPE"] = "datatype";
      SparqlOperator2["IRI"] = "iri";
      SparqlOperator2["URI"] = "uri";
      SparqlOperator2["BNODE"] = "bnode";
      SparqlOperator2["STRDT"] = "strdt";
      SparqlOperator2["STRLANG"] = "strlang";
      SparqlOperator2["UUID"] = "uuid";
      SparqlOperator2["STRUUID"] = "struuid";
      SparqlOperator2["STRLEN"] = "strlen";
      SparqlOperator2["SUBSTR"] = "substr";
      SparqlOperator2["UCASE"] = "ucase";
      SparqlOperator2["LCASE"] = "lcase";
      SparqlOperator2["STRSTARTS"] = "strstarts";
      SparqlOperator2["STRENDS"] = "strends";
      SparqlOperator2["CONTAINS"] = "contains";
      SparqlOperator2["STRBEFORE"] = "strbefore";
      SparqlOperator2["STRAFTER"] = "strafter";
      SparqlOperator2["ENCODE_FOR_URI"] = "encode_for_uri";
      SparqlOperator2["CONCAT"] = "concat";
      SparqlOperator2["LANG_MATCHES"] = "langmatches";
      SparqlOperator2["REGEX"] = "regex";
      SparqlOperator2["REPLACE"] = "replace";
      SparqlOperator2["ABS"] = "abs";
      SparqlOperator2["ROUND"] = "round";
      SparqlOperator2["CEIL"] = "ceil";
      SparqlOperator2["FLOOR"] = "floor";
      SparqlOperator2["RAND"] = "rand";
      SparqlOperator2["NOW"] = "now";
      SparqlOperator2["YEAR"] = "year";
      SparqlOperator2["MONTH"] = "month";
      SparqlOperator2["DAY"] = "day";
      SparqlOperator2["HOURS"] = "hours";
      SparqlOperator2["MINUTES"] = "minutes";
      SparqlOperator2["SECONDS"] = "seconds";
      SparqlOperator2["TIMEZONE"] = "timezone";
      SparqlOperator2["TZ"] = "tz";
      SparqlOperator2["MD5"] = "md5";
      SparqlOperator2["SHA1"] = "sha1";
      SparqlOperator2["SHA256"] = "sha256";
      SparqlOperator2["SHA384"] = "sha384";
      SparqlOperator2["SHA512"] = "sha512";
      SparqlOperator2["TRIPLE"] = "triple";
      SparqlOperator2["SUBJECT"] = "subject";
      SparqlOperator2["PREDICATE"] = "predicate";
      SparqlOperator2["OBJECT"] = "object";
      SparqlOperator2["IS_TRIPLE"] = "istriple";
      SparqlOperator2["BOUND"] = "bound";
      SparqlOperator2["IF"] = "if";
      SparqlOperator2["COALESCE"] = "coalesce";
    })(SparqlOperator || (exports.SparqlOperator = SparqlOperator = {}));
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Errors.js
var require_Errors = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoAggregator = exports.ExtensionFunctionError = exports.InvalidExpression = exports.InvalidArity = exports.UnexpectedError = exports.ParseError = exports.EmptyAggregateError = exports.IncompatibleLanguageOperation = exports.InvalidTimezoneCall = exports.CastError = exports.InvalidArgumentTypes = exports.InError = exports.CoalesceError = exports.RDFEqualTypeError = exports.EBVCoercionError = exports.UnboundVariableError = exports.InvalidLexicalForm = exports.isExpressionError = exports.ExpressionError = void 0;
    var ExpressionError = class extends Error {
    };
    exports.ExpressionError = ExpressionError;
    function isExpressionError(error) {
      return error instanceof ExpressionError;
    }
    exports.isExpressionError = isExpressionError;
    var InvalidLexicalForm = class extends ExpressionError {
      constructor(arg) {
        super(`Invalid lexical form '${pp(arg)}'`);
        this.arg = arg;
      }
    };
    exports.InvalidLexicalForm = InvalidLexicalForm;
    var UnboundVariableError = class extends ExpressionError {
      constructor(variable, bindings) {
        super(`Unbound variable '${pp(variable)}'`);
        this.variable = variable;
        this.bindings = bindings;
      }
    };
    exports.UnboundVariableError = UnboundVariableError;
    var EBVCoercionError = class extends ExpressionError {
      constructor(arg) {
        super(`Cannot coerce term to EBV '${pp(arg)}'`);
        this.arg = arg;
      }
    };
    exports.EBVCoercionError = EBVCoercionError;
    var RDFEqualTypeError = class extends ExpressionError {
      constructor(args) {
        super("Equality test for literals with unsupported datatypes");
        this.args = args;
      }
    };
    exports.RDFEqualTypeError = RDFEqualTypeError;
    var CoalesceError = class extends ExpressionError {
      constructor(errors) {
        super("All COALESCE arguments threw errors");
        this.errors = errors;
      }
    };
    exports.CoalesceError = CoalesceError;
    var InError = class extends ExpressionError {
      constructor(errors) {
        super(`Some argument to IN errorred and none where equal. ${errors.map((err) => `(${err.toString()}) `).join("and ")}`);
        this.errors = errors;
      }
    };
    exports.InError = InError;
    var InvalidArgumentTypes = class extends ExpressionError {
      constructor(args, op) {
        super(`Argument types not valid for operator: '${pp(op)}' with '${pp(args)}`);
        this.args = args;
        this.op = op;
      }
    };
    exports.InvalidArgumentTypes = InvalidArgumentTypes;
    var CastError = class extends ExpressionError {
      constructor(arg, cast) {
        super(`Invalid cast: '${pp(arg)}' to '${pp(cast)}'`);
        this.arg = arg;
      }
    };
    exports.CastError = CastError;
    var InvalidTimezoneCall = class extends ExpressionError {
      constructor(dateString) {
        super(`TIMEZONE call on ${dateString} which has no timezone`);
        this.dateString = dateString;
      }
    };
    exports.InvalidTimezoneCall = InvalidTimezoneCall;
    var IncompatibleLanguageOperation = class extends ExpressionError {
      constructor(arg1, arg2) {
        super(`Operation on incompatible language literals '${pp(arg1)}' and '${pp(arg2)}'`);
        this.arg1 = arg1;
        this.arg2 = arg2;
      }
    };
    exports.IncompatibleLanguageOperation = IncompatibleLanguageOperation;
    var EmptyAggregateError = class extends ExpressionError {
      constructor() {
        super("Empty aggregate expression");
      }
    };
    exports.EmptyAggregateError = EmptyAggregateError;
    var ParseError = class extends ExpressionError {
      constructor(str, type) {
        super(`Failed to parse "${str}" as ${type}.`);
      }
    };
    exports.ParseError = ParseError;
    var UnexpectedError = class extends Error {
      constructor(message, payload) {
        super(`Programmer Error '${message}'`);
        this.payload = payload;
      }
    };
    exports.UnexpectedError = UnexpectedError;
    var InvalidArity = class extends Error {
      constructor(args, op) {
        super(`The number of args does not match the arity of the operator '${pp(op)}'.`);
        this.args = args;
        this.op = op;
      }
    };
    exports.InvalidArity = InvalidArity;
    var InvalidExpression = class extends Error {
      constructor(expr) {
        super(`Invalid SPARQL Expression '${pp(expr)}'`);
      }
    };
    exports.InvalidExpression = InvalidExpression;
    var ExtensionFunctionError = class extends Error {
      constructor(name, functionError) {
        if (functionError instanceof Error) {
          super(`Error thrown in ${name}: ${functionError.message}${functionError.stack ? `
${functionError.stack}` : ""}`);
        } else {
          super(`Error thrown in ${name}`);
        }
      }
    };
    exports.ExtensionFunctionError = ExtensionFunctionError;
    var NoAggregator = class extends Error {
      constructor(name) {
        super(`Aggregate expression ${pp(name)} found, but no aggregate hook provided.`);
      }
    };
    exports.NoAggregator = NoAggregator;
    function pp(object) {
      return JSON.stringify(object);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Serialization.js
var require_Serialization = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Serialization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeDuration = exports.serializeTime = exports.serializeDate = exports.serializeDateTime = void 0;
    function numSerializer(num, min2 = 2) {
      return num.toLocaleString(void 0, { minimumIntegerDigits: min2, useGrouping: false });
    }
    function serializeDateTime(date) {
      return `${serializeDate({ year: date.year, month: date.month, day: date.day })}T${serializeTime(date)}`;
    }
    exports.serializeDateTime = serializeDateTime;
    function serializeTimeZone(tz) {
      if (tz.zoneHours === void 0 || tz.zoneMinutes === void 0) {
        return "";
      }
      if (tz.zoneHours === 0 && tz.zoneMinutes === 0) {
        return "Z";
      }
      return `${tz.zoneHours >= 0 ? `+${numSerializer(tz.zoneHours)}` : numSerializer(tz.zoneHours)}:${numSerializer(Math.abs(tz.zoneMinutes))}`;
    }
    function serializeDate(date) {
      return `${numSerializer(date.year, 4)}-${numSerializer(date.month)}-${numSerializer(date.day)}${serializeTimeZone(date)}`;
    }
    exports.serializeDate = serializeDate;
    function serializeTime(time) {
      return `${numSerializer(time.hours)}:${numSerializer(time.minutes)}:${numSerializer(time.seconds)}${serializeTimeZone(time)}`;
    }
    exports.serializeTime = serializeTime;
    function serializeDuration(dur, zeroString = "PT0S") {
      if (!Object.values(dur).some((val) => (val || 0) !== 0)) {
        return zeroString;
      }
      const sign = Object.values(dur).some((val) => (val || 0) < 0) ? "-" : "";
      const year = dur.year ? `${Math.abs(dur.year)}Y` : "";
      const month = dur.month ? `${Math.abs(dur.month)}M` : "";
      const day = dur.day ? `${Math.abs(dur.day)}D` : "";
      const dayNotation = `${sign}P${year}${month}${day}`;
      if (!(dur.hours || dur.minutes || dur.seconds)) {
        return dayNotation;
      }
      const hour = dur.hours ? `${Math.abs(dur.hours)}H` : "";
      const minute = dur.minutes ? `${Math.abs(dur.minutes)}M` : "";
      const second = dur.seconds ? `${Math.abs(dur.seconds)}S` : "";
      return `${dayNotation}T${hour}${minute}${second}`;
    }
    exports.serializeDuration = serializeDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/functions/OverloadTree.js
var require_OverloadTree = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/functions/OverloadTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OverloadTree = void 0;
    var expressions_1 = require_expressions();
    var TypeHandling_1 = require_TypeHandling();
    var OverloadTree = class _OverloadTree {
      constructor(identifier, depth) {
        this.identifier = identifier;
        this.implementation = void 0;
        this.generalOverloads = /* @__PURE__ */ Object.create(null);
        this.literalOverLoads = [];
        this.depth = depth ?? 0;
        this.promotionCount = void 0;
      }
      getSubtree(overrideType) {
        const generalType = (0, TypeHandling_1.asGeneralType)(overrideType);
        if (generalType) {
          return this.generalOverloads[generalType];
        }
        for (const [type, overloadTree] of this.literalOverLoads) {
          if (overrideType === type) {
            return overloadTree;
          }
        }
        return void 0;
      }
      /**
       * Get the implementation for the types that exactly match @param args .
       */
      getImplementationExact(args) {
        let node = this;
        for (const expression of args) {
          node = node.getSubtree(expression);
          if (!node) {
            return void 0;
          }
        }
        return node.implementation;
      }
      /**
       * Searches in a depth first way for the best matching overload. considering this a the tree's root.
       * @param args the arguments to the function.
       * @param superTypeProvider
       * @param functionArgumentsCache
       */
      search(args, superTypeProvider, functionArgumentsCache) {
        let cacheIter = functionArgumentsCache[this.identifier];
        let searchIndex = 0;
        while (searchIndex < args.length && (cacheIter == null ? void 0 : cacheIter.cache)) {
          const term = args[searchIndex];
          const literalExpression = (0, expressions_1.isLiteralTermExpression)(term);
          cacheIter = cacheIter.cache[literalExpression ? literalExpression.dataType : term.termType];
          searchIndex++;
        }
        if (searchIndex === args.length && (cacheIter == null ? void 0 : cacheIter.func)) {
          return cacheIter.func;
        }
        const searchStack = [];
        const startIndex = 0;
        if (args.length === 0) {
          return this.implementation;
        }
        searchStack.push(...this.getSubTreeWithArg(args[startIndex], superTypeProvider).map((node) => ({ node, index: startIndex + 1 })));
        while (searchStack.length > 0) {
          const { index, node } = searchStack.pop();
          if (index === args.length && node.implementation) {
            this.addToCache(functionArgumentsCache, args, node.implementation);
            return node.implementation;
          }
          searchStack.push(...node.getSubTreeWithArg(args[index], superTypeProvider).map((item) => ({ node: item, index: index + 1 })));
        }
        return void 0;
      }
      addToCache(functionArgumentsCache, args, func) {
        function getDefault(lruCache, key) {
          if (!(key in lruCache)) {
            lruCache[key] = {};
          }
          return lruCache[key];
        }
        let cache = getDefault(functionArgumentsCache, this.identifier);
        for (const term of args) {
          const literalExpression = (0, expressions_1.isLiteralTermExpression)(term);
          const key = literalExpression ? literalExpression.dataType : term.termType;
          cache.cache = cache.cache ?? {};
          cache = getDefault(cache.cache, key);
        }
        cache.func = func;
      }
      /**
       * Adds an overload to the tree structure considering this as the tree's root.
       * @param argumentTypes a list of argumentTypes that would need to be provided in
       * the same order to get the implementation.
       * @param func the implementation for this overload.
       */
      addOverload(argumentTypes, func) {
        this._addOverload([...argumentTypes], func, 0);
      }
      _addOverload(argumentTypes, func, promotionCount) {
        const [argumentType, ..._argumentTypes] = argumentTypes;
        if (!argumentType) {
          if (this.promotionCount === void 0 || promotionCount <= this.promotionCount) {
            this.promotionCount = promotionCount;
            this.implementation = func;
          }
          return;
        }
        let nextTree = this.getSubtree(argumentType);
        if (!nextTree) {
          const newNode = new _OverloadTree(this.identifier, this.depth + 1);
          const generalType = (0, TypeHandling_1.asGeneralType)(argumentType);
          if (generalType) {
            this.generalOverloads[generalType] = newNode;
          }
          const overrideType = (0, TypeHandling_1.asOverrideType)(argumentType);
          if (overrideType) {
            this.literalOverLoads.push([overrideType, newNode]);
          }
          nextTree = newNode;
        }
        nextTree._addOverload(_argumentTypes, func, promotionCount);
        if (TypeHandling_1.typePromotion[argumentType]) {
          for (const ret of TypeHandling_1.typePromotion[argumentType]) {
            this.addPromotedOverload(ret.typeToPromote, func, ret.conversionFunction, _argumentTypes, promotionCount);
          }
        }
      }
      addPromotedOverload(typeToPromote, func, conversionFunction, argumentTypes, promotionCount) {
        let nextTree = this.getSubtree(typeToPromote);
        if (!nextTree) {
          const newNode = new _OverloadTree(this.identifier, this.depth + 1);
          this.literalOverLoads.push([typeToPromote, newNode]);
          nextTree = newNode;
        }
        nextTree._addOverload(argumentTypes, (funcConf) => (args) => func(funcConf)([
          ...args.slice(0, this.depth),
          conversionFunction(args[this.depth]),
          ...args.slice(this.depth + 1, args.length)
        ]), promotionCount + 1);
      }
      /**
       * @param arg term to try and match to possible overloads of this node.
       * @param openWorldType interface allowing to discover relations between types.
       * @returns SearchStack a stack with top element the next node that should be asked for implementation or overload.
       */
      getSubTreeWithArg(arg, openWorldType) {
        const res = [];
        const literalExpression = (0, expressions_1.isLiteralTermExpression)(arg);
        if (this.generalOverloads.term) {
          res.push(this.generalOverloads.term);
        }
        if (this.generalOverloads[arg.termType]) {
          res.push(this.generalOverloads[arg.termType]);
        }
        if (literalExpression) {
          const concreteType = (0, TypeHandling_1.asKnownLiteralType)(literalExpression.dataType);
          let subExtensionTable;
          if (concreteType) {
            subExtensionTable = TypeHandling_1.superTypeDictTable[concreteType];
          } else {
            subExtensionTable = (0, TypeHandling_1.getSuperTypes)(literalExpression.dataType, openWorldType);
          }
          const matches = this.literalOverLoads.filter(([matchType, _]) => matchType in subExtensionTable).map(([matchType, tree]) => [subExtensionTable[matchType], tree]);
          matches.sort(([prioA, matchTypeA], [prioB, matchTypeB]) => prioA - prioB);
          res.push(...matches.map(([_, sortedType]) => sortedType));
        }
        return res;
      }
    };
    exports.OverloadTree = OverloadTree;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/functions/Helpers.js
var require_Helpers = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/functions/Helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expressionToVar = exports.dateTime = exports.langString = exports.string = exports.double = exports.float = exports.decimal = exports.integer = exports.bool = exports.Builder = exports.declare = void 0;
    var context_entries_1 = require_lib3();
    var E = require_expressions();
    var expressions_1 = require_expressions();
    var C = require_Consts();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var OverloadTree_1 = require_OverloadTree();
    function declare(identifier) {
      return new Builder(identifier);
    }
    exports.declare = declare;
    var Builder = class _Builder {
      constructor(identifier) {
        this.overloadTree = new OverloadTree_1.OverloadTree(identifier);
        this.collected = false;
      }
      collect() {
        if (this.collected) {
          throw new Error("Builders can only be collected once!");
        }
        this.collected = true;
        return this.overloadTree;
      }
      static wrapInvalidLexicalProtected(func) {
        return (expressionEvaluator) => (args) => {
          for (const [index, arg] of args.entries()) {
            if (arg instanceof expressions_1.NonLexicalLiteral) {
              throw new Err.InvalidLexicalForm(args[index].toRDF(expressionEvaluator.context.getSafe(context_entries_1.KeysInitQuery.dataFactory)));
            }
          }
          return func(expressionEvaluator)(args);
        };
      }
      set(argTypes, func, addInvalidHandling = true) {
        this.overloadTree.addOverload(argTypes, addInvalidHandling ? _Builder.wrapInvalidLexicalProtected(func) : func);
        return this;
      }
      copy({ from, to }) {
        const impl = this.overloadTree.getImplementationExact(from);
        if (!impl) {
          throw new Err.UnexpectedError("Tried to copy implementation, but types not found", { from, to });
        }
        return this.set(to, impl);
      }
      onUnary(type, op, addInvalidHandling = true) {
        return this.set([type], (expressionEvaluator) => ([val]) => op(expressionEvaluator)(val), addInvalidHandling);
      }
      onUnaryTyped(type, op, addInvalidHandling = true) {
        return this.set([type], (expressionEvaluator) => ([val]) => op(expressionEvaluator)(val.typedValue), addInvalidHandling);
      }
      onBinary(types, op, addInvalidHandling = true) {
        return this.set(types, (expressionEvaluator) => ([left, right]) => op(expressionEvaluator)(left, right), addInvalidHandling);
      }
      onBinaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (expressionEvaluator) => ([left, right]) => op(expressionEvaluator)(left.typedValue, right.typedValue), addInvalidHandling);
      }
      onTernaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (expressionEvaluator) => ([a1, a2, a3]) => op(expressionEvaluator)(a1.typedValue, a2.typedValue, a3.typedValue), addInvalidHandling);
      }
      onTernary(types, op, addInvalidHandling = true) {
        return this.set(types, (expressionEvaluator) => ([a1, a2, a3]) => op(expressionEvaluator)(a1, a2, a3), addInvalidHandling);
      }
      onQuaternaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (expressionEvaluator) => ([a1, a2, a3, a4]) => op(expressionEvaluator)(a1.typedValue, a2.typedValue, a3.typedValue, a4.typedValue), addInvalidHandling);
      }
      onTerm1(op, addInvalidHandling = false) {
        return this.set(["term"], (expressionEvaluator) => ([term]) => op(expressionEvaluator)(term), addInvalidHandling);
      }
      onTerm3(op) {
        return this.set(["term", "term", "term"], (expressionEvaluator) => ([t1, t2, t3]) => op(expressionEvaluator)(t1, t2, t3));
      }
      onQuad1(op) {
        return this.set(["quad"], (expressionEvaluator) => ([term]) => op(expressionEvaluator)(term));
      }
      onLiteral1(op, addInvalidHandling = true) {
        return this.set(["literal"], (expressionEvaluator) => ([term]) => op(expressionEvaluator)(term), addInvalidHandling);
      }
      onBoolean1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit), addInvalidHandling);
      }
      onBoolean1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit.typedValue), addInvalidHandling);
      }
      onString1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit), addInvalidHandling);
      }
      onString1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit.typedValue), addInvalidHandling);
      }
      onLangString1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.RDF_LANG_STRING], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit), addInvalidHandling);
      }
      onStringly1(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_STRINGLY], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit), addInvalidHandling);
      }
      onStringly1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_STRINGLY], (expressionEvaluator) => ([lit]) => op(expressionEvaluator)(lit.typedValue), addInvalidHandling);
      }
      onNumeric1(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_NUMERIC], (expressionEvaluator) => ([val]) => op(expressionEvaluator)(val), addInvalidHandling);
      }
      onDateTime1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_DATE_TIME], (expressionEvaluator) => ([val]) => op(expressionEvaluator)(val), addInvalidHandling);
      }
      /**
       * We return the base types and not the provided types because we don't want to create invalid terms.
       * Providing negative number to a function unary - for example should not
       * return a term of type negative number having a positive value.
       * @param op the numeric operator performed
       * @param addInvalidHandling whether to add invalid handling,
       *   whether to add @param op in @see wrapInvalidLexicalProtected
       */
      numericConverter(op, addInvalidHandling = true) {
        const evalHelper = (expressionEvaluator) => (arg) => op(expressionEvaluator)(arg.typedValue);
        return this.onUnary(Consts_1.TypeURL.XSD_INTEGER, (expressionEvaluator) => (arg) => integer(evalHelper(expressionEvaluator)(arg)), addInvalidHandling).onUnary(Consts_1.TypeURL.XSD_DECIMAL, (expressionEvaluator) => (arg) => decimal(evalHelper(expressionEvaluator)(arg)), addInvalidHandling).onUnary(Consts_1.TypeURL.XSD_FLOAT, (expressionEvaluator) => (arg) => float(evalHelper(expressionEvaluator)(arg)), addInvalidHandling).onUnary(Consts_1.TypeURL.XSD_DOUBLE, (expressionEvaluator) => (arg) => double(evalHelper(expressionEvaluator)(arg)), addInvalidHandling);
      }
      /**
       * !!! Be aware when using this function, it will create different overloads with different return types !!!
       * Arithmetic operators take 2 numeric arguments, and return a single numerical
       * value. The type of the return value is heavily dependent on the types of the
       * input arguments. In JS everything is a double, but in SPARQL it is not.
       *
       * The different arguments are handled by type promotion and subtype substitution.
       * The way numeric function arguments work is described here:
       * https://www.w3.org/TR/xpath20/#mapping
       * Above url is referenced in the sparql spec: https://www.w3.org/TR/sparql11-query/#OperatorMapping
       */
      arithmetic(op, addInvalidHandling = true) {
        const evalHelper = (expressionEvaluator) => (left, right) => op(expressionEvaluator)(left.typedValue, right.typedValue);
        return this.onBinary([Consts_1.TypeURL.XSD_INTEGER, Consts_1.TypeURL.XSD_INTEGER], (expressionEvaluator) => (left, right) => integer(evalHelper(expressionEvaluator)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DECIMAL, Consts_1.TypeURL.XSD_DECIMAL], (expressionEvaluator) => (left, right) => decimal(evalHelper(expressionEvaluator)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_FLOAT, Consts_1.TypeURL.XSD_FLOAT], (expressionEvaluator) => (left, right) => float(evalHelper(expressionEvaluator)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DOUBLE, Consts_1.TypeURL.XSD_DOUBLE], (expressionEvaluator) => (left, right) => double(evalHelper(expressionEvaluator)(left, right)), addInvalidHandling);
      }
      numberTest(test) {
        return this.numeric((expressionEvaluator) => ([left, right]) => {
          const result = test(expressionEvaluator)(left.typedValue, right.typedValue);
          return bool(result);
        });
      }
      stringTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING, C.TypeURL.XSD_STRING], (expressionEvaluator) => ([left, right]) => {
          const result = test(expressionEvaluator)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      booleanTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN, C.TypeURL.XSD_BOOLEAN], (expressionEvaluator) => ([left, right]) => {
          const result = test(expressionEvaluator)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      dateTimeTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_DATE_TIME, C.TypeURL.XSD_DATE_TIME], (expressionEvaluator) => ([left, right]) => {
          const result = test(expressionEvaluator)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      numeric(op) {
        return this.set([C.TypeAlias.SPARQL_NUMERIC, C.TypeAlias.SPARQL_NUMERIC], op);
      }
    };
    exports.Builder = Builder;
    function bool(val) {
      return new E.BooleanLiteral(val);
    }
    exports.bool = bool;
    function integer(num) {
      return new E.IntegerLiteral(num);
    }
    exports.integer = integer;
    function decimal(num) {
      return new E.DecimalLiteral(num);
    }
    exports.decimal = decimal;
    function float(num) {
      return new E.FloatLiteral(num);
    }
    exports.float = float;
    function double(num) {
      return new E.DoubleLiteral(num);
    }
    exports.double = double;
    function string(str) {
      return new E.StringLiteral(str);
    }
    exports.string = string;
    function langString(str, lang) {
      return new E.LangStringLiteral(str, lang);
    }
    exports.langString = langString;
    function dateTime(date, str) {
      return new E.DateTimeLiteral(date, str);
    }
    exports.dateTime = dateTime;
    function expressionToVar(dataFactory, variableExpression) {
      return dataFactory.variable(variableExpression.name.slice(1));
    }
    exports.expressionToVar = expressionToVar;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/TypeHandling.js
var require_TypeHandling = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/TypeHandling.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typePromotion = exports.isSubTypeOf = exports.getSuperTypeDict = exports.isInternalSubType = exports.asGeneralType = exports.asOverrideType = exports.asKnownLiteralType = exports.asTypeAlias = exports.typeAliasCheck = exports.extensionTableInit = exports.getSuperTypes = exports.superTypeDictTable = exports.extensionTableInput = void 0;
    var expressions_1 = require_expressions();
    var Helpers_1 = require_Helpers();
    var Consts_1 = require_Consts();
    exports.extensionTableInput = {
      // Datetime types
      [Consts_1.TypeURL.XSD_DATE_TIME_STAMP]: Consts_1.TypeURL.XSD_DATE_TIME,
      // Duration types
      [Consts_1.TypeURL.XSD_DAY_TIME_DURATION]: Consts_1.TypeURL.XSD_DURATION,
      [Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]: Consts_1.TypeURL.XSD_DURATION,
      // Stringly types
      [Consts_1.TypeURL.RDF_LANG_STRING]: Consts_1.TypeAlias.SPARQL_STRINGLY,
      [Consts_1.TypeURL.XSD_STRING]: Consts_1.TypeAlias.SPARQL_STRINGLY,
      // String types
      [Consts_1.TypeURL.XSD_NORMALIZED_STRING]: Consts_1.TypeURL.XSD_STRING,
      [Consts_1.TypeURL.XSD_TOKEN]: Consts_1.TypeURL.XSD_NORMALIZED_STRING,
      [Consts_1.TypeURL.XSD_LANGUAGE]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NM_TOKEN]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NAME]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NC_NAME]: Consts_1.TypeURL.XSD_NAME,
      [Consts_1.TypeURL.XSD_ENTITY]: Consts_1.TypeURL.XSD_NC_NAME,
      [Consts_1.TypeURL.XSD_ID]: Consts_1.TypeURL.XSD_NC_NAME,
      [Consts_1.TypeURL.XSD_ID_REF]: Consts_1.TypeURL.XSD_NC_NAME,
      // Numeric types
      // https://www.w3.org/TR/sparql11-query/#operandDataTypes
      // > numeric denotes typed literals with datatypes xsd:integer, xsd:decimal, xsd:float, and xsd:double
      [Consts_1.TypeURL.XSD_DOUBLE]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      [Consts_1.TypeURL.XSD_FLOAT]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      [Consts_1.TypeURL.XSD_DECIMAL]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      // Decimal types
      [Consts_1.TypeURL.XSD_INTEGER]: Consts_1.TypeURL.XSD_DECIMAL,
      [Consts_1.TypeURL.XSD_NON_POSITIVE_INTEGER]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_NEGATIVE_INTEGER]: Consts_1.TypeURL.XSD_NON_POSITIVE_INTEGER,
      [Consts_1.TypeURL.XSD_LONG]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_INT]: Consts_1.TypeURL.XSD_LONG,
      [Consts_1.TypeURL.XSD_SHORT]: Consts_1.TypeURL.XSD_INT,
      [Consts_1.TypeURL.XSD_BYTE]: Consts_1.TypeURL.XSD_SHORT,
      [Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_POSITIVE_INTEGER]: Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER,
      [Consts_1.TypeURL.XSD_UNSIGNED_LONG]: Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER,
      [Consts_1.TypeURL.XSD_UNSIGNED_INT]: Consts_1.TypeURL.XSD_UNSIGNED_LONG,
      [Consts_1.TypeURL.XSD_UNSIGNED_SHORT]: Consts_1.TypeURL.XSD_UNSIGNED_INT,
      [Consts_1.TypeURL.XSD_UNSIGNED_BYTE]: Consts_1.TypeURL.XSD_UNSIGNED_SHORT,
      [Consts_1.TypeURL.XSD_DATE_TIME]: "term",
      [Consts_1.TypeURL.XSD_BOOLEAN]: "term",
      [Consts_1.TypeURL.XSD_DATE]: "term",
      [Consts_1.TypeURL.XSD_G_MONTH]: "term",
      [Consts_1.TypeURL.XSD_G_MONTHDAY]: "term",
      [Consts_1.TypeURL.XSD_G_YEAR]: "term",
      [Consts_1.TypeURL.XSD_G_YEAR_MONTH]: "term",
      [Consts_1.TypeURL.XSD_TIME]: "term",
      [Consts_1.TypeURL.XSD_G_DAY]: "term",
      [Consts_1.TypeURL.XSD_DURATION]: "term",
      [Consts_1.TypeAlias.SPARQL_NUMERIC]: "term",
      [Consts_1.TypeAlias.SPARQL_STRINGLY]: "term",
      [Consts_1.TypeURL.XSD_ANY_URI]: "term"
    };
    exports.superTypeDictTable = /* @__PURE__ */ Object.create(null);
    function getSuperTypes(type, openWorldType) {
      const cached = openWorldType.cache.get(type);
      if (cached) {
        return cached;
      }
      const value = openWorldType.discoverer(type);
      if (value === "term") {
        const res = /* @__PURE__ */ Object.create(null);
        res.__depth = 0;
        res[type] = 0;
        openWorldType.cache.set(type, res);
        return res;
      }
      let subExtension;
      const knownValue = asKnownLiteralType(value);
      if (knownValue) {
        subExtension = { ...exports.superTypeDictTable[knownValue] };
      } else {
        subExtension = { ...getSuperTypes(value, openWorldType) };
      }
      subExtension.__depth++;
      subExtension[type] = subExtension.__depth;
      openWorldType.cache.set(type, subExtension);
      return subExtension;
    }
    exports.getSuperTypes = getSuperTypes;
    function extensionTableInit() {
      for (const [_key, value] of Object.entries(exports.extensionTableInput)) {
        const key = _key;
        if (exports.superTypeDictTable[key]) {
          continue;
        }
        extensionTableBuilderInitKey(key, value, exports.superTypeDictTable);
      }
    }
    exports.extensionTableInit = extensionTableInit;
    extensionTableInit();
    function extensionTableBuilderInitKey(key, value, res) {
      if (value === "term" || value === void 0) {
        const baseRes = /* @__PURE__ */ Object.create(null);
        baseRes.__depth = 0;
        baseRes[key] = 0;
        res[key] = baseRes;
        return;
      }
      if (!res[value]) {
        extensionTableBuilderInitKey(value, exports.extensionTableInput[value], res);
      }
      res[key] = { ...res[value], [key]: res[value].__depth + 1, __depth: res[value].__depth + 1 };
    }
    exports.typeAliasCheck = /* @__PURE__ */ Object.create(null);
    function initTypeAliasCheck() {
      for (const val of Object.values(Consts_1.TypeAlias)) {
        exports.typeAliasCheck[val] = true;
      }
    }
    initTypeAliasCheck();
    function asTypeAlias(type) {
      if (type in exports.typeAliasCheck) {
        return type;
      }
      return void 0;
    }
    exports.asTypeAlias = asTypeAlias;
    function asKnownLiteralType(type) {
      if (type in exports.superTypeDictTable) {
        return type;
      }
      return void 0;
    }
    exports.asKnownLiteralType = asKnownLiteralType;
    function asOverrideType(type) {
      if (asKnownLiteralType(type) ?? type === "term") {
        return type;
      }
      return void 0;
    }
    exports.asOverrideType = asOverrideType;
    function asGeneralType(type) {
      if (type === "term" || (0, expressions_1.asTermType)(type)) {
        return type;
      }
      return void 0;
    }
    exports.asGeneralType = asGeneralType;
    function isInternalSubType(baseType, argumentType) {
      return baseType !== "term" && (exports.superTypeDictTable[baseType] && exports.superTypeDictTable[baseType][argumentType] !== void 0);
    }
    exports.isInternalSubType = isInternalSubType;
    function getSuperTypeDict(baseType, superTypeProvider) {
      const concreteType = asKnownLiteralType(baseType);
      if (concreteType) {
        return exports.superTypeDictTable[concreteType];
      }
      return getSuperTypes(baseType, superTypeProvider);
    }
    exports.getSuperTypeDict = getSuperTypeDict;
    function isSubTypeOf(baseType, argumentType, superTypeProvider) {
      if (baseType === "term") {
        return false;
      }
      return getSuperTypeDict(baseType, superTypeProvider)[argumentType] !== void 0;
    }
    exports.isSubTypeOf = isSubTypeOf;
    exports.typePromotion = {
      [Consts_1.TypeURL.XSD_STRING]: [
        { typeToPromote: Consts_1.TypeURL.XSD_ANY_URI, conversionFunction: (arg) => (0, Helpers_1.string)(arg.str()) }
      ],
      [Consts_1.TypeURL.XSD_DOUBLE]: [
        { typeToPromote: Consts_1.TypeURL.XSD_FLOAT, conversionFunction: (arg) => (0, Helpers_1.double)(arg.typedValue) },
        // TODO: in case of decimal a round needs to happen.
        { typeToPromote: Consts_1.TypeURL.XSD_DECIMAL, conversionFunction: (arg) => (0, Helpers_1.double)(arg.typedValue) }
      ],
      [Consts_1.TypeURL.XSD_FLOAT]: [
        // TODO: in case of decimal a round needs to happen.
        { typeToPromote: Consts_1.TypeURL.XSD_DECIMAL, conversionFunction: (arg) => (0, Helpers_1.float)(arg.typedValue) }
      ]
    };
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Term.js
var require_Term = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Term.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNonLexicalLiteral = exports.NonLexicalLiteral = exports.YearMonthDurationLiteral = exports.DayTimeDurationLiteral = exports.DurationLiteral = exports.DateLiteral = exports.TimeLiteral = exports.DateTimeLiteral = exports.StringLiteral = exports.LangStringLiteral = exports.BooleanLiteral = exports.DoubleLiteral = exports.FloatLiteral = exports.DecimalLiteral = exports.IntegerLiteral = exports.NumericLiteral = exports.Literal = exports.isLiteralTermExpression = exports.DefaultGraph = exports.Quad = exports.BlankNode = exports.NamedNode = exports.Term = void 0;
    var types_1 = require_lib4();
    var C = require_Consts();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var Serialization_1 = require_Serialization();
    var TypeHandling_1 = require_TypeHandling();
    var Term = class {
      constructor() {
        this.expressionType = types_1.ExpressionType.Term;
      }
      str() {
        throw new Err.InvalidArgumentTypes([this], C.SparqlOperator.STR);
      }
      coerceEBV() {
        throw new Err.EBVCoercionError(this);
      }
    };
    exports.Term = Term;
    var NamedNode = class extends Term {
      constructor(value) {
        super();
        this.value = value;
        this.termType = "namedNode";
      }
      toRDF(dataFactory) {
        return dataFactory.namedNode(this.value);
      }
      str() {
        return this.value;
      }
    };
    exports.NamedNode = NamedNode;
    var BlankNode = class extends Term {
      constructor(value) {
        super();
        this.termType = "blankNode";
        this.value = value;
      }
      toRDF(dataFactory) {
        return typeof this.value === "string" ? dataFactory.blankNode(this.value) : this.value;
      }
    };
    exports.BlankNode = BlankNode;
    var Quad = class extends Term {
      constructor(subject, predicate, object, graph) {
        super();
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
        this.termType = "quad";
      }
      toRDF(dataFactory) {
        return dataFactory.quad(this.subject.toRDF(dataFactory), this.predicate.toRDF(dataFactory), this.object.toRDF(dataFactory), this.graph.toRDF(dataFactory));
      }
      str() {
        return `Quad: [${this.subject.str()}, ${this.predicate.str()}, ${this.object.str()}, ${this.graph.str()}]`;
      }
    };
    exports.Quad = Quad;
    var DefaultGraph = class extends Term {
      constructor() {
        super();
        this.termType = "defaultGraph";
      }
      toRDF(dataFactory) {
        return dataFactory.defaultGraph();
      }
      str() {
        return "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph;
    function isLiteralTermExpression(expr) {
      if (expr.termType === "literal") {
        return expr;
      }
      return void 0;
    }
    exports.isLiteralTermExpression = isLiteralTermExpression;
    var Literal = class extends Term {
      /**
       * @param typedValue internal representation of this literal's value
       * @param dataType a string representing the datatype. Can be of type @see LiteralTypes or any URI
       * @param strValue the string value of this literal. In other words, the string representing the RDF.literal value.
       * @param language the language, mainly for language enabled strings like RDF_LANG_STRING
       */
      constructor(typedValue, dataType, strValue, language) {
        super();
        this.typedValue = typedValue;
        this.dataType = dataType;
        this.strValue = strValue;
        this.language = language;
        this.termType = "literal";
      }
      toRDF(dataFactory) {
        return dataFactory.literal(this.strValue ?? this.str(), this.language ?? dataFactory.namedNode(this.dataType));
      }
      str() {
        return this.strValue ?? this.typedValue.toString();
      }
    };
    exports.Literal = Literal;
    var NumericLiteral = class extends Literal {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      coerceEBV() {
        return Boolean(this.typedValue);
      }
      toRDF(dataFactory) {
        const term = super.toRDF(dataFactory);
        if (!Number.isFinite(this.typedValue)) {
          term.value = term.value.replace("Infinity", "INF");
        }
        return term;
      }
      str() {
        return this.strValue ?? this.specificFormatter(this.typedValue);
      }
    };
    exports.NumericLiteral = NumericLiteral;
    var IntegerLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_INTEGER, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toFixed(0);
      }
    };
    exports.IntegerLiteral = IntegerLiteral;
    var DecimalLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_DECIMAL, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toString();
      }
    };
    exports.DecimalLiteral = DecimalLiteral;
    var FloatLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_FLOAT, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toString();
      }
    };
    exports.FloatLiteral = FloatLiteral;
    var DoubleLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_DOUBLE, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        if (!Number.isFinite(val)) {
          if (val > 0) {
            return "INF";
          }
          if (val < 0) {
            return "-INF";
          }
          return "NaN";
        }
        const jsExponential = val.toExponential();
        const [jsMantisse, jsExponent] = jsExponential.split("e");
        const exponent = jsExponent.replace(/\+/u, "");
        const mantisse = jsMantisse.includes(".") ? jsMantisse : `${jsMantisse}.0`;
        return `${mantisse}E${exponent}`;
      }
    };
    exports.DoubleLiteral = DoubleLiteral;
    var BooleanLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_BOOLEAN, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      coerceEBV() {
        return this.typedValue;
      }
    };
    exports.BooleanLiteral = BooleanLiteral;
    var LangStringLiteral = class extends Literal {
      constructor(typedValue, language, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.RDF_LANG_STRING, typedValue, language);
        this.typedValue = typedValue;
        this.language = language;
      }
      coerceEBV() {
        return this.str().length > 0;
      }
    };
    exports.LangStringLiteral = LangStringLiteral;
    var StringLiteral = class extends Literal {
      /**
       * @param typedValue
       * @param dataType Should be type that implements XSD_STRING
       */
      constructor(typedValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_STRING, typedValue);
        this.typedValue = typedValue;
      }
      coerceEBV() {
        return this.str().length > 0;
      }
    };
    exports.StringLiteral = StringLiteral;
    var DateTimeLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_DATE_TIME, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDateTime)(this.typedValue);
      }
    };
    exports.DateTimeLiteral = DateTimeLiteral;
    var TimeLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_TIME, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeTime)(this.typedValue);
      }
    };
    exports.TimeLiteral = TimeLiteral;
    var DateLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_DATE, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDate)(this.typedValue);
      }
    };
    exports.DateLiteral = DateLiteral;
    var DurationLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_DURATION, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDuration)(this.typedValue);
      }
    };
    exports.DurationLiteral = DurationLiteral;
    var DayTimeDurationLiteral = class extends DurationLiteral {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, strValue, dataType ?? Consts_1.TypeURL.XSD_DAY_TIME_DURATION);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
    };
    exports.DayTimeDurationLiteral = DayTimeDurationLiteral;
    var YearMonthDurationLiteral = class extends Literal {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType ?? Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDuration)(this.typedValue, "P0M");
      }
    };
    exports.YearMonthDurationLiteral = YearMonthDurationLiteral;
    var NonLexicalLiteral = class extends Literal {
      constructor(typedValue, dataType, openWorldType, strValue, language) {
        super({ toString: () => "undefined" }, dataType, strValue, language);
        this.openWorldType = openWorldType;
      }
      coerceEBV() {
        const isNumericOrBool = (0, TypeHandling_1.isSubTypeOf)(this.dataType, Consts_1.TypeURL.XSD_BOOLEAN, this.openWorldType) || (0, TypeHandling_1.isSubTypeOf)(this.dataType, Consts_1.TypeAlias.SPARQL_NUMERIC, this.openWorldType);
        if (isNumericOrBool) {
          return false;
        }
        throw new Err.EBVCoercionError(this);
      }
      toRDF(dataFactory) {
        return dataFactory.literal(this.str(), this.language ?? dataFactory.namedNode(this.dataType));
      }
      str() {
        return this.strValue ?? "";
      }
    };
    exports.NonLexicalLiteral = NonLexicalLiteral;
    function isNonLexicalLiteral(lit) {
      if (lit instanceof NonLexicalLiteral) {
        return lit;
      }
      return void 0;
    }
    exports.isNonLexicalLiteral = isNonLexicalLiteral;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Operator.js
var require_Operator = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Operator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Operator = void 0;
    var types_1 = require_lib4();
    var Operator = class {
      constructor(name, args, apply) {
        this.name = name;
        this.args = args;
        this.apply = apply;
        this.expressionType = types_1.ExpressionType.Operator;
      }
    };
    exports.Operator = Operator;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Aggregate.js
var require_Aggregate = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Aggregate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Aggregate = void 0;
    var types_1 = require_lib4();
    var Aggregate = class {
      constructor(name, expression) {
        this.name = name;
        this.expression = expression;
        this.expressionType = types_1.ExpressionType.Aggregate;
      }
    };
    exports.Aggregate = Aggregate;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Existence.js
var require_Existence = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/Existence.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Existence = void 0;
    var types_1 = require_lib4();
    var Existence = class {
      constructor(expression) {
        this.expression = expression;
        this.expressionType = types_1.ExpressionType.Existence;
      }
    };
    exports.Existence = Existence;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/index.js
var require_expressions = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/expressions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Expressions(), exports);
    __exportStar(require_Variable2(), exports);
    __exportStar(require_Term(), exports);
    __exportStar(require_Operator(), exports);
    __exportStar(require_Aggregate(), exports);
    __exportStar(require_Existence(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/DateTimeHelpers.js
var require_DateTimeHelpers = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/DateTimeHelpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractTimeZone = exports.extractRawTimeZone = exports.dayTimeDurationsToSeconds = exports.yearMonthDurationsToMonths = exports.trimToDayTimeDuration = exports.trimToYearMonthDuration = exports.toUTCDate = exports.toJSDate = exports.negateDuration = exports.toDateTimeRepresentation = exports.defaultedDateTimeRepresentation = exports.simplifyDurationRepresentation = exports.defaultedDurationRepresentation = exports.defaultedYearMonthDurationRepresentation = exports.defaultedDayTimeDurationRepresentation = void 0;
    function defaultedDayTimeDurationRepresentation(rep) {
      return {
        day: rep.day ?? 0,
        hours: rep.hours ?? 0,
        minutes: rep.minutes ?? 0,
        seconds: rep.seconds ?? 0
      };
    }
    exports.defaultedDayTimeDurationRepresentation = defaultedDayTimeDurationRepresentation;
    function defaultedYearMonthDurationRepresentation(rep) {
      return {
        year: rep.year ?? 0,
        month: rep.month ?? 0
      };
    }
    exports.defaultedYearMonthDurationRepresentation = defaultedYearMonthDurationRepresentation;
    function defaultedDurationRepresentation(rep) {
      return {
        ...defaultedDayTimeDurationRepresentation(rep),
        ...defaultedYearMonthDurationRepresentation(rep)
      };
    }
    exports.defaultedDurationRepresentation = defaultedDurationRepresentation;
    function simplifyDurationRepresentation(rep) {
      const temp = defaultedDurationRepresentation(rep);
      const res = {};
      const years = temp.year + Math.trunc(temp.month / 12);
      if (years) {
        res.year = years;
        temp.month %= 12;
      }
      if (temp.month) {
        res.month = temp.month;
      }
      const days = temp.day + Math.trunc(temp.hours / 24) + Math.trunc(temp.minutes / (24 * 60)) + Math.trunc(temp.seconds / (24 * 60 * 60));
      if (days) {
        res.day = days;
        temp.hours %= 24;
        temp.minutes %= 24 * 60;
        temp.seconds %= 24 * 60 * 60;
      }
      const hours = temp.hours + Math.trunc(temp.minutes / 60) + Math.trunc(temp.seconds / (60 * 60));
      if (hours) {
        res.hours = hours;
        temp.minutes %= 60;
        temp.seconds %= 60 * 60;
      }
      const minutes = temp.minutes + Math.trunc(temp.seconds / 60);
      if (minutes) {
        res.minutes = minutes;
        temp.seconds %= 60;
      }
      if (temp.seconds) {
        res.seconds = temp.seconds;
      }
      return res;
    }
    exports.simplifyDurationRepresentation = simplifyDurationRepresentation;
    function defaultedDateTimeRepresentation(rep) {
      return {
        ...rep,
        day: rep.day ?? 1,
        hours: rep.hours ?? 0,
        month: rep.month ?? 1,
        year: rep.year ?? 0,
        seconds: rep.seconds ?? 0,
        minutes: rep.minutes ?? 0
      };
    }
    exports.defaultedDateTimeRepresentation = defaultedDateTimeRepresentation;
    function toDateTimeRepresentation({ date, timeZone }) {
      return {
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate(),
        hours: date.getHours(),
        minutes: date.getMinutes(),
        seconds: date.getSeconds(),
        zoneHours: timeZone.zoneHours,
        zoneMinutes: timeZone.zoneMinutes
      };
    }
    exports.toDateTimeRepresentation = toDateTimeRepresentation;
    function negateDuration(dur) {
      return {
        year: dur.year === void 0 ? void 0 : -1 * dur.year,
        month: dur.month === void 0 ? void 0 : -1 * dur.month,
        day: dur.day === void 0 ? void 0 : -1 * dur.day,
        hours: dur.hours === void 0 ? void 0 : -1 * dur.hours,
        minutes: dur.minutes === void 0 ? void 0 : -1 * dur.minutes,
        seconds: dur.seconds === void 0 ? void 0 : -1 * dur.seconds
      };
    }
    exports.negateDuration = negateDuration;
    function toJSDate(date) {
      const res = new Date(date.year, date.month - 1, date.day, date.hours, date.minutes, Math.trunc(date.seconds), date.seconds % 1 * 1e3);
      if (date.year >= 0 && date.year < 100) {
        const jumpDeltaOfDate = 1900;
        res.setFullYear(res.getFullYear() - jumpDeltaOfDate);
      }
      return res;
    }
    exports.toJSDate = toJSDate;
    function toUTCDate(date, defaultTimezone) {
      const localTime = toJSDate(defaultedDateTimeRepresentation(date));
      const minutesCorrectionLocal = localTime.getTimezoneOffset();
      const hourCorrectionUTC = date.zoneHours ?? defaultTimezone.zoneHours;
      const minutesCorrectionUTC = date.zoneMinutes ?? defaultTimezone.zoneMinutes;
      return new Date(localTime.getTime() - (minutesCorrectionLocal + hourCorrectionUTC * 60 + minutesCorrectionUTC) * 60 * 1e3);
    }
    exports.toUTCDate = toUTCDate;
    function trimToYearMonthDuration(dur) {
      return {
        year: dur.year,
        month: dur.month
      };
    }
    exports.trimToYearMonthDuration = trimToYearMonthDuration;
    function trimToDayTimeDuration(dur) {
      return {
        day: dur.day,
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds
      };
    }
    exports.trimToDayTimeDuration = trimToDayTimeDuration;
    function yearMonthDurationsToMonths(dur) {
      return dur.year * 12 + dur.month;
    }
    exports.yearMonthDurationsToMonths = yearMonthDurationsToMonths;
    function dayTimeDurationsToSeconds(dur) {
      return ((dur.day * 24 + dur.hours) * 60 + dur.minutes) * 60 + dur.seconds;
    }
    exports.dayTimeDurationsToSeconds = dayTimeDurationsToSeconds;
    function extractRawTimeZone(zoneContained) {
      const extraction = /(Z|([+-]\d\d:\d\d))?$/u.exec(zoneContained);
      return extraction[0];
    }
    exports.extractRawTimeZone = extractRawTimeZone;
    function extractTimeZone(date) {
      return {
        zoneHours: date.getTimezoneOffset() / 60,
        zoneMinutes: date.getTimezoneOffset() % 60
      };
    }
    exports.extractTimeZone = extractTimeZone;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/SpecAlgos.js
var require_SpecAlgos = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/SpecAlgos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.elapsedDuration = exports.addDurationToDateTime = exports.maximumDayInMonthFor = void 0;
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    function fDiv(arg, high, low = 0) {
      const first3 = arg - low;
      const second = high - low;
      const intDiv = Math.floor(first3 / second);
      return { intDiv, remainder: arg - intDiv * second };
    }
    function maximumDayInMonthFor(yearValue, monthValue) {
      const { intDiv: additionalYears, remainder: month } = fDiv(monthValue, 13, 1);
      const year = yearValue + additionalYears;
      if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        return 31;
      }
      if ([4, 6, 9, 11].includes(month)) {
        return 30;
      }
      if (month === 2 && (fDiv(year, 400).remainder === 0 || fDiv(year, 100).remainder !== 0 && fDiv(year, 4).remainder === 0)) {
        return 29;
      }
      return 28;
    }
    exports.maximumDayInMonthFor = maximumDayInMonthFor;
    function addDurationToDateTime(date, duration) {
      const newDate = { ...date };
      let tempDiv = fDiv(date.month + duration.month, 13, 1);
      newDate.month = tempDiv.remainder;
      newDate.year = date.year + duration.year + tempDiv.intDiv;
      tempDiv = fDiv(date.seconds + duration.seconds, 60);
      newDate.seconds = tempDiv.remainder;
      tempDiv = fDiv(date.minutes + duration.minutes + tempDiv.intDiv, 60);
      newDate.minutes = tempDiv.remainder;
      tempDiv = fDiv(date.hours + duration.hours + tempDiv.intDiv, 24);
      newDate.hours = tempDiv.remainder;
      newDate.day = date.day + duration.day + tempDiv.intDiv;
      while (true) {
        let carry;
        if (newDate.day < 1) {
          newDate.day += maximumDayInMonthFor(newDate.year, newDate.month - 1);
          carry = -1;
        } else if (newDate.day > maximumDayInMonthFor(newDate.year, newDate.month)) {
          newDate.day -= maximumDayInMonthFor(newDate.year, newDate.month);
          carry = 1;
        } else {
          break;
        }
        tempDiv = fDiv(newDate.month + carry, 13, 1);
        newDate.month = tempDiv.remainder;
        newDate.year += tempDiv.intDiv;
      }
      return newDate;
    }
    exports.addDurationToDateTime = addDurationToDateTime;
    function elapsedDuration(first3, second, defaultTimeZone) {
      const d1 = (0, DateTimeHelpers_1.toUTCDate)(first3, defaultTimeZone);
      const d2 = (0, DateTimeHelpers_1.toUTCDate)(second, defaultTimeZone);
      const diff = d1.getTime() - d2.getTime();
      return {
        day: Math.floor(diff / (1e3 * 60 * 60 * 24)),
        hours: Math.floor(diff % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60)),
        minutes: Math.floor(diff % (1e3 * 60 * 60) / (1e3 * 60)),
        seconds: diff % (1e3 * 60)
      };
    }
    exports.elapsedDuration = elapsedDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Parsing.js
var require_Parsing = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Parsing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDayTimeDuration = exports.parseYearMonthDuration = exports.parseDuration = exports.parseTime = exports.parseDate = exports.parseDateTime = exports.parseXSDDecimal = exports.parseXSDFloat = void 0;
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var Errors_1 = require_Errors();
    var SpecAlgos_1 = require_SpecAlgos();
    function parseXSDFloat(value) {
      const numb = Number(value);
      if (Number.isNaN(numb)) {
        if (value === "NaN") {
          return Number.NaN;
        }
        if (value === "INF" || value === "+INF") {
          return Number.POSITIVE_INFINITY;
        }
        if (value === "-INF") {
          return Number.NEGATIVE_INFINITY;
        }
        return void 0;
      }
      return numb;
    }
    exports.parseXSDFloat = parseXSDFloat;
    function parseXSDDecimal(value) {
      const numb = Number(value);
      return Number.isNaN(numb) ? void 0 : numb;
    }
    exports.parseXSDDecimal = parseXSDDecimal;
    function parseDateTime(dateTimeStr) {
      const [date, time] = dateTimeStr.split("T");
      if (time === void 0) {
        throw new Errors_1.ParseError(dateTimeStr, "dateTime");
      }
      return { ...parseDate(date), ...__parseTime(time) };
    }
    exports.parseDateTime = parseDateTime;
    function parseTimeZone(timeZoneStr) {
      if (timeZoneStr === "") {
        return { zoneHours: void 0, zoneMinutes: void 0 };
      }
      if (timeZoneStr === "Z") {
        return { zoneHours: 0, zoneMinutes: 0 };
      }
      const timeZoneStrings = timeZoneStr.replaceAll(/^([+|-])(\d\d):(\d\d)$/gu, "$11!$2!$3").split("!");
      const timeZone = timeZoneStrings.map(Number);
      return {
        zoneHours: timeZone[0] * timeZone[1],
        zoneMinutes: timeZone[0] * timeZone[2]
      };
    }
    function parseDate(dateStr) {
      const formatted = dateStr.replaceAll(/^(-)?([123456789]*\d{4})-(\d\d)-(\d\d)(Z|([+-]\d\d:\d\d))?$/gu, "$11!$2!$3!$4!$5");
      if (formatted === dateStr) {
        throw new Errors_1.ParseError(dateStr, "date");
      }
      const dateStrings = formatted.split("!");
      const date = dateStrings.slice(0, -1).map(Number);
      const res = {
        year: date[0] * date[1],
        month: date[2],
        day: date[3],
        ...parseTimeZone(dateStrings[4])
      };
      if (!(res.month >= 1 && res.month <= 12) || !(res.day >= 1 && res.day <= (0, SpecAlgos_1.maximumDayInMonthFor)(res.year, res.month))) {
        throw new Errors_1.ParseError(dateStr, "date");
      }
      return res;
    }
    exports.parseDate = parseDate;
    function __parseTime(timeStr) {
      const formatted = timeStr.replaceAll(/^(\d\d):(\d\d):(\d\d(\.\d+)?)(Z|([+-]\d\d:\d\d))?$/gu, "$1!$2!$3!$5");
      if (formatted === timeStr) {
        throw new Errors_1.ParseError(timeStr, "time");
      }
      const timeStrings = formatted.split("!");
      const time = timeStrings.slice(0, -1).map(Number);
      const res = {
        hours: time[0],
        minutes: time[1],
        seconds: time[2],
        ...parseTimeZone(timeStrings[3])
      };
      if (res.seconds >= 60 || res.minutes >= 60 || res.hours > 24 || res.hours === 24 && (res.minutes !== 0 || res.seconds !== 0)) {
        throw new Errors_1.ParseError(timeStr, "time");
      }
      return res;
    }
    function parseTime(timeStr) {
      const res = __parseTime(timeStr);
      res.hours %= 24;
      return res;
    }
    exports.parseTime = parseTime;
    function parseDuration(durationStr) {
      const [dayNotation, timeNotation] = durationStr.split("T");
      const formattedDayDur = dayNotation.replaceAll(/^(-)?P(\d+Y)?(\d+M)?(\d+D)?$/gu, "$11S!$2!$3!$4");
      if (formattedDayDur === dayNotation) {
        throw new Errors_1.ParseError(durationStr, "duration");
      }
      const durationStrings = formattedDayDur.split("!");
      if (timeNotation !== void 0) {
        const formattedTimeDur = timeNotation.replaceAll(/^(\d+H)?(\d+M)?(\d+(\.\d+)?S)?$/gu, "$1!$2!$3");
        if (timeNotation === "" || timeNotation === formattedTimeDur) {
          throw new Errors_1.ParseError(durationStr, "duration");
        }
        durationStrings.push(...formattedTimeDur.split("!"));
      }
      const duration = durationStrings.map((str) => str.slice(0, -1));
      if (!duration.slice(1).some(Boolean)) {
        throw new Errors_1.ParseError(durationStr, "duration");
      }
      const sign = Number(duration[0]);
      return (0, DateTimeHelpers_1.simplifyDurationRepresentation)({
        year: duration[1] ? sign * Number(duration[1]) : void 0,
        month: duration[2] ? sign * Number(duration[2]) : void 0,
        day: duration[3] ? sign * Number(duration[3]) : void 0,
        hours: duration[4] ? sign * Number(duration[4]) : void 0,
        minutes: duration[5] ? sign * Number(duration[5]) : void 0,
        seconds: duration[6] ? sign * Number(duration[6]) : void 0
      });
    }
    exports.parseDuration = parseDuration;
    function parseYearMonthDuration(durationStr) {
      const res = parseDuration(durationStr);
      if (["hours", "minutes", "seconds", "day"].some((key) => Boolean(res[key]))) {
        throw new Errors_1.ParseError(durationStr, "yearMonthDuration");
      }
      return res;
    }
    exports.parseYearMonthDuration = parseYearMonthDuration;
    function parseDayTimeDuration(durationStr) {
      const res = parseDuration(durationStr);
      if (["year", "month"].some((key) => Boolean(res[key]))) {
        throw new Errors_1.ParseError(durationStr, "dayTimeDuration");
      }
      return res;
    }
    exports.parseDayTimeDuration = parseDayTimeDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/transformers/TermTransformer.js
var require_TermTransformer = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/transformers/TermTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermTransformer = void 0;
    var RDFString = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var E = require_expressions();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var Errors_1 = require_Errors();
    var Parsing_1 = require_Parsing();
    var P = require_Parsing();
    var TypeHandling_1 = require_TypeHandling();
    var TermTransformer = class {
      constructor(superTypeProvider) {
        this.superTypeProvider = superTypeProvider;
      }
      /**
       * Transforms an RDF term to the internal representation of a term,
       * assuming it is not a variable, which would be an expression (internally).
       *
       * @param term RDF term to transform into internal representation of a term
       */
      transformRDFTermUnsafe(term) {
        return this.transformTerm({
          term,
          type: sparqlalgebrajs_1.Algebra.types.EXPRESSION,
          expressionType: sparqlalgebrajs_1.Algebra.expressionTypes.TERM
        });
      }
      transformTerm(term) {
        if (!term.term) {
          throw new Err.InvalidExpression(term);
        }
        switch (term.term.termType) {
          case "Variable":
            return new E.Variable(RDFString.termToString(term.term));
          case "Literal":
            return this.transformLiteral(term.term);
          case "NamedNode":
            return new E.NamedNode(term.term.value);
          case "BlankNode":
            return new E.BlankNode(term.term.value);
          case "Quad":
            return new E.Quad(this.transformRDFTermUnsafe(term.term.subject), this.transformRDFTermUnsafe(term.term.predicate), this.transformRDFTermUnsafe(term.term.object), this.transformRDFTermUnsafe(term.term.graph));
          case "DefaultGraph":
            return new E.DefaultGraph();
        }
      }
      /**
       * @param lit the rdf literal we want to transform to an internal Literal expression.
       */
      transformLiteral(lit) {
        if (!lit.datatype || [null, void 0, ""].includes(lit.datatype.value)) {
          return lit.language ? new E.LangStringLiteral(lit.value, lit.language) : new E.StringLiteral(lit.value);
        }
        const dataType = lit.datatype.value;
        const superTypeDict = (0, TypeHandling_1.getSuperTypeDict)(dataType, this.superTypeProvider);
        try {
          if (Consts_1.TypeURL.XSD_STRING in superTypeDict) {
            return new E.StringLiteral(lit.value, dataType);
          }
          if (Consts_1.TypeURL.RDF_LANG_STRING in superTypeDict) {
            return new E.LangStringLiteral(lit.value, lit.language);
          }
          if (Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION in superTypeDict) {
            return new E.YearMonthDurationLiteral((0, Parsing_1.parseYearMonthDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DAY_TIME_DURATION in superTypeDict) {
            return new E.DayTimeDurationLiteral((0, Parsing_1.parseDayTimeDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DURATION in superTypeDict) {
            return new E.DurationLiteral((0, Parsing_1.parseDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DATE_TIME in superTypeDict) {
            const dateVal = new Date(lit.value);
            if (Number.isNaN(dateVal.getTime())) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            return new E.DateTimeLiteral((0, Parsing_1.parseDateTime)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DATE in superTypeDict) {
            return new E.DateLiteral((0, Parsing_1.parseDate)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_TIME in superTypeDict) {
            return new E.TimeLiteral((0, Parsing_1.parseTime)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_BOOLEAN in superTypeDict) {
            if (lit.value !== "true" && lit.value !== "false" && lit.value !== "1" && lit.value !== "0") {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            return new E.BooleanLiteral(lit.value === "true" || lit.value === "1", lit.value);
          }
          if (Consts_1.TypeURL.XSD_DECIMAL in superTypeDict) {
            const intVal = P.parseXSDDecimal(lit.value);
            if (intVal === void 0) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            if (Consts_1.TypeURL.XSD_INTEGER in superTypeDict) {
              return new E.IntegerLiteral(intVal, dataType, lit.value);
            }
            return new E.DecimalLiteral(intVal, dataType, lit.value);
          }
          const isFloat = Consts_1.TypeURL.XSD_FLOAT in superTypeDict;
          const isDouble = Consts_1.TypeURL.XSD_DOUBLE in superTypeDict;
          if (isFloat || isDouble) {
            const doubleVal = P.parseXSDFloat(lit.value);
            if (doubleVal === void 0) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            if (isFloat) {
              return new E.FloatLiteral(doubleVal, dataType, lit.value);
            }
            return new E.DoubleLiteral(doubleVal, dataType, lit.value);
          }
          return new E.Literal(lit.value, dataType, lit.value);
        } catch (error) {
          if ((0, Errors_1.isExpressionError)(error)) {
            return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
          }
          throw error;
        }
      }
    };
    exports.TermTransformer = TermTransformer;
  }
});

// ../../lipdjs/node_modules/lru-cache/dist/commonjs/index.js
var require_commonjs = __commonJS({
  "../../lipdjs/node_modules/lru-cache/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LRUCache = void 0;
    var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    var warned = /* @__PURE__ */ new Set();
    var PROCESS = typeof process === "object" && !!process ? process : {};
    var emitWarning = (msg, type, code, fn) => {
      typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
    };
    var AC = globalThis.AbortController;
    var AS = globalThis.AbortSignal;
    var _a;
    if (typeof AC === "undefined") {
      AS = class AbortSignal {
        constructor() {
          __publicField(this, "onabort");
          __publicField(this, "_onabort", []);
          __publicField(this, "reason");
          __publicField(this, "aborted", false);
        }
        addEventListener(_, fn) {
          this._onabort.push(fn);
        }
      };
      AC = class AbortController {
        constructor() {
          __publicField(this, "signal", new AS());
          warnACPolyfill();
        }
        abort(reason) {
          var _a3, _b2;
          if (this.signal.aborted)
            return;
          this.signal.reason = reason;
          this.signal.aborted = true;
          for (const fn of this.signal._onabort) {
            fn(reason);
          }
          (_b2 = (_a3 = this.signal).onabort) == null ? void 0 : _b2.call(_a3, reason);
        }
      };
      let printACPolyfillWarning = ((_a = PROCESS.env) == null ? void 0 : _a.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
      const warnACPolyfill = () => {
        if (!printACPolyfillWarning)
          return;
        printACPolyfillWarning = false;
        emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
      };
    }
    var shouldWarn = (code) => !warned.has(code);
    var TYPE = Symbol("type");
    var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
    var getUintArray = (max2) => !isPosInt(max2) ? null : max2 <= Math.pow(2, 8) ? Uint8Array : max2 <= Math.pow(2, 16) ? Uint16Array : max2 <= Math.pow(2, 32) ? Uint32Array : max2 <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
    var ZeroArray = class extends Array {
      constructor(size) {
        super(size);
        this.fill(0);
      }
    };
    var _constructing;
    var _Stack = class _Stack {
      constructor(max2, HeapCls) {
        __publicField(this, "heap");
        __publicField(this, "length");
        if (!__privateGet(_Stack, _constructing)) {
          throw new TypeError("instantiate Stack using Stack.create(n)");
        }
        this.heap = new HeapCls(max2);
        this.length = 0;
      }
      static create(max2) {
        const HeapCls = getUintArray(max2);
        if (!HeapCls)
          return [];
        __privateSet(_Stack, _constructing, true);
        const s = new _Stack(max2, HeapCls);
        __privateSet(_Stack, _constructing, false);
        return s;
      }
      push(n) {
        this.heap[this.length++] = n;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    _constructing = new WeakMap();
    // private constructor
    __privateAdd(_Stack, _constructing, false);
    var Stack2 = _Stack;
    var _a2, _b, _max, _maxSize, _dispose, _disposeAfter, _fetchMethod, _memoMethod, _size, _calculatedSize, _keyMap, _keyList, _valList, _next, _prev, _head, _tail, _free, _disposed, _sizes, _starts, _ttls, _hasDispose, _hasFetchMethod, _hasDisposeAfter, _LRUCache_instances, initializeTTLTracking_fn, _updateItemAge, _statusTTL, _setItemTTL, _isStale, initializeSizeTracking_fn, _removeItemSize, _addItemSize, _requireSize, indexes_fn, rindexes_fn, isValidIndex_fn, evict_fn, backgroundFetch_fn, isBackgroundFetch_fn, connect_fn, moveToTail_fn, delete_fn, clear_fn;
    var _LRUCache = class _LRUCache {
      constructor(options) {
        __privateAdd(this, _LRUCache_instances);
        // options that cannot be changed without disaster
        __privateAdd(this, _max);
        __privateAdd(this, _maxSize);
        __privateAdd(this, _dispose);
        __privateAdd(this, _disposeAfter);
        __privateAdd(this, _fetchMethod);
        __privateAdd(this, _memoMethod);
        /**
         * {@link LRUCache.OptionsBase.ttl}
         */
        __publicField(this, "ttl");
        /**
         * {@link LRUCache.OptionsBase.ttlResolution}
         */
        __publicField(this, "ttlResolution");
        /**
         * {@link LRUCache.OptionsBase.ttlAutopurge}
         */
        __publicField(this, "ttlAutopurge");
        /**
         * {@link LRUCache.OptionsBase.updateAgeOnGet}
         */
        __publicField(this, "updateAgeOnGet");
        /**
         * {@link LRUCache.OptionsBase.updateAgeOnHas}
         */
        __publicField(this, "updateAgeOnHas");
        /**
         * {@link LRUCache.OptionsBase.allowStale}
         */
        __publicField(this, "allowStale");
        /**
         * {@link LRUCache.OptionsBase.noDisposeOnSet}
         */
        __publicField(this, "noDisposeOnSet");
        /**
         * {@link LRUCache.OptionsBase.noUpdateTTL}
         */
        __publicField(this, "noUpdateTTL");
        /**
         * {@link LRUCache.OptionsBase.maxEntrySize}
         */
        __publicField(this, "maxEntrySize");
        /**
         * {@link LRUCache.OptionsBase.sizeCalculation}
         */
        __publicField(this, "sizeCalculation");
        /**
         * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
         */
        __publicField(this, "noDeleteOnFetchRejection");
        /**
         * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
         */
        __publicField(this, "noDeleteOnStaleGet");
        /**
         * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
         */
        __publicField(this, "allowStaleOnFetchAbort");
        /**
         * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
         */
        __publicField(this, "allowStaleOnFetchRejection");
        /**
         * {@link LRUCache.OptionsBase.ignoreFetchAbort}
         */
        __publicField(this, "ignoreFetchAbort");
        // computed properties
        __privateAdd(this, _size);
        __privateAdd(this, _calculatedSize);
        __privateAdd(this, _keyMap);
        __privateAdd(this, _keyList);
        __privateAdd(this, _valList);
        __privateAdd(this, _next);
        __privateAdd(this, _prev);
        __privateAdd(this, _head);
        __privateAdd(this, _tail);
        __privateAdd(this, _free);
        __privateAdd(this, _disposed);
        __privateAdd(this, _sizes);
        __privateAdd(this, _starts);
        __privateAdd(this, _ttls);
        __privateAdd(this, _hasDispose);
        __privateAdd(this, _hasFetchMethod);
        __privateAdd(this, _hasDisposeAfter);
        // conditionally set private methods related to TTL
        __privateAdd(this, _updateItemAge, () => {
        });
        __privateAdd(this, _statusTTL, () => {
        });
        __privateAdd(this, _setItemTTL, () => {
        });
        /* c8 ignore stop */
        __privateAdd(this, _isStale, () => false);
        __privateAdd(this, _removeItemSize, (_i) => {
        });
        __privateAdd(this, _addItemSize, (_i, _s, _st) => {
        });
        __privateAdd(this, _requireSize, (_k, _v, size, sizeCalculation) => {
          if (size || sizeCalculation) {
            throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
          }
          return 0;
        });
        /**
         * A String value that is used in the creation of the default string
         * description of an object. Called by the built-in method
         * `Object.prototype.toString`.
         */
        __publicField(this, _a2, "LRUCache");
        const { max: max2 = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
        if (max2 !== 0 && !isPosInt(max2)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max2 ? getUintArray(max2) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max2);
        }
        __privateSet(this, _max, max2);
        __privateSet(this, _maxSize, maxSize);
        this.maxEntrySize = maxEntrySize || __privateGet(this, _maxSize);
        this.sizeCalculation = sizeCalculation;
        if (this.sizeCalculation) {
          if (!__privateGet(this, _maxSize) && !this.maxEntrySize) {
            throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        if (memoMethod !== void 0 && typeof memoMethod !== "function") {
          throw new TypeError("memoMethod must be a function if defined");
        }
        __privateSet(this, _memoMethod, memoMethod);
        if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
          throw new TypeError("fetchMethod must be a function if specified");
        }
        __privateSet(this, _fetchMethod, fetchMethod);
        __privateSet(this, _hasFetchMethod, !!fetchMethod);
        __privateSet(this, _keyMap, /* @__PURE__ */ new Map());
        __privateSet(this, _keyList, new Array(max2).fill(void 0));
        __privateSet(this, _valList, new Array(max2).fill(void 0));
        __privateSet(this, _next, new UintArray(max2));
        __privateSet(this, _prev, new UintArray(max2));
        __privateSet(this, _head, 0);
        __privateSet(this, _tail, 0);
        __privateSet(this, _free, Stack2.create(max2));
        __privateSet(this, _size, 0);
        __privateSet(this, _calculatedSize, 0);
        if (typeof dispose === "function") {
          __privateSet(this, _dispose, dispose);
        }
        if (typeof disposeAfter === "function") {
          __privateSet(this, _disposeAfter, disposeAfter);
          __privateSet(this, _disposed, []);
        } else {
          __privateSet(this, _disposeAfter, void 0);
          __privateSet(this, _disposed, void 0);
        }
        __privateSet(this, _hasDispose, !!__privateGet(this, _dispose));
        __privateSet(this, _hasDisposeAfter, !!__privateGet(this, _disposeAfter));
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (__privateGet(this, _maxSize) !== 0) {
            if (!isPosInt(__privateGet(this, _maxSize))) {
              throw new TypeError("maxSize must be a positive integer if specified");
            }
          }
          if (!isPosInt(this.maxEntrySize)) {
            throw new TypeError("maxEntrySize must be a positive integer if specified");
          }
          __privateMethod(this, _LRUCache_instances, initializeSizeTracking_fn).call(this);
        }
        this.allowStale = !!allowStale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || 0;
        if (this.ttl) {
          if (!isPosInt(this.ttl)) {
            throw new TypeError("ttl must be a positive integer if specified");
          }
          __privateMethod(this, _LRUCache_instances, initializeTTLTracking_fn).call(this);
        }
        if (__privateGet(this, _max) === 0 && this.ttl === 0 && __privateGet(this, _maxSize) === 0) {
          throw new TypeError("At least one of max, maxSize, or ttl is required");
        }
        if (!this.ttlAutopurge && !__privateGet(this, _max) && !__privateGet(this, _maxSize)) {
          const code = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn(code)) {
            warned.add(code);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
          }
        }
      }
      /**
       * Do not call this method unless you need to inspect the
       * inner workings of the cache.  If anything returned by this
       * object is modified in any way, strange breakage may occur.
       *
       * These fields are private for a reason!
       *
       * @internal
       */
      static unsafeExposeInternals(c) {
        return {
          // properties
          starts: __privateGet(c, _starts),
          ttls: __privateGet(c, _ttls),
          sizes: __privateGet(c, _sizes),
          keyMap: __privateGet(c, _keyMap),
          keyList: __privateGet(c, _keyList),
          valList: __privateGet(c, _valList),
          next: __privateGet(c, _next),
          prev: __privateGet(c, _prev),
          get head() {
            return __privateGet(c, _head);
          },
          get tail() {
            return __privateGet(c, _tail);
          },
          free: __privateGet(c, _free),
          // methods
          isBackgroundFetch: (p) => {
            var _a3;
            return __privateMethod(_a3 = c, _LRUCache_instances, isBackgroundFetch_fn).call(_a3, p);
          },
          backgroundFetch: (k, index, options, context) => {
            var _a3;
            return __privateMethod(_a3 = c, _LRUCache_instances, backgroundFetch_fn).call(_a3, k, index, options, context);
          },
          moveToTail: (index) => {
            var _a3;
            return __privateMethod(_a3 = c, _LRUCache_instances, moveToTail_fn).call(_a3, index);
          },
          indexes: (options) => {
            var _a3;
            return __privateMethod(_a3 = c, _LRUCache_instances, indexes_fn).call(_a3, options);
          },
          rindexes: (options) => {
            var _a3;
            return __privateMethod(_a3 = c, _LRUCache_instances, rindexes_fn).call(_a3, options);
          },
          isStale: (index) => {
            var _a3;
            return __privateGet(_a3 = c, _isStale).call(_a3, index);
          }
        };
      }
      // Protected read-only members
      /**
       * {@link LRUCache.OptionsBase.max} (read-only)
       */
      get max() {
        return __privateGet(this, _max);
      }
      /**
       * {@link LRUCache.OptionsBase.maxSize} (read-only)
       */
      get maxSize() {
        return __privateGet(this, _maxSize);
      }
      /**
       * The total computed size of items in the cache (read-only)
       */
      get calculatedSize() {
        return __privateGet(this, _calculatedSize);
      }
      /**
       * The number of items stored in the cache (read-only)
       */
      get size() {
        return __privateGet(this, _size);
      }
      /**
       * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
       */
      get fetchMethod() {
        return __privateGet(this, _fetchMethod);
      }
      get memoMethod() {
        return __privateGet(this, _memoMethod);
      }
      /**
       * {@link LRUCache.OptionsBase.dispose} (read-only)
       */
      get dispose() {
        return __privateGet(this, _dispose);
      }
      /**
       * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
       */
      get disposeAfter() {
        return __privateGet(this, _disposeAfter);
      }
      /**
       * Return the number of ms left in the item's TTL. If item is not in cache,
       * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
       */
      getRemainingTTL(key) {
        return __privateGet(this, _keyMap).has(key) ? Infinity : 0;
      }
      /**
       * Return a generator yielding `[key, value]` pairs,
       * in order from most recently used to least recently used.
       */
      *entries() {
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
          if (__privateGet(this, _valList)[i] !== void 0 && __privateGet(this, _keyList)[i] !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield [__privateGet(this, _keyList)[i], __privateGet(this, _valList)[i]];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.entries}
       *
       * Return a generator yielding `[key, value]` pairs,
       * in order from least recently used to most recently used.
       */
      *rentries() {
        for (const i of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
          if (__privateGet(this, _valList)[i] !== void 0 && __privateGet(this, _keyList)[i] !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield [__privateGet(this, _keyList)[i], __privateGet(this, _valList)[i]];
          }
        }
      }
      /**
       * Return a generator yielding the keys in the cache,
       * in order from most recently used to least recently used.
       */
      *keys() {
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
          const k = __privateGet(this, _keyList)[i];
          if (k !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield k;
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.keys}
       *
       * Return a generator yielding the keys in the cache,
       * in order from least recently used to most recently used.
       */
      *rkeys() {
        for (const i of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
          const k = __privateGet(this, _keyList)[i];
          if (k !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield k;
          }
        }
      }
      /**
       * Return a generator yielding the values in the cache,
       * in order from most recently used to least recently used.
       */
      *values() {
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
          const v = __privateGet(this, _valList)[i];
          if (v !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield __privateGet(this, _valList)[i];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.values}
       *
       * Return a generator yielding the values in the cache,
       * in order from least recently used to most recently used.
       */
      *rvalues() {
        for (const i of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
          const v = __privateGet(this, _valList)[i];
          if (v !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i])) {
            yield __privateGet(this, _valList)[i];
          }
        }
      }
      /**
       * Iterating over the cache itself yields the same results as
       * {@link LRUCache.entries}
       */
      [(_b = Symbol.iterator, _a2 = Symbol.toStringTag, _b)]() {
        return this.entries();
      }
      /**
       * Find a value for which the supplied fn method returns a truthy value,
       * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
       */
      find(fn, getOptions = {}) {
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
          const v = __privateGet(this, _valList)[i];
          const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          if (fn(value, __privateGet(this, _keyList)[i], this)) {
            return this.get(__privateGet(this, _keyList)[i], getOptions);
          }
        }
      }
      /**
       * Call the supplied function on each item in the cache, in order from most
       * recently used to least recently used.
       *
       * `fn` is called as `fn(value, key, cache)`.
       *
       * If `thisp` is provided, function will be called in the `this`-context of
       * the provided object, or the cache if no `thisp` object is provided.
       *
       * Does not update age or recenty of use, or iterate over stale values.
       */
      forEach(fn, thisp = this) {
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
          const v = __privateGet(this, _valList)[i];
          const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, __privateGet(this, _keyList)[i], this);
        }
      }
      /**
       * The same as {@link LRUCache.forEach} but items are iterated over in
       * reverse order.  (ie, less recently used items are iterated over first.)
       */
      rforEach(fn, thisp = this) {
        for (const i of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
          const v = __privateGet(this, _valList)[i];
          const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, __privateGet(this, _keyList)[i], this);
        }
      }
      /**
       * Delete any stale entries. Returns true if anything was removed,
       * false otherwise.
       */
      purgeStale() {
        let deleted = false;
        for (const i of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this, { allowStale: true })) {
          if (__privateGet(this, _isStale).call(this, i)) {
            __privateMethod(this, _LRUCache_instances, delete_fn).call(this, __privateGet(this, _keyList)[i], "expire");
            deleted = true;
          }
        }
        return deleted;
      }
      /**
       * Get the extended info about a given entry, to get its value, size, and
       * TTL info simultaneously. Returns `undefined` if the key is not present.
       *
       * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
       * serialization, the `start` value is always the current timestamp, and the
       * `ttl` is a calculated remaining time to live (negative if expired).
       *
       * Always returns stale values, if their info is found in the cache, so be
       * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
       * if relevant.
       */
      info(key) {
        const i = __privateGet(this, _keyMap).get(key);
        if (i === void 0)
          return void 0;
        const v = __privateGet(this, _valList)[i];
        const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
        if (value === void 0)
          return void 0;
        const entry = { value };
        if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
          const ttl = __privateGet(this, _ttls)[i];
          const start = __privateGet(this, _starts)[i];
          if (ttl && start) {
            const remain = ttl - (perf.now() - start);
            entry.ttl = remain;
            entry.start = Date.now();
          }
        }
        if (__privateGet(this, _sizes)) {
          entry.size = __privateGet(this, _sizes)[i];
        }
        return entry;
      }
      /**
       * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
       * passed to {@link LRLUCache#load}.
       *
       * The `start` fields are calculated relative to a portable `Date.now()`
       * timestamp, even if `performance.now()` is available.
       *
       * Stale entries are always included in the `dump`, even if
       * {@link LRUCache.OptionsBase.allowStale} is false.
       *
       * Note: this returns an actual array, not a generator, so it can be more
       * easily passed around.
       */
      dump() {
        const arr = [];
        for (const i of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this, { allowStale: true })) {
          const key = __privateGet(this, _keyList)[i];
          const v = __privateGet(this, _valList)[i];
          const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
          if (value === void 0 || key === void 0)
            continue;
          const entry = { value };
          if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
            entry.ttl = __privateGet(this, _ttls)[i];
            const age = perf.now() - __privateGet(this, _starts)[i];
            entry.start = Math.floor(Date.now() - age);
          }
          if (__privateGet(this, _sizes)) {
            entry.size = __privateGet(this, _sizes)[i];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      /**
       * Reset the cache and load in the items in entries in the order listed.
       *
       * The shape of the resulting cache may be different if the same options are
       * not used in both caches.
       *
       * The `start` fields are assumed to be calculated relative to a portable
       * `Date.now()` timestamp, even if `performance.now()` is available.
       */
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      /**
       * Add a value to the cache.
       *
       * Note: if `undefined` is specified as a value, this is an alias for
       * {@link LRUCache#delete}
       *
       * Fields on the {@link LRUCache.SetOptions} options param will override
       * their corresponding values in the constructor options for the scope
       * of this single `set()` operation.
       *
       * If `start` is provided, then that will set the effective start
       * time for the TTL calculation. Note that this must be a previous
       * value of `performance.now()` if supported, or a previous value of
       * `Date.now()` if not.
       *
       * Options object may also include `size`, which will prevent
       * calling the `sizeCalculation` function and just use the specified
       * number if it is a positive integer, and `noDisposeOnSet` which
       * will prevent calling a `dispose` function in the case of
       * overwrites.
       *
       * If the `size` (or return value of `sizeCalculation`) for a given
       * entry is greater than `maxEntrySize`, then the item will not be
       * added to the cache.
       *
       * Will update the recency of the entry.
       *
       * If the value is `undefined`, then this is an alias for
       * `cache.delete(key)`. `undefined` is never stored in the cache.
       */
      set(k, v, setOptions = {}) {
        var _a3, _b2, _c, _d, _e;
        if (v === void 0) {
          this.delete(k);
          return this;
        }
        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
        let { noUpdateTTL = this.noUpdateTTL } = setOptions;
        const size = __privateGet(this, _requireSize).call(this, k, v, setOptions.size || 0, sizeCalculation);
        if (this.maxEntrySize && size > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k, "set");
          return this;
        }
        let index = __privateGet(this, _size) === 0 ? void 0 : __privateGet(this, _keyMap).get(k);
        if (index === void 0) {
          index = __privateGet(this, _size) === 0 ? __privateGet(this, _tail) : __privateGet(this, _free).length !== 0 ? __privateGet(this, _free).pop() : __privateGet(this, _size) === __privateGet(this, _max) ? __privateMethod(this, _LRUCache_instances, evict_fn).call(this, false) : __privateGet(this, _size);
          __privateGet(this, _keyList)[index] = k;
          __privateGet(this, _valList)[index] = v;
          __privateGet(this, _keyMap).set(k, index);
          __privateGet(this, _next)[__privateGet(this, _tail)] = index;
          __privateGet(this, _prev)[index] = __privateGet(this, _tail);
          __privateSet(this, _tail, index);
          __privateWrapper(this, _size)._++;
          __privateGet(this, _addItemSize).call(this, index, size, status);
          if (status)
            status.set = "add";
          noUpdateTTL = false;
        } else {
          __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
          const oldVal = __privateGet(this, _valList)[index];
          if (v !== oldVal) {
            if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
              const { __staleWhileFetching: s } = oldVal;
              if (s !== void 0 && !noDisposeOnSet) {
                if (__privateGet(this, _hasDispose)) {
                  (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, s, k, "set");
                }
                if (__privateGet(this, _hasDisposeAfter)) {
                  (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([s, k, "set"]);
                }
              }
            } else if (!noDisposeOnSet) {
              if (__privateGet(this, _hasDispose)) {
                (_c = __privateGet(this, _dispose)) == null ? void 0 : _c.call(this, oldVal, k, "set");
              }
              if (__privateGet(this, _hasDisposeAfter)) {
                (_d = __privateGet(this, _disposed)) == null ? void 0 : _d.push([oldVal, k, "set"]);
              }
            }
            __privateGet(this, _removeItemSize).call(this, index);
            __privateGet(this, _addItemSize).call(this, index, size, status);
            __privateGet(this, _valList)[index] = v;
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0)
                status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && !__privateGet(this, _ttls)) {
          __privateMethod(this, _LRUCache_instances, initializeTTLTracking_fn).call(this);
        }
        if (__privateGet(this, _ttls)) {
          if (!noUpdateTTL) {
            __privateGet(this, _setItemTTL).call(this, index, ttl, start);
          }
          if (status)
            __privateGet(this, _statusTTL).call(this, status, index);
        }
        if (!noDisposeOnSet && __privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
          const dt = __privateGet(this, _disposed);
          let task;
          while (task = dt == null ? void 0 : dt.shift()) {
            (_e = __privateGet(this, _disposeAfter)) == null ? void 0 : _e.call(this, ...task);
          }
        }
        return this;
      }
      /**
       * Evict the least recently used item, returning its value or
       * `undefined` if cache is empty.
       */
      pop() {
        var _a3;
        try {
          while (__privateGet(this, _size)) {
            const val = __privateGet(this, _valList)[__privateGet(this, _head)];
            __privateMethod(this, _LRUCache_instances, evict_fn).call(this, true);
            if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, val)) {
              if (val.__staleWhileFetching) {
                return val.__staleWhileFetching;
              }
            } else if (val !== void 0) {
              return val;
            }
          }
        } finally {
          if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
            const dt = __privateGet(this, _disposed);
            let task;
            while (task = dt == null ? void 0 : dt.shift()) {
              (_a3 = __privateGet(this, _disposeAfter)) == null ? void 0 : _a3.call(this, ...task);
            }
          }
        }
      }
      /**
       * Check if a key is in the cache, without updating the recency of use.
       * Will return false if the item is stale, even though it is technically
       * in the cache.
       *
       * Check if a key is in the cache, without updating the recency of
       * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
       * to `true` in either the options or the constructor.
       *
       * Will return `false` if the item is stale, even though it is technically in
       * the cache. The difference can be determined (if it matters) by using a
       * `status` argument, and inspecting the `has` field.
       *
       * Will not update item age unless
       * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
       */
      has(k, hasOptions = {}) {
        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
        const index = __privateGet(this, _keyMap).get(k);
        if (index !== void 0) {
          const v = __privateGet(this, _valList)[index];
          if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) && v.__staleWhileFetching === void 0) {
            return false;
          }
          if (!__privateGet(this, _isStale).call(this, index)) {
            if (updateAgeOnHas) {
              __privateGet(this, _updateItemAge).call(this, index);
            }
            if (status) {
              status.has = "hit";
              __privateGet(this, _statusTTL).call(this, status, index);
            }
            return true;
          } else if (status) {
            status.has = "stale";
            __privateGet(this, _statusTTL).call(this, status, index);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      /**
       * Like {@link LRUCache#get} but doesn't update recency or delete stale
       * items.
       *
       * Returns `undefined` if the item is stale, unless
       * {@link LRUCache.OptionsBase.allowStale} is set.
       */
      peek(k, peekOptions = {}) {
        const { allowStale = this.allowStale } = peekOptions;
        const index = __privateGet(this, _keyMap).get(k);
        if (index === void 0 || !allowStale && __privateGet(this, _isStale).call(this, index)) {
          return;
        }
        const v = __privateGet(this, _valList)[index];
        return __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      }
      async fetch(k, fetchOptions = {}) {
        const {
          // get options
          allowStale = this.allowStale,
          updateAgeOnGet = this.updateAgeOnGet,
          noDeleteOnStaleGet = this.noDeleteOnStaleGet,
          // set options
          ttl = this.ttl,
          noDisposeOnSet = this.noDisposeOnSet,
          size = 0,
          sizeCalculation = this.sizeCalculation,
          noUpdateTTL = this.noUpdateTTL,
          // fetch exclusive options
          noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
          allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
          ignoreFetchAbort = this.ignoreFetchAbort,
          allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
          context,
          forceRefresh = false,
          status,
          signal
        } = fetchOptions;
        if (!__privateGet(this, _hasFetchMethod)) {
          if (status)
            status.fetch = "get";
          return this.get(k, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index = __privateGet(this, _keyMap).get(k);
        if (index === void 0) {
          if (status)
            status.fetch = "miss";
          const p = __privateMethod(this, _LRUCache_instances, backgroundFetch_fn).call(this, k, index, options, context);
          return p.__returned = p;
        } else {
          const v = __privateGet(this, _valList)[index];
          if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
            const stale = allowStale && v.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale)
                status.returnedStale = true;
            }
            return stale ? v.__staleWhileFetching : v.__returned = v;
          }
          const isStale = __privateGet(this, _isStale).call(this, index);
          if (!forceRefresh && !isStale) {
            if (status)
              status.fetch = "hit";
            __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
            if (updateAgeOnGet) {
              __privateGet(this, _updateItemAge).call(this, index);
            }
            if (status)
              __privateGet(this, _statusTTL).call(this, status, index);
            return v;
          }
          const p = __privateMethod(this, _LRUCache_instances, backgroundFetch_fn).call(this, k, index, options, context);
          const hasStale = p.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = isStale ? "stale" : "refresh";
            if (staleVal && isStale)
              status.returnedStale = true;
          }
          return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
      }
      async forceFetch(k, fetchOptions = {}) {
        const v = await this.fetch(k, fetchOptions);
        if (v === void 0)
          throw new Error("fetch() returned undefined");
        return v;
      }
      memo(k, memoOptions = {}) {
        const memoMethod = __privateGet(this, _memoMethod);
        if (!memoMethod) {
          throw new Error("no memoMethod provided to constructor");
        }
        const { context, forceRefresh, ...options } = memoOptions;
        const v = this.get(k, options);
        if (!forceRefresh && v !== void 0)
          return v;
        const vv = memoMethod(k, v, {
          options,
          context
        });
        this.set(k, vv, options);
        return vv;
      }
      /**
       * Return a value from the cache. Will update the recency of the cache
       * entry found.
       *
       * If the key is not found, get() will return `undefined`.
       */
      get(k, getOptions = {}) {
        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
        const index = __privateGet(this, _keyMap).get(k);
        if (index !== void 0) {
          const value = __privateGet(this, _valList)[index];
          const fetching = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, value);
          if (status)
            __privateGet(this, _statusTTL).call(this, status, index);
          if (__privateGet(this, _isStale).call(this, index)) {
            if (status)
              status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k, "expire");
              }
              if (status && allowStale)
                status.returnedStale = true;
              return allowStale ? value : void 0;
            } else {
              if (status && allowStale && value.__staleWhileFetching !== void 0) {
                status.returnedStale = true;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status)
              status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
            if (updateAgeOnGet) {
              __privateGet(this, _updateItemAge).call(this, index);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      /**
       * Deletes a key out of the cache.
       *
       * Returns true if the key was deleted, false otherwise.
       */
      delete(k) {
        return __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k, "delete");
      }
      /**
       * Clear the cache entirely, throwing away all values.
       */
      clear() {
        return __privateMethod(this, _LRUCache_instances, clear_fn).call(this, "delete");
      }
    };
    _max = new WeakMap();
    _maxSize = new WeakMap();
    _dispose = new WeakMap();
    _disposeAfter = new WeakMap();
    _fetchMethod = new WeakMap();
    _memoMethod = new WeakMap();
    _size = new WeakMap();
    _calculatedSize = new WeakMap();
    _keyMap = new WeakMap();
    _keyList = new WeakMap();
    _valList = new WeakMap();
    _next = new WeakMap();
    _prev = new WeakMap();
    _head = new WeakMap();
    _tail = new WeakMap();
    _free = new WeakMap();
    _disposed = new WeakMap();
    _sizes = new WeakMap();
    _starts = new WeakMap();
    _ttls = new WeakMap();
    _hasDispose = new WeakMap();
    _hasFetchMethod = new WeakMap();
    _hasDisposeAfter = new WeakMap();
    _LRUCache_instances = new WeakSet();
    initializeTTLTracking_fn = function() {
      const ttls = new ZeroArray(__privateGet(this, _max));
      const starts = new ZeroArray(__privateGet(this, _max));
      __privateSet(this, _ttls, ttls);
      __privateSet(this, _starts, starts);
      __privateSet(this, _setItemTTL, (index, ttl, start = perf.now()) => {
        starts[index] = ttl !== 0 ? start : 0;
        ttls[index] = ttl;
        if (ttl !== 0 && this.ttlAutopurge) {
          const t = setTimeout(() => {
            if (__privateGet(this, _isStale).call(this, index)) {
              __privateMethod(this, _LRUCache_instances, delete_fn).call(this, __privateGet(this, _keyList)[index], "expire");
            }
          }, ttl + 1);
          if (t.unref) {
            t.unref();
          }
        }
      });
      __privateSet(this, _updateItemAge, (index) => {
        starts[index] = ttls[index] !== 0 ? perf.now() : 0;
      });
      __privateSet(this, _statusTTL, (status, index) => {
        if (ttls[index]) {
          const ttl = ttls[index];
          const start = starts[index];
          if (!ttl || !start)
            return;
          status.ttl = ttl;
          status.start = start;
          status.now = cachedNow || getNow();
          const age = status.now - start;
          status.remainingTTL = ttl - age;
        }
      });
      let cachedNow = 0;
      const getNow = () => {
        const n = perf.now();
        if (this.ttlResolution > 0) {
          cachedNow = n;
          const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
          if (t.unref) {
            t.unref();
          }
        }
        return n;
      };
      this.getRemainingTTL = (key) => {
        const index = __privateGet(this, _keyMap).get(key);
        if (index === void 0) {
          return 0;
        }
        const ttl = ttls[index];
        const start = starts[index];
        if (!ttl || !start) {
          return Infinity;
        }
        const age = (cachedNow || getNow()) - start;
        return ttl - age;
      };
      __privateSet(this, _isStale, (index) => {
        const s = starts[index];
        const t = ttls[index];
        return !!t && !!s && (cachedNow || getNow()) - s > t;
      });
    };
    _updateItemAge = new WeakMap();
    _statusTTL = new WeakMap();
    _setItemTTL = new WeakMap();
    _isStale = new WeakMap();
    initializeSizeTracking_fn = function() {
      const sizes = new ZeroArray(__privateGet(this, _max));
      __privateSet(this, _calculatedSize, 0);
      __privateSet(this, _sizes, sizes);
      __privateSet(this, _removeItemSize, (index) => {
        __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) - sizes[index]);
        sizes[index] = 0;
      });
      __privateSet(this, _requireSize, (k, v, size, sizeCalculation) => {
        if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
          return 0;
        }
        if (!isPosInt(size)) {
          if (sizeCalculation) {
            if (typeof sizeCalculation !== "function") {
              throw new TypeError("sizeCalculation must be a function");
            }
            size = sizeCalculation(v, k);
            if (!isPosInt(size)) {
              throw new TypeError("sizeCalculation return invalid (expect positive integer)");
            }
          } else {
            throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
          }
        }
        return size;
      });
      __privateSet(this, _addItemSize, (index, size, status) => {
        sizes[index] = size;
        if (__privateGet(this, _maxSize)) {
          const maxSize = __privateGet(this, _maxSize) - sizes[index];
          while (__privateGet(this, _calculatedSize) > maxSize) {
            __privateMethod(this, _LRUCache_instances, evict_fn).call(this, true);
          }
        }
        __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) + sizes[index]);
        if (status) {
          status.entrySize = size;
          status.totalCalculatedSize = __privateGet(this, _calculatedSize);
        }
      });
    };
    _removeItemSize = new WeakMap();
    _addItemSize = new WeakMap();
    _requireSize = new WeakMap();
    indexes_fn = function* ({ allowStale = this.allowStale } = {}) {
      if (__privateGet(this, _size)) {
        for (let i = __privateGet(this, _tail); true; ) {
          if (!__privateMethod(this, _LRUCache_instances, isValidIndex_fn).call(this, i)) {
            break;
          }
          if (allowStale || !__privateGet(this, _isStale).call(this, i)) {
            yield i;
          }
          if (i === __privateGet(this, _head)) {
            break;
          } else {
            i = __privateGet(this, _prev)[i];
          }
        }
      }
    };
    rindexes_fn = function* ({ allowStale = this.allowStale } = {}) {
      if (__privateGet(this, _size)) {
        for (let i = __privateGet(this, _head); true; ) {
          if (!__privateMethod(this, _LRUCache_instances, isValidIndex_fn).call(this, i)) {
            break;
          }
          if (allowStale || !__privateGet(this, _isStale).call(this, i)) {
            yield i;
          }
          if (i === __privateGet(this, _tail)) {
            break;
          } else {
            i = __privateGet(this, _next)[i];
          }
        }
      }
    };
    isValidIndex_fn = function(index) {
      return index !== void 0 && __privateGet(this, _keyMap).get(__privateGet(this, _keyList)[index]) === index;
    };
    evict_fn = function(free) {
      var _a3, _b2;
      const head2 = __privateGet(this, _head);
      const k = __privateGet(this, _keyList)[head2];
      const v = __privateGet(this, _valList)[head2];
      if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
        v.__abortController.abort(new Error("evicted"));
      } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
        if (__privateGet(this, _hasDispose)) {
          (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k, "evict");
        }
        if (__privateGet(this, _hasDisposeAfter)) {
          (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k, "evict"]);
        }
      }
      __privateGet(this, _removeItemSize).call(this, head2);
      if (free) {
        __privateGet(this, _keyList)[head2] = void 0;
        __privateGet(this, _valList)[head2] = void 0;
        __privateGet(this, _free).push(head2);
      }
      if (__privateGet(this, _size) === 1) {
        __privateSet(this, _head, __privateSet(this, _tail, 0));
        __privateGet(this, _free).length = 0;
      } else {
        __privateSet(this, _head, __privateGet(this, _next)[head2]);
      }
      __privateGet(this, _keyMap).delete(k);
      __privateWrapper(this, _size)._--;
      return head2;
    };
    backgroundFetch_fn = function(k, index, options, context) {
      const v = index === void 0 ? void 0 : __privateGet(this, _valList)[index];
      if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
        return v;
      }
      const ac = new AC();
      const { signal } = options;
      signal == null ? void 0 : signal.addEventListener("abort", () => ac.abort(signal.reason), {
        signal: ac.signal
      });
      const fetchOpts = {
        signal: ac.signal,
        options,
        context
      };
      const cb = (v2, updateCache = false) => {
        const { aborted } = ac.signal;
        const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
        if (options.status) {
          if (aborted && !updateCache) {
            options.status.fetchAborted = true;
            options.status.fetchError = ac.signal.reason;
            if (ignoreAbort)
              options.status.fetchAbortIgnored = true;
          } else {
            options.status.fetchResolved = true;
          }
        }
        if (aborted && !ignoreAbort && !updateCache) {
          return fetchFail(ac.signal.reason);
        }
        const bf2 = p;
        if (__privateGet(this, _valList)[index] === p) {
          if (v2 === void 0) {
            if (bf2.__staleWhileFetching) {
              __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
            } else {
              __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k, "fetch");
            }
          } else {
            if (options.status)
              options.status.fetchUpdated = true;
            this.set(k, v2, fetchOpts.options);
          }
        }
        return v2;
      };
      const eb = (er) => {
        if (options.status) {
          options.status.fetchRejected = true;
          options.status.fetchError = er;
        }
        return fetchFail(er);
      };
      const fetchFail = (er) => {
        const { aborted } = ac.signal;
        const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
        const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
        const noDelete = allowStale || options.noDeleteOnFetchRejection;
        const bf2 = p;
        if (__privateGet(this, _valList)[index] === p) {
          const del = !noDelete || bf2.__staleWhileFetching === void 0;
          if (del) {
            __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k, "fetch");
          } else if (!allowStaleAborted) {
            __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
          }
        }
        if (allowStale) {
          if (options.status && bf2.__staleWhileFetching !== void 0) {
            options.status.returnedStale = true;
          }
          return bf2.__staleWhileFetching;
        } else if (bf2.__returned === bf2) {
          throw er;
        }
      };
      const pcall = (res, rej) => {
        var _a3;
        const fmp = (_a3 = __privateGet(this, _fetchMethod)) == null ? void 0 : _a3.call(this, k, v, fetchOpts);
        if (fmp && fmp instanceof Promise) {
          fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
        }
        ac.signal.addEventListener("abort", () => {
          if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
            res(void 0);
            if (options.allowStaleOnFetchAbort) {
              res = (v2) => cb(v2, true);
            }
          }
        });
      };
      if (options.status)
        options.status.fetchDispatched = true;
      const p = new Promise(pcall).then(cb, eb);
      const bf = Object.assign(p, {
        __abortController: ac,
        __staleWhileFetching: v,
        __returned: void 0
      });
      if (index === void 0) {
        this.set(k, bf, { ...fetchOpts.options, status: void 0 });
        index = __privateGet(this, _keyMap).get(k);
      } else {
        __privateGet(this, _valList)[index] = bf;
      }
      return bf;
    };
    isBackgroundFetch_fn = function(p) {
      if (!__privateGet(this, _hasFetchMethod))
        return false;
      const b = p;
      return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
    };
    connect_fn = function(p, n) {
      __privateGet(this, _prev)[n] = p;
      __privateGet(this, _next)[p] = n;
    };
    moveToTail_fn = function(index) {
      if (index !== __privateGet(this, _tail)) {
        if (index === __privateGet(this, _head)) {
          __privateSet(this, _head, __privateGet(this, _next)[index]);
        } else {
          __privateMethod(this, _LRUCache_instances, connect_fn).call(this, __privateGet(this, _prev)[index], __privateGet(this, _next)[index]);
        }
        __privateMethod(this, _LRUCache_instances, connect_fn).call(this, __privateGet(this, _tail), index);
        __privateSet(this, _tail, index);
      }
    };
    delete_fn = function(k, reason) {
      var _a3, _b2, _c, _d;
      let deleted = false;
      if (__privateGet(this, _size) !== 0) {
        const index = __privateGet(this, _keyMap).get(k);
        if (index !== void 0) {
          deleted = true;
          if (__privateGet(this, _size) === 1) {
            __privateMethod(this, _LRUCache_instances, clear_fn).call(this, reason);
          } else {
            __privateGet(this, _removeItemSize).call(this, index);
            const v = __privateGet(this, _valList)[index];
            if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
              v.__abortController.abort(new Error("deleted"));
            } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
              if (__privateGet(this, _hasDispose)) {
                (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k, reason);
              }
              if (__privateGet(this, _hasDisposeAfter)) {
                (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k, reason]);
              }
            }
            __privateGet(this, _keyMap).delete(k);
            __privateGet(this, _keyList)[index] = void 0;
            __privateGet(this, _valList)[index] = void 0;
            if (index === __privateGet(this, _tail)) {
              __privateSet(this, _tail, __privateGet(this, _prev)[index]);
            } else if (index === __privateGet(this, _head)) {
              __privateSet(this, _head, __privateGet(this, _next)[index]);
            } else {
              const pi = __privateGet(this, _prev)[index];
              __privateGet(this, _next)[pi] = __privateGet(this, _next)[index];
              const ni = __privateGet(this, _next)[index];
              __privateGet(this, _prev)[ni] = __privateGet(this, _prev)[index];
            }
            __privateWrapper(this, _size)._--;
            __privateGet(this, _free).push(index);
          }
        }
      }
      if (__privateGet(this, _hasDisposeAfter) && ((_c = __privateGet(this, _disposed)) == null ? void 0 : _c.length)) {
        const dt = __privateGet(this, _disposed);
        let task;
        while (task = dt == null ? void 0 : dt.shift()) {
          (_d = __privateGet(this, _disposeAfter)) == null ? void 0 : _d.call(this, ...task);
        }
      }
      return deleted;
    };
    clear_fn = function(reason) {
      var _a3, _b2, _c;
      for (const index of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this, { allowStale: true })) {
        const v = __privateGet(this, _valList)[index];
        if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
          v.__abortController.abort(new Error("deleted"));
        } else {
          const k = __privateGet(this, _keyList)[index];
          if (__privateGet(this, _hasDispose)) {
            (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k, reason);
          }
          if (__privateGet(this, _hasDisposeAfter)) {
            (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k, reason]);
          }
        }
      }
      __privateGet(this, _keyMap).clear();
      __privateGet(this, _valList).fill(void 0);
      __privateGet(this, _keyList).fill(void 0);
      if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
        __privateGet(this, _ttls).fill(0);
        __privateGet(this, _starts).fill(0);
      }
      if (__privateGet(this, _sizes)) {
        __privateGet(this, _sizes).fill(0);
      }
      __privateSet(this, _head, 0);
      __privateSet(this, _tail, 0);
      __privateGet(this, _free).length = 0;
      __privateSet(this, _calculatedSize, 0);
      __privateSet(this, _size, 0);
      if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
        const dt = __privateGet(this, _disposed);
        let task;
        while (task = dt == null ? void 0 : dt.shift()) {
          (_c = __privateGet(this, _disposeAfter)) == null ? void 0 : _c.call(this, ...task);
        }
      }
    };
    var LRUCache = _LRUCache;
    exports.LRUCache = LRUCache;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Context.js
var require_Context = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/util/Context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareEvaluatorActionContext = void 0;
    var context_entries_1 = require_lib3();
    var lru_cache_1 = require_commonjs();
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    function prepareEvaluatorActionContext(orgContext) {
      let context = orgContext;
      if (context.has(context_entries_1.KeysInitQuery.extensionFunctionCreator) && context.has(context_entries_1.KeysInitQuery.extensionFunctions)) {
        throw new Error("Illegal simultaneous usage of extensionFunctionCreator and extensionFunctions in context");
      }
      if (context.has(context_entries_1.KeysInitQuery.extensionFunctionCreator)) {
        context = context.set(context_entries_1.KeysExpressionEvaluator.extensionFunctionCreator, context.get(context_entries_1.KeysInitQuery.extensionFunctionCreator));
      } else if (context.has(context_entries_1.KeysInitQuery.extensionFunctions)) {
        const extensionFunctions = context.getSafe(context_entries_1.KeysInitQuery.extensionFunctions);
        context = context.set(context_entries_1.KeysExpressionEvaluator.extensionFunctionCreator, async (functionNamedNode) => extensionFunctions[functionNamedNode.value]);
      } else {
        context = context.setDefault(context_entries_1.KeysExpressionEvaluator.extensionFunctionCreator, async () => void 0);
      }
      context = context.setDefault(context_entries_1.KeysExpressionEvaluator.defaultTimeZone, (0, DateTimeHelpers_1.extractTimeZone)(context.getSafe(context_entries_1.KeysInitQuery.queryTimestamp)));
      context = context.setDefault(context_entries_1.KeysExpressionEvaluator.superTypeProvider, {
        cache: new lru_cache_1.LRUCache({ max: 1e3 }),
        discoverer: () => "term"
      });
      return context;
    }
    exports.prepareEvaluatorActionContext = prepareEvaluatorActionContext;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/index.js
var require_lib6 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-expression-evaluator/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangStringLiteral = exports.TimeLiteral = exports.DurationLiteral = exports.DateLiteral = exports.DayTimeDurationLiteral = exports.DateTimeLiteral = exports.yearMonthDurationsToMonths = exports.toUTCDate = exports.toDateTimeRepresentation = exports.negateDuration = exports.extractRawTimeZone = exports.defaultedYearMonthDurationRepresentation = exports.defaultedDurationRepresentation = exports.defaultedDayTimeDurationRepresentation = exports.defaultedDateTimeRepresentation = exports.dayTimeDurationsToSeconds = exports.isSubTypeOf = exports.SparqlOperator = exports.TypeAlias = exports.TypeURL = exports.typedLiteral = exports.InvalidArity = exports.InvalidLexicalForm = exports.ExtensionFunctionError = exports.CastError = exports.UnboundVariableError = exports.NoAggregator = exports.InError = exports.CoalesceError = exports.InvalidArgumentTypes = exports.InvalidTimezoneCall = exports.IncompatibleLanguageOperation = exports.RDFEqualTypeError = exports.EmptyAggregateError = exports.isExpressionError = exports.ExpressionError = exports.Builder = exports.expressionToVar = exports.float = exports.decimal = exports.langString = exports.dateTime = exports.integer = exports.double = exports.string = exports.bool = exports.declare = exports.prepareEvaluatorActionContext = exports.OverloadTree = exports.TermTransformer = void 0;
    exports.trimToDayTimeDuration = exports.trimToYearMonthDuration = exports.parseDate = exports.parseXSDFloat = exports.parseXSDDecimal = exports.parseYearMonthDuration = exports.parseTime = exports.parseDuration = exports.parseDayTimeDuration = exports.parseDateTime = exports.elapsedDuration = exports.addDurationToDateTime = exports.isNonLexicalLiteral = exports.StringLiteral = exports.NonLexicalLiteral = exports.FloatLiteral = exports.IntegerLiteral = exports.Literal = exports.Existence = exports.Aggregate = exports.DoubleLiteral = exports.DefaultGraph = exports.DecimalLiteral = exports.BlankNode = exports.BooleanLiteral = exports.NumericLiteral = exports.Variable = exports.NamedNode = exports.Operator = exports.Quad = exports.YearMonthDurationLiteral = exports.Term = void 0;
    var TermTransformer_1 = require_TermTransformer();
    Object.defineProperty(exports, "TermTransformer", { enumerable: true, get: function() {
      return TermTransformer_1.TermTransformer;
    } });
    var OverloadTree_1 = require_OverloadTree();
    Object.defineProperty(exports, "OverloadTree", { enumerable: true, get: function() {
      return OverloadTree_1.OverloadTree;
    } });
    var Context_1 = require_Context();
    Object.defineProperty(exports, "prepareEvaluatorActionContext", { enumerable: true, get: function() {
      return Context_1.prepareEvaluatorActionContext;
    } });
    var Helpers_1 = require_Helpers();
    Object.defineProperty(exports, "declare", { enumerable: true, get: function() {
      return Helpers_1.declare;
    } });
    Object.defineProperty(exports, "bool", { enumerable: true, get: function() {
      return Helpers_1.bool;
    } });
    Object.defineProperty(exports, "string", { enumerable: true, get: function() {
      return Helpers_1.string;
    } });
    Object.defineProperty(exports, "double", { enumerable: true, get: function() {
      return Helpers_1.double;
    } });
    Object.defineProperty(exports, "integer", { enumerable: true, get: function() {
      return Helpers_1.integer;
    } });
    Object.defineProperty(exports, "dateTime", { enumerable: true, get: function() {
      return Helpers_1.dateTime;
    } });
    Object.defineProperty(exports, "langString", { enumerable: true, get: function() {
      return Helpers_1.langString;
    } });
    Object.defineProperty(exports, "decimal", { enumerable: true, get: function() {
      return Helpers_1.decimal;
    } });
    Object.defineProperty(exports, "float", { enumerable: true, get: function() {
      return Helpers_1.float;
    } });
    Object.defineProperty(exports, "expressionToVar", { enumerable: true, get: function() {
      return Helpers_1.expressionToVar;
    } });
    Object.defineProperty(exports, "Builder", { enumerable: true, get: function() {
      return Helpers_1.Builder;
    } });
    var Errors_1 = require_Errors();
    Object.defineProperty(exports, "ExpressionError", { enumerable: true, get: function() {
      return Errors_1.ExpressionError;
    } });
    Object.defineProperty(exports, "isExpressionError", { enumerable: true, get: function() {
      return Errors_1.isExpressionError;
    } });
    Object.defineProperty(exports, "EmptyAggregateError", { enumerable: true, get: function() {
      return Errors_1.EmptyAggregateError;
    } });
    Object.defineProperty(exports, "RDFEqualTypeError", { enumerable: true, get: function() {
      return Errors_1.RDFEqualTypeError;
    } });
    Object.defineProperty(exports, "IncompatibleLanguageOperation", { enumerable: true, get: function() {
      return Errors_1.IncompatibleLanguageOperation;
    } });
    Object.defineProperty(exports, "InvalidTimezoneCall", { enumerable: true, get: function() {
      return Errors_1.InvalidTimezoneCall;
    } });
    Object.defineProperty(exports, "InvalidArgumentTypes", { enumerable: true, get: function() {
      return Errors_1.InvalidArgumentTypes;
    } });
    Object.defineProperty(exports, "CoalesceError", { enumerable: true, get: function() {
      return Errors_1.CoalesceError;
    } });
    Object.defineProperty(exports, "InError", { enumerable: true, get: function() {
      return Errors_1.InError;
    } });
    Object.defineProperty(exports, "NoAggregator", { enumerable: true, get: function() {
      return Errors_1.NoAggregator;
    } });
    Object.defineProperty(exports, "UnboundVariableError", { enumerable: true, get: function() {
      return Errors_1.UnboundVariableError;
    } });
    Object.defineProperty(exports, "CastError", { enumerable: true, get: function() {
      return Errors_1.CastError;
    } });
    Object.defineProperty(exports, "ExtensionFunctionError", { enumerable: true, get: function() {
      return Errors_1.ExtensionFunctionError;
    } });
    Object.defineProperty(exports, "InvalidLexicalForm", { enumerable: true, get: function() {
      return Errors_1.InvalidLexicalForm;
    } });
    Object.defineProperty(exports, "InvalidArity", { enumerable: true, get: function() {
      return Errors_1.InvalidArity;
    } });
    var Consts_1 = require_Consts();
    Object.defineProperty(exports, "typedLiteral", { enumerable: true, get: function() {
      return Consts_1.typedLiteral;
    } });
    Object.defineProperty(exports, "TypeURL", { enumerable: true, get: function() {
      return Consts_1.TypeURL;
    } });
    Object.defineProperty(exports, "TypeAlias", { enumerable: true, get: function() {
      return Consts_1.TypeAlias;
    } });
    Object.defineProperty(exports, "SparqlOperator", { enumerable: true, get: function() {
      return Consts_1.SparqlOperator;
    } });
    var TypeHandling_1 = require_TypeHandling();
    Object.defineProperty(exports, "isSubTypeOf", { enumerable: true, get: function() {
      return TypeHandling_1.isSubTypeOf;
    } });
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    Object.defineProperty(exports, "dayTimeDurationsToSeconds", { enumerable: true, get: function() {
      return DateTimeHelpers_1.dayTimeDurationsToSeconds;
    } });
    Object.defineProperty(exports, "defaultedDateTimeRepresentation", { enumerable: true, get: function() {
      return DateTimeHelpers_1.defaultedDateTimeRepresentation;
    } });
    Object.defineProperty(exports, "defaultedDayTimeDurationRepresentation", { enumerable: true, get: function() {
      return DateTimeHelpers_1.defaultedDayTimeDurationRepresentation;
    } });
    Object.defineProperty(exports, "defaultedDurationRepresentation", { enumerable: true, get: function() {
      return DateTimeHelpers_1.defaultedDurationRepresentation;
    } });
    Object.defineProperty(exports, "defaultedYearMonthDurationRepresentation", { enumerable: true, get: function() {
      return DateTimeHelpers_1.defaultedYearMonthDurationRepresentation;
    } });
    Object.defineProperty(exports, "extractRawTimeZone", { enumerable: true, get: function() {
      return DateTimeHelpers_1.extractRawTimeZone;
    } });
    Object.defineProperty(exports, "negateDuration", { enumerable: true, get: function() {
      return DateTimeHelpers_1.negateDuration;
    } });
    Object.defineProperty(exports, "toDateTimeRepresentation", { enumerable: true, get: function() {
      return DateTimeHelpers_1.toDateTimeRepresentation;
    } });
    Object.defineProperty(exports, "toUTCDate", { enumerable: true, get: function() {
      return DateTimeHelpers_1.toUTCDate;
    } });
    Object.defineProperty(exports, "yearMonthDurationsToMonths", { enumerable: true, get: function() {
      return DateTimeHelpers_1.yearMonthDurationsToMonths;
    } });
    var expressions_1 = require_expressions();
    Object.defineProperty(exports, "DateTimeLiteral", { enumerable: true, get: function() {
      return expressions_1.DateTimeLiteral;
    } });
    Object.defineProperty(exports, "DayTimeDurationLiteral", { enumerable: true, get: function() {
      return expressions_1.DayTimeDurationLiteral;
    } });
    Object.defineProperty(exports, "DateLiteral", { enumerable: true, get: function() {
      return expressions_1.DateLiteral;
    } });
    Object.defineProperty(exports, "DurationLiteral", { enumerable: true, get: function() {
      return expressions_1.DurationLiteral;
    } });
    Object.defineProperty(exports, "TimeLiteral", { enumerable: true, get: function() {
      return expressions_1.TimeLiteral;
    } });
    Object.defineProperty(exports, "LangStringLiteral", { enumerable: true, get: function() {
      return expressions_1.LangStringLiteral;
    } });
    Object.defineProperty(exports, "Term", { enumerable: true, get: function() {
      return expressions_1.Term;
    } });
    Object.defineProperty(exports, "YearMonthDurationLiteral", { enumerable: true, get: function() {
      return expressions_1.YearMonthDurationLiteral;
    } });
    Object.defineProperty(exports, "Quad", { enumerable: true, get: function() {
      return expressions_1.Quad;
    } });
    Object.defineProperty(exports, "Operator", { enumerable: true, get: function() {
      return expressions_1.Operator;
    } });
    Object.defineProperty(exports, "NamedNode", { enumerable: true, get: function() {
      return expressions_1.NamedNode;
    } });
    Object.defineProperty(exports, "Variable", { enumerable: true, get: function() {
      return expressions_1.Variable;
    } });
    Object.defineProperty(exports, "NumericLiteral", { enumerable: true, get: function() {
      return expressions_1.NumericLiteral;
    } });
    Object.defineProperty(exports, "BooleanLiteral", { enumerable: true, get: function() {
      return expressions_1.BooleanLiteral;
    } });
    Object.defineProperty(exports, "BlankNode", { enumerable: true, get: function() {
      return expressions_1.BlankNode;
    } });
    Object.defineProperty(exports, "DecimalLiteral", { enumerable: true, get: function() {
      return expressions_1.DecimalLiteral;
    } });
    Object.defineProperty(exports, "DefaultGraph", { enumerable: true, get: function() {
      return expressions_1.DefaultGraph;
    } });
    Object.defineProperty(exports, "DoubleLiteral", { enumerable: true, get: function() {
      return expressions_1.DoubleLiteral;
    } });
    Object.defineProperty(exports, "Aggregate", { enumerable: true, get: function() {
      return expressions_1.Aggregate;
    } });
    Object.defineProperty(exports, "Existence", { enumerable: true, get: function() {
      return expressions_1.Existence;
    } });
    Object.defineProperty(exports, "Literal", { enumerable: true, get: function() {
      return expressions_1.Literal;
    } });
    Object.defineProperty(exports, "IntegerLiteral", { enumerable: true, get: function() {
      return expressions_1.IntegerLiteral;
    } });
    Object.defineProperty(exports, "FloatLiteral", { enumerable: true, get: function() {
      return expressions_1.FloatLiteral;
    } });
    Object.defineProperty(exports, "NonLexicalLiteral", { enumerable: true, get: function() {
      return expressions_1.NonLexicalLiteral;
    } });
    Object.defineProperty(exports, "StringLiteral", { enumerable: true, get: function() {
      return expressions_1.StringLiteral;
    } });
    Object.defineProperty(exports, "isNonLexicalLiteral", { enumerable: true, get: function() {
      return expressions_1.isNonLexicalLiteral;
    } });
    var SpecAlgos_1 = require_SpecAlgos();
    Object.defineProperty(exports, "addDurationToDateTime", { enumerable: true, get: function() {
      return SpecAlgos_1.addDurationToDateTime;
    } });
    Object.defineProperty(exports, "elapsedDuration", { enumerable: true, get: function() {
      return SpecAlgos_1.elapsedDuration;
    } });
    var Parsing_1 = require_Parsing();
    Object.defineProperty(exports, "parseDateTime", { enumerable: true, get: function() {
      return Parsing_1.parseDateTime;
    } });
    Object.defineProperty(exports, "parseDayTimeDuration", { enumerable: true, get: function() {
      return Parsing_1.parseDayTimeDuration;
    } });
    Object.defineProperty(exports, "parseDuration", { enumerable: true, get: function() {
      return Parsing_1.parseDuration;
    } });
    Object.defineProperty(exports, "parseTime", { enumerable: true, get: function() {
      return Parsing_1.parseTime;
    } });
    Object.defineProperty(exports, "parseYearMonthDuration", { enumerable: true, get: function() {
      return Parsing_1.parseYearMonthDuration;
    } });
    Object.defineProperty(exports, "parseXSDDecimal", { enumerable: true, get: function() {
      return Parsing_1.parseXSDDecimal;
    } });
    Object.defineProperty(exports, "parseXSDFloat", { enumerable: true, get: function() {
      return Parsing_1.parseXSDFloat;
    } });
    Object.defineProperty(exports, "parseDate", { enumerable: true, get: function() {
      return Parsing_1.parseDate;
    } });
    var DateTimeHelpers_2 = require_DateTimeHelpers();
    Object.defineProperty(exports, "trimToYearMonthDuration", { enumerable: true, get: function() {
      return DateTimeHelpers_2.trimToYearMonthDuration;
    } });
    Object.defineProperty(exports, "trimToDayTimeDuration", { enumerable: true, get: function() {
      return DateTimeHelpers_2.trimToDayTimeDuration;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/bus-function-factory/lib/implementation/Core.js
var require_Core = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-function-factory/lib/implementation/Core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionBase = exports.ExpressionFunctionBase = void 0;
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionBase = class {
      constructor({ arity, operator, apply }) {
        this.arity = arity;
        this.operator = operator;
        this.apply = apply;
      }
      checkArity(args) {
        if (Array.isArray(this.arity)) {
          return this.arity.includes(args.length);
        }
        if (this.arity === Number.POSITIVE_INFINITY) {
          return true;
        }
        return args.length === this.arity;
      }
    };
    exports.ExpressionFunctionBase = ExpressionFunctionBase;
    var TermFunctionBase = class extends ExpressionFunctionBase {
      constructor({ arity, operator, overloads }) {
        super({
          arity,
          operator,
          apply: async ({ args, exprEval, mapping }) => this.applyOnTerms(await Promise.all(args.map((arg) => exprEval.evaluatorExpressionEvaluation(arg, mapping))), exprEval)
        });
        this.supportsTermExpressions = true;
        this.overloads = overloads;
      }
      applyOnTerms(args, exprEval) {
        const concreteFunction = this.overloads.search(args, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider), exprEval.context.getSafe(context_entries_1.KeysInitQuery.functionArgumentsCache)) ?? this.handleInvalidTypes(args);
        return concreteFunction(exprEval)(args);
      }
      handleInvalidTypes(args) {
        throw new utils_expression_evaluator_1.InvalidArgumentTypes(args, this.operator);
      }
    };
    exports.TermFunctionBase = TermFunctionBase;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-function-factory/lib/index.js
var require_lib7 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-function-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactory(), exports);
    __exportStar(require_ActorFunctionFactoryDedicated(), exports);
    __exportStar(require_BusFunctionFactory(), exports);
    __exportStar(require_Core(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperation.js
var require_ActorQueryOperation = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperation = void 0;
    var core_1 = require_lib();
    var ActorQueryOperation = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cbqo:components/BusQueryOperation.jsonld#BusQueryOperation>} bus
       *   \ @defaultNested {Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryOperation = ActorQueryOperation;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-metadata/lib/MetadataValidationState.js
var require_MetadataValidationState = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-metadata/lib/MetadataValidationState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataValidationState = void 0;
    var MetadataValidationState = class {
      constructor() {
        this.invalidateListeners = [];
        this.valid = true;
      }
      addInvalidateListener(listener) {
        this.invalidateListeners.push(listener);
      }
      invalidate() {
        if (this.valid) {
          this.valid = false;
          for (const invalidateListener of this.invalidateListeners) {
            invalidateListener();
          }
        }
      }
    };
    exports.MetadataValidationState = MetadataValidationState;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-metadata/lib/Utils.js
var require_Utils = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-metadata/lib/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cachifyMetadata = exports.validateMetadataBindings = exports.validateMetadataQuads = exports.getMetadataBindings = exports.getMetadataQuads = void 0;
    function getMetadataQuads(data) {
      return cachifyMetadata(() => new Promise((resolve, reject) => {
        data.getProperty("metadata", (metadata) => resolve(metadata));
        data.on("error", reject);
      }).then((metadataRaw) => validateMetadataQuads(metadataRaw)));
    }
    exports.getMetadataQuads = getMetadataQuads;
    function getMetadataBindings(data) {
      return cachifyMetadata(() => new Promise((resolve, reject) => {
        data.getProperty("metadata", (metadata) => resolve(metadata));
        data.on("error", reject);
      }).then((metadataRaw) => validateMetadataBindings(metadataRaw)));
    }
    exports.getMetadataBindings = getMetadataBindings;
    function validateMetadataQuads(metadataRaw) {
      for (const key of ["cardinality"]) {
        if (!(key in metadataRaw)) {
          throw new Error(`Invalid metadata: missing ${key} in ${JSON.stringify(metadataRaw)}`);
        }
      }
      return metadataRaw;
    }
    exports.validateMetadataQuads = validateMetadataQuads;
    function validateMetadataBindings(metadataRaw) {
      for (const key of ["cardinality", "variables"]) {
        if (!(key in metadataRaw)) {
          throw new Error(`Invalid metadata: missing ${key} in ${JSON.stringify(metadataRaw)}`);
        }
      }
      return metadataRaw;
    }
    exports.validateMetadataBindings = validateMetadataBindings;
    function cachifyMetadata(metadata) {
      let lastReturn;
      return () => {
        if (!lastReturn) {
          lastReturn = metadata();
          lastReturn.then((lastReturnValue) => lastReturnValue.state.addInvalidateListener(() => {
            lastReturn = void 0;
          })).catch(() => {
          });
        }
        return lastReturn;
      };
    }
    exports.cachifyMetadata = cachifyMetadata;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-metadata/lib/index.js
var require_lib8 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-metadata/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MetadataValidationState(), exports);
    __exportStar(require_Utils(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTyped.js
var require_ActorQueryOperationTyped = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationTyped = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var ActorQueryOperation_1 = require_ActorQueryOperation();
    var ActorQueryOperationTyped = class extends ActorQueryOperation_1.ActorQueryOperation {
      constructor(args, operationName) {
        super({ ...args, operationName });
        if (!this.operationName) {
          throw new Error('A valid "operationName" argument must be provided.');
        }
      }
      async test(action) {
        if (!action.operation) {
          return (0, core_1.failTest)("Missing field 'operation' in a query operation action.");
        }
        if (action.operation.type !== this.operationName) {
          return (0, core_1.failTest)(`Actor ${this.name} only supports ${this.operationName} operations, but got ${action.operation.type}`);
        }
        const operation = action.operation;
        return this.testOperation(operation, action.context);
      }
      async run(action, sideData) {
        const physicalQueryPlanLogger = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanLogger);
        if (physicalQueryPlanLogger) {
          physicalQueryPlanLogger.logOperation(action.operation.type, void 0, action.operation, action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanNode), this.name, {});
          action.context = action.context.set(context_entries_1.KeysInitQuery.physicalQueryPlanNode, action.operation);
        }
        const operation = action.operation;
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.operation, operation);
        const output = await this.runOperation(operation, subContext, sideData);
        if ("metadata" in output) {
          output.metadata = (0, utils_metadata_1.cachifyMetadata)(output.metadata);
        }
        return output;
      }
    };
    exports.ActorQueryOperationTyped = ActorQueryOperationTyped;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTypedMediated.js
var require_ActorQueryOperationTypedMediated = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTypedMediated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationTypedMediated = void 0;
    var ActorQueryOperationTyped_1 = require_ActorQueryOperationTyped();
    var ActorQueryOperationTypedMediated = class extends ActorQueryOperationTyped_1.ActorQueryOperationTyped {
      constructor(args, operationName) {
        super(args, operationName);
      }
    };
    exports.ActorQueryOperationTypedMediated = ActorQueryOperationTypedMediated;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-operation/lib/BusQueryOperation.js
var require_BusQueryOperation = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-operation/lib/BusQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusQueryOperation = void 0;
    var core_1 = require_lib();
    var BusQueryOperation = class extends core_1.BusIndexed {
      constructor(args) {
        super({
          ...args,
          actorIdentifierFields: ["operationName"],
          actionIdentifierFields: ["operation", "type"]
        });
      }
    };
    exports.BusQueryOperation = BusQueryOperation;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-operation/lib/index.js
var require_lib9 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-operation/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperation(), exports);
    __exportStar(require_ActorQueryOperationTyped(), exports);
    __exportStar(require_ActorQueryOperationTypedMediated(), exports);
    __exportStar(require_BusQueryOperation(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-context-preprocess/lib/ActorContextPreprocess.js
var require_ActorContextPreprocess = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-context-preprocess/lib/ActorContextPreprocess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocess = void 0;
    var core_1 = require_lib();
    var ActorContextPreprocess = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Context preprocessing failed} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorContextPreprocess = ActorContextPreprocess;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-context-preprocess/lib/index.js
var require_lib10 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-context-preprocess/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocess(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-convert-shortcuts/lib/ActorContextPreprocessConvertShortcuts.js
var require_ActorContextPreprocessConvertShortcuts = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-convert-shortcuts/lib/ActorContextPreprocessConvertShortcuts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessConvertShortcuts = void 0;
    var bus_context_preprocess_1 = require_lib10();
    var core_1 = require_lib();
    var ActorContextPreprocessConvertShortcuts = class _ActorContextPreprocessConvertShortcuts extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return {
          context: _ActorContextPreprocessConvertShortcuts.expandShortcuts(action.context, this.contextKeyShortcuts)
        };
      }
      static expandShortcuts(context, contextKeyShortcuts) {
        for (const key of context.keys()) {
          if (contextKeyShortcuts[key.name]) {
            context = context.set(new core_1.ActionContextKey(contextKeyShortcuts[key.name]), context.get(key)).delete(key);
          }
        }
        return context;
      }
    };
    exports.ActorContextPreprocessConvertShortcuts = ActorContextPreprocessConvertShortcuts;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-convert-shortcuts/lib/index.js
var require_lib11 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-convert-shortcuts/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessConvertShortcuts(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-set-defaults/lib/ActorContextPreprocessSetDefaults.js
var require_ActorContextPreprocessSetDefaults = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-set-defaults/lib/ActorContextPreprocessSetDefaults.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessSetDefaults = void 0;
    var bus_context_preprocess_1 = require_lib10();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var ActorContextPreprocessSetDefaults = class extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
        this.defaultFunctionArgumentsCache = {};
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let context = action.context;
        if (action.initialize) {
          context = context.setDefault(context_entries_1.KeysInitQuery.queryTimestamp, /* @__PURE__ */ new Date()).setDefault(context_entries_1.KeysInitQuery.queryTimestampHighResolution, performance.now()).setDefault(context_entries_1.KeysQuerySourceIdentify.sourceIds, /* @__PURE__ */ new Map()).setDefault(context_entries_1.KeysCore.log, this.logger).setDefault(context_entries_1.KeysInitQuery.functionArgumentsCache, this.defaultFunctionArgumentsCache).setDefault(context_entries_1.KeysQuerySourceIdentify.hypermediaSourcesAggregatedStores, /* @__PURE__ */ new Map()).setDefault(context_entries_1.KeysInitQuery.dataFactory, new rdf_data_factory_1.DataFactory());
          let queryFormat = { language: "sparql", version: "1.1" };
          if (context.has(context_entries_1.KeysInitQuery.queryFormat)) {
            queryFormat = context.get(context_entries_1.KeysInitQuery.queryFormat);
            if (queryFormat.language === "graphql") {
              context = context.setDefault(context_entries_1.KeysInitQuery.graphqlSingularizeVariables, {});
            }
          } else {
            context = context.set(context_entries_1.KeysInitQuery.queryFormat, queryFormat);
          }
        }
        return { context };
      }
    };
    exports.ActorContextPreprocessSetDefaults = ActorContextPreprocessSetDefaults;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-set-defaults/lib/index.js
var require_lib12 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-set-defaults/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessSetDefaults(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/ActorContextPreprocessSourceToDestination.js
var require_ActorContextPreprocessSourceToDestination = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/ActorContextPreprocessSourceToDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessSourceToDestination = void 0;
    var bus_context_preprocess_1 = require_lib10();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorContextPreprocessSourceToDestination = class extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        if (action.context.get(context_entries_1.KeysInitQuery.querySourcesUnidentified) && !action.context.get(context_entries_1.KeysRdfUpdateQuads.destination)) {
          const sources = action.context.get(context_entries_1.KeysInitQuery.querySourcesUnidentified);
          if (sources.length === 1) {
            return { context: action.context.set(context_entries_1.KeysRdfUpdateQuads.destination, sources[0]) };
          }
        }
        return action;
      }
    };
    exports.ActorContextPreprocessSourceToDestination = ActorContextPreprocessSourceToDestination;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/index.js
var require_lib13 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessSourceToDestination(), exports);
  }
});

// ../../lipdjs/node_modules/asynciterator/dist/linkedlist.js
var require_linkedlist = __commonJS({
  "../../lipdjs/node_modules/asynciterator/dist/linkedlist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkedList = void 0;
    var LinkedList = class {
      constructor() {
        this._length = 0;
        this._head = null;
        this._tail = null;
      }
      get length() {
        return this._length;
      }
      get first() {
        var _a;
        return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;
      }
      get last() {
        var _a;
        return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;
      }
      get empty() {
        return this._head === null;
      }
      push(value) {
        const node = { value, next: null };
        if (this._tail === null)
          this._head = this._tail = node;
        else
          this._tail.next = this._tail = node;
        this._length++;
      }
      shift() {
        if (this._head === null)
          return void 0;
        const { value, next } = this._head;
        this._head = next;
        if (next === null)
          this._tail = null;
        this._length--;
        return value;
      }
      clear() {
        this._length = 0;
        this._head = this._tail = null;
      }
    };
    exports.LinkedList = LinkedList;
  }
});

// ../../lipdjs/node_modules/asynciterator/dist/taskscheduler.js
var require_taskscheduler = __commonJS({
  "../../lipdjs/node_modules/asynciterator/dist/taskscheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTaskScheduler = void 0;
    var resolved = Promise.resolve(void 0);
    function createTaskScheduler() {
      const scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : (task) => resolved.then(task);
      const scheduleMacrotask = typeof setImmediate === "function" ? setImmediate : (task) => setTimeout(task, 0);
      let i = 0;
      let queue = null;
      return (task) => {
        if (queue !== null)
          queue.push(task);
        else if (++i < 100)
          scheduleMicrotask(task);
        else {
          queue = [task];
          scheduleMacrotask(() => {
            for (const queued of queue)
              scheduleMicrotask(queued);
            queue = null;
            i = 0;
          });
        }
      };
    }
    exports.createTaskScheduler = createTaskScheduler;
  }
});

// ../../lipdjs/node_modules/asynciterator/dist/asynciterator.js
var require_asynciterator = __commonJS({
  "../../lipdjs/node_modules/asynciterator/dist/asynciterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIterator = exports.isIterable = exports.isSourceExpression = exports.isPromise = exports.isEventEmitter = exports.isFunction = exports.range = exports.union = exports.fromIterable = exports.fromIterator = exports.fromArray = exports.single = exports.empty = exports.wrap = exports.WrappingIterator = exports.ClonedIterator = exports.UnionIterator = exports.MultiTransformIterator = exports.SimpleTransformIterator = exports.TransformIterator = exports.BufferedIterator = exports.MappingIterator = exports.DESTINATION = exports.identity = exports.IntegerIterator = exports.ArrayIterator = exports.SingletonIterator = exports.EmptyIterator = exports.AsyncIterator = exports.DESTROYED = exports.ENDED = exports.CLOSED = exports.CLOSING = exports.OPEN = exports.INIT = exports.setTaskScheduler = exports.getTaskScheduler = exports.scheduleTask = exports.LinkedList = void 0;
    var events_1 = require_events();
    var linkedlist_1 = require_linkedlist();
    Object.defineProperty(exports, "LinkedList", { enumerable: true, get: function() {
      return linkedlist_1.LinkedList;
    } });
    var taskscheduler_1 = require_taskscheduler();
    var taskScheduler = taskscheduler_1.createTaskScheduler();
    function scheduleTask(task) {
      taskScheduler(task);
    }
    exports.scheduleTask = scheduleTask;
    function getTaskScheduler() {
      return taskScheduler;
    }
    exports.getTaskScheduler = getTaskScheduler;
    function setTaskScheduler(scheduler) {
      taskScheduler = scheduler;
    }
    exports.setTaskScheduler = setTaskScheduler;
    exports.INIT = 1 << 0;
    exports.OPEN = 1 << 1;
    exports.CLOSING = 1 << 2;
    exports.CLOSED = 1 << 3;
    exports.ENDED = 1 << 4;
    exports.DESTROYED = 1 << 5;
    var AsyncIterator = class extends events_1.EventEmitter {
      /** Creates a new `AsyncIterator`. */
      constructor(initialState = exports.OPEN) {
        super();
        this._readable = false;
        this._state = initialState;
        this.on("newListener", waitForDataListener);
      }
      /**
        Changes the iterator to the given state if possible and necessary,
        possibly emitting events to signal that change.
        @protected
        @param {integer} newState The ID of the new state
        @param {boolean} [eventAsync=false] Whether resulting events should be emitted asynchronously
        @returns {boolean} Whether the state was changed
        @emits module:asynciterator.AsyncIterator.end
      */
      _changeState(newState, eventAsync = false) {
        const valid = newState > this._state && this._state < exports.ENDED;
        if (valid) {
          this._state = newState;
          if (newState === exports.ENDED) {
            if (!eventAsync)
              this.emit("end");
            else
              taskScheduler(() => this.emit("end"));
          }
        }
        return valid;
      }
      /**
        Tries to read the next item from the iterator.
        This is the main method for reading the iterator in _on-demand mode_,
        where new items are only created when needed by consumers.
        If no items are currently available, this methods returns `null`.
        The {@link module:asynciterator.event:readable} event
        will then signal when new items might be ready.
        To read all items from the iterator,
        switch to _flow mode_ by subscribing
        to the {@link module:asynciterator.event:data} event.
        When in flow mode, do not use the `read` method.
        @returns {object?} The next item, or `null` if none is available
      */
      read() {
        return null;
      }
      /**
        The iterator emits a `readable` event when it might have new items available
        after having had no items available right before this event.
        If the iterator is not in flow mode, items can be retrieved
        by calling {@link module:asynciterator.AsyncIterator#read}.
        @event module:asynciterator.readable
      */
      /**
        The iterator emits a `data` event with a new item as soon as it becomes available.
        When one or more listeners are attached to the `data` event,
        the iterator switches to _flow mode_,
        generating and emitting new items as fast as possible.
        This drains the source and might create backpressure on the consumers,
        so only subscribe to this event if this behavior is intended.
        In flow mode, don't use {@link module:asynciterator.AsyncIterator#read}.
        To switch back to _on-demand mode_, remove all listeners from the `data` event.
        You can then obtain items through `read` again.
        @event module:asynciterator.data
        @param {object} item The new item
      */
      /**
        Invokes the callback for each remaining item in the iterator.
        Switches the iterator to flow mode.
        @param {Function} callback A function that will be called with each item
        @param {object?} self The `this` pointer for the callback
      */
      forEach(callback, self2) {
        this.on("data", bind(callback, self2));
      }
      /**
        Stops the iterator from generating new items.
        Already generated items or terminating items can still be emitted.
        After this, the iterator will end asynchronously.
        @emits module:asynciterator.AsyncIterator.end
      */
      close() {
        if (this._changeState(exports.CLOSED))
          this._endAsync();
      }
      /**
        Destroy the iterator and stop it from generating new items.
        This will not do anything if the iterator was already ended or destroyed.
        All internal resources will be released an no new items will be emitted,
        even not already generated items.
        Implementors should not override this method,
        but instead implement {@link module:asynciterator.AsyncIterator#_destroy}.
        @param {Error} [cause] An optional error to emit.
        @emits module:asynciterator.AsyncIterator.end
        @emits module:asynciterator.AsyncIterator.error Only if an error is passed.
      */
      destroy(cause) {
        if (!this.done) {
          this._destroy(cause, (error) => {
            cause = cause || error;
            if (cause)
              this.emit("error", cause);
            this._end(true);
          });
        }
      }
      /**
        Called by {@link module:asynciterator.AsyncIterator#destroy}.
        Implementers can override this, but this should not be called directly.
        @param {?Error} cause The reason why the iterator is destroyed.
        @param {Function} callback A callback function with an optional error argument.
      */
      _destroy(cause, callback) {
        callback();
      }
      /**
        Ends the iterator and cleans up.
        Should never be called before {@link module:asynciterator.AsyncIterator#close};
        typically, `close` is responsible for calling `_end`.
        @param {boolean} [destroy] If the iterator should be forcefully destroyed.
        @protected
        @emits module:asynciterator.AsyncIterator.end
      */
      _end(destroy = false) {
        if (this._changeState(destroy ? exports.DESTROYED : exports.ENDED)) {
          this._readable = false;
          this.removeAllListeners("readable");
          this.removeAllListeners("data");
          this.removeAllListeners("end");
        }
      }
      /**
        Asynchronously calls `_end`.
        @protected
      */
      _endAsync() {
        taskScheduler(() => this._end());
      }
      /**
        The `end` event is emitted after the last item of the iterator has been read.
        @event module:asynciterator.end
      */
      /**
        Gets or sets whether this iterator might have items available for read.
        A value of `false` means there are _definitely_ no items available;
        a value of `true` means items _might_ be available.
        @type boolean
        @emits module:asynciterator.AsyncIterator.readable
      */
      get readable() {
        return this._readable;
      }
      set readable(readable) {
        readable = Boolean(readable) && !this.done;
        if (this._readable !== readable) {
          this._readable = readable;
          if (readable)
            taskScheduler(() => this.emit("readable"));
        }
      }
      /**
        Gets whether the iterator has stopped generating new items.
        @type boolean
        @readonly
      */
      get closed() {
        return this._state >= exports.CLOSING;
      }
      /**
        Gets whether the iterator has finished emitting items.
        @type boolean
        @readonly
      */
      get ended() {
        return this._state === exports.ENDED;
      }
      /**
        Gets whether the iterator has been destroyed.
        @type boolean
        @readonly
      */
      get destroyed() {
        return this._state === exports.DESTROYED;
      }
      /**
        Gets whether the iterator will not emit anymore items,
        either due to being closed or due to being destroyed.
        @type boolean
        @readonly
      */
      get done() {
        return this._state >= exports.ENDED;
      }
      /* Generates a textual representation of the iterator. */
      toString() {
        const details = this._toStringDetails();
        return `[${this.constructor.name}${details ? ` ${details}` : ""}]`;
      }
      /**
        Generates details for a textual representation of the iterator.
        @protected
      */
      _toStringDetails() {
        return "";
      }
      /**
        Consume all remaining items of the iterator into an array that will be returned asynchronously.
        @param {object} [options] Settings for array creation
        @param {integer} [options.limit] The maximum number of items to place in the array.
       */
      toArray(options) {
        const items = [];
        const limit = typeof (options === null || options === void 0 ? void 0 : options.limit) === "number" ? options.limit : Infinity;
        return this.ended || limit <= 0 ? Promise.resolve(items) : new Promise((resolve, reject) => {
          const resolveItems = () => resolve(items);
          const pushItem = (item) => {
            items.push(item);
            if (items.length >= limit) {
              this.removeListener("error", reject);
              this.removeListener("data", pushItem);
              this.removeListener("end", resolveItems);
              resolve(items);
            }
          };
          this.on("error", reject);
          this.on("data", pushItem);
          this.on("end", resolveItems);
        });
      }
      /**
        Retrieves the property with the given name from the iterator.
        If no callback is passed, it returns the value of the property
        or `undefined` if the property is not set.
        If a callback is passed, it returns `undefined`
        and calls the callback with the property the moment it is set.
        @param {string} propertyName The name of the property to retrieve
        @param {Function?} [callback] A one-argument callback to receive the property value
        @returns {object?} The value of the property (if set and no callback is given)
      */
      getProperty(propertyName, callback) {
        const properties = this._properties;
        if (!callback)
          return properties && properties[propertyName];
        if (properties && propertyName in properties) {
          taskScheduler(() => callback(properties[propertyName]));
        } else {
          let propertyCallbacks;
          if (!(propertyCallbacks = this._propertyCallbacks))
            this._propertyCallbacks = propertyCallbacks = /* @__PURE__ */ Object.create(null);
          if (propertyName in propertyCallbacks)
            propertyCallbacks[propertyName].push(callback);
          else
            propertyCallbacks[propertyName] = [callback];
        }
        return void 0;
      }
      /**
        Sets the property with the given name to the value.
        @param {string} propertyName The name of the property to set
        @param {object?} value The new value of the property
      */
      setProperty(propertyName, value) {
        const properties = this._properties || (this._properties = /* @__PURE__ */ Object.create(null));
        properties[propertyName] = value;
        const propertyCallbacks = this._propertyCallbacks || {};
        const callbacks = propertyCallbacks[propertyName];
        if (callbacks) {
          delete propertyCallbacks[propertyName];
          taskScheduler(() => {
            for (const callback of callbacks)
              callback(value);
          });
          for (propertyName in propertyCallbacks)
            return;
          delete this._propertyCallbacks;
        }
      }
      /**
        Retrieves all properties of the iterator.
        @returns {object} An object with property names as keys.
      */
      getProperties() {
        const properties = this._properties;
        const copy = {};
        for (const name in properties)
          copy[name] = properties[name];
        return copy;
      }
      /**
        Sets all of the given properties.
        @param {object} properties Key/value pairs of properties to set
      */
      setProperties(properties) {
        for (const propertyName in properties)
          this.setProperty(propertyName, properties[propertyName]);
      }
      /**
        Copies the given properties from the source iterator.
        @param {module:asynciterator.AsyncIterator} source The iterator to copy from
        @param {Array} propertyNames List of property names to copy
      */
      copyProperties(source, propertyNames) {
        for (const propertyName of propertyNames) {
          source.getProperty(propertyName, (value) => this.setProperty(propertyName, value));
        }
      }
      /**
        Transforms items from this iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {object|Function} [options] Settings of the iterator, or the transformation function
        @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {integer} [options.offset] The number of items to skip
        @param {integer} [options.limit] The maximum number of items
        @param {Function} [options.filter] A function to synchronously filter items from the source
        @param {Function} [options.map] A function to synchronously transform items from the source
        @param {Function} [options.transform] A function to asynchronously transform items from the source
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
        @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
        @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
        @returns {module:asynciterator.AsyncIterator} A new iterator that maps the items from this iterator
      */
      transform(options) {
        return new SimpleTransformIterator(this, options);
      }
      /**
        Maps items from this iterator using the given function.
        After this operation, only read the returned iterator instead of the current one.
        @param {Function} map A mapping function to call on this iterator's (remaining) items
        @param {object?} self The `this` pointer for the mapping function
        @returns {module:asynciterator.AsyncIterator} A new iterator that maps the items from this iterator
      */
      map(map2, self2) {
        return new MappingIterator(this, bind(map2, self2));
      }
      filter(filter3, self2) {
        return this.map(function(item) {
          return filter3.call(self2 || this, item) ? item : null;
        });
      }
      /**
       * Returns a new iterator containing all of the unique items in the original iterator.
       * @param by - The derived value by which to determine uniqueness (e.g., stringification).
                     Defaults to the identity function.
       * @returns An iterator with duplicates filtered out.
       */
      uniq(by = identity) {
        const uniques = /* @__PURE__ */ new Set();
        return this.filter(function(item) {
          const hashed = by.call(this, item);
          if (!uniques.has(hashed)) {
            uniques.add(hashed);
            return true;
          }
          return false;
        });
      }
      /**
        Prepends the items after those of the current iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} items Items to insert before this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that prepends items to this iterator
      */
      prepend(items) {
        return this.transform({ prepend: items });
      }
      /**
        Appends the items after those of the current iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} items Items to insert after this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that appends items to this iterator
      */
      append(items) {
        return this.transform({ append: items });
      }
      /**
        Surrounds items of the current iterator with the given items.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} prepend Items to insert before this iterator's (remaining) items
        @param {Array|module:asynciterator.AsyncIterator} append Items to insert after this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that appends and prepends items to this iterator
      */
      surround(prepend, append) {
        return this.transform({ prepend, append });
      }
      /**
        Skips the given number of items from the current iterator.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} offset The number of items to skip
        @returns {module:asynciterator.AsyncIterator} A new iterator that skips the given number of items
      */
      skip(offset) {
        return this.map((item) => offset-- > 0 ? null : item);
      }
      /**
        Limits the current iterator to the given number of items.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} limit The maximum number of items
        @returns {module:asynciterator.AsyncIterator} A new iterator with at most the given number of items
      */
      take(limit) {
        return this.transform({ limit });
      }
      /**
        Limits the current iterator to the given range.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} start Index of the first item to return
        @param {integer} end Index of the last item to return
        @returns {module:asynciterator.AsyncIterator} A new iterator with items in the given range
      */
      range(start, end) {
        return this.transform({ offset: start, limit: Math.max(end - start + 1, 0) });
      }
      /**
        Creates a copy of the current iterator,
        containing all items emitted from this point onward.
        Further copies can be created; they will all start from this same point.
        After this operation, only read the returned copies instead of the original iterator.
        @returns {module:asynciterator.AsyncIterator} A new iterator that contains all future items of this iterator
      */
      clone() {
        return new ClonedIterator(this);
      }
      /**
       * An AsyncIterator is async iterable.
       * This allows iterators to be used via the for-await syntax.
       *
       * In cases where the returned EcmaScript AsyncIterator will not be fully consumed,
       * it is recommended to manually listen for error events on the main AsyncIterator
       * to avoid uncaught error messages.
       *
       * @returns {ESAsyncIterator<T>} An EcmaScript AsyncIterator
       */
      [Symbol.asyncIterator]() {
        const it = this;
        let currentResolve = null;
        let currentReject = null;
        let pendingError = null;
        it.addListener("readable", tryResolve);
        it.addListener("end", tryResolve);
        it.addListener("error", tryReject);
        function tryResolve() {
          if (currentResolve !== null) {
            if (pendingError !== null) {
              tryReject(pendingError);
            } else if (it.done) {
              currentResolve({ done: true, value: void 0 });
              currentResolve = currentReject = null;
              removeListeners();
            } else {
              const value = it.read();
              if (value !== null) {
                currentResolve({ done: false, value });
                currentResolve = currentReject = null;
              }
            }
          }
        }
        function tryReject(error) {
          if (currentReject !== null) {
            currentReject(error);
            currentResolve = currentReject = pendingError = null;
            removeListeners();
          } else if (pendingError === null) {
            pendingError = error;
          }
        }
        function removeListeners() {
          it.removeListener("readable", tryResolve);
          it.removeListener("end", tryResolve);
          it.removeListener("error", tryReject);
        }
        return {
          next() {
            return new Promise((resolve, reject) => {
              currentResolve = resolve;
              currentReject = reject;
              tryResolve();
            });
          }
        };
      }
    };
    exports.AsyncIterator = AsyncIterator;
    function waitForDataListener(eventName) {
      if (eventName === "data") {
        this.removeListener("newListener", waitForDataListener);
        addSingleListener(this, "readable", emitData);
        if (this.readable)
          taskScheduler(() => emitData.call(this));
      }
    }
    function emitData() {
      let item;
      while (this.listenerCount("data") !== 0 && (item = this.read()) !== null)
        this.emit("data", item);
      if (this.listenerCount("data") === 0 && !this.done) {
        this.removeListener("readable", emitData);
        addSingleListener(this, "newListener", waitForDataListener);
      }
    }
    function addSingleListener(source, eventName, listener) {
      if (!source.listeners(eventName).includes(listener))
        source.on(eventName, listener);
    }
    var EmptyIterator = class extends AsyncIterator {
      /** Creates a new `EmptyIterator`. */
      constructor() {
        super();
        this._changeState(exports.ENDED, true);
      }
    };
    exports.EmptyIterator = EmptyIterator;
    var SingletonIterator = class extends AsyncIterator {
      /**
        Creates a new `SingletonIterator`.
        @param {object} item The item that will be emitted.
      */
      constructor(item) {
        super();
        this._item = item;
        if (item === null)
          this.close();
        else
          this.readable = true;
      }
      /* Reads the item from the iterator. */
      read() {
        const item = this._item;
        this._item = null;
        this.close();
        return item;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return this._item === null ? "" : `(${this._item})`;
      }
    };
    exports.SingletonIterator = SingletonIterator;
    var ArrayIterator = class extends AsyncIterator {
      /**
        Creates a new `ArrayIterator`.
        @param {Array} items The items that will be emitted.
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {boolean} [options.preserve=true] If false, the passed array can be safely modified
      */
      constructor(items = [], { autoStart = true, preserve = true } = {}) {
        super();
        const buffer = preserve || !Array.isArray(items) ? [...items] : items;
        this._index = 0;
        this._sourceStarted = autoStart !== false;
        this._truncateThreshold = preserve ? -1 : 64;
        if (this._sourceStarted && buffer.length === 0)
          this.close();
        else
          this._buffer = buffer;
        this.readable = true;
      }
      /* Reads an item from the iterator. */
      read() {
        if (!this._sourceStarted)
          this._sourceStarted = true;
        let item = null;
        if (this._buffer) {
          if (this._index < this._buffer.length)
            item = this._buffer[this._index++];
          if (this._index === this._buffer.length) {
            delete this._buffer;
            this.close();
          } else if (this._index === this._truncateThreshold) {
            this._buffer.splice(0, this._truncateThreshold);
            this._index = 0;
          }
        }
        return item;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `(${this._buffer ? this._buffer.length - this._index : 0})`;
      }
      /* Called by {@link module:asynciterator.AsyncIterator#destroy} */
      _destroy(cause, callback) {
        delete this._buffer;
        callback();
      }
      /**
       Consume all remaining items of the iterator into an array that will be returned asynchronously.
       @param {object} [options] Settings for array creation
       @param {integer} [options.limit] The maximum number of items to place in the array.
       */
      toArray(options = {}) {
        if (!this._buffer)
          return Promise.resolve([]);
        const { length } = this._buffer;
        const start = this._index;
        const end = typeof options.limit !== "number" ? length : start + options.limit;
        const items = this._buffer.slice(start, end);
        this._index = end;
        if (end >= length)
          this.close();
        return Promise.resolve(items);
      }
    };
    exports.ArrayIterator = ArrayIterator;
    var IntegerIterator = class extends AsyncIterator {
      /**
        Creates a new `IntegerIterator`.
        @param {object} [options] Settings of the iterator
        @param {integer} [options.start=0] The first number to emit
        @param {integer} [options.end=Infinity] The last number to emit
        @param {integer} [options.step=1] The increment between two numbers
      */
      constructor({ start = 0, step = 1, end } = {}) {
        super();
        if (Number.isFinite(start))
          start = Math.trunc(start);
        this._next = start;
        if (Number.isFinite(step))
          step = Math.trunc(step);
        this._step = step;
        const ascending = step >= 0;
        const direction = ascending ? Infinity : -Infinity;
        if (Number.isFinite(end))
          end = Math.trunc(end);
        else if (end !== -direction)
          end = direction;
        this._last = end;
        if (!Number.isFinite(start) || (ascending ? start > end : start < end))
          this.close();
        else
          this.readable = true;
      }
      /* Reads an item from the iterator. */
      read() {
        if (this.closed)
          return null;
        const current = this._next, step = this._step, last3 = this._last, next = this._next += step;
        if (step >= 0 ? next > last3 : next < last3)
          this.close();
        return current;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `(${this._next}...${this._last})`;
      }
    };
    exports.IntegerIterator = IntegerIterator;
    function identity(item) {
      return item;
    }
    exports.identity = identity;
    exports.DESTINATION = Symbol("destination");
    var MappingIterator = class extends AsyncIterator {
      /**
       * Applies the given mapping to the source iterator.
       */
      constructor(source, map2 = identity, options = {}) {
        super();
        this._map = map2;
        this._source = ensureSourceAvailable(source);
        this._destroySource = options.destroySource !== false;
        if (source.done) {
          this.close();
        } else {
          this._source[exports.DESTINATION] = this;
          this._source.on("end", destinationClose);
          this._source.on("error", destinationEmitError);
          this._source.on("readable", destinationSetReadable);
          this.readable = this._source.readable;
        }
      }
      /* Tries to read the next item from the iterator. */
      read() {
        if (!this.done) {
          if (this._source.readable) {
            let item, mapped;
            while ((item = this._source.read()) !== null) {
              if ((mapped = this._map(item)) !== null)
                return mapped;
            }
          }
          this.readable = false;
          if (this._source.done)
            this.close();
        }
        return null;
      }
      /* Cleans up the source iterator and ends. */
      _end(destroy) {
        this._source.removeListener("end", destinationClose);
        this._source.removeListener("error", destinationEmitError);
        this._source.removeListener("readable", destinationSetReadable);
        delete this._source[exports.DESTINATION];
        if (this._destroySource)
          this._source.destroy();
        super._end(destroy);
      }
    };
    exports.MappingIterator = MappingIterator;
    function ensureSourceAvailable(source, allowDestination = false) {
      if (!source || !isFunction(source.read) || !isFunction(source.on))
        throw new TypeError(`Invalid source: ${source}`);
      if (!allowDestination && source[exports.DESTINATION])
        throw new Error("The source already has a destination");
      return source;
    }
    var BufferedIterator = class extends AsyncIterator {
      /**
        Creates a new `BufferedIterator`.
        @param {object} [options] Settings of the iterator
        @param {integer} [options.maxBufferSize=4] The number of items to preload in the internal buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
      */
      constructor({ maxBufferSize = 4, autoStart = true } = {}) {
        super(exports.INIT);
        this._buffer = new linkedlist_1.LinkedList();
        this._maxBufferSize = 4;
        this._reading = true;
        this._pushedCount = 0;
        this.maxBufferSize = maxBufferSize;
        taskScheduler(() => this._init(autoStart));
        this._sourceStarted = autoStart !== false;
      }
      /**
        The maximum number of items to preload in the internal buffer.
        A `BufferedIterator` tries to fill its buffer as far as possible.
        Set to `Infinity` to fully drain the source.
        @type number
      */
      get maxBufferSize() {
        return this._maxBufferSize;
      }
      set maxBufferSize(maxBufferSize) {
        if (maxBufferSize !== Infinity) {
          maxBufferSize = !Number.isFinite(maxBufferSize) ? 4 : Math.max(Math.trunc(maxBufferSize), 1);
        }
        if (this._maxBufferSize !== maxBufferSize) {
          this._maxBufferSize = maxBufferSize;
          if (this._state === exports.OPEN)
            this._fillBuffer();
        }
      }
      /**
        Initializing the iterator by calling {@link BufferedIterator#_begin}
        and changing state from INIT to OPEN.
        @protected
        @param {boolean} autoStart Whether reading of items should immediately start after OPEN.
      */
      _init(autoStart) {
        let doneCalled = false;
        this._reading = true;
        this._begin(() => {
          if (doneCalled)
            throw new Error("done callback called multiple times");
          doneCalled = true;
          this._reading = false;
          this._changeState(exports.OPEN);
          if (autoStart)
            this._fillBufferAsync();
          else
            this.readable = true;
        });
      }
      /**
        Writes beginning items and opens iterator resources.
        Should never be called before {@link BufferedIterator#_init};
        typically, `_init` is responsible for calling `_begin`.
        @protected
        @param {function} done To be called when initialization is complete
      */
      _begin(done) {
        done();
      }
      /**
        Tries to read the next item from the iterator.
        If the buffer is empty,
        this method calls {@link BufferedIterator#_read} to fetch items.
        @returns {object?} The next item, or `null` if none is available
      */
      read() {
        if (this.done)
          return null;
        if (!this._sourceStarted)
          this._sourceStarted = true;
        const buffer = this._buffer;
        let item;
        if (buffer.empty) {
          item = null;
          this.readable = false;
        } else {
          item = buffer.shift();
        }
        if (!this._reading && buffer.length < this._maxBufferSize) {
          if (!this.closed)
            this._fillBufferAsync();
          else if (buffer.empty)
            this._endAsync();
        }
        return item;
      }
      /**
        Tries to generate the given number of items.
        Implementers should add `count` items through {@link BufferedIterator#_push}.
        @protected
        @param {integer} count The number of items to generate
        @param {function} done To be called when reading is complete
      */
      _read(count2, done) {
        done();
      }
      /**
        Adds an item to the internal buffer.
        @protected
        @param {object} item The item to add
        @emits module:asynciterator.AsyncIterator.readable
      */
      _push(item) {
        if (!this.done) {
          this._pushedCount++;
          this._buffer.push(item);
          this.readable = true;
        }
      }
      /**
        Fills the internal buffer until `this._maxBufferSize` items are present.
        This method calls {@link BufferedIterator#_read} to fetch items.
        @protected
        @emits module:asynciterator.AsyncIterator.readable
      */
      _fillBuffer() {
        let neededItems;
        if (this._reading) {
        } else if (this.closed) {
          this._completeClose();
        } else if ((neededItems = Math.min(this._maxBufferSize - this._buffer.length, 128)) > 0) {
          this._pushedCount = 0;
          this._reading = true;
          this._read(neededItems, () => {
            if (!neededItems)
              throw new Error("done callback called multiple times");
            neededItems = 0;
            this._reading = false;
            if (this.closed) {
              this._completeClose();
            } else if (this._pushedCount) {
              this.readable = true;
              if (this._buffer.length < this._maxBufferSize / 2)
                this._fillBufferAsync();
            }
          });
        }
      }
      /**
        Schedules `_fillBuffer` asynchronously.
      */
      _fillBufferAsync() {
        if (!this._reading) {
          this._reading = true;
          taskScheduler(() => {
            this._reading = false;
            this._fillBuffer();
          });
        }
      }
      /**
        Stops the iterator from generating new items
        after a possible pending read operation has finished.
        Already generated, pending, or terminating items can still be emitted.
        After this, the iterator will end asynchronously.
        @emits module:asynciterator.AsyncIterator.end
      */
      close() {
        if (!this._reading)
          this._completeClose();
        else
          this._changeState(exports.CLOSING);
      }
      /**
        Stops the iterator from generating new items,
        switching from `CLOSING` state into `CLOSED` state.
        @protected
        @emits module:asynciterator.AsyncIterator.end
      */
      _completeClose() {
        if (this._changeState(exports.CLOSED)) {
          this._reading = true;
          this._flush(() => {
            if (!this._reading)
              throw new Error("done callback called multiple times");
            this._reading = false;
            if (this._buffer.empty)
              this._endAsync();
          });
        }
      }
      /* Called by {@link module:asynciterator.AsyncIterator#destroy} */
      _destroy(cause, callback) {
        this._buffer.clear();
        callback();
      }
      /**
        Writes terminating items and closes iterator resources.
        Should never be called before {@link BufferedIterator#close};
        typically, `close` is responsible for calling `_flush`.
        @protected
        @param {function} done To be called when termination is complete
      */
      _flush(done) {
        done();
      }
      /**
        Generates details for a textual representation of the iterator.
        @protected
       */
      _toStringDetails() {
        const buffer = this._buffer;
        return `{${buffer.empty ? "" : `next: ${buffer.first}, `}buffer: ${buffer.length}}`;
      }
    };
    exports.BufferedIterator = BufferedIterator;
    var TransformIterator = class extends BufferedIterator {
      /**
        Creates a new `TransformIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
        @param {object} [options] Settings of the iterator
        @param {integer} [options.maxBufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its transformation yields no items
        @param {boolean} [options.destroySource=true] Whether the source should be destroyed when this transformed iterator is closed or destroyed
        @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
      */
      constructor(source, options = source || {}) {
        super(options);
        this._boundPush = (item) => this._push(item);
        if (!isSourceExpression(source))
          source = options.source;
        if (isEventEmitter(source)) {
          this.source = source;
        } else if (source) {
          this._createSource = isPromise(source) ? () => source : source;
          if (this._sourceStarted)
            this._loadSourceAsync();
        }
        this._optional = Boolean(options.optional);
        this._destroySource = options.destroySource !== false;
      }
      /**
        The source this iterator generates items from.
        @type module:asynciterator.AsyncIterator
      */
      get source() {
        if (isFunction(this._createSource))
          this._loadSourceAsync();
        return this._source;
      }
      set source(value) {
        const source = this._source = this._validateSource(value);
        source[exports.DESTINATION] = this;
        if (this.done) {
          if (this._destroySource)
            source.destroy();
        } else if (source.done) {
          this.close();
        } else {
          source.on("end", destinationCloseWhenDone);
          source.on("readable", destinationFillBuffer);
          source.on("error", destinationEmitError);
        }
      }
      /**
        Initializes a source that was set through a promise
        @protected
      */
      _loadSourceAsync() {
        if (isFunction(this._createSource)) {
          Promise.resolve(this._createSource()).then((source) => {
            delete this._createSource;
            this.source = source;
            this._fillBuffer();
          }, (error) => this.emit("error", error));
          this._createSource = null;
        }
      }
      /**
        Validates whether the given iterator can be used as a source.
        @protected
        @param {object} source The source to validate
        @param {boolean} allowDestination Whether the source can already have a destination
      */
      _validateSource(source, allowDestination = false) {
        if (this._source || typeof this._createSource !== "undefined")
          throw new Error("The source cannot be changed after it has been set");
        return ensureSourceAvailable(source, allowDestination);
      }
      /**
        Tries to read transformed items.
      */
      _read(count2, done) {
        const next = () => {
          if (this._pushedCount < count2 && !this.closed)
            taskScheduler(() => this._readAndTransform(next, done));
          else
            done();
        };
        this._readAndTransform(next, done);
      }
      /**
        Reads a transforms an item
      */
      _readAndTransform(next, done) {
        let item;
        const source = this.source;
        if (!source || source.done || (item = source.read()) === null)
          done();
        else if (!this._optional)
          this._transform(item, next, this._boundPush);
        else
          this._optionalTransform(item, next);
      }
      /**
        Tries to transform the item;
        if the transformation yields no items, pushes the original item.
      */
      _optionalTransform(item, done) {
        const pushedCount = this._pushedCount;
        this._transform(item, () => {
          if (pushedCount === this._pushedCount)
            this._push(item);
          done();
        }, this._boundPush);
      }
      /**
        Generates items based on the item from the source.
        Implementers should add items through {@link BufferedIterator#_push}.
        The default implementation pushes the source item as-is.
        @protected
        @param {object} item The last read item from the source
        @param {function} done To be called when reading is complete
        @param {function} push A callback to push zero or more transformation results.
      */
      _transform(item, done, push) {
        push(item);
        done();
      }
      /**
        Closes the iterator when pending items are transformed.
        @protected
      */
      _closeWhenDone() {
        this.close();
      }
      /* Cleans up the source iterator and ends. */
      _end(destroy) {
        const source = this._source;
        if (source) {
          source.removeListener("end", destinationCloseWhenDone);
          source.removeListener("error", destinationEmitError);
          source.removeListener("readable", destinationFillBuffer);
          delete source[exports.DESTINATION];
          if (this._destroySource)
            source.destroy();
        }
        super._end(destroy);
      }
    };
    exports.TransformIterator = TransformIterator;
    function destinationSetReadable() {
      this[exports.DESTINATION].readable = true;
    }
    function destinationEmitError(error) {
      this[exports.DESTINATION].emit("error", error);
    }
    function destinationClose() {
      this[exports.DESTINATION].close();
    }
    function destinationCloseWhenDone() {
      this[exports.DESTINATION]._closeWhenDone();
    }
    function destinationFillBuffer() {
      if (this[exports.DESTINATION]._sourceStarted !== false)
        this[exports.DESTINATION]._fillBuffer();
    }
    var SimpleTransformIterator = class extends TransformIterator {
      /**
        Creates a new `SimpleTransformIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
        @param {object|Function} [options] Settings of the iterator, or the transformation function
        @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
        @param {integer} [options.offset] The number of items to skip
        @param {integer} [options.limit] The maximum number of items
        @param {Function} [options.filter] A function to synchronously filter items from the source
        @param {Function} [options.map] A function to synchronously transform items from the source
        @param {Function} [options.transform] A function to asynchronously transform items from the source
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
        @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
        @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
      */
      constructor(source, options) {
        super(source, options);
        this._offset = 0;
        this._limit = Infinity;
        this._filter = (item) => true;
        options = options || (!isSourceExpression(source) ? source : null);
        if (options) {
          const transform = isFunction(options) ? options : options.transform;
          const { limit, offset, filter: filter3, map: map2, prepend, append } = options;
          if (offset === Infinity || limit === -Infinity) {
            this._limit = 0;
          } else {
            if (Number.isFinite(offset))
              this._offset = Math.max(Math.trunc(offset), 0);
            if (Number.isFinite(limit))
              this._limit = Math.max(Math.trunc(limit), 0);
            if (isFunction(filter3))
              this._filter = filter3;
            if (isFunction(map2))
              this._map = map2;
            this._transform = isFunction(transform) ? transform : null;
          }
          if (prepend)
            this._prepender = isEventEmitter(prepend) ? prepend : fromArray(prepend);
          if (append)
            this._appender = isEventEmitter(append) ? append : fromArray(append);
        }
      }
      /* Tries to read and transform items */
      _read(count2, done) {
        const next = () => this._readAndTransformSimple(count2, nextAsync, done);
        this._readAndTransformSimple(count2, nextAsync, done);
        function nextAsync() {
          taskScheduler(next);
        }
      }
      /* Reads and transform items */
      _readAndTransformSimple(count2, next, done) {
        let item;
        const { source } = this;
        if (!source || source.done) {
          done();
          return;
        }
        if (this._limit === 0)
          this.close();
        while (!this.closed && this._pushedCount < count2 && (item = source.read()) !== null) {
          if (!this._filter(item) || this._offset !== 0 && this._offset--)
            continue;
          const mappedItem = typeof this._map === "undefined" ? item : this._map(item);
          if (mappedItem === null) {
            if (this._optional)
              this._push(item);
          } else if (!isFunction(this._transform)) {
            this._push(mappedItem);
          } else {
            if (!this._optional)
              this._transform(mappedItem, next, this._boundPush);
            else
              this._optionalTransform(mappedItem, next);
            return;
          }
          if (--this._limit === 0)
            this.close();
        }
        done();
      }
      // Prepends items to the iterator
      _begin(done) {
        this._insert(this._prepender, done);
        delete this._prepender;
      }
      // Appends items to the iterator
      _flush(done) {
        this._insert(this._appender, done);
        delete this._appender;
      }
      // Inserts items in the iterator
      _insert(inserter, done) {
        const push = (item) => this._push(item);
        if (!inserter || inserter.done) {
          done();
        } else {
          inserter.on("data", push);
          inserter.on("end", end);
        }
        function end() {
          inserter.removeListener("data", push);
          inserter.removeListener("end", end);
          done();
        }
      }
    };
    exports.SimpleTransformIterator = SimpleTransformIterator;
    var MultiTransformIterator = class extends TransformIterator {
      /**
       Creates a new `MultiTransformIterator`.
       @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
       @param {object|Function} [options] Settings of the iterator, or the transformation function
       @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
       @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
       @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
       @param {integer} [options.offset] The number of items to skip
       @param {integer} [options.limit] The maximum number of items
       @param {Function} [options.filter] A function to synchronously filter items from the source
       @param {Function} [options.map] A function to synchronously transform items from the source
       @param {Function} [options.transform] A function to asynchronously transform items from the source
       @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
       @param {Function} [options.multiTransform] A function to asynchronously transform items to iterators from the source
       @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
       @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
       */
      constructor(source, options) {
        super(source, options);
        this._transformerQueue = [];
        if (options) {
          const multiTransform = isFunction(options) ? options : options.multiTransform;
          if (multiTransform)
            this._createTransformer = multiTransform;
        }
      }
      /* Tries to read and transform items */
      _read(count2, done) {
        const transformerQueue = this._transformerQueue, optional = this._optional;
        let head2, item;
        while ((head2 = transformerQueue[0]) && head2.transformer.done) {
          if (optional && head2.item !== null) {
            count2--;
            this._push(head2.item);
          }
          transformerQueue.shift();
          const { transformer } = head2;
          transformer.removeListener("end", destinationFillBuffer);
          transformer.removeListener("readable", destinationFillBuffer);
          transformer.removeListener("error", destinationEmitError);
        }
        const { source } = this;
        while (source && !source.done && transformerQueue.length < this.maxBufferSize) {
          item = source.read();
          if (item === null)
            break;
          const transformer = this._createTransformer(item) || new EmptyIterator();
          transformer[exports.DESTINATION] = this;
          transformer.on("end", destinationFillBuffer);
          transformer.on("readable", destinationFillBuffer);
          transformer.on("error", destinationEmitError);
          transformerQueue.push({ transformer, item });
        }
        head2 = transformerQueue[0];
        if (head2) {
          const { transformer } = head2;
          while (count2-- > 0 && (item = transformer.read()) !== null) {
            this._push(item);
            if (optional)
              head2.item = null;
          }
        } else if (source && source.done) {
          this.close();
        }
        done();
      }
      /**
        Creates a transformer for the given item.
        @param {object} item The last read item from the source
        @returns {module:asynciterator.AsyncIterator} An iterator that transforms the given item
      */
      _createTransformer(item) {
        return new SingletonIterator(item);
      }
      /* Closes the iterator when pending items are transformed. */
      _closeWhenDone() {
        if (!this._transformerQueue.length)
          this.close();
      }
      _end(destroy) {
        super._end(destroy);
        if (this._destroySource) {
          for (const item of this._transformerQueue)
            item.transformer.destroy();
        }
      }
    };
    exports.MultiTransformIterator = MultiTransformIterator;
    var UnionIterator = class extends BufferedIterator {
      /**
        Creates a new `UnionIterator`.
        @param {module:asynciterator.AsyncIterator|Array} [sources] The sources to read from
        @param {object} [options] Settings of the iterator
        @param {boolean} [options.destroySource=true] Whether the sources should be destroyed when transformed iterator is closed or destroyed
      */
      constructor(sources, options = {}) {
        super(options);
        this._sources = [];
        this._currentSource = -1;
        const autoStart = options.autoStart !== false;
        if (isEventEmitter(sources)) {
          sources.on("error", (error) => this.emit("error", error));
          this._pending = { loading: false, sources };
          if (autoStart)
            this._loadSources();
        } else if (Array.isArray(sources) && sources.length > 0) {
          for (const source of sources)
            this._addSource(source);
        } else if (autoStart) {
          this.close();
        }
        this._destroySources = options.destroySources !== false;
      }
      // Loads pending sources into the sources list
      _loadSources() {
        const sources = this._pending.sources;
        this._pending.loading = true;
        if (sources.done) {
          delete this._pending;
          this.close();
        } else {
          sources.on("data", (source) => {
            this._addSource(source);
            this._fillBufferAsync();
          });
          sources.on("end", () => {
            delete this._pending;
            this._fillBuffer();
          });
        }
      }
      // Adds the given source to the internal sources array
      _addSource(source) {
        if (isPromise(source))
          source = wrap2(source);
        if (!source.done) {
          this._sources.push(source);
          source[exports.DESTINATION] = this;
          source.on("error", destinationEmitError);
          source.on("readable", destinationFillBuffer);
          source.on("end", destinationRemoveEmptySources);
        }
      }
      // Removes sources that will no longer emit items
      _removeEmptySources() {
        this._sources = this._sources.filter((source, index) => {
          if (source.done && index <= this._currentSource)
            this._currentSource--;
          return !source.done;
        });
        this._fillBuffer();
      }
      // Reads items from the next sources
      _read(count2, done) {
        var _a;
        if (((_a = this._pending) === null || _a === void 0 ? void 0 : _a.loading) === false)
          this._loadSources();
        let lastCount = 0, item;
        while (lastCount !== (lastCount = count2)) {
          for (let i = 0; i < this._sources.length && count2 > 0; i++) {
            this._currentSource = (this._currentSource + 1) % this._sources.length;
            const source = this._sources[this._currentSource];
            if ((item = source.read()) !== null) {
              count2--;
              this._push(item);
            }
          }
        }
        if (!this._pending && this._sources.length === 0)
          this.close();
        done();
      }
      _end(destroy = false) {
        super._end(destroy);
        if (this._destroySources) {
          for (const source of this._sources)
            source.destroy();
          if (this._pending) {
            this._pending.sources.destroy();
            delete this._pending;
          }
        }
      }
    };
    exports.UnionIterator = UnionIterator;
    function destinationRemoveEmptySources() {
      this[exports.DESTINATION]._removeEmptySources();
    }
    var ClonedIterator = class extends TransformIterator {
      /**
        Creates a new `ClonedIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator copies items from
      */
      constructor(source) {
        super(source, { autoStart: false });
        this._readPosition = 0;
        this._reading = false;
        if (source)
          this.readable = true;
      }
      _init() {
      }
      close() {
        AsyncIterator.prototype.close.call(this);
      }
      // The source this iterator copies items from
      get source() {
        return super.source;
      }
      set source(value) {
        const source = this._source = this._validateSource(value);
        const history = source && source[exports.DESTINATION] || (source[exports.DESTINATION] = new HistoryReader(source));
        if (this.done) {
          if (this._destroySource)
            source.destroy();
        } else if (history.endsAt(0)) {
          this.close();
        } else {
          history.register(this);
          if (source._sourceStarted === false || history.readAt(0) !== null)
            this.readable = true;
        }
        const propertyCallbacks = this._propertyCallbacks;
        for (const propertyName in propertyCallbacks) {
          const callbacks = propertyCallbacks[propertyName];
          for (const callback of callbacks)
            this._getSourceProperty(propertyName, callback);
        }
      }
      /**
        Validates whether the given iterator can be used as a source.
        @protected
        @param {object} source The source to validate
        @param {boolean} allowDestination Whether the source can already have a destination
      */
      _validateSource(source, allowDestination = false) {
        const history = source && source[exports.DESTINATION];
        return super._validateSource(source, !history || history instanceof HistoryReader);
      }
      // Retrieves the property with the given name from the clone or its source.
      getProperty(propertyName, callback) {
        const { source } = this, properties = this._properties, hasProperty = properties && propertyName in properties;
        if (!callback) {
          return hasProperty ? properties && properties[propertyName] : source && source.getProperty(propertyName);
        }
        super.getProperty(propertyName, callback);
        if (source && !hasProperty)
          this._getSourceProperty(propertyName, callback);
        return void 0;
      }
      // Retrieves the property with the given name from the source
      _getSourceProperty(propertyName, callback) {
        this.source.getProperty(propertyName, (value) => {
          if (!this._properties || !(propertyName in this._properties))
            callback(value);
        });
      }
      // Retrieves all properties of the iterator and its source.
      getProperties() {
        const base = this.source ? this.source.getProperties() : {}, properties = this._properties;
        for (const name in properties)
          base[name] = properties[name];
        return base;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `{source: ${this.source ? this.source.toString() : "none"}}`;
      }
      /* Tries to read an item */
      read() {
        if (!this._sourceStarted)
          this._sourceStarted = true;
        const source = this.source;
        let item = null;
        if (!this.done && source) {
          const history = source[exports.DESTINATION];
          if ((item = history.readAt(this._readPosition)) !== null)
            this._readPosition++;
          else
            this.readable = false;
          if (history.endsAt(this._readPosition))
            this.close();
        }
        return item;
      }
      /* End the iterator and cleans up. */
      _end(destroy) {
        const source = this.source;
        const history = source === null || source === void 0 ? void 0 : source[exports.DESTINATION];
        if (history)
          history.unregister(this);
        BufferedIterator.prototype._end.call(this, destroy);
      }
    };
    exports.ClonedIterator = ClonedIterator;
    var HistoryReader = class {
      constructor(source) {
        this._history = [];
        this._trackers = /* @__PURE__ */ new Set();
        this._source = source;
        if (!source.done) {
          const setReadable = () => {
            for (const tracker of this._trackers)
              tracker.readable = true;
          };
          const emitError = (error) => {
            for (const tracker of this._trackers)
              tracker.emit("error", error);
          };
          const end = () => {
            for (const tracker of this._trackers) {
              if (tracker._sourceStarted !== false && tracker._readPosition === this._history.length)
                tracker.close();
            }
            this._trackers.clear();
            source.removeListener("end", end);
            source.removeListener("error", emitError);
            source.removeListener("readable", setReadable);
          };
          source.on("end", end);
          source.on("error", emitError);
          source.on("readable", setReadable);
        }
      }
      // Registers a clone for history updates
      register(clone) {
        if (!this._source.done)
          this._trackers.add(clone);
      }
      // Unregisters a clone for history updates
      unregister(clone) {
        this._trackers.delete(clone);
      }
      // Tries to read the item at the given history position
      readAt(pos) {
        let item = null;
        if (pos < this._history.length)
          item = this._history[pos];
        else if (!this._source.done && (item = this._source.read()) !== null)
          this._history[pos] = item;
        return item;
      }
      // Determines whether the given position is the end of the source
      endsAt(pos) {
        return this._source.done && this._history.length === pos;
      }
    };
    var WrappingIterator = class extends AsyncIterator {
      constructor(source, opts) {
        super();
        this._source = null;
        this._destroySource = (opts === null || opts === void 0 ? void 0 : opts.destroySource) !== false;
        if (isPromise(source)) {
          this._source = new AsyncIterator();
          source.then((value) => {
            this._source = null;
            this.source = value;
          }).catch((error) => this.emit("error", error));
        } else if (source) {
          this.source = source;
        }
      }
      set source(value) {
        let source = value;
        if (this._source !== null)
          throw new Error("The source cannot be changed after it has been set");
        if (isIterable(source))
          source = source[Symbol.iterator]();
        if (isIterator2(source)) {
          let iterator = source;
          source = new events_1.EventEmitter();
          source.read = () => {
            if (iterator !== null) {
              let next;
              while (!(next = iterator.next()).done) {
                if (next.value !== null)
                  return next.value;
              }
              iterator = null;
              this.close();
            }
            return null;
          };
        } else {
          source = ensureSourceAvailable(source);
        }
        if (this.done) {
          if (this._destroySource && isFunction(source.destroy))
            source.destroy();
          return;
        }
        source[exports.DESTINATION] = this;
        source.on("end", destinationClose);
        source.on("error", destinationEmitError);
        source.on("readable", destinationSetReadable);
        this._source = source;
        this.readable = source.readable !== false;
      }
      read() {
        if (this._source !== null && this._source.readable !== false) {
          const item = this._source.read();
          if (item !== null)
            return item;
          this.readable = false;
        }
        return null;
      }
      _end(destroy = false) {
        if (this._source !== null) {
          this._source.removeListener("end", destinationClose);
          this._source.removeListener("error", destinationEmitError);
          this._source.removeListener("readable", destinationSetReadable);
          delete this._source[exports.DESTINATION];
          if (this._destroySource && isFunction(this._source.destroy))
            this._source.destroy();
          this._source = null;
        }
        super._end(destroy);
      }
    };
    exports.WrappingIterator = WrappingIterator;
    function wrap2(source, options) {
      if (options && ("autoStart" in options || "optional" in options || "source" in options || "maxBufferSize" in options)) {
        if (source && !isEventEmitter(source))
          source = new WrappingIterator(source);
        return new TransformIterator(source, options);
      }
      if (!source)
        return empty();
      if (isPromise(source))
        return new WrappingIterator(source, options);
      if (source instanceof AsyncIterator)
        return source;
      if (Array.isArray(source))
        return fromArray(source);
      if (isIterable(source) || isIterator2(source) || isEventEmitter(source))
        return new WrappingIterator(source, options);
      throw new TypeError(`Invalid source: ${source}`);
    }
    exports.wrap = wrap2;
    function empty() {
      return new EmptyIterator();
    }
    exports.empty = empty;
    function single(item) {
      return new SingletonIterator(item);
    }
    exports.single = single;
    function fromArray(items) {
      return new ArrayIterator(items);
    }
    exports.fromArray = fromArray;
    function fromIterator(source) {
      return new WrappingIterator(source);
    }
    exports.fromIterator = fromIterator;
    function fromIterable(source) {
      return new WrappingIterator(source);
    }
    exports.fromIterable = fromIterable;
    function union(sources) {
      return new UnionIterator(sources);
    }
    exports.union = union;
    function range(start, end, step) {
      return new IntegerIterator({ start, end, step });
    }
    exports.range = range;
    function bind(fn, self2) {
      return self2 ? fn.bind(self2) : fn;
    }
    function isFunction(object) {
      return typeof object === "function";
    }
    exports.isFunction = isFunction;
    function isEventEmitter(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.on);
    }
    exports.isEventEmitter = isEventEmitter;
    function isPromise(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.then);
    }
    exports.isPromise = isPromise;
    function isSourceExpression(object) {
      return object && (isEventEmitter(object) || isPromise(object) || isFunction(object));
    }
    exports.isSourceExpression = isSourceExpression;
    function isIterable(object) {
      return object && Symbol.iterator in object;
    }
    exports.isIterable = isIterable;
    function isIterator2(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.next);
    }
    exports.isIterator = isIterator2;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-data-factory/lib/BlankNodeScoped.js
var require_BlankNodeScoped = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-data-factory/lib/BlankNodeScoped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNodeScoped = void 0;
    var BlankNodeScoped = class {
      constructor(value, skolemized) {
        this.termType = "BlankNode";
        this.value = value;
        this.skolemized = skolemized;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNodeScoped = BlankNodeScoped;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-data-factory/lib/BlankNodeBindingsScoped.js
var require_BlankNodeBindingsScoped = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-data-factory/lib/BlankNodeBindingsScoped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNodeBindingsScoped = void 0;
    var BlankNodeBindingsScoped = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.singleBindingsScope = true;
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNodeBindingsScoped = BlankNodeBindingsScoped;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-data-factory/lib/index.js
var require_lib14 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-data-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNodeScoped(), exports);
    __exportStar(require_BlankNodeBindingsScoped(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/utils.js
var require_utils2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deskolemizeOperation = exports.deskolemizeQuad = exports.deskolemizeTermNestedThrowing = exports.deskolemizeTerm = exports.skolemizeBindingsStream = exports.skolemizeQuadStream = exports.skolemizeBindings = exports.skolemizeQuad = exports.skolemizeTerm = exports.getSourceId = exports.SKOLEM_PREFIX = void 0;
    var utils_data_factory_1 = require_lib14();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    exports.SKOLEM_PREFIX = "urn:comunica_skolem:source_";
    function getSourceId(sourceIds, source) {
      let sourceId = sourceIds.get(source.referenceValue);
      if (sourceId === void 0) {
        sourceId = `${sourceIds.size}`;
        sourceIds.set(source.referenceValue, sourceId);
      }
      return sourceId;
    }
    exports.getSourceId = getSourceId;
    function skolemizeTerm(dataFactory, term, sourceId) {
      if (term.termType === "BlankNode") {
        return new utils_data_factory_1.BlankNodeScoped(`bc_${sourceId}_${term.value}`, dataFactory.namedNode(`${exports.SKOLEM_PREFIX}${sourceId}:${term.value}`));
      }
      return term;
    }
    exports.skolemizeTerm = skolemizeTerm;
    function skolemizeQuad(dataFactory, quad, sourceId) {
      return (0, rdf_terms_1.mapTermsNested)(quad, (term) => skolemizeTerm(dataFactory, term, sourceId));
    }
    exports.skolemizeQuad = skolemizeQuad;
    function skolemizeBindings(dataFactory, bindings, sourceId) {
      return bindings.map((term) => {
        if (term.termType === "Quad") {
          return skolemizeQuad(dataFactory, term, sourceId);
        }
        return skolemizeTerm(dataFactory, term, sourceId);
      });
    }
    exports.skolemizeBindings = skolemizeBindings;
    function skolemizeQuadStream(dataFactory, iterator, sourceId) {
      const ret = iterator.map((quad) => skolemizeQuad(dataFactory, quad, sourceId));
      function inheritMetadata() {
        iterator.getProperty("metadata", (metadata) => {
          ret.setProperty("metadata", metadata);
          metadata.state.addInvalidateListener(inheritMetadata);
        });
      }
      inheritMetadata();
      return ret;
    }
    exports.skolemizeQuadStream = skolemizeQuadStream;
    function skolemizeBindingsStream(dataFactory, iterator, sourceId) {
      const ret = iterator.map((bindings) => skolemizeBindings(dataFactory, bindings, sourceId));
      function inheritMetadata() {
        iterator.getProperty("metadata", (metadata) => {
          ret.setProperty("metadata", metadata);
          metadata.state.addInvalidateListener(inheritMetadata);
        });
      }
      inheritMetadata();
      return ret;
    }
    exports.skolemizeBindingsStream = skolemizeBindingsStream;
    function deskolemizeTerm(dataFactory, term, sourceId) {
      if (term.termType === "BlankNode" && "skolemized" in term) {
        term = term.skolemized;
      }
      if (term.termType === "NamedNode" && term.value.startsWith(exports.SKOLEM_PREFIX)) {
        const colonSeparator = term.value.indexOf(":", exports.SKOLEM_PREFIX.length);
        const termSourceId = term.value.slice(exports.SKOLEM_PREFIX.length, colonSeparator);
        if (termSourceId === sourceId) {
          const termLabel = term.value.slice(colonSeparator + 1, term.value.length);
          return dataFactory.blankNode(termLabel);
        }
        return null;
      }
      return term;
    }
    exports.deskolemizeTerm = deskolemizeTerm;
    function deskolemizeTermNestedThrowing(dataFactory, term, sourceId) {
      if (term.termType === "Quad") {
        return (0, rdf_terms_1.mapTermsNested)(term, (subTerm) => {
          const deskolemized = deskolemizeTerm(dataFactory, subTerm, sourceId);
          if (!deskolemized) {
            throw new Error(`Skolemized term is not in scope for this source`);
          }
          return deskolemized;
        });
      }
      const ret = deskolemizeTerm(dataFactory, term, sourceId);
      if (ret === null) {
        throw new Error(`Skolemized term is not in scope for this source`);
      }
      return ret;
    }
    exports.deskolemizeTermNestedThrowing = deskolemizeTermNestedThrowing;
    function deskolemizeQuad(dataFactory, quad, sourceId) {
      return (0, rdf_terms_1.mapTermsNested)(quad, (term) => {
        const newTerm = deskolemizeTerm(dataFactory, term, sourceId);
        return newTerm ?? term;
      });
    }
    exports.deskolemizeQuad = deskolemizeQuad;
    function deskolemizeOperation(dataFactory, operation, sourceId) {
      const algebraFactory = new sparqlalgebrajs_1.Factory();
      try {
        return sparqlalgebrajs_1.Util.mapOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.PATTERN](op, factory) {
            return {
              result: Object.assign(factory.createPattern(deskolemizeTermNestedThrowing(dataFactory, op.subject, sourceId), deskolemizeTermNestedThrowing(dataFactory, op.predicate, sourceId), deskolemizeTermNestedThrowing(dataFactory, op.object, sourceId), deskolemizeTermNestedThrowing(dataFactory, op.graph, sourceId)), { metadata: op.metadata }),
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.PATH](op, factory) {
            return {
              result: Object.assign(factory.createPath(deskolemizeTermNestedThrowing(dataFactory, op.subject, sourceId), op.predicate, deskolemizeTermNestedThrowing(dataFactory, op.object, sourceId), deskolemizeTermNestedThrowing(dataFactory, op.graph, sourceId)), { metadata: op.metadata }),
              recurse: false
            };
          }
        }, algebraFactory);
      } catch {
      }
    }
    exports.deskolemizeOperation = deskolemizeOperation;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/QuerySourceSkolemized.js
var require_QuerySourceSkolemized = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/QuerySourceSkolemized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuerySourceSkolemized = void 0;
    var context_entries_1 = require_lib3();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var utils_1 = require_utils2();
    var QuerySourceSkolemized = class {
      constructor(innerSource, sourceId) {
        this.innerSource = innerSource;
        this.sourceId = sourceId;
      }
      async getSelectorShape(context) {
        return this.innerSource.getSelectorShape(context);
      }
      queryBindings(operation, context, options) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const operationMapped = (0, utils_1.deskolemizeOperation)(dataFactory, operation, this.sourceId);
        if (!operationMapped) {
          const it = new asynciterator_1.ArrayIterator([], { autoStart: false });
          it.setProperty("metadata", {
            state: new utils_metadata_1.MetadataValidationState(),
            cardinality: { type: "exact", value: 0 },
            variables: []
          });
          return it;
        }
        return (0, utils_1.skolemizeBindingsStream)(dataFactory, this.innerSource.queryBindings(operationMapped, context, options), this.sourceId);
      }
      queryBoolean(operation, context) {
        return this.innerSource.queryBoolean(operation, context);
      }
      queryQuads(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const operationMapped = (0, utils_1.deskolemizeOperation)(dataFactory, operation, this.sourceId);
        if (!operationMapped) {
          const it = new asynciterator_1.ArrayIterator([], { autoStart: false });
          it.setProperty("metadata", {
            state: new utils_metadata_1.MetadataValidationState(),
            cardinality: { type: "exact", value: 0 }
          });
          return it;
        }
        return (0, utils_1.skolemizeQuadStream)(dataFactory, this.innerSource.queryQuads(operationMapped, context), this.sourceId);
      }
      queryVoid(operation, context) {
        return this.innerSource.queryVoid(operation, context);
      }
      get referenceValue() {
        return this.innerSource.referenceValue;
      }
      toString() {
        return `${this.innerSource.toString()}(SkolemID:${this.sourceId})`;
      }
    };
    exports.QuerySourceSkolemized = QuerySourceSkolemized;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/ActorContextPreprocessQuerySourceSkolemize.js
var require_ActorContextPreprocessQuerySourceSkolemize = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/ActorContextPreprocessQuerySourceSkolemize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessQuerySourceSkolemize = void 0;
    var bus_context_preprocess_1 = require_lib10();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var QuerySourceSkolemized_1 = require_QuerySourceSkolemized();
    var utils_1 = require_utils2();
    var ActorContextPreprocessQuerySourceSkolemize = class extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let context = action.context;
        if (context.has(context_entries_1.KeysQueryOperation.querySources)) {
          if (!context.has(context_entries_1.KeysQuerySourceIdentify.sourceIds)) {
            context = context.set(context_entries_1.KeysQuerySourceIdentify.sourceIds, /* @__PURE__ */ new Map());
          }
          const sourceIds = context.getSafe(context_entries_1.KeysQuerySourceIdentify.sourceIds);
          let sources = context.getSafe(context_entries_1.KeysQueryOperation.querySources);
          sources = sources.map((sourceWrapper) => ({
            source: new QuerySourceSkolemized_1.QuerySourceSkolemized(sourceWrapper.source, (0, utils_1.getSourceId)(sourceIds, sourceWrapper.source)),
            context: sourceWrapper.context
          }));
          context = context.set(context_entries_1.KeysQueryOperation.querySources, sources);
        }
        return { context };
      }
    };
    exports.ActorContextPreprocessQuerySourceSkolemize = ActorContextPreprocessQuerySourceSkolemize;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/index.js
var require_lib15 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-skolemize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessQuerySourceSkolemize(), exports);
    __exportStar(require_QuerySourceSkolemized(), exports);
    __exportStar(require_utils2(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-combine-pipeline/lib/MediatorCombinePipeline.js
var require_MediatorCombinePipeline = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-combine-pipeline/lib/MediatorCombinePipeline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorCombinePipeline = void 0;
    var core_1 = require_lib();
    var MediatorCombinePipeline = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediate(action) {
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          return action;
        }
        if (this.filterFailures) {
          const _testResults = [];
          for (const result of testResults) {
            const reply = await result.reply;
            if (reply.isPassed()) {
              _testResults.push(result);
            }
          }
          testResults = _testResults;
        }
        const sideDatas = [];
        testResults = await Promise.all(testResults.map(async ({ actor, reply }, i2) => {
          try {
            const awaitedReply = await reply;
            const value = awaitedReply.getOrThrow();
            sideDatas[i2] = awaitedReply.getSideData();
            return { actor, reply: value };
          } catch (error) {
            throw new Error(this.constructFailureMessage(action, [error.message]));
          }
        }));
        if (this.order) {
          const getOrder = (elem) => {
            const value = this.field ? elem[this.field] : elem;
            if (typeof value !== "number") {
              throw new TypeError("Cannot order elements that are not numbers.");
            }
            return value;
          };
          testResults = testResults.sort((actor1, actor2) => (this.order === "increasing" ? 1 : -1) * (getOrder(actor1.reply) - getOrder(actor2.reply)));
        }
        let handle = action;
        let i = 0;
        for (const { actor } of testResults) {
          handle = { ...handle, ...await actor.runObservable(handle, sideDatas[i++]) };
        }
        return handle;
      }
      mediateWith() {
        throw new Error("Method not supported.");
      }
    };
    exports.MediatorCombinePipeline = MediatorCombinePipeline;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-combine-pipeline/lib/index.js
var require_lib16 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-combine-pipeline/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorCombinePipeline(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-hash-bindings/lib/ActorHashBindings.js
var require_ActorHashBindings = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-hash-bindings/lib/ActorHashBindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashBindings = void 0;
    var core_1 = require_lib();
    var ActorHashBindings = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Failed to obtaining hash functions for bindings} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorHashBindings = ActorHashBindings;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-hash-bindings/lib/index.js
var require_lib17 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-hash-bindings/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashBindings(), exports);
  }
});

// ../../lipdjs/node_modules/imurmurhash/imurmurhash.js
var require_imurmurhash = __commonJS({
  "../../lipdjs/node_modules/imurmurhash/imurmurhash.js"(exports, module) {
    (function() {
      var cache;
      function MurmurHash3(key, seed) {
        var m = this instanceof MurmurHash3 ? this : cache;
        m.reset(seed);
        if (typeof key === "string" && key.length > 0) {
          m.hash(key);
        }
        if (m !== this) {
          return m;
        }
      }
      ;
      MurmurHash3.prototype.hash = function(key) {
        var h1, k1, i, top, len;
        len = key.length;
        this.len += len;
        k1 = this.k1;
        i = 0;
        switch (this.rem) {
          case 0:
            k1 ^= len > i ? key.charCodeAt(i++) & 65535 : 0;
          case 1:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 8 : 0;
          case 2:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 16 : 0;
          case 3:
            k1 ^= len > i ? (key.charCodeAt(i) & 255) << 24 : 0;
            k1 ^= len > i ? (key.charCodeAt(i++) & 65280) >> 8 : 0;
        }
        this.rem = len + this.rem & 3;
        len -= this.rem;
        if (len > 0) {
          h1 = this.h1;
          while (1) {
            k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1 = h1 * 5 + 3864292196 & 4294967295;
            if (i >= len) {
              break;
            }
            k1 = key.charCodeAt(i++) & 65535 ^ (key.charCodeAt(i++) & 65535) << 8 ^ (key.charCodeAt(i++) & 65535) << 16;
            top = key.charCodeAt(i++);
            k1 ^= (top & 255) << 24 ^ (top & 65280) >> 8;
          }
          k1 = 0;
          switch (this.rem) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 65535) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 65535) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 65535;
          }
          this.h1 = h1;
        }
        this.k1 = k1;
        return this;
      };
      MurmurHash3.prototype.result = function() {
        var k1, h1;
        k1 = this.k1;
        h1 = this.h1;
        if (k1 > 0) {
          k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
          k1 = k1 << 15 | k1 >>> 17;
          k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
          h1 ^= k1;
        }
        h1 ^= this.len;
        h1 ^= h1 >>> 16;
        h1 = h1 * 51819 + (h1 & 65535) * 2246770688 & 4294967295;
        h1 ^= h1 >>> 13;
        h1 = h1 * 44597 + (h1 & 65535) * 3266445312 & 4294967295;
        h1 ^= h1 >>> 16;
        return h1 >>> 0;
      };
      MurmurHash3.prototype.reset = function(seed) {
        this.h1 = typeof seed === "number" ? seed : 0;
        this.rem = this.k1 = this.len = 0;
        return this;
      };
      cache = new MurmurHash3();
      if (typeof module != "undefined") {
        module.exports = MurmurHash3;
      } else {
        this.MurmurHash3 = MurmurHash3;
      }
    })();
  }
});

// ../../lipdjs/node_modules/@comunica/actor-hash-bindings-murmur/lib/ActorHashBindingsMurmur.js
var require_ActorHashBindingsMurmur = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-hash-bindings-murmur/lib/ActorHashBindingsMurmur.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashBindingsMurmur = void 0;
    var bus_hash_bindings_1 = require_lib17();
    var core_1 = require_lib();
    var MurmurHash3 = require_imurmurhash();
    var ActorHashBindingsMurmur = class extends bus_hash_bindings_1.ActorHashBindings {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(_action) {
        return {
          hashFunction: (bindings, variables) => {
            var _a;
            let hash2 = MurmurHash3();
            for (const variable of variables) {
              hash2 = hash2.hash(((_a = bindings.get(variable)) == null ? void 0 : _a.value) ?? "UNDEF");
            }
            return hash2.result();
          }
        };
      }
    };
    exports.ActorHashBindingsMurmur = ActorHashBindingsMurmur;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-hash-bindings-murmur/lib/index.js
var require_lib18 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-hash-bindings-murmur/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashBindingsMurmur(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-race/lib/MediatorRace.js
var require_MediatorRace = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-race/lib/MediatorRace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorRace = void 0;
    var core_1 = require_lib();
    var MediatorRace = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      mediateWith(action, testResults) {
        return new Promise((resolve, reject) => {
          const errors = [];
          for (const testResult of testResults) {
            testResult.reply.then((reply) => {
              if (reply.isPassed()) {
                resolve((0, core_1.passTestWithSideData)(testResult.actor, reply.getSideData()));
              } else {
                errors.push(reply.getFailMessage());
                if (errors.length === testResults.length) {
                  resolve((0, core_1.failTest)(this.constructFailureMessage(action, errors)));
                }
              }
            }).catch((error) => {
              reject(error);
            });
          }
        });
      }
    };
    exports.MediatorRace = MediatorRace;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-race/lib/index.js
var require_lib19 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-race/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorRace(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-hash-quads/lib/ActorHashQuads.js
var require_ActorHashQuads = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-hash-quads/lib/ActorHashQuads.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashQuads = void 0;
    var core_1 = require_lib();
    var ActorHashQuads = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Failed to obtaining hash functions for quads} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorHashQuads = ActorHashQuads;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-hash-quads/lib/index.js
var require_lib20 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-hash-quads/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashQuads(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-hash-quads-murmur/lib/ActorHashQuadsMurmur.js
var require_ActorHashQuadsMurmur = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-hash-quads-murmur/lib/ActorHashQuadsMurmur.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashQuadsMurmur = void 0;
    var bus_hash_quads_1 = require_lib20();
    var core_1 = require_lib();
    var MurmurHash3 = require_imurmurhash();
    var ActorHashQuadsMurmur = class extends bus_hash_quads_1.ActorHashQuads {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(_action) {
        return {
          hashFunction: (quad) => {
            const hash2 = MurmurHash3(quad.subject.value);
            hash2.hash(quad.predicate.value);
            hash2.hash(quad.object.value);
            hash2.hash(quad.graph.value);
            return hash2.result();
          }
        };
      }
    };
    exports.ActorHashQuadsMurmur = ActorHashQuadsMurmur;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-hash-quads-murmur/lib/index.js
var require_lib21 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-hash-quads-murmur/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashQuadsMurmur(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-optimize-query-operation/lib/ActorOptimizeQueryOperation.js
var require_ActorOptimizeQueryOperation = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-optimize-query-operation/lib/ActorOptimizeQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperation = void 0;
    var core_1 = require_lib();
    var ActorOptimizeQueryOperation = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query optimization failed: none of the configured actors were able to optimize} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorOptimizeQueryOperation = ActorOptimizeQueryOperation;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-optimize-query-operation/lib/index.js
var require_lib22 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-optimize-query-operation/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperation(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-copy/lib/ActorOptimizeQueryOperationRewriteCopy.js
var require_ActorOptimizeQueryOperationRewriteCopy = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-copy/lib/ActorOptimizeQueryOperationRewriteCopy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationRewriteCopy = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationRewriteCopy = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          [sparqlalgebrajs_1.Algebra.types.COPY](operationOriginal, factory) {
            let result;
            if (typeof operationOriginal.destination === "string" && typeof operationOriginal.source === "string" && operationOriginal.destination === operationOriginal.source || typeof operationOriginal.destination !== "string" && typeof operationOriginal.source !== "string" && operationOriginal.destination.equals(operationOriginal.source)) {
              result = factory.createCompositeUpdate([]);
            } else {
              result = factory.createCompositeUpdate([
                factory.createDrop(operationOriginal.destination, true),
                factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent)
              ]);
            }
            return {
              result,
              recurse: false
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationRewriteCopy = ActorOptimizeQueryOperationRewriteCopy;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-copy/lib/index.js
var require_lib23 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-copy/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationRewriteCopy(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-move/lib/ActorOptimizeQueryOperationRewriteMove.js
var require_ActorOptimizeQueryOperationRewriteMove = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-move/lib/ActorOptimizeQueryOperationRewriteMove.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationRewriteMove = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationRewriteMove = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          [sparqlalgebrajs_1.Algebra.types.MOVE](operationOriginal, factory) {
            let result;
            if (typeof operationOriginal.destination === "string" && typeof operationOriginal.source === "string" && operationOriginal.destination === operationOriginal.source || typeof operationOriginal.destination !== "string" && typeof operationOriginal.source !== "string" && operationOriginal.destination.equals(operationOriginal.source)) {
              result = factory.createCompositeUpdate([]);
            } else {
              const updates = [
                factory.createDrop(operationOriginal.destination, true),
                factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent),
                factory.createDrop(operationOriginal.source)
              ];
              result = factory.createCompositeUpdate(updates);
            }
            return {
              result,
              recurse: false
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationRewriteMove = ActorOptimizeQueryOperationRewriteMove;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-move/lib/index.js
var require_lib24 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-move/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationRewriteMove(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-add/lib/ActorOptimizeQueryOperationRewriteAdd.js
var require_ActorOptimizeQueryOperationRewriteAdd = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-add/lib/ActorOptimizeQueryOperationRewriteAdd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationRewriteAdd = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorOptimizeQueryOperationRewriteAdd = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          [sparqlalgebrajs_1.Algebra.types.ADD](operationOriginal, factory) {
            const destination = operationOriginal.destination === "DEFAULT" ? DF.defaultGraph() : operationOriginal.destination;
            const source = operationOriginal.source === "DEFAULT" ? DF.defaultGraph() : operationOriginal.source;
            const result = factory.createDeleteInsert(void 0, [
              factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"), destination)
            ], factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"), source));
            return {
              result,
              recurse: false
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationRewriteAdd = ActorOptimizeQueryOperationRewriteAdd;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-add/lib/index.js
var require_lib25 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-rewrite-add/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationRewriteAdd(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/utils-query-operation/lib/CardinalityEstimators.js
var require_CardinalityEstimators = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-query-operation/lib/CardinalityEstimators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateNpsCardinality = exports.estimateJoinCardinality = exports.estimateUnionCardinality = exports.estimateSliceCardinality = exports.estimateMinusCardinality = exports.estimateCardinality = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var AF = new sparqlalgebrajs_1.Factory(DF);
    function estimateCardinality(operation, dataset) {
      const estimate = dataset.getCardinality(operation);
      if (estimate) {
        return estimate;
      }
      switch (operation.type) {
        case sparqlalgebrajs_1.Algebra.types.ASK:
          return { type: "exact", value: 1, dataset: dataset.uri };
        case sparqlalgebrajs_1.Algebra.types.LOAD:
        case sparqlalgebrajs_1.Algebra.types.DELETE_INSERT:
        case sparqlalgebrajs_1.Algebra.types.ADD:
        case sparqlalgebrajs_1.Algebra.types.COMPOSITE_UPDATE:
        case sparqlalgebrajs_1.Algebra.types.CLEAR:
        case sparqlalgebrajs_1.Algebra.types.NOP:
        case sparqlalgebrajs_1.Algebra.types.DROP:
        case sparqlalgebrajs_1.Algebra.types.CREATE:
        case sparqlalgebrajs_1.Algebra.types.MOVE:
        case sparqlalgebrajs_1.Algebra.types.COPY:
          return { type: "exact", value: 0, dataset: dataset.uri };
        case sparqlalgebrajs_1.Algebra.types.PROJECT:
        case sparqlalgebrajs_1.Algebra.types.FILTER:
        case sparqlalgebrajs_1.Algebra.types.ORDER_BY:
        case sparqlalgebrajs_1.Algebra.types.GROUP:
        case sparqlalgebrajs_1.Algebra.types.CONSTRUCT:
        case sparqlalgebrajs_1.Algebra.types.DISTINCT:
        case sparqlalgebrajs_1.Algebra.types.REDUCED:
        case sparqlalgebrajs_1.Algebra.types.EXTEND:
        case sparqlalgebrajs_1.Algebra.types.FROM:
        case sparqlalgebrajs_1.Algebra.types.GRAPH:
          return estimateCardinality(operation.input, dataset);
        case sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH:
        case sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH:
        case sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH:
        case sparqlalgebrajs_1.Algebra.types.INV:
          return estimateCardinality(operation.path, dataset);
        case sparqlalgebrajs_1.Algebra.types.PATH:
          return estimateCardinality(operation.predicate, dataset);
        case sparqlalgebrajs_1.Algebra.types.NPS:
          return estimateNpsCardinality(operation, dataset);
        case sparqlalgebrajs_1.Algebra.types.LINK:
          return estimateCardinality(AF.createPattern(DF.variable("s"), operation.iri, DF.variable("o")), dataset);
        case sparqlalgebrajs_1.Algebra.types.UNION:
        case sparqlalgebrajs_1.Algebra.types.SEQ:
        case sparqlalgebrajs_1.Algebra.types.ALT:
          return estimateUnionCardinality(operation.input, dataset);
        case sparqlalgebrajs_1.Algebra.types.BGP:
          return estimateJoinCardinality(operation.patterns, dataset);
        case sparqlalgebrajs_1.Algebra.types.JOIN:
        case sparqlalgebrajs_1.Algebra.types.LEFT_JOIN:
          return estimateJoinCardinality(operation.input, dataset);
        case sparqlalgebrajs_1.Algebra.types.SLICE:
          return estimateSliceCardinality(operation, dataset);
        case sparqlalgebrajs_1.Algebra.types.MINUS:
          return estimateMinusCardinality(operation, dataset);
        case sparqlalgebrajs_1.Algebra.types.VALUES:
          return { type: "exact", value: operation.bindings.length, dataset: dataset.uri };
        case sparqlalgebrajs_1.Algebra.types.SERVICE:
        case sparqlalgebrajs_1.Algebra.types.DESCRIBE:
        case sparqlalgebrajs_1.Algebra.types.EXPRESSION:
        case sparqlalgebrajs_1.Algebra.types.PATTERN:
          return { type: "estimate", value: Number.POSITIVE_INFINITY, dataset: dataset.uri };
      }
    }
    exports.estimateCardinality = estimateCardinality;
    function estimateMinusCardinality(minus, dataset) {
      const estimateFirst = estimateCardinality(minus.input[0], dataset);
      const estimateSecond = estimateCardinality(minus.input[1], dataset);
      return {
        type: "estimate",
        value: Math.max(estimateFirst.value - estimateSecond.value, 0),
        dataset: dataset.uri
      };
    }
    exports.estimateMinusCardinality = estimateMinusCardinality;
    function estimateSliceCardinality(slice3, dataset) {
      const estimate = estimateCardinality(slice3.input, dataset);
      if (estimate.value > 0) {
        estimate.value = Math.max(estimate.value - slice3.start, 0);
        if (slice3.length !== void 0) {
          estimate.value = Math.min(estimate.value, slice3.length);
        }
      }
      return estimate;
    }
    exports.estimateSliceCardinality = estimateSliceCardinality;
    function estimateUnionCardinality(input, dataset) {
      const estimate = { type: "exact", value: 0, dataset: dataset.uri };
      for (const operation of input) {
        const cardinality = estimateCardinality(operation, dataset);
        if (cardinality.type === "estimate" && estimate.type === "exact") {
          estimate.type = cardinality.type;
        }
        if (cardinality.value > 0) {
          estimate.value += cardinality.value;
        }
      }
      return estimate;
    }
    exports.estimateUnionCardinality = estimateUnionCardinality;
    function estimateJoinCardinality(operations, dataset) {
      const operationGroups = [];
      for (const operation of operations) {
        const vars = sparqlalgebrajs_1.Util.inScopeVariables(operation).map((v) => v.value);
        const group = operationGroups.find((g) => vars.some((v) => g.vars.has(v)));
        if (group) {
          group.ops.push(operation);
          for (const v of vars) {
            group.vars.add(v);
          }
        } else {
          operationGroups.push({ ops: [operation], vars: new Set(vars) });
        }
      }
      const cardinality = {
        type: "estimate",
        value: operationGroups.map((g) => Math.min(...g.ops.map((o) => estimateCardinality(o, dataset).value))).reduce((acc, cur) => acc * cur, 1),
        dataset: dataset.uri
      };
      return cardinality;
    }
    exports.estimateJoinCardinality = estimateJoinCardinality;
    function estimateNpsCardinality(nps, dataset) {
      const seq = AF.createSeq([...nps.iris].reverse().map((iri) => AF.createLink(iri)));
      const seqCardinality = estimateCardinality(seq, dataset);
      const pattern = AF.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"));
      const patternCardinality = estimateCardinality(pattern, dataset);
      return {
        type: "estimate",
        value: Math.max(0, patternCardinality.value - seqCardinality.value),
        dataset: dataset.uri
      };
    }
    exports.estimateNpsCardinality = estimateNpsCardinality;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-query-operation/lib/FragmentSelectorShapes.js
var require_FragmentSelectorShapes = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-query-operation/lib/FragmentSelectorShapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.doesShapeAcceptOperation = void 0;
    function doesShapeAcceptOperation(shape, operation, options) {
      return doesShapeAcceptOperationRecurseShape(shape, shape, operation, options);
    }
    exports.doesShapeAcceptOperation = doesShapeAcceptOperation;
    function doesShapeAcceptOperationRecurseShape(shapeTop, shapeActive, operation, options) {
      if (shapeActive.type === "conjunction") {
        return shapeActive.children.every((child) => doesShapeAcceptOperationRecurseShape(shapeTop, child, operation, options));
      }
      if (shapeActive.type === "disjunction") {
        return shapeActive.children.some((child) => doesShapeAcceptOperationRecurseShape(shapeTop, child, operation, options));
      }
      if (shapeActive.type === "arity") {
        return doesShapeAcceptOperationRecurseShape(shapeTop, shapeActive.child, operation, options);
      }
      if (((options == null ? void 0 : options.joinBindings) && !shapeActive.joinBindings) ?? ((options == null ? void 0 : options.filterBindings) && !shapeActive.filterBindings)) {
        return false;
      }
      const shapeOperation = shapeActive.operation;
      switch (shapeOperation.operationType) {
        case "type": {
          if (!doesShapeAcceptOperationRecurseOperation(shapeTop, shapeActive, operation, options)) {
            return false;
          }
          return shapeOperation.type === operation.type;
        }
        case "pattern": {
          if (!doesShapeAcceptOperationRecurseOperation(shapeTop, shapeActive, operation, options)) {
            return false;
          }
          return shapeOperation.pattern.type === operation.type;
        }
        case "wildcard": {
          return true;
        }
      }
    }
    function doesShapeAcceptOperationRecurseOperation(shapeTop, shapeActive, operation, options) {
      if (operation.input) {
        const inputs = Array.isArray(operation.input) ? operation.input : [operation.input];
        if (!inputs.every((input) => doesShapeAcceptOperationRecurseShape(shapeTop, shapeTop, input, options))) {
          return false;
        }
      }
      if (operation.patterns && !operation.patterns.every((input) => doesShapeAcceptOperationRecurseShape(shapeTop, shapeTop, input, options))) {
        return false;
      }
      return true;
    }
  }
});

// ../../lipdjs/node_modules/@comunica/utils-query-operation/lib/Utils.js
var require_Utils2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-query-operation/lib/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeOperationSource = exports.assignOperationSource = exports.getOperationSource = exports.testReadOnly = exports.validateQueryOutput = exports.getSafeVoid = exports.getSafeBoolean = exports.getSafeQuads = exports.getSafeBindings = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    function getSafeBindings(output) {
      validateQueryOutput(output, "bindings");
      return output;
    }
    exports.getSafeBindings = getSafeBindings;
    function getSafeQuads(output) {
      validateQueryOutput(output, "quads");
      return output;
    }
    exports.getSafeQuads = getSafeQuads;
    function getSafeBoolean(output) {
      validateQueryOutput(output, "boolean");
      return output;
    }
    exports.getSafeBoolean = getSafeBoolean;
    function getSafeVoid(output) {
      validateQueryOutput(output, "void");
      return output;
    }
    exports.getSafeVoid = getSafeVoid;
    function validateQueryOutput(output, expectedType) {
      if (output.type !== expectedType) {
        throw new Error(`Invalid query output type: Expected '${expectedType}' but got '${output.type}'`);
      }
    }
    exports.validateQueryOutput = validateQueryOutput;
    function testReadOnly(context) {
      if (context.get(context_entries_1.KeysQueryOperation.readOnly)) {
        return (0, core_1.failTest)(`Attempted a write operation in read-only mode`);
      }
      return (0, core_1.passTestVoid)();
    }
    exports.testReadOnly = testReadOnly;
    function getOperationSource(operation) {
      var _a;
      return (_a = operation.metadata) == null ? void 0 : _a.scopedSource;
    }
    exports.getOperationSource = getOperationSource;
    function assignOperationSource(operation, source) {
      operation = { ...operation };
      operation.metadata = operation.metadata ? { ...operation.metadata } : {};
      operation.metadata.scopedSource = source;
      return operation;
    }
    exports.assignOperationSource = assignOperationSource;
    function removeOperationSource(operation) {
      var _a;
      (_a = operation.metadata) == null ? true : delete _a.scopedSource;
      if (operation.metadata && Object.keys(operation.metadata).length === 0) {
        delete operation.metadata;
      }
    }
    exports.removeOperationSource = removeOperationSource;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-query-operation/lib/MaterializeBindings.js
var require_MaterializeBindings = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-query-operation/lib/MaterializeBindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.materializeOperation = exports.materializeTerm = void 0;
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    function materializeTerm(term, bindings) {
      if (term.termType === "Variable") {
        const value = bindings.get(term);
        if (value) {
          return value;
        }
      }
      if (term.termType === "Quad" && (0, rdf_terms_1.someTermsNested)(term, (value) => value.termType === "Variable")) {
        return (0, rdf_terms_1.mapTermsNested)(term, (subTerm) => materializeTerm(subTerm, bindings));
      }
      return term;
    }
    exports.materializeTerm = materializeTerm;
    function materializeOperation(operation, bindings, algebraFactory, bindingsFactory, options = {}) {
      options = {
        strictTargetVariables: "strictTargetVariables" in options ? options.strictTargetVariables : false,
        bindFilter: "bindFilter" in options ? options.bindFilter : true,
        originalBindings: "originalBindings" in options ? options.originalBindings : bindings
      };
      return sparqlalgebrajs_1.Util.mapOperation(operation, {
        path(op, factory) {
          return {
            recurse: false,
            result: Object.assign(factory.createPath(materializeTerm(op.subject, bindings), op.predicate, materializeTerm(op.object, bindings), materializeTerm(op.graph, bindings)), { metadata: op.metadata })
          };
        },
        pattern(op, factory) {
          return {
            recurse: false,
            result: Object.assign(factory.createPattern(materializeTerm(op.subject, bindings), materializeTerm(op.predicate, bindings), materializeTerm(op.object, bindings), materializeTerm(op.graph, bindings)), { metadata: op.metadata })
          };
        },
        join(op, factory) {
          return {
            recurse: false,
            result: factory.createJoin(op.input.map((input) => materializeOperation(input, bindings, algebraFactory, bindingsFactory, options)), op.input.every((input) => !input.metadata))
          };
        },
        extend(op) {
          if (bindings.has(op.variable)) {
            if (options.strictTargetVariables) {
              throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(op.variable)} in a BIND operator.`);
            } else {
              return {
                recurse: true,
                result: materializeOperation(op.input, bindings, algebraFactory, bindingsFactory, options)
              };
            }
          }
          return {
            recurse: true,
            result: op
          };
        },
        group(op, factory) {
          if (options.strictTargetVariables) {
            for (const variable of op.variables) {
              if (bindings.has(variable)) {
                throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(variable)} in a GROUP BY operator.`);
              }
            }
            return {
              recurse: true,
              result: op
            };
          }
          const variables = op.variables.filter((variable) => !bindings.has(variable));
          return {
            recurse: true,
            result: factory.createGroup(op.input, variables, op.aggregates)
          };
        },
        filter(op, factory) {
          const originalBindings = options.originalBindings;
          if (op.expression.expressionType !== "operator" || originalBindings.size === 0) {
            return {
              recurse: false,
              result: op
            };
          }
          const values2 = createValuesFromBindings(factory, originalBindings);
          const recursionResultExpression = materializeOperation(op.expression, bindings, algebraFactory, bindingsFactory, options);
          let recursionResultInput = materializeOperation(op.input, bindings, algebraFactory, bindingsFactory, options);
          if (values2.length > 0) {
            recursionResultInput = factory.createJoin([...values2, recursionResultInput]);
          }
          return {
            // Recursion already taken care of above.
            recurse: false,
            result: factory.createFilter(recursionResultInput, recursionResultExpression)
          };
        },
        project(op, factory) {
          const values2 = createValuesFromBindings(factory, options.originalBindings, op.variables);
          let recursionResult = materializeOperation(op.input, bindings, algebraFactory, bindingsFactory, options);
          if (values2.length > 0) {
            recursionResult = factory.createJoin([...values2, recursionResult]);
          }
          return {
            recurse: false,
            result: factory.createProject(recursionResult, op.variables)
          };
        },
        values(op, factory) {
          if (options.strictTargetVariables) {
            for (const variable of op.variables) {
              if (bindings.has(variable)) {
                throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(variable)} in a VALUES operator.`);
              }
            }
          } else {
            const variables = op.variables.filter((variable) => !bindings.has(variable));
            const valueBindings = op.bindings.map((binding) => {
              const newBinding = { ...binding };
              let valid = true;
              bindings.forEach((value, key) => {
                const keyString = (0, rdf_string_1.termToString)(key);
                if (keyString in newBinding) {
                  if (!value.equals(newBinding[keyString])) {
                    valid = false;
                  }
                  delete newBinding[keyString];
                }
              });
              return valid ? newBinding : void 0;
            }).filter(Boolean);
            return {
              recurse: true,
              result: factory.createValues(variables, valueBindings)
            };
          }
          return {
            recurse: false,
            result: op
          };
        },
        expression(op, factory) {
          if (!options.bindFilter) {
            return {
              recurse: false,
              result: op
            };
          }
          if (op.expressionType === "term") {
            return {
              recurse: false,
              result: factory.createTermExpression(materializeTerm(op.term, bindings))
            };
          }
          if (op.expressionType === "operator") {
            if (op.operator === "bound" && op.args.length === 1 && op.args[0].expressionType === "term" && [...bindings.keys()].some((variable) => op.args[0].term.equals(variable))) {
              return {
                recurse: false,
                result: factory.createTermExpression(factory.dataFactory.literal("true", factory.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#boolean")))
              };
            }
            return {
              recurse: true,
              result: op
            };
          }
          if (op.expressionType === "aggregate" && "variable" in op && bindings.has(op.variable)) {
            if (options.strictTargetVariables) {
              throw new Error(`Tried to bind ${(0, rdf_string_1.termToString)(op.variable)} in a ${op.aggregator} aggregate.`);
            } else {
              return {
                recurse: true,
                result: op
              };
            }
          }
          return {
            recurse: true,
            result: op
          };
        }
      }, algebraFactory);
    }
    exports.materializeOperation = materializeOperation;
    function createValuesFromBindings(factory, bindings, variables) {
      const values2 = [];
      for (const [variable, binding] of bindings) {
        if (!variables || variables.some((v) => v.equals(variable))) {
          const newBinding = { [(0, rdf_string_1.termToString)(variable)]: binding };
          values2.push(factory.createValues([variable], [newBinding]));
        }
      }
      return values2;
    }
  }
});

// ../../lipdjs/node_modules/@comunica/utils-query-operation/lib/index.js
var require_lib26 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-query-operation/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CardinalityEstimators(), exports);
    __exportStar(require_FragmentSelectorShapes(), exports);
    __exportStar(require_Utils2(), exports);
    __exportStar(require_MaterializeBindings(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-group-sources/lib/ActorOptimizeQueryOperationGroupSources.js
var require_ActorOptimizeQueryOperationGroupSources = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-group-sources/lib/ActorOptimizeQueryOperationGroupSources.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationGroupSources = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationGroupSources = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if ((0, utils_query_operation_1.getOperationSource)(action.operation)) {
          return (0, core_1.failTest)(`Actor ${this.name} does not work with top-level operation sources.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return { operation: await this.groupOperation(action.operation, action.context), context: action.context };
      }
      /**
       * Group operations belonging to the same source together, only if that source accepts the grouped operations.
       * This grouping will be done recursively for the whole operation tree.
       * Operations annotated with sources are considered leaves in the tree.
       * @param operation An operation to group.
       * @param context The action context.
       */
      async groupOperation(operation, context) {
        var _a;
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        if ((0, utils_query_operation_1.getOperationSource)(operation) ?? !("input" in operation)) {
          return operation;
        }
        if (!Array.isArray(operation.input)) {
          const groupedInput = await this.groupOperation(operation.input, context);
          if ((_a = groupedInput.metadata) == null ? void 0 : _a.scopedSource) {
            const source = (0, utils_query_operation_1.getOperationSource)(groupedInput);
            if ((0, utils_query_operation_1.doesShapeAcceptOperation)(await source.source.getSelectorShape(context), operation)) {
              this.logDebug(context, `Hoist 1 source-specific operation into a single ${operation.type} operation for ${source.source.toString()}`);
              (0, utils_query_operation_1.removeOperationSource)(groupedInput);
              operation = (0, utils_query_operation_1.assignOperationSource)(operation, source);
            }
          }
          return { ...operation, input: groupedInput };
        }
        const inputs = await Promise.all(operation.input.map((subInput) => this.groupOperation(subInput, context)));
        const clusters = this.clusterOperationsWithEqualSources(inputs);
        if (clusters.length === 1) {
          const newInputs = clusters[0];
          const source = (0, utils_query_operation_1.getOperationSource)(clusters[0][0]);
          return {
            ...await this.moveSourceAnnotationUpwardsIfPossible(operation, newInputs, source, context),
            input: newInputs
          };
        }
        if (clusters.length === inputs.length) {
          return { ...operation, input: inputs };
        }
        let multiFactoryMethod;
        switch (operation.type) {
          case sparqlalgebrajs_1.Algebra.types.JOIN:
            multiFactoryMethod = algebraFactory.createJoin.bind(algebraFactory);
            break;
          case sparqlalgebrajs_1.Algebra.types.UNION:
            multiFactoryMethod = algebraFactory.createUnion.bind(algebraFactory);
            break;
          case sparqlalgebrajs_1.Algebra.types.ALT:
            multiFactoryMethod = algebraFactory.createAlt.bind(algebraFactory);
            break;
          case sparqlalgebrajs_1.Algebra.types.SEQ:
            multiFactoryMethod = algebraFactory.createSeq.bind(algebraFactory);
            break;
          default:
            throw new Error(`Unsupported operation '${operation.type}' detected while grouping sources`);
        }
        return await this.groupOperationMulti(clusters, multiFactoryMethod, context);
      }
      async groupOperationMulti(clusters, factoryMethod, context) {
        let flatten3 = true;
        const nestedMerges = await Promise.all(clusters.map(async (cluster) => {
          const source = (0, utils_query_operation_1.getOperationSource)(cluster[0]);
          const merged = await this.moveSourceAnnotationUpwardsIfPossible(factoryMethod(cluster, true), cluster, source, context);
          if ((0, utils_query_operation_1.getOperationSource)(merged)) {
            flatten3 = false;
          }
          return merged;
        }));
        return factoryMethod(nestedMerges, flatten3);
      }
      /**
       * Cluster the given operations by equal source annotations.
       * @param operationsIn An array of operations to cluster.
       */
      clusterOperationsWithEqualSources(operationsIn) {
        const sourceOperations = /* @__PURE__ */ new Map();
        const sourcelessOperations = [];
        for (const operation of operationsIn) {
          const source = (0, utils_query_operation_1.getOperationSource)(operation);
          if (source) {
            if (!sourceOperations.has(source)) {
              sourceOperations.set(source, []);
            }
            sourceOperations.get(source).push(operation);
          } else {
            sourcelessOperations.push(operation);
          }
        }
        const clusters = [];
        if (sourcelessOperations.length > 0) {
          clusters.push(sourcelessOperations);
        }
        for (const [source, operations] of sourceOperations.entries()) {
          clusters.push(operations.map((operation) => (0, utils_query_operation_1.assignOperationSource)(operation, source)));
        }
        return clusters;
      }
      /**
       * If the given source accepts the grouped operation, annotate the grouped operation with the source,
       * and remove the source annotation from the seperate input operations.
       * Otherwise, return the grouped operation unchanged.
       * @param operation A grouped operation consisting of all given input operations.
       * @param inputs An array of operations that share the same source annotation.
       * @param source The common source.
       * @param context The action context.
       */
      async moveSourceAnnotationUpwardsIfPossible(operation, inputs, source, context) {
        if (source && (0, utils_query_operation_1.doesShapeAcceptOperation)(await source.source.getSelectorShape(context), operation)) {
          this.logDebug(context, `Hoist ${inputs.length} source-specific operations into a single ${operation.type} operation for ${source.source.toString()}`);
          operation = (0, utils_query_operation_1.assignOperationSource)(operation, source);
          for (const input of inputs) {
            (0, utils_query_operation_1.removeOperationSource)(input);
          }
        }
        return operation;
      }
    };
    exports.ActorOptimizeQueryOperationGroupSources = ActorOptimizeQueryOperationGroupSources;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-group-sources/lib/index.js
var require_lib27 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-group-sources/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationGroupSources(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-construct-distinct/lib/ActorOptimizeQueryOperationConstructDistinct.js
var require_ActorOptimizeQueryOperationConstructDistinct = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-construct-distinct/lib/ActorOptimizeQueryOperationConstructDistinct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationConstructDistinct = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var Keys_1 = require_Keys();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationConstructDistinct = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (!action.context.has(Keys_1.KeysInitQuery.distinctConstruct)) {
          return (0, core_1.failTest)(`${this.name} was not enabled by the query.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          construct(op, factory) {
            return {
              recurse: false,
              result: factory.createDistinct(factory.createConstruct(op.input, op.template))
            };
          }
        });
        return { operation, context: action.context.delete(Keys_1.KeysInitQuery.distinctConstruct) };
      }
    };
    exports.ActorOptimizeQueryOperationConstructDistinct = ActorOptimizeQueryOperationConstructDistinct;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-construct-distinct/lib/index.js
var require_lib28 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-construct-distinct/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationConstructDistinct(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-parse/lib/ActorQueryParse.js
var require_ActorQueryParse = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-parse/lib/ActorQueryParse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParse = void 0;
    var core_1 = require_lib();
    var ActorQueryParse = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query parsing failed: none of the configured parsers were able to the query "${action.query}"} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryParse = ActorQueryParse;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-parse/lib/index.js
var require_lib29 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-parse/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParse(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-parse-sparql/lib/ActorQueryParseSparql.js
var require_ActorQueryParseSparql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-parse-sparql/lib/ActorQueryParseSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParseSparql = void 0;
    var bus_query_parse_1 = require_lib29();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var sparqljs_1 = require_sparql();
    var ActorQueryParseSparql = class extends bus_query_parse_1.ActorQueryParse {
      constructor(args) {
        super(args);
        this.prefixes = Object.freeze(this.prefixes);
      }
      async test(action) {
        if (action.queryFormat && action.queryFormat.language !== "sparql") {
          return (0, core_1.failTest)("This actor can only parse SPARQL queries");
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const parser = new sparqljs_1.Parser({
          prefixes: this.prefixes,
          baseIRI: action.baseIRI,
          sparqlStar: true,
          factory: dataFactory
        });
        const parsedSyntax = parser.parse(action.query);
        const baseIRI = parsedSyntax.type === "query" ? parsedSyntax.base : void 0;
        return {
          baseIRI,
          operation: (0, sparqlalgebrajs_1.translate)(parsedSyntax, {
            quads: true,
            prefixes: this.prefixes,
            blankToVariable: true,
            baseIRI: action.baseIRI,
            dataFactory
          })
        };
      }
    };
    exports.ActorQueryParseSparql = ActorQueryParseSparql;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-parse-sparql/lib/index.js
var require_lib30 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-parse-sparql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParseSparql(), exports);
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerAdapter.js
var require_DirectiveNodeHandlerAdapter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerAdapter = void 0;
    var DirectiveNodeHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
      /**
       * Get the value of the 'if' argument in a directive.
       * @param {DirectiveNode} directive A directive.
       * @param {IConvertContext} convertContext A convert context.
       * @return {Term} The term.
       */
      getDirectiveConditionalValue(directive, convertContext) {
        const arg = this.util.getArgument(directive.arguments, "if");
        if (!arg) {
          throw new Error(`The directive ${directive.name.value} is missing an if-argument.`);
        }
        const subValue = this.util.handleNodeValue(arg.value, arg.name.value, convertContext);
        if (subValue.terms.length !== 1) {
          throw new Error(`Can not apply the directive ${directive.name.value} with a list.`);
        }
        return subValue.terms[0];
      }
      /**
       * If a `scope: all` directive param is present.
       * @param {DirectiveNode} directive A directive.
       * @return {boolean} If `scope: all` is present.
       */
      isDirectiveScopeAll(directive) {
        const scopeArg = this.util.getArgument(directive.arguments, "scope");
        return scopeArg && scopeArg.value.kind === "EnumValue" && scopeArg.value.value === "all";
      }
    };
    exports.DirectiveNodeHandlerAdapter = DirectiveNodeHandlerAdapter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerInclude.js
var require_DirectiveNodeHandlerInclude = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerInclude.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerInclude = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerInclude = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("include", util, settings);
      }
      handle(directiveContext, convertContext) {
        const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);
        if (val.termType === "Literal" && val.value === "false") {
          return { ignore: true };
        }
        return {};
      }
    };
    exports.DirectiveNodeHandlerInclude = DirectiveNodeHandlerInclude;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerOptional.js
var require_DirectiveNodeHandlerOptional = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerOptional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerOptional = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerOptional = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("optional", util, settings);
      }
      handle(directiveContext, convertContext) {
        return {
          operationOverrider: (operation) => this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), operation)
        };
      }
    };
    exports.DirectiveNodeHandlerOptional = DirectiveNodeHandlerOptional;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/IConvertContext.js
var require_IConvertContext = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/IConvertContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SingularizeState = void 0;
    var SingularizeState;
    (function(SingularizeState2) {
      SingularizeState2[SingularizeState2["SINGLE"] = 0] = "SINGLE";
      SingularizeState2[SingularizeState2["PLURAL"] = 1] = "PLURAL";
    })(SingularizeState = exports.SingularizeState || (exports.SingularizeState = {}));
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerPlural.js
var require_DirectiveNodeHandlerPlural = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerPlural.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerPlural = void 0;
    var IConvertContext_1 = require_IConvertContext();
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerPlural = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("plural", util, settings);
      }
      handle(directiveContext, convertContext) {
        if (this.isDirectiveScopeAll(directiveContext.directive)) {
          convertContext.singularizeState = IConvertContext_1.SingularizeState.PLURAL;
        }
        delete convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value];
        return {};
      }
    };
    exports.DirectiveNodeHandlerPlural = DirectiveNodeHandlerPlural;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSingle.js
var require_DirectiveNodeHandlerSingle = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSingle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerSingle = void 0;
    var IConvertContext_1 = require_IConvertContext();
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerSingle = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("single", util, settings);
      }
      handle(directiveContext, convertContext) {
        if (this.isDirectiveScopeAll(directiveContext.directive)) {
          convertContext.singularizeState = IConvertContext_1.SingularizeState.SINGLE;
        }
        convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value] = true;
        return {};
      }
    };
    exports.DirectiveNodeHandlerSingle = DirectiveNodeHandlerSingle;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSkip.js
var require_DirectiveNodeHandlerSkip = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSkip.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerSkip = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerSkip = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("skip", util, settings);
      }
      handle(directiveContext, convertContext) {
        const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);
        if (val.termType === "Literal" && val.value === "true") {
          return { ignore: true };
        }
        return {};
      }
    };
    exports.DirectiveNodeHandlerSkip = DirectiveNodeHandlerSkip;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/index.js
var require_directivenode = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/directivenode/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_DirectiveNodeHandlerAdapter(), exports);
    __exportStar(require_DirectiveNodeHandlerInclude(), exports);
    __exportStar(require_DirectiveNodeHandlerOptional(), exports);
    __exportStar(require_DirectiveNodeHandlerPlural(), exports);
    __exportStar(require_DirectiveNodeHandlerSingle(), exports);
    __exportStar(require_DirectiveNodeHandlerSkip(), exports);
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerAdapter.js
var require_NodeValueHandlerAdapter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerAdapter = void 0;
    var NodeValueHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
    };
    exports.NodeValueHandlerAdapter = NodeValueHandlerAdapter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerBoolean.js
var require_NodeValueHandlerBoolean = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerBoolean = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerBoolean = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("BooleanValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#boolean");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value ? "true" : "false", this.datatype)] };
      }
    };
    exports.NodeValueHandlerBoolean = NodeValueHandlerBoolean;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerEnum.js
var require_NodeValueHandlerEnum = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerEnum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerEnum = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerEnum = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("EnumValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.valueToNamedNode(valueNode.value, convertContext.context)] };
      }
    };
    exports.NodeValueHandlerEnum = NodeValueHandlerEnum;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerFloat.js
var require_NodeValueHandlerFloat = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerFloat = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerFloat = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("FloatValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#float");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value, this.datatype)] };
      }
    };
    exports.NodeValueHandlerFloat = NodeValueHandlerFloat;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerInt.js
var require_NodeValueHandlerInt = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerInt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerInt = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerInt = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("IntValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#integer");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value, this.datatype)] };
      }
    };
    exports.NodeValueHandlerInt = NodeValueHandlerInt;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerList.js
var require_NodeValueHandlerList = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerList = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerList = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("ListValue", util, settings);
        this.nodeFirst = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#first");
        this.nodeRest = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");
        this.nodeNil = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
      }
      handle(valueNode, fieldName, convertContext) {
        const listTerms = [];
        let auxiliaryPatterns = [];
        for (const v of valueNode.values) {
          const subValue = this.util.handleNodeValue(v, fieldName, convertContext);
          for (const term of subValue.terms) {
            listTerms.push(term);
          }
          if (subValue.auxiliaryPatterns) {
            auxiliaryPatterns = auxiliaryPatterns.concat(subValue.auxiliaryPatterns);
          }
        }
        if (this.settings.arraysToRdfLists) {
          const firstListNode = this.util.dataFactory.blankNode();
          let listNode = firstListNode;
          let remaining = listTerms.length;
          for (const term of listTerms) {
            auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeFirst, term, convertContext.graph));
            const nextListNode = --remaining === 0 ? this.nodeNil : this.util.dataFactory.blankNode();
            auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeRest, nextListNode, convertContext.graph));
            listNode = nextListNode;
          }
          return { terms: [firstListNode], auxiliaryPatterns };
        } else {
          return { terms: listTerms, auxiliaryPatterns };
        }
      }
    };
    exports.NodeValueHandlerList = NodeValueHandlerList;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerNull.js
var require_NodeValueHandlerNull = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerNull.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerNull = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerNull = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("NullValue", util, settings);
        this.nil = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.nil] };
      }
    };
    exports.NodeValueHandlerNull = NodeValueHandlerNull;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerObject.js
var require_NodeValueHandlerObject = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerObject = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerObject = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("ObjectValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const subject = this.util.dataFactory.blankNode();
        let auxiliaryObjectPatterns = [];
        for (const field of valueNode.fields) {
          const subValue = this.util.handleNodeValue(field.value, fieldName, convertContext);
          for (const term of subValue.terms) {
            auxiliaryObjectPatterns.push(this.util.createQuadPattern(subject, field.name, term, convertContext.graph, convertContext.context));
          }
          if (subValue.auxiliaryPatterns) {
            auxiliaryObjectPatterns = auxiliaryObjectPatterns.concat(subValue.auxiliaryPatterns);
          }
        }
        return { terms: [subject], auxiliaryPatterns: auxiliaryObjectPatterns };
      }
    };
    exports.NodeValueHandlerObject = NodeValueHandlerObject;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerString.js
var require_NodeValueHandlerString = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerString = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerString = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("StringValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const contextEntry = convertContext.context.getContextRaw()[fieldName];
        let language;
        let datatype;
        if (contextEntry && typeof contextEntry !== "string") {
          if (contextEntry["@language"]) {
            language = contextEntry["@language"];
          } else if (contextEntry["@type"]) {
            datatype = this.util.dataFactory.namedNode(contextEntry["@type"]);
          }
        }
        return { terms: [this.util.dataFactory.literal(valueNode.value, language || datatype)] };
      }
    };
    exports.NodeValueHandlerString = NodeValueHandlerString;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerVariable.js
var require_NodeValueHandlerVariable = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerVariable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerVariable = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerVariable = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("Variable", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const id = valueNode.name.value;
        const value = convertContext.variablesDict[id];
        const meta = convertContext.variablesMetaDict[id];
        if (!value) {
          if (!convertContext.ignoreUnknownVariables && (!meta || meta.mandatory)) {
            throw new Error(`Undefined variable: ${id}`);
          } else {
            const variable = this.util.dataFactory.variable(id);
            if (convertContext.terminalVariables.map((v) => v.value).indexOf(id) < 0) {
              convertContext.terminalVariables.push(variable);
            }
            return { terms: [variable] };
          }
        }
        if (value.kind === "Variable") {
          throw new Error(`Variable refers to another variable: ${id}`);
        }
        if (meta) {
          if (meta.list) {
            if (value.kind !== "ListValue") {
              throw new Error(`Expected a list, but got ${value.kind} for ${id}`);
            }
            if (meta.type) {
              const listValue = value;
              for (const v of listValue.values) {
                if (v.kind !== meta.type) {
                  throw new Error(`Expected ${meta.type}, but got ${v.kind} for ${id}`);
                }
              }
            }
          } else if (meta.type) {
          }
        }
        return this.util.handleNodeValue(value, fieldName, convertContext);
      }
    };
    exports.NodeValueHandlerVariable = NodeValueHandlerVariable;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/index.js
var require_valuenode = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/valuenode/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_NodeValueHandlerAdapter(), exports);
    __exportStar(require_NodeValueHandlerBoolean(), exports);
    __exportStar(require_NodeValueHandlerEnum(), exports);
    __exportStar(require_NodeValueHandlerFloat(), exports);
    __exportStar(require_NodeValueHandlerInt(), exports);
    __exportStar(require_NodeValueHandlerList(), exports);
    __exportStar(require_NodeValueHandlerNull(), exports);
    __exportStar(require_NodeValueHandlerObject(), exports);
    __exportStar(require_NodeValueHandlerString(), exports);
    __exportStar(require_NodeValueHandlerVariable(), exports);
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerAdapter.js
var require_NodeHandlerAdapter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerAdapter = void 0;
    var NodeHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
      /* ----- Node quad context ----- */
      /**
       * Get the quad context of a selection set node that should be used for the whole definition node.
       *
       * This is a pre-processing step of selection sets.
       * Its only purpose is to determine the subject within a selection set,
       * because this subject is needed to link with its parent.
       * In a later phase, the selection set will be processed using the discovered subject,
       * and the field identifying the subject will be ignored.
       *
       * @param {SelectionSetNode} selectionSet A selection set node.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject, graph and auxiliary patterns.
       */
      getNodeQuadContextSelectionSet(selectionSet, fieldLabel, convertContext) {
        const nodeQuadContext = {};
        if (selectionSet) {
          for (const selectionNode of selectionSet.selections) {
            if (selectionNode.kind === "Field") {
              const fieldNode = selectionNode;
              this.handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, "id", "subject");
              this.handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, "graph", "graph");
            }
          }
        }
        return nodeQuadContext;
      }
      /**
       * Handles a single field for determining the node quad context.
       * @param {FieldNode} fieldNode A field node.
       * @param {IConvertContext} convertContext A convert context.
       * @param {INodeQuadContext} nodeQuadContext The node quad context to populate.
       * @param {string} fieldName The field name to check for.
       * @param {'subject' | 'graph'} nodeQuadContextKey The key to fill into the node quad context.
       */
      handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, fieldName, nodeQuadContextKey) {
        if (!nodeQuadContext[nodeQuadContextKey] && fieldNode.name.value === fieldName) {
          if (!nodeQuadContext[nodeQuadContextKey]) {
            const argument = this.util.getArgument(fieldNode.arguments, "_");
            if (argument) {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              if (valueOutput.terms.length !== 1) {
                throw new Error(`Only single values can be set as ${fieldName}, but got ${valueOutput.terms.length} at ${fieldNode.name.value}`);
              }
              nodeQuadContext[nodeQuadContextKey] = valueOutput.terms[0];
              if (valueOutput.auxiliaryPatterns) {
                if (!nodeQuadContext.auxiliaryPatterns) {
                  nodeQuadContext.auxiliaryPatterns = [];
                }
                nodeQuadContext.auxiliaryPatterns.concat(valueOutput.auxiliaryPatterns);
              }
            }
          }
          if (!nodeQuadContext[nodeQuadContextKey]) {
            const term = this.util.nameToVariable(this.util.getFieldLabel(fieldNode), convertContext);
            convertContext.terminalVariables.push(term);
            nodeQuadContext[nodeQuadContextKey] = term;
          }
        }
      }
      /* ----- Directives ----- */
      /**
       * Get an operation override defined by one of the directives.
       *
       * This should be called before a sub-operation is handled.
       *
       * @param {ReadonlyArray<DirectiveNode>} directives An option directives array.
       * @param {string} fieldLabel The current field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {IDirectiveNodeHandlerOutput[]} The directive node handler outputs, or null if it should be ignored.
       */
      getDirectiveOutputs(directives, fieldLabel, convertContext) {
        const outputs = [];
        if (directives) {
          for (const directive of directives) {
            const output = this.util.handleDirectiveNode({ directive, fieldLabel }, convertContext);
            if (output) {
              if (output.ignore) {
                return null;
              }
              outputs.push(output);
            }
          }
        }
        return outputs;
      }
      /**
       * Handle the directive outputs with respect to an operation.
       *
       * This should be called after a sub-operation was handled.
       *
       * @param {IDirectiveNodeHandlerOutput[]} directiveOutputs
       * @param {Operation} operation
       * @return {Operation}
       */
      handleDirectiveOutputs(directiveOutputs, operation) {
        for (const directiveOutput of directiveOutputs) {
          if (directiveOutput.ignore) {
            return this.util.operationFactory.createBgp([]);
          }
          if (directiveOutput.operationOverrider) {
            operation = directiveOutput.operationOverrider(operation);
          }
        }
        return operation;
      }
    };
    exports.NodeHandlerAdapter = NodeHandlerAdapter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionAdapter.js
var require_NodeHandlerDefinitionAdapter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionAdapter = void 0;
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerDefinitionAdapter = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(targetKind, util, settings) {
        super(targetKind, util, settings);
      }
    };
    exports.NodeHandlerDefinitionAdapter = NodeHandlerDefinitionAdapter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionFragment.js
var require_NodeHandlerDefinitionFragment = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionFragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionFragment = void 0;
    var NodeHandlerDefinitionAdapter_1 = require_NodeHandlerDefinitionAdapter();
    var NodeHandlerDefinitionFragment = class extends NodeHandlerDefinitionAdapter_1.NodeHandlerDefinitionAdapter {
      constructor(util, settings) {
        super("FragmentDefinition", util, settings);
      }
      handle(operationDefinition, convertContext) {
        throw new Error("Illegal state: fragment definitions must be indexed and removed before processing");
      }
    };
    exports.NodeHandlerDefinitionFragment = NodeHandlerDefinitionFragment;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionOperation.js
var require_NodeHandlerDefinitionOperation = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionOperation = void 0;
    var NodeHandlerDefinitionAdapter_1 = require_NodeHandlerDefinitionAdapter();
    var NodeHandlerDefinitionOperation = class extends NodeHandlerDefinitionAdapter_1.NodeHandlerDefinitionAdapter {
      constructor(util, settings) {
        super("OperationDefinition", util, settings);
      }
      handle(operationDefinition, convertContext) {
        if (operationDefinition.operation !== "query") {
          throw new Error("Unsupported definition operation: " + operationDefinition.operation);
        }
        if (operationDefinition.variableDefinitions) {
          for (const variableDefinition of operationDefinition.variableDefinitions) {
            const name = variableDefinition.variable.name.value;
            if (variableDefinition.defaultValue) {
              if (!convertContext.variablesDict[name]) {
                convertContext.variablesDict[name] = variableDefinition.defaultValue;
              }
            }
            let typeNode = variableDefinition.type;
            const mandatory = typeNode.kind === "NonNullType";
            if (mandatory) {
              typeNode = typeNode.type;
            }
            const list = typeNode.kind === "ListType";
            if (list) {
              typeNode = typeNode.type;
            }
            const type = typeNode.name.value;
            convertContext.variablesMetaDict[name] = { mandatory, list, type };
          }
        }
        const directiveOutputs = this.getDirectiveOutputs(operationDefinition.directives, operationDefinition.name ? operationDefinition.name.value : "", convertContext);
        if (!directiveOutputs) {
          return this.util.operationFactory.createBgp([]);
        }
        const operation = this.util.joinOperations(operationDefinition.selectionSet.selections.map((selectionNode) => this.util.handleNode(selectionNode, convertContext)));
        return this.handleDirectiveOutputs(directiveOutputs, operation);
      }
    };
    exports.NodeHandlerDefinitionOperation = NodeHandlerDefinitionOperation;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDocument.js
var require_NodeHandlerDocument = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerDocument.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDocument = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerDocument = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(util, settings) {
        super("Document", util, settings);
      }
      handle(document, convertContext) {
        const definitionOperations = document.definitions.map((definition) => {
          const subjectOutput = this.getNodeQuadContextDefinitionNode(definition, Object.assign(Object.assign({}, convertContext), { ignoreUnknownVariables: true }));
          const queryParseContext = Object.assign(Object.assign({}, convertContext), { graph: subjectOutput.graph || convertContext.graph, subject: subjectOutput.subject || this.util.dataFactory.blankNode() });
          let definitionOperation = this.util.handleNode(definition, queryParseContext);
          if (subjectOutput && subjectOutput.auxiliaryPatterns) {
            definitionOperation = this.util.joinOperations([
              definitionOperation,
              this.util.operationFactory.createBgp(subjectOutput.auxiliaryPatterns)
            ]);
          }
          return definitionOperation;
        });
        const operation = this.util.operationFactory.createProject(definitionOperations.length === 1 ? definitionOperations[0] : this.util.operationFactory.createUnion(definitionOperations), convertContext.terminalVariables);
        return this.translateBlankNodesToVariables(operation);
      }
      /**
       * Get the quad context of a definition node that should be used for the whole definition node.
       * @param {DefinitionNode} definition A definition node.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject and optional auxiliary patterns.
       */
      getNodeQuadContextDefinitionNode(definition, convertContext) {
        if (definition.kind === "OperationDefinition") {
          return this.getNodeQuadContextSelectionSet(definition.selectionSet, definition.name ? definition.name.value : "", convertContext);
        }
        throw new Error(`Unsupported definition: ${definition.kind}`);
      }
      /**
       * Translates blank nodes inside the query to variables.
       * @param {Project} operation The operation to translate.
       * @return {Operation} The transformed operation.
       */
      translateBlankNodesToVariables(operation) {
        const self2 = this;
        const blankToVariableMapping = {};
        const variablesRaw = Array.from(operation.variables).reduce((acc, variable) => {
          acc[variable.value] = true;
          return acc;
        }, {});
        return sparqlalgebrajs_1.Util.mapOperation(operation, {
          path: (op, factory) => {
            return {
              recurse: false,
              result: factory.createPath(blankToVariable(op.subject), op.predicate, blankToVariable(op.object), blankToVariable(op.graph))
            };
          },
          pattern: (op, factory) => {
            return {
              recurse: false,
              result: factory.createPattern(blankToVariable(op.subject), blankToVariable(op.predicate), blankToVariable(op.object), blankToVariable(op.graph))
            };
          }
        });
        function blankToVariable(term) {
          if (term.termType === "BlankNode") {
            let variable = blankToVariableMapping[term.value];
            if (!variable) {
              variable = sparqlalgebrajs_1.Util.createUniqueVariable(term.value, variablesRaw, self2.util.dataFactory);
              variablesRaw[variable.value] = true;
              blankToVariableMapping[term.value] = variable;
            }
            return variable;
          }
          return term;
        }
      }
    };
    exports.NodeHandlerDocument = NodeHandlerDocument;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionAdapter.js
var require_NodeHandlerSelectionAdapter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionAdapter = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var IConvertContext_1 = require_IConvertContext();
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerSelectionAdapter = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(targetKind, util, settings) {
        super(targetKind, util, settings);
      }
      /**
       * Get the quad context of a field node that should be used for the whole definition node.
       * @param {FieldNode} field A field node.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject and optional auxiliary patterns.
       */
      getNodeQuadContextFieldNode(field, fieldLabel, convertContext) {
        return this.getNodeQuadContextSelectionSet(field.selectionSet, fieldLabel, Object.assign(Object.assign({}, convertContext), { path: this.util.appendFieldToPath(convertContext.path, fieldLabel) }));
      }
      /**
       * Convert a field node to an operation.
       * @param {IConvertContext} convertContext A convert context.
       * @param {FieldNode} fieldNode The field node to convert.
       * @param {boolean} pushTerminalVariables If terminal variables should be created.
       * @param {Pattern[]} auxiliaryPatterns Optional patterns that should be part of the BGP.
       * @return {Operation} The reslting operation.
       */
      fieldToOperation(convertContext, fieldNode, pushTerminalVariables, auxiliaryPatterns) {
        const nesting = pushTerminalVariables;
        let offset = 0;
        let limit;
        if (fieldNode.name.value === "id" || fieldNode.name.value === "graph") {
          pushTerminalVariables = false;
          if (fieldNode.arguments) {
            for (const argument of fieldNode.arguments) {
              if (argument.name.value === "_") {
                this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              }
            }
          }
        }
        const fieldLabel = this.util.getFieldLabel(fieldNode);
        if (convertContext.singularizeState === IConvertContext_1.SingularizeState.SINGLE) {
          convertContext.singularizeVariables[this.util.nameToVariable(fieldLabel, convertContext).value] = true;
        }
        if (pushTerminalVariables) {
          const operationOverride = this.handleMetaField(convertContext, fieldLabel, auxiliaryPatterns);
          if (operationOverride) {
            return operationOverride;
          }
        }
        const operations = auxiliaryPatterns ? [this.util.operationFactory.createBgp(auxiliaryPatterns)] : [];
        const subjectOutput = this.getNodeQuadContextFieldNode(fieldNode, fieldLabel, convertContext);
        let object = subjectOutput.subject || this.util.nameToVariable(fieldLabel, convertContext);
        let graph = subjectOutput.graph || convertContext.graph;
        if (subjectOutput.auxiliaryPatterns) {
          operations.push(this.util.operationFactory.createBgp(subjectOutput.auxiliaryPatterns));
        }
        let createQuadPattern = true;
        let overrideObjectTerms = null;
        if (pushTerminalVariables && fieldNode.arguments && fieldNode.arguments.length) {
          for (const argument of fieldNode.arguments) {
            if (argument.name.value === "_") {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              overrideObjectTerms = valueOutput.terms;
              operations.push(this.util.operationFactory.createBgp(valueOutput.terms.map((term) => this.util.createQuadPattern(convertContext.subject, fieldNode.name, term, convertContext.graph, convertContext.context))));
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
              pushTerminalVariables = false;
              break;
            } else if (argument.name.value === "graph") {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              if (valueOutput.terms.length !== 1) {
                throw new Error(`Only single values can be set as graph, but got ${valueOutput.terms.length} at ${fieldNode.name.value}`);
              }
              graph = valueOutput.terms[0];
              convertContext = Object.assign(Object.assign({}, convertContext), { graph });
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
              break;
            } else if (argument.name.value === "alt") {
              let pathValue = argument.value;
              if (pathValue.kind !== "ListValue") {
                pathValue = { kind: "ListValue", values: [pathValue] };
              }
              operations.push(this.util.createQuadPath(convertContext.subject, fieldNode.name, pathValue, object, convertContext.graph, convertContext.context));
              createQuadPattern = false;
              break;
            }
          }
        }
        if (pushTerminalVariables && createQuadPattern) {
          operations.push(this.util.operationFactory.createBgp([
            this.util.createQuadPattern(convertContext.subject, fieldNode.name, object, convertContext.graph, convertContext.context)
          ]));
        }
        if (fieldNode.arguments && fieldNode.arguments.length) {
          for (const argument of fieldNode.arguments) {
            if (argument.name.value === "_" || argument.name.value === "graph" || argument.name.value === "alt") {
            } else if (argument.name.value === "first") {
              if (argument.value.kind !== "IntValue") {
                throw new Error("Invalid value type for 'first' argument: " + argument.value.kind);
              }
              limit = parseInt(argument.value.value, 10);
            } else if (argument.name.value === "offset") {
              if (argument.value.kind !== "IntValue") {
                throw new Error("Invalid value type for 'offset' argument: " + argument.value.kind);
              }
              offset = parseInt(argument.value.value, 10);
            } else {
              const valueOutput = this.util.handleNodeValue(argument.value, argument.name.value, convertContext);
              operations.push(this.util.operationFactory.createBgp(valueOutput.terms.map((term) => this.util.createQuadPattern(object, argument.name, term, convertContext.graph, convertContext.context))));
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
            }
          }
        }
        const directiveOutputs = this.getDirectiveOutputs(fieldNode.directives, fieldLabel, convertContext);
        if (!directiveOutputs) {
          return this.util.operationFactory.createBgp([]);
        }
        let operation = this.util.joinOperations(operations);
        if (fieldNode.selectionSet && fieldNode.selectionSet.selections.length) {
          if (overrideObjectTerms) {
            if (overrideObjectTerms.length !== 1) {
              throw new Error(`Only single values can be set as id, but got ${overrideObjectTerms.length} at ${fieldNode.name.value}`);
            }
            object = overrideObjectTerms[0];
          }
          const subConvertContext = Object.assign(Object.assign(Object.assign({}, convertContext), nesting ? { path: this.util.appendFieldToPath(convertContext.path, fieldLabel) } : {}), { graph, subject: nesting ? object : convertContext.subject });
          let totalCount = false;
          const selections = fieldNode.selectionSet.selections.filter((selection) => {
            if (selection.kind === "Field" && selection.name.value === "totalCount") {
              totalCount = true;
              return false;
            }
            return true;
          });
          let joinedOperation = this.util.joinOperations(operations.concat(selections.map((selectionNode) => this.util.handleNode(selectionNode, subConvertContext))));
          if (totalCount) {
            const expressionVariable = this.util.dataFactory.variable("var" + this.settings.expressionVariableCounter++);
            const countOverVariable = this.util.dataFactory.variable(object.value + this.settings.variableDelimiter + "totalCount");
            const aggregator = this.util.operationFactory.createBoundAggregate(expressionVariable, "count", this.util.operationFactory.createTermExpression(object), false);
            const countProject = this.util.operationFactory.createProject(this.util.operationFactory.createExtend(this.util.operationFactory.createGroup(operation, [], [aggregator]), countOverVariable, this.util.operationFactory.createTermExpression(expressionVariable)), [countOverVariable]);
            convertContext.terminalVariables.push(countOverVariable);
            if (!selections.length) {
              joinedOperation = countProject;
            } else {
              joinedOperation = this.util.operationFactory.createJoin([
                this.util.operationFactory.createProject(joinedOperation, []),
                countProject
              ]);
            }
          }
          operation = joinedOperation;
        } else if (pushTerminalVariables && object.termType === "Variable") {
          convertContext.terminalVariables.push(object);
        }
        if (offset || limit) {
          operation = this.util.operationFactory.createSlice(this.util.operationFactory.createProject(operation, sparqlalgebrajs_1.Util.inScopeVariables(operation)), offset, limit);
        }
        return this.handleDirectiveOutputs(directiveOutputs, operation);
      }
      /**
       * Check if the given node is a meta field, for things like introspection.
       * If so, return a new operation for this, otherwise, null is returned.
       * @param {IConvertContext} convertContext A convert context.
       * @param {Term} subject The subject.
       * @param {string} fieldLabel The field label to convert.
       * @param {Pattern[]} auxiliaryPatterns Optional patterns that should be part of the BGP.
       * @return {Operation} An operation or undefined.
       */
      handleMetaField(convertContext, fieldLabel, auxiliaryPatterns) {
        if (fieldLabel === "__typename") {
          const object = this.util.nameToVariable(fieldLabel, convertContext);
          convertContext.terminalVariables.push(object);
          return this.util.operationFactory.createBgp([
            this.util.operationFactory.createPattern(convertContext.subject, this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), this.util.nameToVariable(fieldLabel, convertContext), convertContext.graph)
          ].concat(auxiliaryPatterns || []));
        }
      }
    };
    exports.NodeHandlerSelectionAdapter = NodeHandlerSelectionAdapter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionField.js
var require_NodeHandlerSelectionField = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionField.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionField = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionField = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("Field", util, settings);
      }
      handle(fieldNode, convertContext) {
        return this.fieldToOperation(convertContext, fieldNode, true);
      }
    };
    exports.NodeHandlerSelectionField = NodeHandlerSelectionField;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionFragmentSpread.js
var require_NodeHandlerSelectionFragmentSpread = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionFragmentSpread.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionFragmentSpread = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionFragmentSpread = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("FragmentSpread", util, settings);
      }
      handle(fragmentSpreadNode, convertContext) {
        const fragmentDefinitionNode = convertContext.fragmentDefinitions[fragmentSpreadNode.name.value];
        if (!fragmentDefinitionNode) {
          throw new Error("Undefined fragment definition: " + fragmentSpreadNode.name.value);
        }
        const fieldNode = {
          alias: void 0,
          arguments: void 0,
          directives: fragmentDefinitionNode.directives,
          kind: "Field",
          name: fragmentSpreadNode.name,
          selectionSet: fragmentDefinitionNode.selectionSet
        };
        const auxiliaryPatterns = [
          this.util.newTypePattern(convertContext.subject, fragmentDefinitionNode.typeCondition, convertContext)
        ];
        return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));
      }
    };
    exports.NodeHandlerSelectionFragmentSpread = NodeHandlerSelectionFragmentSpread;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionInlineFragment.js
var require_NodeHandlerSelectionInlineFragment = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionInlineFragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionInlineFragment = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionInlineFragment = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("InlineFragment", util, settings);
      }
      handle(inlineFragmentNode, convertContext) {
        const fieldNode = {
          alias: void 0,
          arguments: void 0,
          directives: inlineFragmentNode.directives,
          kind: "Field",
          name: { kind: "Name", value: convertContext.subject.value },
          selectionSet: inlineFragmentNode.selectionSet
        };
        const auxiliaryPatterns = inlineFragmentNode.typeCondition ? [this.util.newTypePattern(convertContext.subject, inlineFragmentNode.typeCondition, convertContext)] : [];
        return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));
      }
    };
    exports.NodeHandlerSelectionInlineFragment = NodeHandlerSelectionInlineFragment;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/handler/index.js
var require_handler = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/handler/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_directivenode(), exports);
    __exportStar(require_valuenode(), exports);
    __exportStar(require_NodeHandlerAdapter(), exports);
    __exportStar(require_NodeHandlerDefinitionAdapter(), exports);
    __exportStar(require_NodeHandlerDefinitionFragment(), exports);
    __exportStar(require_NodeHandlerDefinitionOperation(), exports);
    __exportStar(require_NodeHandlerDocument(), exports);
    __exportStar(require_NodeHandlerSelectionAdapter(), exports);
    __exportStar(require_NodeHandlerSelectionField(), exports);
    __exportStar(require_NodeHandlerSelectionFragmentSpread(), exports);
    __exportStar(require_NodeHandlerSelectionInlineFragment(), exports);
  }
});

// ../../lipdjs/node_modules/graphql/polyfills/symbols.mjs
var SYMBOL_ITERATOR, SYMBOL_ASYNC_ITERATOR, SYMBOL_TO_STRING_TAG;
var init_symbols = __esm({
  "../../lipdjs/node_modules/graphql/polyfills/symbols.mjs"() {
    SYMBOL_ITERATOR = typeof Symbol === "function" && Symbol.iterator != null ? Symbol.iterator : "@@iterator";
    SYMBOL_ASYNC_ITERATOR = typeof Symbol === "function" && Symbol.asyncIterator != null ? Symbol.asyncIterator : "@@asyncIterator";
    SYMBOL_TO_STRING_TAG = typeof Symbol === "function" && Symbol.toStringTag != null ? Symbol.toStringTag : "@@toStringTag";
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs
var nodejsCustomInspectSymbol, nodejsCustomInspectSymbol_default;
var init_nodejsCustomInspectSymbol = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs"() {
    nodejsCustomInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
    nodejsCustomInspectSymbol_default = nodejsCustomInspectSymbol;
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/inspect.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof5(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof5(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (_typeof(value)) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? "[function ".concat(value.name, "]") : "[function]";
    case "object":
      if (value === null) {
        return "null";
      }
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (previouslySeenValues.indexOf(value) !== -1) {
    return "[Circular]";
  }
  var seenValues = [].concat(previouslySeenValues, [value]);
  var customInspectFn = getCustomFn(value);
  if (customInspectFn !== void 0) {
    var customValue = customInspectFn.call(value);
    if (customValue !== value) {
      return typeof customValue === "string" ? customValue : formatValue(customValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function formatObject(object, seenValues) {
  var keys2 = Object.keys(object);
  if (keys2.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  var properties = keys2.map(function(key) {
    var value = formatValue(object[key], seenValues);
    return key + ": " + value;
  });
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];
  for (var i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }
  return "[" + items.join(", ") + "]";
}
function getCustomFn(object) {
  var customInspectFn = object[String(nodejsCustomInspectSymbol_default)];
  if (typeof customInspectFn === "function") {
    return customInspectFn;
  }
  if (typeof object.inspect === "function") {
    return object.inspect;
  }
}
function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    var name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
var MAX_ARRAY_LENGTH, MAX_RECURSIVE_DEPTH;
var init_inspect = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/inspect.mjs"() {
    init_nodejsCustomInspectSymbol();
    MAX_ARRAY_LENGTH = 10;
    MAX_RECURSIVE_DEPTH = 2;
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
var init_devAssert = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/devAssert.mjs"() {
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/instanceOf.mjs
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof5(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof5(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
var instanceOf_default;
var init_instanceOf = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/instanceOf.mjs"() {
    init_inspect();
    instanceOf_default = false ? (
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
      // eslint-disable-next-line no-shadow
      function instanceOf(value, constructor) {
        return value instanceof constructor;
      }
    ) : (
      // eslint-disable-next-line no-shadow
      function instanceOf2(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }
        if (_typeof2(value) === "object" && value !== null) {
          var _value$constructor;
          var className = constructor.prototype[Symbol.toStringTag];
          var valueClassName = (
            // We still need to support constructor's name to detect conflicts with older versions of this library.
            Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
          );
          if (className === valueClassName) {
            var stringifiedValue = inspect(value);
            throw new Error("Cannot use ".concat(className, ' "').concat(stringifiedValue, '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'));
          }
        }
        return false;
      }
    );
  }
});

// ../../lipdjs/node_modules/graphql/language/source.mjs
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function isSource(source) {
  return instanceOf_default(source, Source);
}
var Source;
var init_source = __esm({
  "../../lipdjs/node_modules/graphql/language/source.mjs"() {
    init_symbols();
    init_inspect();
    init_devAssert();
    init_instanceOf();
    Source = function() {
      function Source2(body) {
        var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "GraphQL request";
        var locationOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          line: 1,
          column: 1
        };
        typeof body === "string" || devAssert(0, "Body must be a string. Received: ".concat(inspect(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || devAssert(0, "line in locationOffset is 1-indexed and must be positive.");
        this.locationOffset.column > 0 || devAssert(0, "column in locationOffset is 1-indexed and must be positive.");
      }
      _createClass(Source2, [{
        key: SYMBOL_TO_STRING_TAG,
        get: function get11() {
          return "Source";
        }
      }]);
      return Source2;
    }();
  }
});

// ../../lipdjs/node_modules/graphql/language/location.mjs
function getLocation(source, position) {
  var lineRegexp = /\r\n|[\n\r]/g;
  var line = 1;
  var column = position + 1;
  var match;
  while ((match = lineRegexp.exec(source.body)) && match.index < position) {
    line += 1;
    column = position + 1 - (match.index + match[0].length);
  }
  return {
    line,
    column
  };
}
var init_location = __esm({
  "../../lipdjs/node_modules/graphql/language/location.mjs"() {
  }
});

// ../../lipdjs/node_modules/graphql/language/printLocation.mjs
function printLocation(location) {
  return printSourceLocation(location.source, getLocation(location.source, location.start));
}
function printSourceLocation(source, sourceLocation) {
  var firstLineColumnOffset = source.locationOffset.column - 1;
  var body = whitespace(firstLineColumnOffset) + source.body;
  var lineIndex = sourceLocation.line - 1;
  var lineOffset = source.locationOffset.line - 1;
  var lineNum = sourceLocation.line + lineOffset;
  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  var columnNum = sourceLocation.column + columnOffset;
  var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
  var lines = body.split(/\r\n|[\n\r]/g);
  var locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    var subLineIndex = Math.floor(columnNum / 80);
    var subLineColumnNum = columnNum % 80;
    var subLines = [];
    for (var i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
      return ["", subLine];
    }), [[" ", whitespace(subLineColumnNum - 1) + "^"], ["", subLines[subLineIndex + 1]]]));
  }
  return locationStr + printPrefixedLines([
    // Lines specified like this: ["prefix", "string"],
    ["".concat(lineNum - 1), lines[lineIndex - 1]],
    ["".concat(lineNum), locationLine],
    ["", whitespace(columnNum - 1) + "^"],
    ["".concat(lineNum + 1), lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  var existingLines = lines.filter(function(_ref) {
    var _ = _ref[0], line = _ref[1];
    return line !== void 0;
  });
  var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
    var prefix = _ref2[0];
    return prefix.length;
  }));
  return existingLines.map(function(_ref3) {
    var prefix = _ref3[0], line = _ref3[1];
    return leftPad(padLen, prefix) + (line ? " | " + line : " |");
  }).join("\n");
}
function whitespace(len) {
  return Array(len + 1).join(" ");
}
function leftPad(len, str) {
  return whitespace(len - str.length) + str;
}
var init_printLocation = __esm({
  "../../lipdjs/node_modules/graphql/language/printLocation.mjs"() {
    init_location();
  }
});

// ../../lipdjs/node_modules/graphql/language/kinds.mjs
var Kind;
var init_kinds = __esm({
  "../../lipdjs/node_modules/graphql/language/kinds.mjs"() {
    Kind = Object.freeze({
      // Name
      NAME: "Name",
      // Document
      DOCUMENT: "Document",
      OPERATION_DEFINITION: "OperationDefinition",
      VARIABLE_DEFINITION: "VariableDefinition",
      SELECTION_SET: "SelectionSet",
      FIELD: "Field",
      ARGUMENT: "Argument",
      // Fragments
      FRAGMENT_SPREAD: "FragmentSpread",
      INLINE_FRAGMENT: "InlineFragment",
      FRAGMENT_DEFINITION: "FragmentDefinition",
      // Values
      VARIABLE: "Variable",
      INT: "IntValue",
      FLOAT: "FloatValue",
      STRING: "StringValue",
      BOOLEAN: "BooleanValue",
      NULL: "NullValue",
      ENUM: "EnumValue",
      LIST: "ListValue",
      OBJECT: "ObjectValue",
      OBJECT_FIELD: "ObjectField",
      // Directives
      DIRECTIVE: "Directive",
      // Types
      NAMED_TYPE: "NamedType",
      LIST_TYPE: "ListType",
      NON_NULL_TYPE: "NonNullType",
      // Type System Definitions
      SCHEMA_DEFINITION: "SchemaDefinition",
      OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
      // Type Definitions
      SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
      OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
      FIELD_DEFINITION: "FieldDefinition",
      INPUT_VALUE_DEFINITION: "InputValueDefinition",
      INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
      UNION_TYPE_DEFINITION: "UnionTypeDefinition",
      ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
      ENUM_VALUE_DEFINITION: "EnumValueDefinition",
      INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
      // Directive Definitions
      DIRECTIVE_DEFINITION: "DirectiveDefinition",
      // Type System Extensions
      SCHEMA_EXTENSION: "SchemaExtension",
      // Type Extensions
      SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
      OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
      INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
      UNION_TYPE_EXTENSION: "UnionTypeExtension",
      ENUM_TYPE_EXTENSION: "EnumTypeExtension",
      INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
    });
  }
});

// ../../lipdjs/node_modules/graphql/language/tokenKind.mjs
var TokenKind;
var init_tokenKind = __esm({
  "../../lipdjs/node_modules/graphql/language/tokenKind.mjs"() {
    TokenKind = Object.freeze({
      SOF: "<SOF>",
      EOF: "<EOF>",
      BANG: "!",
      DOLLAR: "$",
      AMP: "&",
      PAREN_L: "(",
      PAREN_R: ")",
      SPREAD: "...",
      COLON: ":",
      EQUALS: "=",
      AT: "@",
      BRACKET_L: "[",
      BRACKET_R: "]",
      BRACE_L: "{",
      PIPE: "|",
      BRACE_R: "}",
      NAME: "Name",
      INT: "Int",
      FLOAT: "Float",
      STRING: "String",
      BLOCK_STRING: "BlockString",
      COMMENT: "Comment"
    });
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/isObjectLike.mjs
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = function _typeof5(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof3 = function _typeof5(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof3(obj);
}
function isObjectLike(value) {
  return _typeof3(value) == "object" && value !== null;
}
var init_isObjectLike = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/isObjectLike.mjs"() {
  }
});

// ../../lipdjs/node_modules/graphql/error/GraphQLError.mjs
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = function _typeof5(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof4 = function _typeof5(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof4(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof4(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2)) return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2) _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
function printError(error) {
  var output = error.message;
  if (error.nodes) {
    for (var _i4 = 0, _error$nodes2 = error.nodes; _i4 < _error$nodes2.length; _i4++) {
      var node = _error$nodes2[_i4];
      if (node.loc) {
        output += "\n\n" + printLocation(node.loc);
      }
    }
  } else if (error.source && error.locations) {
    for (var _i6 = 0, _error$locations2 = error.locations; _i6 < _error$locations2.length; _i6++) {
      var location = _error$locations2[_i6];
      output += "\n\n" + printSourceLocation(error.source, location);
    }
  }
  return output;
}
function formatError(error) {
  var _error$message;
  error || devAssert(0, "Received null or undefined error.");
  var message = (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : "An unknown error occurred.";
  var locations = error.locations;
  var path = error.path;
  var extensions = error.extensions;
  return extensions && Object.keys(extensions).length > 0 ? {
    message,
    locations,
    path,
    extensions
  } : {
    message,
    locations,
    path
  };
}
var GraphQLError;
var init_GraphQLError = __esm({
  "../../lipdjs/node_modules/graphql/error/GraphQLError.mjs"() {
    init_devAssert();
    init_isObjectLike();
    init_symbols();
    init_location();
    init_printLocation();
    GraphQLError = function(_Error) {
      _inherits(GraphQLError2, _Error);
      var _super = _createSuper(GraphQLError2);
      function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
        var _nodeLocations, _nodeLocations2, _nodeLocations3;
        var _this;
        _classCallCheck(this, GraphQLError2);
        _this = _super.call(this, message);
        _this.name = "GraphQLError";
        _this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
        var nodeLocations = [];
        for (var _i2 = 0, _ref3 = (_this$nodes = _this.nodes) !== null && _this$nodes !== void 0 ? _this$nodes : []; _i2 < _ref3.length; _i2++) {
          var _this$nodes;
          var _ref4 = _ref3[_i2];
          var loc = _ref4.loc;
          if (loc != null) {
            nodeLocations.push(loc);
          }
        }
        nodeLocations = undefinedIfEmpty(nodeLocations);
        _this.source = source !== null && source !== void 0 ? source : (_nodeLocations = nodeLocations) === null || _nodeLocations === void 0 ? void 0 : _nodeLocations[0].source;
        _this.positions = positions !== null && positions !== void 0 ? positions : (_nodeLocations2 = nodeLocations) === null || _nodeLocations2 === void 0 ? void 0 : _nodeLocations2.map(function(loc2) {
          return loc2.start;
        });
        _this.locations = positions && source ? positions.map(function(pos) {
          return getLocation(source, pos);
        }) : (_nodeLocations3 = nodeLocations) === null || _nodeLocations3 === void 0 ? void 0 : _nodeLocations3.map(function(loc2) {
          return getLocation(loc2.source, loc2.start);
        });
        _this.path = path !== null && path !== void 0 ? path : void 0;
        var originalExtensions = originalError === null || originalError === void 0 ? void 0 : originalError.extensions;
        if (extensions == null && isObjectLike(originalExtensions)) {
          _this.extensions = _objectSpread({}, originalExtensions);
        } else {
          _this.extensions = extensions !== null && extensions !== void 0 ? extensions : {};
        }
        Object.defineProperties(_assertThisInitialized(_this), {
          message: {
            enumerable: true
          },
          locations: {
            enumerable: _this.locations != null
          },
          path: {
            enumerable: _this.path != null
          },
          extensions: {
            enumerable: _this.extensions != null && Object.keys(_this.extensions).length > 0
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
          return _possibleConstructorReturn(_this);
        }
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError2);
        } else {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
        return _this;
      }
      _createClass2(GraphQLError2, [{
        key: "toString",
        value: function toString5() {
          return printError(this);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return formatError(this);
        }
        // FIXME: workaround to not break chai comparisons, should be remove in v16
        // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      }, {
        key: SYMBOL_TO_STRING_TAG,
        get: function get11() {
          return "Object";
        }
      }]);
      return GraphQLError2;
    }(_wrapNativeSuper(Error));
  }
});

// ../../lipdjs/node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError("Syntax Error: ".concat(description), void 0, source, [position]);
}
var init_syntaxError = __esm({
  "../../lipdjs/node_modules/graphql/error/syntaxError.mjs"() {
    init_GraphQLError();
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/invariant.mjs
function invariant2(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message != null ? message : "Unexpected invariant triggered.");
  }
}
var init_invariant = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/invariant.mjs"() {
  }
});

// ../../lipdjs/node_modules/graphql/jsutils/defineInspect.mjs
function defineInspect(classObject) {
  var fn = classObject.prototype.toJSON;
  typeof fn === "function" || invariant2(0);
  classObject.prototype.inspect = fn;
  if (nodejsCustomInspectSymbol_default) {
    classObject.prototype[nodejsCustomInspectSymbol_default] = fn;
  }
}
var init_defineInspect = __esm({
  "../../lipdjs/node_modules/graphql/jsutils/defineInspect.mjs"() {
    init_invariant();
    init_nodejsCustomInspectSymbol();
  }
});

// ../../lipdjs/node_modules/graphql/language/ast.mjs
function isNode(maybeNode) {
  return maybeNode != null && typeof maybeNode.kind === "string";
}
var Location, Token;
var init_ast = __esm({
  "../../lipdjs/node_modules/graphql/language/ast.mjs"() {
    init_defineInspect();
    Location = function() {
      function Location2(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      var _proto = Location2.prototype;
      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };
      return Location2;
    }();
    defineInspect(Location);
    Token = function() {
      function Token2(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }
      var _proto2 = Token2.prototype;
      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };
      return Token2;
    }();
    defineInspect(Token);
  }
});

// ../../lipdjs/node_modules/graphql/language/blockString.mjs
function dedentBlockStringValue(rawString) {
  var lines = rawString.split(/\r\n|[\n\r]/g);
  var commonIndent = getBlockStringIndentation(rawString);
  if (commonIndent !== 0) {
    for (var i = 1; i < lines.length; i++) {
      lines[i] = lines[i].slice(commonIndent);
    }
  }
  var startLine = 0;
  while (startLine < lines.length && isBlank(lines[startLine])) {
    ++startLine;
  }
  var endLine = lines.length;
  while (endLine > startLine && isBlank(lines[endLine - 1])) {
    --endLine;
  }
  return lines.slice(startLine, endLine).join("\n");
}
function isBlank(str) {
  for (var i = 0; i < str.length; ++i) {
    if (str[i] !== " " && str[i] !== "	") {
      return false;
    }
  }
  return true;
}
function getBlockStringIndentation(value) {
  var _commonIndent;
  var isFirstLine = true;
  var isEmptyLine = true;
  var indent2 = 0;
  var commonIndent = null;
  for (var i = 0; i < value.length; ++i) {
    switch (value.charCodeAt(i)) {
      case 13:
        if (value.charCodeAt(i + 1) === 10) {
          ++i;
        }
      case 10:
        isFirstLine = false;
        isEmptyLine = true;
        indent2 = 0;
        break;
      case 9:
      case 32:
        ++indent2;
        break;
      default:
        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent2 < commonIndent)) {
          commonIndent = indent2;
        }
        isEmptyLine = false;
    }
  }
  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
}
function printBlockString(value) {
  var indentation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var preferMultipleLines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var isSingleLine = value.indexOf("\n") === -1;
  var hasLeadingSpace = value[0] === " " || value[0] === "	";
  var hasTrailingQuote = value[value.length - 1] === '"';
  var hasTrailingSlash = value[value.length - 1] === "\\";
  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
  var result = "";
  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += "\n" + indentation;
  }
  result += indentation ? value.replace(/\n/g, "\n" + indentation) : value;
  if (printAsMultipleLines) {
    result += "\n";
  }
  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}
var init_blockString = __esm({
  "../../lipdjs/node_modules/graphql/language/blockString.mjs"() {
  }
});

// ../../lipdjs/node_modules/graphql/language/lexer.mjs
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function printCharCode(code) {
  return (
    // NaN/undefined represents access beyond the end of the file.
    isNaN(code) ? TokenKind.EOF : (
      // Trust JSON for ASCII.
      code < 127 ? JSON.stringify(String.fromCharCode(code)) : (
        // Otherwise print the escaped form.
        '"\\u'.concat(("00" + code.toString(16).toUpperCase()).slice(-4), '"')
      )
    )
  );
}
function readToken(lexer, prev) {
  var source = lexer.source;
  var body = source.body;
  var bodyLength = body.length;
  var pos = prev.end;
  while (pos < bodyLength) {
    var code = body.charCodeAt(pos);
    var _line = lexer.line;
    var _col = 1 + pos - lexer.lineStart;
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++pos;
        continue;
      case 10:
        ++pos;
        ++lexer.line;
        lexer.lineStart = pos;
        continue;
      case 13:
        if (body.charCodeAt(pos + 1) === 10) {
          pos += 2;
        } else {
          ++pos;
        }
        ++lexer.line;
        lexer.lineStart = pos;
        continue;
      case 33:
        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);
      case 35:
        return readComment(source, pos, _line, _col, prev);
      case 36:
        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
      case 38:
        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);
      case 40:
        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
      case 41:
        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
      case 46:
        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
        }
        break;
      case 58:
        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);
      case 61:
        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
      case 64:
        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);
      case 91:
        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
      case 93:
        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
      case 123:
        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
      case 124:
        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
      case 125:
        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
      case 34:
        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
          return readBlockString(source, pos, _line, _col, prev, lexer);
        }
        return readString(source, pos, _line, _col, prev);
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return readNumber(source, pos, code, _line, _col, prev);
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 95:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
        return readName(source, pos, _line, _col, prev);
    }
    throw syntaxError(source, pos, unexpectedCharacterMessage(code));
  }
  var line = lexer.line;
  var col = 1 + pos - lexer.lineStart;
  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
}
function unexpectedCharacterMessage(code) {
  if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
    return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
  }
  if (code === 39) {
    return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
  }
  return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
}
function readComment(source, start, line, col, prev) {
  var body = source.body;
  var code;
  var position = start;
  do {
    code = body.charCodeAt(++position);
  } while (!isNaN(code) && // SourceCharacter but not LineTerminator
  (code > 31 || code === 9));
  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
}
function readNumber(source, start, firstCode, line, col, prev) {
  var body = source.body;
  var code = firstCode;
  var position = start;
  var isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (code >= 48 && code <= 57) {
      throw syntaxError(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
    }
  } else {
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
  }
  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
}
function readDigits(source, start, firstCode) {
  var body = source.body;
  var position = start;
  var code = firstCode;
  if (code >= 48 && code <= 57) {
    do {
      code = body.charCodeAt(++position);
    } while (code >= 48 && code <= 57);
    return position;
  }
  throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
}
function readString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 1;
  var chunkStart = position;
  var code = 0;
  var value = "";
  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
  code !== 10 && code !== 13) {
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);
    }
    if (code < 32 && code !== 9) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }
    ++position;
    if (code === 92) {
      value += body.slice(chunkStart, position - 1);
      code = body.charCodeAt(position);
      switch (code) {
        case 34:
          value += '"';
          break;
        case 47:
          value += "/";
          break;
        case 92:
          value += "\\";
          break;
        case 98:
          value += "\b";
          break;
        case 102:
          value += "\f";
          break;
        case 110:
          value += "\n";
          break;
        case 114:
          value += "\r";
          break;
        case 116:
          value += "	";
          break;
        case 117: {
          var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));
          if (charCode < 0) {
            var invalidSequence = body.slice(position + 1, position + 5);
            throw syntaxError(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
          }
          value += String.fromCharCode(charCode);
          position += 4;
          break;
        }
        default:
          throw syntaxError(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
      }
      ++position;
      chunkStart = position;
    }
  }
  throw syntaxError(source, position, "Unterminated string.");
}
function readBlockString(source, start, line, col, prev, lexer) {
  var body = source.body;
  var position = start + 3;
  var chunkStart = position;
  var code = 0;
  var rawValue = "";
  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      rawValue += body.slice(chunkStart, position);
      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));
    }
    if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }
    if (code === 10) {
      ++position;
      ++lexer.line;
      lexer.lineStart = position;
    } else if (code === 13) {
      if (body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      ++lexer.line;
      lexer.lineStart = position;
    } else if (
      // Escape Triple-Quote (\""")
      code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34
    ) {
      rawValue += body.slice(chunkStart, position) + '"""';
      position += 4;
      chunkStart = position;
    } else {
      ++position;
    }
  }
  throw syntaxError(source, position, "Unterminated string.");
}
function uniCharCode(a, b, c, d) {
  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
}
function char2hex(a) {
  return a >= 48 && a <= 57 ? a - 48 : a >= 65 && a <= 70 ? a - 55 : a >= 97 && a <= 102 ? a - 87 : -1;
}
function readName(source, start, line, col, prev) {
  var body = source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var code = 0;
  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
  code >= 48 && code <= 57 || // 0-9
  code >= 65 && code <= 90 || // A-Z
  code >= 97 && code <= 122)) {
    ++position;
  }
  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
}
function isNameStart(code) {
  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
}
var Lexer;
var init_lexer = __esm({
  "../../lipdjs/node_modules/graphql/language/lexer.mjs"() {
    init_syntaxError();
    init_ast();
    init_tokenKind();
    init_blockString();
    Lexer = function() {
      function Lexer2(source) {
        var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      var _proto = Lexer2.prototype;
      _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      };
      _proto.lookahead = function lookahead() {
        var token = this.token;
        if (token.kind !== TokenKind.EOF) {
          do {
            var _token$next;
            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
          } while (token.kind === TokenKind.COMMENT);
        }
        return token;
      };
      return Lexer2;
    }();
  }
});

// ../../lipdjs/node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation;
var init_directiveLocation = __esm({
  "../../lipdjs/node_modules/graphql/language/directiveLocation.mjs"() {
    DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: "QUERY",
      MUTATION: "MUTATION",
      SUBSCRIPTION: "SUBSCRIPTION",
      FIELD: "FIELD",
      FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
      FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
      INLINE_FRAGMENT: "INLINE_FRAGMENT",
      VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
      // Type System Definitions
      SCHEMA: "SCHEMA",
      SCALAR: "SCALAR",
      OBJECT: "OBJECT",
      FIELD_DEFINITION: "FIELD_DEFINITION",
      ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
      INTERFACE: "INTERFACE",
      UNION: "UNION",
      ENUM: "ENUM",
      ENUM_VALUE: "ENUM_VALUE",
      INPUT_OBJECT: "INPUT_OBJECT",
      INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
    });
  }
});

// ../../lipdjs/node_modules/graphql/language/parser.mjs
function parse(source, options) {
  var parser = new Parser(source, options);
  return parser.parseDocument();
}
function parseValue(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  var value = parser.parseValueLiteral(false);
  parser.expectToken(TokenKind.EOF);
  return value;
}
function parseType(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  var type = parser.parseTypeReference();
  parser.expectToken(TokenKind.EOF);
  return type;
}
function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? '"'.concat(kind, '"') : kind;
}
var Parser;
var init_parser = __esm({
  "../../lipdjs/node_modules/graphql/language/parser.mjs"() {
    init_syntaxError();
    init_kinds();
    init_ast();
    init_tokenKind();
    init_source();
    init_directiveLocation();
    init_lexer();
    Parser = function() {
      function Parser2(source, options) {
        var sourceObj = isSource(source) ? source : new Source(source);
        this._lexer = new Lexer(sourceObj);
        this._options = options;
      }
      var _proto = Parser2.prototype;
      _proto.parseName = function parseName() {
        var token = this.expectToken(TokenKind.NAME);
        return {
          kind: Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      };
      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: Kind.DOCUMENT,
          definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),
          loc: this.loc(start)
        };
      };
      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "schema":
            case "scalar":
            case "type":
            case "interface":
            case "union":
            case "enum":
            case "input":
            case "directive":
              return this.parseTypeSystemDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }
        throw this.unexpected();
      };
      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;
        if (this.peek(TokenKind.BRACE_L)) {
          return {
            kind: Kind.OPERATION_DEFINITION,
            operation: "query",
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        var operation = this.parseOperationType();
        var name;
        if (this.peek(TokenKind.NAME)) {
          name = this.parseName();
        }
        return {
          kind: Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return "query";
          case "mutation":
            return "mutation";
          case "subscription":
            return "subscription";
        }
        throw this.unexpected(operationToken);
      };
      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
      };
      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      };
      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(TokenKind.DOLLAR);
        return {
          kind: Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: Kind.SELECTION_SET,
          selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseSelection = function parseSelection() {
        return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      };
      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;
        if (this.expectOptionalToken(TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return {
          kind: Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
          loc: this.loc(start)
        };
      };
      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
      };
      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return {
          kind: Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };
      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      };
      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
          return {
            kind: Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }
        return {
          kind: Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;
        var start = this._lexer.token;
        this.expectKeyword("fragment");
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        return {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      };
      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;
        switch (token.kind) {
          case TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case TokenKind.INT:
            this._lexer.advance();
            return {
              kind: Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };
          case TokenKind.FLOAT:
            this._lexer.advance();
            return {
              kind: Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };
          case TokenKind.STRING:
          case TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case TokenKind.NAME:
            this._lexer.advance();
            switch (token.value) {
              case "true":
                return {
                  kind: Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };
              case "false":
                return {
                  kind: Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };
              case "null":
                return {
                  kind: Kind.NULL,
                  loc: this.loc(token)
                };
              default:
                return {
                  kind: Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }
          case TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }
            break;
        }
        throw this.unexpected();
      };
      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;
        this._lexer.advance();
        return {
          kind: Kind.STRING,
          value: token.value,
          block: token.kind === TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      };
      _proto.parseList = function parseList(isConst) {
        var _this = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this.parseValueLiteral(isConst);
        };
        return {
          kind: Kind.LIST,
          values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this2.parseObjectField(isConst);
        };
        return {
          kind: Kind.OBJECT,
          fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return {
          kind: Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];
        while (this.peek(TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      };
      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(TokenKind.AT);
        return {
          kind: Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;
        if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(TokenKind.BRACKET_R);
          type = {
            kind: Kind.LIST_TYPE,
            type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(TokenKind.BANG)) {
          return {
            kind: Kind.NON_NULL_TYPE,
            type,
            loc: this.loc(start)
          };
        }
        return type;
      };
      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.peekDescription = function peekDescription() {
        return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
      };
      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      };
      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        return {
          kind: Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;
        if (!this.expectOptionalKeyword("implements")) {
          return [];
        }
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types = [];
          this.expectOptionalToken(TokenKind.AMP);
          do {
            types.push(this.parseNamedType());
          } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));
          return types;
        }
        return this.delimitedMany(TokenKind.AMP, this.parseNamedType);
      };
      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3;
        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {
          this._lexer.advance();
          this._lexer.advance();
          return [];
        }
        return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
      };
      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
          kind: Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
      };
      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;
        if (this.expectOptionalToken(TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }
        var directives = this.parseDirectives(true);
        return {
          kind: Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
          kind: Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
      };
      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values2 = this.parseEnumValuesDefinition();
        return {
          kind: Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values: values2,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
      };
      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
      };
      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values2 = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values2.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values: values2,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        var locations = this.parseDirectiveLocations();
        return {
          kind: Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
      };
      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();
        if (DirectiveLocation[name.value] !== void 0) {
          return name;
        }
        throw this.unexpected(start);
      };
      _proto.loc = function loc(startToken) {
        var _this$_options4;
        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      };
      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      };
      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        throw syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      };
      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        return void 0;
      };
      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw syntaxError(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
        }
      };
      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
          return true;
        }
        return false;
      };
      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      };
      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      };
      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      };
      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      };
      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      };
      return Parser2;
    }();
  }
});

// ../../lipdjs/node_modules/graphql/language/visitor.mjs
function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
  var stack = void 0;
  var inArray = Array.isArray(root);
  var keys2 = [root];
  var index = -1;
  var edits = [];
  var node = void 0;
  var key = void 0;
  var parent = void 0;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  do {
    index++;
    var isLeaving = index === keys2.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};
          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }
          node = clone;
        }
        var editOffset = 0;
        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];
          if (inArray) {
            editKey -= editOffset;
          }
          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys2 = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys2[index] : void 0;
      node = parent ? parent[key] : newRoot;
      if (node === null || node === void 0) {
        continue;
      }
      if (parent) {
        path.push(key);
      }
    }
    var result = void 0;
    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
      }
      var visitFn = getVisitFn(visitor, node.kind, isLeaving);
      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);
        if (result === BREAK) {
          break;
        }
        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== void 0) {
          edits.push([key, result]);
          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;
      stack = {
        inArray,
        index,
        keys: keys2,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys2 = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }
  return newRoot;
}
function visitInParallel(visitors) {
  var skipping = new Array(visitors.length);
  return {
    enter: function enter(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (skipping[i] == null) {
          var fn = getVisitFn(
            visitors[i],
            node.kind,
            /* isLeaving */
            false
          );
          if (fn) {
            var result = fn.apply(visitors[i], arguments);
            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== void 0) {
              return result;
            }
          }
        }
      }
    },
    leave: function leave(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (skipping[i] == null) {
          var fn = getVisitFn(
            visitors[i],
            node.kind,
            /* isLeaving */
            true
          );
          if (fn) {
            var result = fn.apply(visitors[i], arguments);
            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== void 0 && result !== false) {
              return result;
            }
          }
        } else if (skipping[i] === node) {
          skipping[i] = null;
        }
      }
    }
  };
}
function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];
  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === "function") {
      return kindVisitor;
    }
    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
    if (typeof kindSpecificVisitor === "function") {
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
    if (specificVisitor) {
      if (typeof specificVisitor === "function") {
        return specificVisitor;
      }
      var specificKindVisitor = specificVisitor[kind];
      if (typeof specificKindVisitor === "function") {
        return specificKindVisitor;
      }
    }
  }
}
var QueryDocumentKeys, BREAK;
var init_visitor = __esm({
  "../../lipdjs/node_modules/graphql/language/visitor.mjs"() {
    init_inspect();
    init_ast();
    QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are experimental and may be changed
        // or removed in the future.
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
      InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    BREAK = Object.freeze({});
  }
});

// ../../lipdjs/node_modules/graphql/language/printer.mjs
function print(ast) {
  return visit(ast, {
    leave: printDocASTReducer
  });
}
function addDescription(cb) {
  return function(node) {
    return join2([node.description, cb(node)], "\n");
  };
}
function join2(maybeArray) {
  var _maybeArray$filter$jo;
  var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x) {
    return x;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join2(array, "\n")), "\n}");
}
function wrap(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function isMultiline(str) {
  return str.indexOf("\n") !== -1;
}
function hasMultilineItems(maybeArray) {
  return maybeArray != null && maybeArray.some(isMultiline);
}
var MAX_LINE_LENGTH, printDocASTReducer;
var init_printer = __esm({
  "../../lipdjs/node_modules/graphql/language/printer.mjs"() {
    init_visitor();
    init_blockString();
    MAX_LINE_LENGTH = 80;
    printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return "$" + node.name;
      },
      // Document
      Document: function Document(node) {
        return join2(node.definitions, "\n\n") + "\n";
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap("(", join2(node.variableDefinitions, ", "), ")");
        var directives = join2(node.directives, " ");
        var selectionSet = node.selectionSet;
        return !name && !directives && !varDefs && op === "query" ? selectionSet : join2([op, join2([name, varDefs]), directives, selectionSet], " ");
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives = _ref.directives;
        return variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join2(directives, " "));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
        var prefix = wrap("", alias, ": ") + name;
        var argsLine = prefix + wrap("(", join2(args, ", "), ")");
        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap("(\n", indent(join2(args, "\n")), "\n)");
        }
        return join2([argsLine, join2(directives, " "), selectionSet], " ");
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name, value = _ref4.value;
        return name + ": " + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name, directives = _ref5.directives;
        return "..." + name + wrap(" ", join2(directives, " "));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
        return join2(["...", wrap("on ", typeCondition), join2(directives, " "), selectionSet], " ");
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
        return (
          // Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap("(", join2(variableDefinitions, ", "), ")"), " ") + "on ".concat(typeCondition, " ").concat(wrap("", join2(directives, " "), " ")) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value, isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === "description" ? "" : "  ") : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? "true" : "false";
      },
      NullValue: function NullValue() {
        return "null";
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values2 = _ref13.values;
        return "[" + join2(values2, ", ") + "]";
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return "{" + join2(fields, ", ") + "}";
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name, value = _ref15.value;
        return name + ": " + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name, args = _ref16.arguments;
        return "@" + name + wrap("(", join2(args, ", "), ")");
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return "[" + type + "]";
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + "!";
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function(_ref20) {
        var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
        return join2(["schema", join2(directives, " "), block(operationTypes)], " ");
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation, type = _ref21.type;
        return operation + ": " + type;
      },
      ScalarTypeDefinition: addDescription(function(_ref22) {
        var name = _ref22.name, directives = _ref22.directives;
        return join2(["scalar", name, join2(directives, " ")], " ");
      }),
      ObjectTypeDefinition: addDescription(function(_ref23) {
        var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields = _ref23.fields;
        return join2(["type", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ");
      }),
      FieldDefinition: addDescription(function(_ref24) {
        var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + ": " + type + wrap(" ", join2(directives, " "));
      }),
      InputValueDefinition: addDescription(function(_ref25) {
        var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
        return join2([name + ": " + type, wrap("= ", defaultValue), join2(directives, " ")], " ");
      }),
      InterfaceTypeDefinition: addDescription(function(_ref26) {
        var name = _ref26.name, interfaces = _ref26.interfaces, directives = _ref26.directives, fields = _ref26.fields;
        return join2(["interface", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ");
      }),
      UnionTypeDefinition: addDescription(function(_ref27) {
        var name = _ref27.name, directives = _ref27.directives, types = _ref27.types;
        return join2(["union", name, join2(directives, " "), types && types.length !== 0 ? "= " + join2(types, " | ") : ""], " ");
      }),
      EnumTypeDefinition: addDescription(function(_ref28) {
        var name = _ref28.name, directives = _ref28.directives, values2 = _ref28.values;
        return join2(["enum", name, join2(directives, " "), block(values2)], " ");
      }),
      EnumValueDefinition: addDescription(function(_ref29) {
        var name = _ref29.name, directives = _ref29.directives;
        return join2([name, join2(directives, " ")], " ");
      }),
      InputObjectTypeDefinition: addDescription(function(_ref30) {
        var name = _ref30.name, directives = _ref30.directives, fields = _ref30.fields;
        return join2(["input", name, join2(directives, " "), block(fields)], " ");
      }),
      DirectiveDefinition: addDescription(function(_ref31) {
        var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
        return "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join2(locations, " | ");
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives, operationTypes = _ref32.operationTypes;
        return join2(["extend schema", join2(directives, " "), block(operationTypes)], " ");
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name, directives = _ref33.directives;
        return join2(["extend scalar", name, join2(directives, " ")], " ");
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name, interfaces = _ref34.interfaces, directives = _ref34.directives, fields = _ref34.fields;
        return join2(["extend type", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ");
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name, interfaces = _ref35.interfaces, directives = _ref35.directives, fields = _ref35.fields;
        return join2(["extend interface", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ");
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name, directives = _ref36.directives, types = _ref36.types;
        return join2(["extend union", name, join2(directives, " "), types && types.length !== 0 ? "= " + join2(types, " | ") : ""], " ");
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name, directives = _ref37.directives, values2 = _ref37.values;
        return join2(["extend enum", name, join2(directives, " "), block(values2)], " ");
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name, directives = _ref38.directives, fields = _ref38.fields;
        return join2(["extend input", name, join2(directives, " "), block(fields)], " ");
      }
    };
  }
});

// ../../lipdjs/node_modules/graphql/language/predicates.mjs
function isDefinitionNode(node) {
  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
}
function isExecutableDefinitionNode(node) {
  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;
}
function isSelectionNode(node) {
  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;
}
function isValueNode(node) {
  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;
}
function isTypeNode(node) {
  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;
}
function isTypeSystemDefinitionNode(node) {
  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;
}
var init_predicates = __esm({
  "../../lipdjs/node_modules/graphql/language/predicates.mjs"() {
    init_kinds();
  }
});

// ../../lipdjs/node_modules/graphql/language/index.mjs
var language_exports = {};
__export(language_exports, {
  BREAK: () => BREAK,
  DirectiveLocation: () => DirectiveLocation,
  Kind: () => Kind,
  Lexer: () => Lexer,
  Location: () => Location,
  Source: () => Source,
  Token: () => Token,
  TokenKind: () => TokenKind,
  getLocation: () => getLocation,
  getVisitFn: () => getVisitFn,
  isDefinitionNode: () => isDefinitionNode,
  isExecutableDefinitionNode: () => isExecutableDefinitionNode,
  isSelectionNode: () => isSelectionNode,
  isTypeDefinitionNode: () => isTypeDefinitionNode,
  isTypeExtensionNode: () => isTypeExtensionNode,
  isTypeNode: () => isTypeNode,
  isTypeSystemDefinitionNode: () => isTypeSystemDefinitionNode,
  isTypeSystemExtensionNode: () => isTypeSystemExtensionNode,
  isValueNode: () => isValueNode,
  parse: () => parse,
  parseType: () => parseType,
  parseValue: () => parseValue,
  print: () => print,
  printLocation: () => printLocation,
  printSourceLocation: () => printSourceLocation,
  visit: () => visit,
  visitInParallel: () => visitInParallel
});
var init_language = __esm({
  "../../lipdjs/node_modules/graphql/language/index.mjs"() {
    init_source();
    init_location();
    init_printLocation();
    init_kinds();
    init_tokenKind();
    init_lexer();
    init_parser();
    init_printer();
    init_visitor();
    init_ast();
    init_predicates();
    init_directiveLocation();
  }
});

// ../../lipdjs/node_modules/relative-to-absolute-iri/lib/Resolve.js
var require_Resolve = __commonJS({
  "../../lipdjs/node_modules/relative-to-absolute-iri/lib/Resolve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeDotSegmentsOfPath = exports.removeDotSegments = exports.resolve = void 0;
    function resolve(relativeIRI, baseIRI) {
      baseIRI = baseIRI || "";
      const baseFragmentPos = baseIRI.indexOf("#");
      if (baseFragmentPos > 0) {
        baseIRI = baseIRI.substr(0, baseFragmentPos);
      }
      if (!relativeIRI.length) {
        if (baseIRI.indexOf(":") < 0) {
          throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
        }
        return baseIRI;
      }
      if (relativeIRI.startsWith("?")) {
        const baseQueryPos = baseIRI.indexOf("?");
        if (baseQueryPos > 0) {
          baseIRI = baseIRI.substr(0, baseQueryPos);
        }
        return baseIRI + relativeIRI;
      }
      if (relativeIRI.startsWith("#")) {
        return baseIRI + relativeIRI;
      }
      if (!baseIRI.length) {
        const relativeColonPos = relativeIRI.indexOf(":");
        if (relativeColonPos < 0) {
          throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);
        }
        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);
      }
      const valueColonPos = relativeIRI.indexOf(":");
      if (valueColonPos >= 0) {
        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      }
      const baseColonPos = baseIRI.indexOf(":");
      if (baseColonPos < 0) {
        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
      }
      const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);
      if (relativeIRI.indexOf("//") === 0) {
        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      }
      let baseSlashAfterColonPos;
      if (baseIRI.indexOf("//", baseColonPos) === baseColonPos + 1) {
        baseSlashAfterColonPos = baseIRI.indexOf("/", baseColonPos + 3);
        if (baseSlashAfterColonPos < 0) {
          if (baseIRI.length > baseColonPos + 3) {
            return baseIRI + "/" + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
          } else {
            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
          }
        }
      } else {
        baseSlashAfterColonPos = baseIRI.indexOf("/", baseColonPos + 1);
        if (baseSlashAfterColonPos < 0) {
          return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
        }
      }
      if (relativeIRI.indexOf("/") === 0) {
        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);
      }
      let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);
      const baseIRILastSlashPos = baseIRIPath.lastIndexOf("/");
      if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {
        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);
        if (relativeIRI[0] === "." && relativeIRI[1] !== "." && relativeIRI[1] !== "/" && relativeIRI[2]) {
          relativeIRI = relativeIRI.substr(1);
        }
      }
      relativeIRI = baseIRIPath + relativeIRI;
      relativeIRI = removeDotSegments(relativeIRI);
      return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;
    }
    exports.resolve = resolve;
    function removeDotSegments(path) {
      const segmentBuffers = [];
      let i = 0;
      while (i < path.length) {
        switch (path[i]) {
          case "/":
            if (path[i + 1] === ".") {
              if (path[i + 2] === ".") {
                if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {
                  segmentBuffers.push([]);
                  i++;
                  break;
                }
                segmentBuffers.pop();
                if (!path[i + 3]) {
                  segmentBuffers.push([]);
                }
                i += 3;
              } else {
                if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {
                  segmentBuffers.push([]);
                  i++;
                  break;
                }
                if (!path[i + 2]) {
                  segmentBuffers.push([]);
                }
                i += 2;
              }
            } else {
              segmentBuffers.push([]);
              i++;
            }
            break;
          case "#":
          case "?":
            if (!segmentBuffers.length) {
              segmentBuffers.push([]);
            }
            segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));
            i = path.length;
            break;
          default:
            if (!segmentBuffers.length) {
              segmentBuffers.push([]);
            }
            segmentBuffers[segmentBuffers.length - 1].push(path[i]);
            i++;
            break;
        }
      }
      return "/" + segmentBuffers.map((buffer) => buffer.join("")).join("/");
    }
    exports.removeDotSegments = removeDotSegments;
    function removeDotSegmentsOfPath(iri, colonPosition) {
      let searchOffset = colonPosition + 1;
      if (colonPosition >= 0) {
        if (iri[colonPosition + 1] === "/" && iri[colonPosition + 2] === "/") {
          searchOffset = colonPosition + 3;
        }
      } else {
        if (iri[0] === "/" && iri[1] === "/") {
          searchOffset = 2;
        }
      }
      const pathSeparator = iri.indexOf("/", searchOffset);
      if (pathSeparator < 0) {
        return iri;
      }
      const base = iri.substr(0, pathSeparator);
      const path = iri.substr(pathSeparator);
      return base + removeDotSegments(path);
    }
    exports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;
    function isCharacterAllowedAfterRelativePathSegment(character) {
      return !character || character === "#" || character === "?" || character === "/";
    }
  }
});

// ../../lipdjs/node_modules/relative-to-absolute-iri/index.js
var require_relative_to_absolute_iri = __commonJS({
  "../../lipdjs/node_modules/relative-to-absolute-iri/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Resolve(), exports);
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/ErrorCoded.js
var require_ErrorCoded = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/ErrorCoded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_CODES = exports.ErrorCoded = void 0;
    var ErrorCoded = class extends Error {
      /* istanbul ignore next */
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports.ErrorCoded = ErrorCoded;
    var ERROR_CODES;
    (function(ERROR_CODES2) {
      ERROR_CODES2["COLLIDING_KEYWORDS"] = "colliding keywords";
      ERROR_CODES2["CONFLICTING_INDEXES"] = "conflicting indexes";
      ERROR_CODES2["CYCLIC_IRI_MAPPING"] = "cyclic IRI mapping";
      ERROR_CODES2["INVALID_ID_VALUE"] = "invalid @id value";
      ERROR_CODES2["INVALID_INDEX_VALUE"] = "invalid @index value";
      ERROR_CODES2["INVALID_NEST_VALUE"] = "invalid @nest value";
      ERROR_CODES2["INVALID_PREFIX_VALUE"] = "invalid @prefix value";
      ERROR_CODES2["INVALID_PROPAGATE_VALUE"] = "invalid @propagate value";
      ERROR_CODES2["INVALID_REVERSE_VALUE"] = "invalid @reverse value";
      ERROR_CODES2["INVALID_IMPORT_VALUE"] = "invalid @import value";
      ERROR_CODES2["INVALID_VERSION_VALUE"] = "invalid @version value";
      ERROR_CODES2["INVALID_BASE_IRI"] = "invalid base IRI";
      ERROR_CODES2["INVALID_CONTAINER_MAPPING"] = "invalid container mapping";
      ERROR_CODES2["INVALID_CONTEXT_ENTRY"] = "invalid context entry";
      ERROR_CODES2["INVALID_CONTEXT_NULLIFICATION"] = "invalid context nullification";
      ERROR_CODES2["INVALID_DEFAULT_LANGUAGE"] = "invalid default language";
      ERROR_CODES2["INVALID_INCLUDED_VALUE"] = "invalid @included value";
      ERROR_CODES2["INVALID_IRI_MAPPING"] = "invalid IRI mapping";
      ERROR_CODES2["INVALID_JSON_LITERAL"] = "invalid JSON literal";
      ERROR_CODES2["INVALID_KEYWORD_ALIAS"] = "invalid keyword alias";
      ERROR_CODES2["INVALID_LANGUAGE_MAP_VALUE"] = "invalid language map value";
      ERROR_CODES2["INVALID_LANGUAGE_MAPPING"] = "invalid language mapping";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_STRING"] = "invalid language-tagged string";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_VALUE"] = "invalid language-tagged value";
      ERROR_CODES2["INVALID_LOCAL_CONTEXT"] = "invalid local context";
      ERROR_CODES2["INVALID_REMOTE_CONTEXT"] = "invalid remote context";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY"] = "invalid reverse property";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_MAP"] = "invalid reverse property map";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_VALUE"] = "invalid reverse property value";
      ERROR_CODES2["INVALID_SCOPED_CONTEXT"] = "invalid scoped context";
      ERROR_CODES2["INVALID_SCRIPT_ELEMENT"] = "invalid script element";
      ERROR_CODES2["INVALID_SET_OR_LIST_OBJECT"] = "invalid set or list object";
      ERROR_CODES2["INVALID_TERM_DEFINITION"] = "invalid term definition";
      ERROR_CODES2["INVALID_TYPE_MAPPING"] = "invalid type mapping";
      ERROR_CODES2["INVALID_TYPE_VALUE"] = "invalid type value";
      ERROR_CODES2["INVALID_TYPED_VALUE"] = "invalid typed value";
      ERROR_CODES2["INVALID_VALUE_OBJECT"] = "invalid value object";
      ERROR_CODES2["INVALID_VALUE_OBJECT_VALUE"] = "invalid value object value";
      ERROR_CODES2["INVALID_VOCAB_MAPPING"] = "invalid vocab mapping";
      ERROR_CODES2["IRI_CONFUSED_WITH_PREFIX"] = "IRI confused with prefix";
      ERROR_CODES2["KEYWORD_REDEFINITION"] = "keyword redefinition";
      ERROR_CODES2["LOADING_DOCUMENT_FAILED"] = "loading document failed";
      ERROR_CODES2["LOADING_REMOTE_CONTEXT_FAILED"] = "loading remote context failed";
      ERROR_CODES2["MULTIPLE_CONTEXT_LINK_HEADERS"] = "multiple context link headers";
      ERROR_CODES2["PROCESSING_MODE_CONFLICT"] = "processing mode conflict";
      ERROR_CODES2["PROTECTED_TERM_REDEFINITION"] = "protected term redefinition";
      ERROR_CODES2["CONTEXT_OVERFLOW"] = "context overflow";
      ERROR_CODES2["INVALID_BASE_DIRECTION"] = "invalid base direction";
      ERROR_CODES2["RECURSIVE_CONTEXT_INCLUSION"] = "recursive context inclusion";
      ERROR_CODES2["INVALID_STREAMING_KEY_ORDER"] = "invalid streaming key order";
      ERROR_CODES2["INVALID_EMBEDDED_NODE"] = "invalid embedded node";
      ERROR_CODES2["INVALID_ANNOTATION"] = "invalid annotation";
    })(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
  }
});

// ../../lipdjs/node_modules/http-link-header/lib/link.js
var require_link = __commonJS({
  "../../lipdjs/node_modules/http-link-header/lib/link.js"(exports, module) {
    "use strict";
    var COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i;
    var WS_TRIM_PATTERN = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    var WS_CHAR_PATTERN = /\s|\uFEFF|\xA0/;
    var WS_FOLD_PATTERN = /\r?\n[\x20\x09]+/g;
    var DELIMITER_PATTERN = /[;,"]/;
    var WS_DELIMITER_PATTERN = /[;,"]|\s/;
    var TOKEN_PATTERN = /^[!#$%&'*+\-\.^_`|~\da-zA-Z]+$/;
    var STATE = {
      IDLE: 1 << 0,
      URI: 1 << 1,
      ATTR: 1 << 2
    };
    function trim(value) {
      return value.replace(WS_TRIM_PATTERN, "");
    }
    function hasWhitespace(value) {
      return WS_CHAR_PATTERN.test(value);
    }
    function skipWhitespace(value, offset) {
      while (hasWhitespace(value[offset])) {
        offset++;
      }
      return offset;
    }
    function needsQuotes(value) {
      return WS_DELIMITER_PATTERN.test(value) || !TOKEN_PATTERN.test(value);
    }
    function shallowCompareObjects(object1, object2) {
      return Object.keys(object1).length === Object.keys(object2).length && Object.keys(object1).every(
        (key) => key in object2 && object1[key] === object2[key]
      );
    }
    var Link = class _Link {
      /**
       * Link
       * @constructor
       * @param {String} [value]
       * @returns {Link}
       */
      constructor(value) {
        this.refs = [];
        if (value) {
          this.parse(value);
        }
      }
      /**
       * Get refs with given relation type
       * @param {String} value
       * @returns {Array<Object>}
       */
      rel(value) {
        var links = [];
        var type = value.toLowerCase();
        for (var i = 0; i < this.refs.length; i++) {
          if (typeof this.refs[i].rel === "string" && this.refs[i].rel.toLowerCase() === type) {
            links.push(this.refs[i]);
          }
        }
        return links;
      }
      /**
       * Get refs where given attribute has a given value
       * @param {String} attr
       * @param {String} value
       * @returns {Array<Object>}
       */
      get(attr, value) {
        attr = attr.toLowerCase();
        value = value.toLowerCase();
        var links = [];
        for (var i = 0; i < this.refs.length; i++) {
          if (typeof this.refs[i][attr] === "string" && this.refs[i][attr].toLowerCase() === value) {
            links.push(this.refs[i]);
          }
        }
        return links;
      }
      /** Sets a reference. */
      set(link) {
        this.refs.push(link);
        return this;
      }
      /**
       * Sets a reference if a reference with similar properties isn’t already set.
       */
      setUnique(link) {
        if (!this.refs.some((ref) => shallowCompareObjects(ref, link))) {
          this.refs.push(link);
        }
        return this;
      }
      has(attr, value) {
        attr = attr.toLowerCase();
        value = value.toLowerCase();
        for (var i = 0; i < this.refs.length; i++) {
          if (typeof this.refs[i][attr] === "string" && this.refs[i][attr].toLowerCase() === value) {
            return true;
          }
        }
        return false;
      }
      parse(value, offset) {
        offset = offset || 0;
        value = offset ? value.slice(offset) : value;
        value = trim(value).replace(WS_FOLD_PATTERN, "");
        var state = STATE.IDLE;
        var length = value.length;
        var offset = 0;
        var ref = null;
        while (offset < length) {
          if (state === STATE.IDLE) {
            if (hasWhitespace(value[offset])) {
              offset++;
              continue;
            } else if (value[offset] === "<") {
              if (ref != null) {
                ref.rel != null ? this.refs.push(..._Link.expandRelations(ref)) : this.refs.push(ref);
              }
              var end = value.indexOf(">", offset);
              if (end === -1) throw new Error("Expected end of URI delimiter at offset " + offset);
              ref = { uri: value.slice(offset + 1, end) };
              offset = end;
              state = STATE.URI;
            } else {
              throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
            }
            offset++;
          } else if (state === STATE.URI) {
            if (hasWhitespace(value[offset])) {
              offset++;
              continue;
            } else if (value[offset] === ";") {
              state = STATE.ATTR;
              offset++;
            } else if (value[offset] === ",") {
              state = STATE.IDLE;
              offset++;
            } else {
              throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
            }
          } else if (state === STATE.ATTR) {
            if (value[offset] === ";" || hasWhitespace(value[offset])) {
              offset++;
              continue;
            }
            var end = value.indexOf("=", offset);
            if (end === -1) end = value.indexOf(";", offset);
            if (end === -1) end = value.length;
            var attr = trim(value.slice(offset, end)).toLowerCase();
            var attrValue = "";
            offset = end + 1;
            offset = skipWhitespace(value, offset);
            if (value[offset] === '"') {
              offset++;
              while (offset < length) {
                if (value[offset] === '"') {
                  offset++;
                  break;
                }
                if (value[offset] === "\\") {
                  offset++;
                }
                attrValue += value[offset];
                offset++;
              }
            } else {
              var end = offset + 1;
              while (!DELIMITER_PATTERN.test(value[end]) && end < length) {
                end++;
              }
              attrValue = value.slice(offset, end);
              offset = end;
            }
            if (ref[attr] && _Link.isSingleOccurenceAttr(attr)) {
            } else if (attr[attr.length - 1] === "*") {
              ref[attr] = _Link.parseExtendedValue(attrValue);
            } else {
              attrValue = attr === "type" ? attrValue.toLowerCase() : attrValue;
              if (ref[attr] != null) {
                if (Array.isArray(ref[attr])) {
                  ref[attr].push(attrValue);
                } else {
                  ref[attr] = [ref[attr], attrValue];
                }
              } else {
                ref[attr] = attrValue;
              }
            }
            switch (value[offset]) {
              case ",":
                state = STATE.IDLE;
                break;
              case ";":
                state = STATE.ATTR;
                break;
            }
            offset++;
          } else {
            throw new Error('Unknown parser state "' + state + '"');
          }
        }
        if (ref != null) {
          ref.rel != null ? this.refs.push(..._Link.expandRelations(ref)) : this.refs.push(ref);
        }
        ref = null;
        return this;
      }
      toString() {
        var refs = [];
        var link = "";
        var ref = null;
        for (var i = 0; i < this.refs.length; i++) {
          ref = this.refs[i];
          link = Object.keys(this.refs[i]).reduce(function(link2, attr) {
            if (attr === "uri") return link2;
            return link2 + "; " + _Link.formatAttribute(attr, ref[attr]);
          }, "<" + ref.uri + ">");
          refs.push(link);
        }
        return refs.join(", ");
      }
    };
    Link.isCompatibleEncoding = function(value) {
      return COMPATIBLE_ENCODING_PATTERN.test(value);
    };
    Link.parse = function(value, offset) {
      return new Link().parse(value, offset);
    };
    Link.isSingleOccurenceAttr = function(attr) {
      return attr === "rel" || attr === "type" || attr === "media" || attr === "title" || attr === "title*";
    };
    Link.isTokenAttr = function(attr) {
      return attr === "rel" || attr === "type" || attr === "anchor";
    };
    Link.escapeQuotes = function(value) {
      return value.replace(/"/g, '\\"');
    };
    Link.expandRelations = function(ref) {
      var rels = ref.rel.split(" ");
      return rels.map(function(rel) {
        var value = Object.assign({}, ref);
        value.rel = rel;
        return value;
      });
    };
    Link.parseExtendedValue = function(value) {
      var parts = /([^']+)?(?:'([^']*)')?(.+)/.exec(value);
      return {
        language: parts[2].toLowerCase(),
        encoding: Link.isCompatibleEncoding(parts[1]) ? null : parts[1].toLowerCase(),
        value: Link.isCompatibleEncoding(parts[1]) ? decodeURIComponent(parts[3]) : parts[3]
      };
    };
    Link.formatExtendedAttribute = function(attr, data) {
      var encoding = (data.encoding || "utf-8").toUpperCase();
      var language = data.language || "en";
      var encodedValue = "";
      if (Buffer.isBuffer(data.value) && Link.isCompatibleEncoding(encoding)) {
        encodedValue = data.value.toString(encoding);
      } else if (Buffer.isBuffer(data.value)) {
        encodedValue = data.value.toString("hex").replace(/[0-9a-f]{2}/gi, "%$1");
      } else {
        encodedValue = encodeURIComponent(data.value);
      }
      return attr + "=" + encoding + "'" + language + "'" + encodedValue;
    };
    Link.formatAttribute = function(attr, value) {
      if (Array.isArray(value)) {
        return value.map((item) => {
          return Link.formatAttribute(attr, item);
        }).join("; ");
      }
      if (attr[attr.length - 1] === "*" || typeof value !== "string") {
        return Link.formatExtendedAttribute(attr, value);
      }
      if (Link.isTokenAttr(attr)) {
        value = needsQuotes(value) ? '"' + Link.escapeQuotes(value) + '"' : Link.escapeQuotes(value);
      } else if (needsQuotes(value)) {
        value = encodeURIComponent(value);
        value = value.replace(/%20/g, " ").replace(/%2C/g, ",").replace(/%3B/g, ";");
        value = '"' + value + '"';
      }
      return attr + "=" + value;
    };
    module.exports = Link;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js
var require_FetchDocumentLoader = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchDocumentLoader = void 0;
    var ErrorCoded_1 = require_ErrorCoded();
    var http_link_header_1 = require_link();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var FetchDocumentLoader = class {
      constructor(fetcher) {
        this.fetcher = fetcher;
      }
      async load(url) {
        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: "application/ld+json" }) });
        if (response.ok && response.headers) {
          let mediaType = response.headers.get("Content-Type");
          if (mediaType) {
            const colonPos = mediaType.indexOf(";");
            if (colonPos > 0) {
              mediaType = mediaType.substr(0, colonPos);
            }
          }
          if (mediaType === "application/ld+json") {
            return await response.json();
          } else {
            if (response.headers.has("Link")) {
              let alternateUrl;
              response.headers.forEach((value, key) => {
                if (key === "link") {
                  const linkHeader = (0, http_link_header_1.parse)(value);
                  for (const link of linkHeader.get("type", "application/ld+json")) {
                    if (link.rel === "alternate") {
                      if (alternateUrl) {
                        throw new Error("Multiple JSON-LD alternate links were found on " + url);
                      }
                      alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                    }
                  }
                }
              });
              if (alternateUrl) {
                return this.load(alternateUrl);
              }
            }
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        } else {
          throw new Error(response.statusText || `Status code: ${response.status}`);
        }
      }
    };
    exports.FetchDocumentLoader = FetchDocumentLoader;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/Util.js
var require_Util = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var Util = class _Util {
      /**
       * Check if the given term is a valid compact IRI.
       * Otherwise, it may be an IRI.
       * @param {string} term A term.
       * @return {boolean} If it is a compact IRI.
       */
      static isCompactIri(term) {
        return term.indexOf(":") > 0 && !(term && term[0] === "#");
      }
      /**
       * Get the prefix from the given term.
       * @see https://json-ld.org/spec/latest/json-ld/#compact-iris
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {string} The prefix or null.
       */
      static getPrefix(term, context) {
        if (term && term[0] === "#") {
          return null;
        }
        const separatorPos = term.indexOf(":");
        if (separatorPos >= 0) {
          if (term.length > separatorPos + 1 && term.charAt(separatorPos + 1) === "/" && term.charAt(separatorPos + 2) === "/") {
            return null;
          }
          const prefix = term.substr(0, separatorPos);
          if (prefix === "_") {
            return null;
          }
          if (context[prefix]) {
            return prefix;
          }
        }
        return null;
      }
      /**
       * From a given context entry value, get the string value, or the @id field.
       * @param contextValue A value for a term in a context.
       * @return {string} The id value, or null.
       */
      static getContextValueId(contextValue) {
        if (contextValue === null || typeof contextValue === "string") {
          return contextValue;
        }
        const id = contextValue["@id"];
        return id ? id : null;
      }
      /**
       * Check if the given simple term definition (string-based value of a context term)
       * should be considered a prefix.
       * @param value A simple term definition value.
       * @param options Options that define the way how expansion must be done.
       */
      static isSimpleTermDefinitionPrefix(value, options) {
        return !_Util.isPotentialKeyword(value) && (options.allowPrefixNonGenDelims || typeof value === "string" && (value[0] === "_" || _Util.isPrefixIriEndingWithGenDelim(value)));
      }
      /**
       * Check if the given keyword is of the keyword format "@"1*ALPHA.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is of the keyword format.
       */
      static isPotentialKeyword(keyword) {
        return typeof keyword === "string" && _Util.KEYWORD_REGEX.test(keyword);
      }
      /**
       * Check if the given prefix ends with a gen-delim character.
       * @param {string} prefixIri A prefix IRI.
       * @return {boolean} If the given prefix IRI is valid.
       */
      static isPrefixIriEndingWithGenDelim(prefixIri) {
        return _Util.ENDS_WITH_GEN_DELIM.test(prefixIri);
      }
      /**
       * Check if the given context value can be a prefix value.
       * @param value A context value.
       * @return {boolean} If it can be a prefix value.
       */
      static isPrefixValue(value) {
        return value && (typeof value === "string" || value && typeof value === "object");
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return Boolean(iri && _Util.IRI_REGEX.test(iri));
      }
      /**
       * Check if the given IRI is valid, this includes the possibility of being a relative IRI.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIriWeak(iri) {
        return !!iri && iri[0] !== ":" && _Util.IRI_REGEX_WEAK.test(iri);
      }
      /**
       * Check if the given keyword is a defined according to the JSON-LD specification.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is valid.
       */
      static isValidKeyword(keyword) {
        return _Util.VALID_KEYWORDS[keyword];
      }
      /**
       * Check if the given term is protected in the context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {string} key A context term.
       * @return {boolean} If the given term has an @protected flag.
       */
      static isTermProtected(context, key) {
        const value = context[key];
        return !(typeof value === "string") && value && value["@protected"];
      }
      /**
       * Check if the given context has at least one protected term.
       * @param context A context.
       * @return If the context has a protected term.
       */
      static hasProtectedTerms(context) {
        for (const key of Object.keys(context)) {
          if (_Util.isTermProtected(context, key)) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check if the given key is an internal reserved keyword.
       * @param key A context key.
       */
      static isReservedInternalKeyword(key) {
        return key.startsWith("@__");
      }
      /**
       * Check if two objects are deepEqual to on another.
       * @param object1 The first object to test.
       * @param object2 The second object to test.
       */
      static deepEqual(object1, object2) {
        const objKeys1 = Object.keys(object1);
        const objKeys2 = Object.keys(object2);
        if (objKeys1.length !== objKeys2.length)
          return false;
        return objKeys1.every((key) => {
          const value1 = object1[key];
          const value2 = object2[key];
          return value1 === value2 || value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object" && this.deepEqual(value1, value2);
        });
      }
    };
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/;
    Util.IRI_REGEX_WEAK = /(?::[^:])|\//;
    Util.KEYWORD_REGEX = /^@[a-z]+$/i;
    Util.ENDS_WITH_GEN_DELIM = /[:/?#\[\]@]$/;
    Util.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;
    Util.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;
    Util.VALID_KEYWORDS = {
      "@annotation": true,
      "@base": true,
      "@container": true,
      "@context": true,
      "@direction": true,
      "@graph": true,
      "@id": true,
      "@import": true,
      "@included": true,
      "@index": true,
      "@json": true,
      "@language": true,
      "@list": true,
      "@nest": true,
      "@none": true,
      "@prefix": true,
      "@propagate": true,
      "@protected": true,
      "@reverse": true,
      "@set": true,
      "@type": true,
      "@value": true,
      "@version": true,
      "@vocab": true
    };
    Util.EXPAND_KEYS_BLACKLIST = [
      "@base",
      "@vocab",
      "@language",
      "@version",
      "@direction"
    ];
    Util.ALIAS_DOMAIN_BLACKLIST = [
      "@container",
      "@graph",
      "@id",
      "@index",
      "@list",
      "@nest",
      "@none",
      "@prefix",
      "@reverse",
      "@set",
      "@type",
      "@value",
      "@version"
    ];
    Util.ALIAS_RANGE_BLACKLIST = [
      "@context",
      "@preserve"
    ];
    Util.CONTAINERS = [
      "@list",
      "@set",
      "@index",
      "@language",
      "@graph",
      "@id",
      "@type"
    ];
    Util.CONTAINERS_1_0 = [
      "@list",
      "@set",
      "@index"
    ];
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js
var require_JsonLdContextNormalized = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded();
    var Util_1 = require_Util();
    var JsonLdContextNormalized = class {
      constructor(contextRaw) {
        this.contextRaw = contextRaw;
      }
      /**
       * @return The raw inner context.
       */
      getContextRaw() {
        return this.contextRaw;
      }
      /**
       * Expand the term or prefix of the given term if it has one,
       * otherwise return the term as-is.
       *
       * This will try to expand the IRI as much as possible.
       *
       * Iff in vocab-mode, then other references to other terms in the context can be used,
       * such as to `myTerm`:
       * ```
       * {
       *   "myTerm": "http://example.org/myLongTerm"
       * }
       * ```
       *
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,
       *                              otherwise it is considered a regular term that is expanded based on @base.
       * @param {IExpandOptions} options Options that define the way how expansion must be done.
       * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.
       * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).
       */
      expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {
        const contextValue = this.contextRaw[term];
        if (contextValue === null || contextValue && contextValue["@id"] === null) {
          return null;
        }
        let validIriMapping = true;
        if (contextValue && expandVocab) {
          const value = Util_1.Util.getContextValueId(contextValue);
          if (value && value !== term) {
            if (typeof value !== "string" || !Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value)) {
              if (!Util_1.Util.isPotentialKeyword(value)) {
                validIriMapping = false;
              }
            } else {
              return value;
            }
          }
        }
        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);
        const vocab = this.contextRaw["@vocab"];
        const vocabRelative = (!!vocab || vocab === "") && vocab.indexOf(":") < 0;
        const base = this.contextRaw["@base"];
        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);
        if (prefix) {
          const contextPrefixValue = this.contextRaw[prefix];
          const value = Util_1.Util.getContextValueId(contextPrefixValue);
          if (value) {
            if (typeof contextPrefixValue === "string" || !options.allowPrefixForcing) {
              if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {
                return term;
              }
            } else {
              if (value[0] !== "_" && !potentialKeyword && !contextPrefixValue["@prefix"] && !(term in this.contextRaw)) {
                return term;
              }
            }
            return value + term.substr(prefix.length + 1);
          }
        } else if (expandVocab && (vocab || vocab === "" || options.allowVocabRelativeToBase && (base && vocabRelative)) && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          if (vocabRelative) {
            if (options.allowVocabRelativeToBase) {
              return (vocab || base ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : "") + term;
            } else {
              throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
            }
          } else {
            return vocab + term;
          }
        } else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          return (0, relative_to_absolute_iri_1.resolve)(term, base);
        }
        if (validIriMapping) {
          return term;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
        }
      }
      /**
       * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.
       *
       * This will try to compact the IRI as much as possible.
       *
       * @param {string} iri An IRI to compact.
       * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,
       *                        otherwise it is considered a regular term that is compacted based on @base.
       * @return {string} The compacted term or the IRI as-is.
       */
      compactIri(iri, vocab) {
        if (vocab && this.contextRaw["@vocab"] && iri.startsWith(this.contextRaw["@vocab"])) {
          return iri.substr(this.contextRaw["@vocab"].length);
        }
        if (!vocab && this.contextRaw["@base"] && iri.startsWith(this.contextRaw["@base"])) {
          return iri.substr(this.contextRaw["@base"].length);
        }
        const shortestPrefixing = { prefix: "", suffix: iri };
        for (const key in this.contextRaw) {
          const value = this.contextRaw[key];
          if (value && !Util_1.Util.isPotentialKeyword(key)) {
            const contextIri = Util_1.Util.getContextValueId(value);
            if (iri.startsWith(contextIri)) {
              const suffix = iri.substr(contextIri.length);
              if (!suffix) {
                if (vocab) {
                  return key;
                }
              } else if (suffix.length < shortestPrefixing.suffix.length) {
                shortestPrefixing.prefix = key;
                shortestPrefixing.suffix = suffix;
              }
            }
          }
        }
        if (shortestPrefixing.prefix) {
          return shortestPrefixing.prefix + ":" + shortestPrefixing.suffix;
        }
        return iri;
      }
    };
    exports.JsonLdContextNormalized = JsonLdContextNormalized;
    exports.defaultExpandOptions = {
      allowPrefixForcing: true,
      allowPrefixNonGenDelims: false,
      allowVocabRelativeToBase: true
    };
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/ContextParser.js
var require_ContextParser = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/ContextParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextParser = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded();
    var FetchDocumentLoader_1 = require_FetchDocumentLoader();
    var JsonLdContextNormalized_1 = require_JsonLdContextNormalized();
    var Util_1 = require_Util();
    var ContextParser = class _ContextParser {
      constructor(options) {
        options = options || {};
        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();
        this.documentCache = {};
        this.validateContext = !options.skipValidation;
        this.expandContentTypeToBase = !!options.expandContentTypeToBase;
        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;
        this.redirectSchemaOrgHttps = "redirectSchemaOrgHttps" in options ? !!options.redirectSchemaOrgHttps : true;
      }
      /**
       * Validate the given @language value.
       * An error will be thrown if it is invalid.
       * @param value An @language value.
       * @param {boolean} strictRange If the string value should be strictly checked against a regex.
       * @param {string} errorCode The error code to emit on errors.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateLanguage(value, strictRange, errorCode) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);
        }
        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {
          if (strictRange) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Validate the given @direction value.
       * An error will be thrown if it is invalid.
       * @param value An @direction value.
       * @param {boolean} strictValues If the string value should be strictly checked against a regex.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateDirection(value, strictValues) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
        }
        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {
          if (strictValues) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Add an @id term for all @reverse terms.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       */
      idifyReverseTerms(context) {
        for (const key of Object.keys(context)) {
          let value = context[key];
          if (value && typeof value === "object") {
            if (value["@reverse"] && !value["@id"]) {
              if (typeof value["@reverse"] !== "string" || Util_1.Util.isValidKeyword(value["@reverse"])) {
                throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value["@reverse"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
              }
              value = context[key] = Object.assign(Object.assign({}, value), { "@id": value["@reverse"] });
              value["@id"] = value["@reverse"];
              if (Util_1.Util.isPotentialKeyword(value["@reverse"])) {
                delete value["@reverse"];
              } else {
                value["@reverse"] = true;
              }
            }
          }
        }
        return context;
      }
      /**
       * Expand all prefixed terms in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded
       *                                          via @base if @vocab is set to null.
       * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all
       * keys in the context will be expanded.
       */
      expandPrefixedTerms(context, expandContentTypeToBase, keys2) {
        const contextRaw = context.getContextRaw();
        for (const key of keys2 || Object.keys(contextRaw)) {
          if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {
            const keyValue = contextRaw[key];
            if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {
              if (key !== "@type" || typeof contextRaw[key] === "object" && !(contextRaw[key]["@protected"] || contextRaw[key]["@container"] === "@set")) {
                throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
              }
            }
            if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {
              throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);
            }
            if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue)) && keyValue["@prefix"] === true) {
              throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            while (Util_1.Util.isPrefixValue(contextRaw[key])) {
              const value = contextRaw[key];
              let changed = false;
              if (typeof value === "string") {
                contextRaw[key] = context.expandTerm(value, true);
                changed = changed || value !== contextRaw[key];
              } else {
                const id = value["@id"];
                const type = value["@type"];
                const canAddIdEntry = !("@prefix" in value) || Util_1.Util.isValidIri(key);
                if ("@id" in value) {
                  if (id !== void 0 && id !== null && typeof id === "string") {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": context.expandTerm(id, true) });
                    changed = changed || id !== contextRaw[key]["@id"];
                  }
                } else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {
                  const newId = context.expandTerm(key, true);
                  if (newId !== key) {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": newId });
                    changed = true;
                  }
                }
                if (type && typeof type === "string" && type !== "@vocab" && (!value["@container"] || !value["@container"]["@type"]) && canAddIdEntry) {
                  let expandedType = context.expandTerm(type, true);
                  if (expandContentTypeToBase && type === expandedType) {
                    expandedType = context.expandTerm(type, false);
                  }
                  if (expandedType !== type) {
                    changed = true;
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@type": expandedType });
                  }
                }
              }
              if (!changed) {
                break;
              }
            }
          }
        }
      }
      /**
       * Normalize the @language entries in the given context to lowercase.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} parseOptions The parsing options.
       */
      normalize(context, { processingMode, normalizeLanguageTags }) {
        if (normalizeLanguageTags || processingMode === 1) {
          for (const key of Object.keys(context)) {
            if (key === "@language" && typeof context[key] === "string") {
              context[key] = context[key].toLowerCase();
            } else {
              const value = context[key];
              if (value && typeof value === "object") {
                if (typeof value["@language"] === "string") {
                  const lowercase = value["@language"].toLowerCase();
                  if (lowercase !== value["@language"]) {
                    context[key] = Object.assign(Object.assign({}, value), { "@language": lowercase });
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Convert all @container strings and array values to hash-based values.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       */
      containersToHash(context) {
        for (const key of Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if (typeof value["@container"] === "string") {
              context[key] = Object.assign(Object.assign({}, value), { "@container": { [value["@container"]]: true } });
            } else if (Array.isArray(value["@container"])) {
              const newValue = {};
              for (const containerValue of value["@container"]) {
                newValue[containerValue] = true;
              }
              context[key] = Object.assign(Object.assign({}, value), { "@container": newValue });
            }
          }
        }
      }
      /**
       * Normalize and apply context-level @protected terms onto each term separately.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {number} processingMode The processing mode.
       */
      applyScopedProtected(context, { processingMode }, expandOptions) {
        if (processingMode && processingMode >= 1.1) {
          if (context["@protected"]) {
            for (const key of Object.keys(context)) {
              if (Util_1.Util.isReservedInternalKeyword(key)) {
                continue;
              }
              if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {
                const value = context[key];
                if (value && typeof value === "object") {
                  if (!("@protected" in context[key])) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@protected": true });
                  }
                } else {
                  context[key] = {
                    "@id": value,
                    "@protected": true
                  };
                  if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@prefix": true });
                  }
                }
              }
            }
            delete context["@protected"];
          }
        }
      }
      /**
       * Check if the given context inheritance does not contain any overrides of protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.
       * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.
       * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all
       * keys defined in contextAfter will be checked.
       */
      validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(contextAfter)) {
          if (Util_1.Util.isTermProtected(contextBefore, key)) {
            if (typeof contextAfter[key] === "string") {
              contextAfter[key] = { "@id": contextAfter[key], "@protected": true };
            } else {
              contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { "@protected": true });
            }
            if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {
              throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);
            }
          }
        }
      }
      /**
       * Validate the entries of the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options The parse options.
       */
      validate(context, { processingMode }) {
        for (const key of Object.keys(context)) {
          if (Util_1.Util.isReservedInternalKeyword(key)) {
            continue;
          }
          if (key === "") {
            throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
          }
          const value = context[key];
          const valueType = typeof value;
          if (Util_1.Util.isPotentialKeyword(key)) {
            switch (key.substr(1)) {
              case "vocab":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
                }
                break;
              case "base":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);
                }
                break;
              case "language":
                if (value !== null) {
                  _ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);
                }
                break;
              case "version":
                if (value !== null && valueType !== "number") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
                }
                break;
              case "direction":
                if (value !== null) {
                  _ContextParser.validateDirection(value, true);
                }
                break;
              case "propagate":
                if (processingMode === 1) {
                  throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
                }
                if (value !== null && valueType !== "boolean") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);
                }
                break;
            }
            if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {
              throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util.getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
            }
            continue;
          }
          if (value !== null) {
            switch (valueType) {
              case "string":
                if (Util_1.Util.getPrefix(value, context) === key) {
                  throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                }
                if (Util_1.Util.isValidIriWeak(key)) {
                  if (value === "@type") {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  } else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  }
                }
                break;
              case "object":
                if (!Util_1.Util.isCompactIri(key) && !("@id" in value) && (value["@type"] === "@id" ? !context["@base"] : !context["@vocab"])) {
                  throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                }
                for (const objectKey of Object.keys(value)) {
                  const objectValue = value[objectKey];
                  if (!objectValue) {
                    continue;
                  }
                  switch (objectKey) {
                    case "@id":
                      if (Util_1.Util.isValidKeyword(objectValue) && objectValue !== "@type" && objectValue !== "@id" && objectValue !== "@graph" && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.isValidIriWeak(key)) {
                        if (objectValue === "@type") {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        } else if (Util_1.Util.isValidIri(objectValue) && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        }
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.getPrefix(objectValue, context) === key) {
                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                      }
                      break;
                    case "@type":
                      if (value["@container"] === "@type" && objectValue !== "@id" && objectValue !== "@vocab") {
                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (objectValue !== "@id" && objectValue !== "@vocab" && (processingMode === 1 || objectValue !== "@json") && (processingMode === 1 || objectValue !== "@none") && (objectValue[0] === "_" || !Util_1.Util.isValidIri(objectValue))) {
                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      break;
                    case "@reverse":
                      if (typeof objectValue === "string" && value["@id"] && value["@id"] !== objectValue) {
                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':'${objectValue}' and '${value["@id"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      if ("@nest" in value) {
                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      break;
                    case "@container":
                      if (processingMode === 1) {
                        if (Object.keys(objectValue).length > 1 || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, must be only one of ${Util_1.Util.CONTAINERS_1_0.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      for (const containerValue of Object.keys(objectValue)) {
                        if (containerValue === "@list" && value["@reverse"]) {
                          throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                        }
                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), must be one of ${Util_1.Util.CONTAINERS.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      break;
                    case "@language":
                      _ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);
                      break;
                    case "@direction":
                      _ContextParser.validateDirection(objectValue, true);
                      break;
                    case "@prefix":
                      if (objectValue !== null && typeof objectValue !== "boolean") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);
                      }
                      if (!("@id" in value) && !Util_1.Util.isValidIri(key)) {
                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@index":
                      if (processingMode === 1 || !value["@container"] || !value["@container"]["@index"]) {
                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@nest":
                      if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);
                      }
                  }
                }
                break;
              default:
                throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
          }
        }
      }
      /**
       * Apply the @base context entry to the given context under certain circumstances.
       * @param context A context.
       * @param options Parsing options.
       * @param inheritFromParent If the @base value from the parent context can be inherited.
       * @return The given context.
       */
      applyBaseEntry(context, options, inheritFromParent) {
        if (typeof context === "string") {
          return context;
        }
        if (inheritFromParent && !("@base" in context) && options.parentContext && typeof options.parentContext === "object" && "@base" in options.parentContext) {
          context["@base"] = options.parentContext["@base"];
          if (options.parentContext["@__baseDocument"]) {
            context["@__baseDocument"] = true;
          }
        }
        if (options.baseIRI && !options.external) {
          if (!("@base" in context)) {
            context["@base"] = options.baseIRI;
            context["@__baseDocument"] = true;
          } else if (context["@base"] !== null && typeof context["@base"] === "string" && !Util_1.Util.isValidIri(context["@base"])) {
            context["@base"] = (0, relative_to_absolute_iri_1.resolve)(context["@base"], options.parentContext && options.parentContext["@base"] || options.baseIRI);
          }
        }
        return context;
      }
      /**
       * Resolve relative context IRIs, or return full IRIs as-is.
       * @param {string} contextIri A context IRI.
       * @param {string} baseIRI A base IRI.
       * @return {string} The normalized context IRI.
       */
      normalizeContextIri(contextIri, baseIRI) {
        if (!Util_1.Util.isValidIri(contextIri)) {
          try {
            contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);
          } catch (_a) {
            throw new Error(`Invalid context IRI: ${contextIri}`);
          }
        }
        if (this.redirectSchemaOrgHttps && contextIri.startsWith("http://schema.org")) {
          contextIri = "https://schema.org/";
        }
        return contextIri;
      }
      /**
       * Parse scoped contexts in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options Parsing options.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all
       * keys in the context will be iterated over.
       */
      async parseInnerContexts(context, options, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if ("@context" in value && value["@context"] !== null && !options.ignoreScopedContexts) {
              if (this.validateContext) {
                try {
                  const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });
                  delete parentContext[key]["@context"];
                  await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));
                } catch (e) {
                  throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);
                }
              }
              context[key] = Object.assign(Object.assign({}, value), { "@context": (await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context }))).getContextRaw() });
            }
          }
        }
        return context;
      }
      async parse(context, options = {}, internalOptions = {}) {
        const { baseIRI, parentContext, external, processingMode = _ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing } = options;
        const remoteContexts = options.remoteContexts || {};
        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {
          throw new ErrorCoded_1.ErrorCoded("Detected an overflow in remote context inclusions: " + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);
        }
        if (context === null || context === void 0) {
          if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {
            throw new ErrorCoded_1.ErrorCoded("Illegal context nullification when terms are protected", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);
          }
          return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));
        } else if (typeof context === "string") {
          const contextIri = this.normalizeContextIri(context, baseIRI);
          const overriddenLoad = this.getOverriddenLoad(contextIri, options);
          if (overriddenLoad) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);
          }
          const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));
          this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);
          return parsedStringContext;
        } else if (Array.isArray(context)) {
          const contextIris = [];
          const contexts = await Promise.all(context.map((subContext, i) => {
            if (typeof subContext === "string") {
              const contextIri = this.normalizeContextIri(subContext, baseIRI);
              contextIris[i] = contextIri;
              const overriddenLoad = this.getOverriddenLoad(contextIri, options);
              if (overriddenLoad) {
                return overriddenLoad;
              }
              return this.load(contextIri);
            } else {
              return subContext;
            }
          }));
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);
          }
          const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise.then((accContext) => this.parse(
            contextEntry,
            Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }),
            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers
            {
              skipValidation: i < contexts.length - 1
            }
          )), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));
          this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);
          return reducedContexts;
        } else if (typeof context === "object") {
          if ("@context" in context) {
            return await this.parse(context["@context"], options);
          }
          context = Object.assign({}, context);
          if (external) {
            delete context["@base"];
          }
          this.applyBaseEntry(context, options, true);
          this.containersToHash(context);
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);
          }
          let importContext = {};
          if ("@import" in context) {
            if (processingMode >= 1.1) {
              if (typeof context["@import"] !== "string") {
                throw new ErrorCoded_1.ErrorCoded("An @import value must be a string, but got " + typeof context["@import"], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);
              }
              importContext = await this.loadImportContext(this.normalizeContextIri(context["@import"], baseIRI));
              delete context["@import"];
            } else {
              throw new ErrorCoded_1.ErrorCoded("Context importing is not supported in JSON-LD 1.0", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
            }
          }
          this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const newContext = Object.assign(importContext, context);
          this.idifyReverseTerms(newContext);
          this.normalize(newContext, { processingMode, normalizeLanguageTags });
          this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const keys2 = Object.keys(newContext);
          const overlappingKeys = [];
          if (typeof parentContext === "object") {
            for (const key in parentContext) {
              if (key in newContext) {
                overlappingKeys.push(key);
              } else {
                newContext[key] = parentContext[key];
              }
            }
          }
          await this.parseInnerContexts(newContext, options, keys2);
          const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);
          if ((newContext && newContext["@version"] || _ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1 && (context["@vocab"] && typeof context["@vocab"] === "string" || context["@vocab"] === "")) {
            if (parentContext && "@vocab" in parentContext && context["@vocab"].indexOf(":") < 0) {
              newContext["@vocab"] = parentContext["@vocab"] + context["@vocab"];
            } else if (Util_1.Util.isCompactIri(context["@vocab"]) || context["@vocab"] in newContext) {
              newContext["@vocab"] = newContextWrapped.expandTerm(context["@vocab"], true);
            }
          }
          this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys2);
          if (!ignoreProtection && parentContext && processingMode >= 1.1) {
            this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);
          }
          if (this.validateContext && !internalOptions.skipValidation) {
            this.validate(newContext, { processingMode });
          }
          return newContextWrapped;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);
        }
      }
      /**
       * Fetch the given URL as a raw JSON-LD context.
       * @param url An URL.
       * @return A promise resolving to a raw JSON-LD context.
       */
      async load(url) {
        const cached = this.documentCache[url];
        if (cached) {
          return cached;
        }
        let document;
        try {
          document = await this.documentLoader.load(url);
        } catch (e) {
          throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);
        }
        if (!("@context" in document)) {
          throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        return this.documentCache[url] = document["@context"];
      }
      /**
       * Override the given context that may be loaded.
       *
       * This will check whether or not the url is recursively being loaded.
       * @param url An URL.
       * @param options Parsing options.
       * @return An overridden context, or null.
       *         Optionally an error can be thrown if a cyclic context is detected.
       */
      getOverriddenLoad(url, options) {
        if (url in (options.remoteContexts || {})) {
          if (options.ignoreRemoteScopedContexts) {
            return url;
          } else {
            throw new ErrorCoded_1.ErrorCoded("Detected a cyclic context inclusion of " + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);
          }
        }
        return null;
      }
      /**
       * Load an @import'ed context.
       * @param importContextIri The full URI of an @import value.
       */
      async loadImportContext(importContextIri) {
        let importContext = await this.load(importContextIri);
        if (typeof importContext !== "object" || Array.isArray(importContext)) {
          throw new ErrorCoded_1.ErrorCoded("An imported context must be a single object: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        if ("@import" in importContext) {
          throw new ErrorCoded_1.ErrorCoded("An imported context can not import another context: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
        }
        importContext = Object.assign({}, importContext);
        this.containersToHash(importContext);
        return importContext;
      }
    };
    ContextParser.DEFAULT_PROCESSING_MODE = 1.1;
    exports.ContextParser = ContextParser;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/IDocumentLoader.js
var require_IDocumentLoader = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/IDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/JsonLdContext.js
var require_JsonLdContext = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/lib/JsonLdContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/index.js
var require_jsonld_context_parser = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/node_modules/jsonld-context-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ContextParser(), exports);
    __exportStar(require_ErrorCoded(), exports);
    __exportStar(require_FetchDocumentLoader(), exports);
    __exportStar(require_IDocumentLoader(), exports);
    __exportStar(require_JsonLdContext(), exports);
    __exportStar(require_JsonLdContextNormalized(), exports);
    __exportStar(require_Util(), exports);
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/Util.js
var require_Util2 = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var Util = class {
      constructor(settings) {
        this.nodeHandlers = {};
        this.nodeValueHandlers = {};
        this.directiveNodeHandlers = {};
        this.settings = settings;
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.operationFactory = new sparqlalgebrajs_1.Factory(this.dataFactory);
        this.contextParser = new jsonld_context_parser_1.ContextParser();
      }
      /**
       * Register a new {@link NodeHandlerAdapter}.
       * @param {NodeHandlerAdapter<any>} nodeHandler A handler for converting GraphQL nodes to operations.
       */
      registerNodeHandler(nodeHandler) {
        this.nodeHandlers[nodeHandler.targetKind] = nodeHandler;
      }
      /**
       * Register a new {@link NodeValueHandlerAdapter}
       * @param {NodeValueHandlerAdapter<any>} nodeValueHandler A handler for converting GraphQL value nodes
       *                                                        to terms and patterns.
       */
      registerNodeValueHandler(nodeValueHandler) {
        this.nodeValueHandlers[nodeValueHandler.targetKind] = nodeValueHandler;
      }
      /**
       * Register a new {@link DirectiveNodeHandlerAdapter}
       * @param {DirectiveNodeHandlerAdapter} directiveNodeHandler A handler for handling GraphQL directives.
       */
      registerDirectiveNodeHandler(directiveNodeHandler) {
        this.directiveNodeHandlers[directiveNodeHandler.targetKind] = directiveNodeHandler;
      }
      /**
       * Get the operation for the given GraphQL node.
       * @param {T} node A GraphQL node.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {Operation} A SPARQL algebra operation.
       */
      handleNode(node, convertContext) {
        const nodeHandler = this.nodeHandlers[node.kind];
        if (!nodeHandler) {
          throw new Error(`Unsupported GraphQL node '${node.kind}'`);
        }
        return nodeHandler.handle(node, convertContext);
      }
      /**
       * Get the terms and patterns for the given value node.
       * @param {T} node A GraphQL node.
       * @param {string} fieldName The name of the field or argument in which the value was encapsulated.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {IValueNodeHandlerOutput} The RDF terms and patterns.
       */
      handleNodeValue(node, fieldName, convertContext) {
        const nodeValueHandler = this.nodeValueHandlers[node.kind];
        if (!nodeValueHandler) {
          throw new Error(`Unsupported GraphQL value node '${node.kind}'`);
        }
        return nodeValueHandler.handle(node, fieldName, convertContext);
      }
      /**
       * Get the handler output for the given directive.
       * @param {IDirectiveContext} directiveContext The current directive context.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {IDirectiveNodeHandlerOutput} The directive node handler output or null.
       */
      handleDirectiveNode(directiveContext, convertContext) {
        const directiveNodeHandler = this.directiveNodeHandlers[directiveContext.directive.name.value];
        if (!directiveNodeHandler) {
          return null;
        }
        return directiveNodeHandler.handle(directiveContext, convertContext);
      }
      /**
       * Join the given array of operations.
       * If all operations are BGPs, then a single big BGP with all patterns from the given BGPs will be created.
       * @param {Operation[]} operations An array of operations.
       * @return {Operation} A single joined operation.
       */
      joinOperations(operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        const bgps = [];
        const nonBgps = [];
        for (const operation of operations) {
          if (operation.type === "bgp") {
            bgps.push(operation);
          } else {
            nonBgps.push(operation);
          }
        }
        if (bgps.length === operations.length) {
          return this.joinOperationsAsBgp(bgps);
        } else if (bgps.length === operations.length - 1 && nonBgps[0].type === "leftjoin" && nonBgps[0].input[0].type === "bgp") {
          const originalLeftJoin = nonBgps[0];
          bgps.push(originalLeftJoin.input[0]);
          return this.operationFactory.createLeftJoin(this.joinOperationsAsBgp(bgps), originalLeftJoin.input[1]);
        } else if (nonBgps.length === operations.length) {
          return this.joinOperationsAsNestedJoin(nonBgps);
        } else {
          return this.joinOperationsAsNestedJoin([
            this.joinOperationsAsBgp(bgps),
            this.joinOperationsAsNestedJoin(nonBgps)
          ]);
        }
      }
      joinOperationsAsBgp(operations) {
        return this.operationFactory.createBgp([].concat.apply([], operations.map((op) => op.patterns)));
      }
      joinOperationsAsNestedJoin(operations) {
        return this.operationFactory.createJoin(operations);
      }
      /**
       * Append a field's label to a path.
       * @param {string[]} path A path.
       * @param {string} fieldLabel A field label.
       * @return {string[]} A new path array.
       */
      appendFieldToPath(path, fieldLabel) {
        return path.concat([fieldLabel]);
      }
      /**
       * Get the label of a field by taking into account the alias.
       * @param {FieldNode} field A field node.
       * @return {string} The field name or alias.
       */
      getFieldLabel(field) {
        return (field.alias ? field.alias : field.name).value;
      }
      /**
       * Convert a field node to a variable built from the node name and the current path inside the context.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @param {string} variableDelimiter A variable delimiter.
       * @return {Variable} A variable.
       */
      nameToVariable(fieldLabel, convertContext) {
        return this.dataFactory.variable((convertContext.path.length ? convertContext.path.join(this.settings.variableDelimiter) + this.settings.variableDelimiter : "") + fieldLabel);
      }
      /**
       * Convert a GraphQL term into a URI using the given context.
       * @param {string} value A GraphQL term.
       * @param {IContext} context A JSON-LD context.
       * @return {NamedNode} A named node.
       */
      valueToNamedNode(value, context) {
        const contextValue = context.expandTerm(value, true);
        if (this.settings.requireContext && !contextValue) {
          throw new Error("No context entry was found for " + value);
        }
        return this.dataFactory.namedNode(contextValue || value);
      }
      /**
       * Get an argument by name.
       * This will return null if the argument could not be found.
       * @param {ReadonlyArray<ArgumentNode>} args Arguments or null.
       * @param {string} name The name of an argument.
       * @return {ArgumentNode} The named argument.
       */
      getArgument(args, name) {
        if (args) {
          for (const argument of args) {
            if (argument.name.value === name) {
              return argument;
            }
          }
        }
      }
      /**
       * Create a pattern with an rdf:type predicate.
       * @param {Term} subject The subject.
       * @param {NamedTypeNode} typeCondition The object name.
       * @param {IConvertContext} convertContext A convert context.
       * @return {Pattern} A pattern.
       */
      newTypePattern(subject, typeCondition, convertContext) {
        return this.operationFactory.createPattern(subject, this.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), this.valueToNamedNode(typeCondition.name.value, convertContext.context), convertContext.graph);
      }
      /**
       * Create a quad pattern when the predicate is a name node that needs to be translated using the context.
       * @param {Term} subject The subject.
       * @param {NameNode} predicateName The name node for the predicate.
       * @param {Term} object The object.
       * @param {Term} graph The graph.
       * @param {IContext} context A context.
       * @return {Pattern} A quad pattern.
       */
      createQuadPattern(subject, predicateName, object, graph, context) {
        const predicate = this.valueToNamedNode(predicateName.value, context);
        if (context && context.getContextRaw()[predicateName.value] && context.getContextRaw()[predicateName.value]["@reverse"]) {
          return this.operationFactory.createPattern(object, predicate, subject, graph);
        }
        return this.operationFactory.createPattern(subject, predicate, object, graph);
      }
      /**
       * Create a quad path when the predicate is a list node with field alternatives
       * that need to be translated using the context.
       * @param {Term} subject The subject.
       * @param {NameNode} predicateName The name node for the predicate.
       * @param {Term} object The object.
       * @param {Term} graph The graph.
       * @param {IContext} context A context.
       * @return {Path} A quad property path.
       */
      createQuadPath(subject, predicateName, predicateAlternatives, object, graph, context) {
        const predicateInitial = this.valueToNamedNode(predicateName.value, context);
        let pathSymbol = this.operationFactory.createLink(predicateInitial);
        for (const predicateAlternative of predicateAlternatives.values) {
          if (predicateAlternative.kind !== "EnumValue") {
            throw new Error("Invalid value type for 'alt' argument, must be EnumValue, but got " + predicateAlternative.kind);
          }
          pathSymbol = this.operationFactory.createAlt([
            pathSymbol,
            this.operationFactory.createLink(this.valueToNamedNode(predicateAlternative.value, context))
          ]);
        }
        if (context && context.getContextRaw()[predicateName.value] && context.getContextRaw()[predicateName.value]["@reverse"]) {
          return this.operationFactory.createPath(object, pathSymbol, subject, graph);
        }
        return this.operationFactory.createPath(subject, pathSymbol, object, graph);
      }
    };
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/Converter.js
var require_Converter = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/Converter.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Converter = void 0;
    var language_1 = (init_language(), __toCommonJS(language_exports));
    var handler_1 = require_handler();
    var directivenode_1 = require_directivenode();
    var IConvertContext_1 = require_IConvertContext();
    var Util_1 = require_Util2();
    var Converter = class _Converter {
      constructor(settings) {
        settings = settings || {};
        settings.variableDelimiter = settings.variableDelimiter || "_";
        settings.expressionVariableCounter = settings.expressionVariableCounter || 0;
        this.util = new Util_1.Util(settings);
        this.initializeNodeHandlers(settings);
      }
      static registerNodeHandlers(util, settings) {
        util.registerNodeHandler(new handler_1.NodeHandlerDocument(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerDefinitionOperation(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerDefinitionFragment(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionFragmentSpread(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionInlineFragment(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionField(util, settings));
      }
      static registerNodeValueHandlers(util, settings) {
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerVariable(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerInt(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerFloat(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerString(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerBoolean(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerNull(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerEnum(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerList(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerObject(util, settings));
      }
      static registerDirectiveNodeHandlers(util, settings) {
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerInclude(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerOptional(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerPlural(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerSingle(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerSkip(util, settings));
      }
      /**
       * Translates a GraphQL query into SPARQL algebra.
       * @param {string | DocumentNode} graphqlQuery A GraphQL query string or node.
       * @param {IContext} context A JSON-LD context.
       * @param {IConvertOptions} options An options object.
       * @return {Promise<Operation>} A promise resolving to an operation.
       */
      graphqlToSparqlAlgebra(graphqlQuery, context, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.graphqlToSparqlAlgebraRawContext(graphqlQuery, yield this.util.contextParser.parse(context), options);
        });
      }
      /**
       * Translates a GraphQL query into SPARQL algebra.
       * @param {string | DocumentNode} graphqlQuery A GraphQL query string or node.
       * @param {IContext} context A JSON-LD context.
       * @param {IConvertOptions} options An options object.
       * @return {Operation} An operation.
       */
      graphqlToSparqlAlgebraRawContext(graphqlQuery, context, options) {
        options = options || {};
        const document = typeof graphqlQuery === "string" ? (0, language_1.parse)(graphqlQuery) : graphqlQuery;
        const fragmentDefinitions = this.indexFragments(document);
        const convertContext = {
          context,
          fragmentDefinitions,
          graph: this.util.dataFactory.defaultGraph(),
          path: [],
          singularizeState: IConvertContext_1.SingularizeState.PLURAL,
          singularizeVariables: options.singularizeVariables || {},
          subject: null,
          terminalVariables: [],
          variablesDict: options.variablesDict || {},
          variablesMetaDict: {}
        };
        return this.util.handleNode(document, convertContext);
      }
      /**
       * Create an index of all fragment definitions in the given document.
       *
       * This will assign a new array of definition nodes without fragment definition.
       *
       * @param {DocumentNode} document A document node.
       * @return {{[p: string]: FragmentDefinitionNode}} An index of fragment definition nodes.
       */
      indexFragments(document) {
        const fragmentDefinitions = {};
        const newDefinitions = [];
        for (const definition of document.definitions) {
          if (definition.kind === "FragmentDefinition") {
            fragmentDefinitions[definition.name.value] = definition;
          } else {
            newDefinitions.push(definition);
          }
        }
        document.definitions = newDefinitions;
        return fragmentDefinitions;
      }
      initializeNodeHandlers(settings) {
        _Converter.registerNodeHandlers(this.util, settings);
        _Converter.registerNodeValueHandlers(this.util, settings);
        _Converter.registerDirectiveNodeHandlers(this.util, settings);
      }
    };
    exports.Converter = Converter;
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/lib/IConvertSettings.js
var require_IConvertSettings = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/lib/IConvertSettings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/graphql-to-sparql/index.js
var require_graphql_to_sparql = __commonJS({
  "../../lipdjs/node_modules/graphql-to-sparql/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_handler(), exports);
    __exportStar(require_Converter(), exports);
    __exportStar(require_IConvertContext(), exports);
    __exportStar(require_IConvertSettings(), exports);
    __exportStar(require_Util2(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-parse-graphql/lib/ActorQueryParseGraphql.js
var require_ActorQueryParseGraphql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-parse-graphql/lib/ActorQueryParseGraphql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParseGraphql = void 0;
    var bus_query_parse_1 = require_lib29();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var graphql_to_sparql_1 = require_graphql_to_sparql();
    var ActorQueryParseGraphql = class extends bus_query_parse_1.ActorQueryParse {
      constructor(args) {
        super(args);
        this.graphqlToSparql = new graphql_to_sparql_1.Converter({ requireContext: true });
      }
      async test(action) {
        var _a;
        if (((_a = action.queryFormat) == null ? void 0 : _a.language) !== "graphql") {
          return (0, core_1.failTest)("This actor can only parse GraphQL queries");
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const context = action.context.get(context_entries_1.KeysInitQuery.jsonLdContext) || {};
        const options = {
          // eslint-disable-next-line ts/no-unnecessary-type-assertion
          singularizeVariables: action.context.get(context_entries_1.KeysInitQuery.graphqlSingularizeVariables)
        };
        return { operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options) };
      }
    };
    exports.ActorQueryParseGraphql = ActorQueryParseGraphql;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-parse-graphql/lib/index.js
var require_lib31 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-parse-graphql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParseGraphql(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTyped.js
var require_ActorAbstractMediaTyped = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractMediaTyped = void 0;
    var core_1 = require_lib();
    var ActorAbstractMediaTyped = class extends core_1.Actor {
      constructor(args) {
        super(args);
      }
      async run(action) {
        if ("handle" in action) {
          const typedAction = action;
          return { handle: await this.runHandle(typedAction.handle, typedAction.handleMediaType, action.context) };
        }
        if ("mediaTypes" in action) {
          return { mediaTypes: await this.getMediaTypes(action.context) };
        }
        if ("mediaTypeFormats" in action) {
          return { mediaTypeFormats: await this.getMediaTypeFormats(action.context) };
        }
        throw new Error("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided");
      }
      async test(action) {
        if ("handle" in action) {
          const typedAction = action;
          return (await this.testHandle(typedAction.handle, typedAction.handleMediaType, action.context)).map((handle) => ({ handle }));
        }
        if ("mediaTypes" in action) {
          return (await this.testMediaType(action.context)).map((mediaTypes) => ({ mediaTypes }));
        }
        if ("mediaTypeFormats" in action) {
          return (await this.testMediaTypeFormats(action.context)).map((mediaTypeFormats) => ({ mediaTypeFormats }));
        }
        return (0, core_1.failTest)("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided");
      }
    };
    exports.ActorAbstractMediaTyped = ActorAbstractMediaTyped;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTypedFixed.js
var require_ActorAbstractMediaTypedFixed = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTypedFixed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractMediaTypedFixed = void 0;
    var core_1 = require_lib();
    var ActorAbstractMediaTyped_1 = require_ActorAbstractMediaTyped();
    var ActorAbstractMediaTypedFixed = class extends ActorAbstractMediaTyped_1.ActorAbstractMediaTyped {
      constructor(args) {
        super(args);
        const scale = this.priorityScale || this.priorityScale === 0 ? this.priorityScale : 1;
        if (this.mediaTypePriorities) {
          for (const [_index, [key, value]] of Object.entries(this.mediaTypePriorities).entries()) {
            this.mediaTypePriorities[key] = scale * value;
          }
        }
        this.mediaTypePriorities = Object.freeze(this.mediaTypePriorities);
        this.mediaTypeFormats = Object.freeze(this.mediaTypeFormats);
      }
      async testHandle(action, mediaType, context) {
        if (!mediaType || !(mediaType in this.mediaTypePriorities)) {
          return (0, core_1.failTest)(`Unrecognized media type: ${mediaType}`);
        }
        return await this.testHandleChecked(action, context);
      }
      async testMediaType(_context) {
        return (0, core_1.passTestVoid)();
      }
      async getMediaTypes(_context) {
        return this.mediaTypePriorities;
      }
      async testMediaTypeFormats(_context) {
        return (0, core_1.passTestVoid)();
      }
      async getMediaTypeFormats(_context) {
        return this.mediaTypeFormats;
      }
    };
    exports.ActorAbstractMediaTypedFixed = ActorAbstractMediaTypedFixed;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/index.js
var require_lib32 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-mediatyped/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorAbstractMediaTyped(), exports);
    __exportStar(require_ActorAbstractMediaTypedFixed(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerialize.js
var require_ActorQueryResultSerialize = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerialize = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var ActorQueryResultSerialize = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTyped {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryResultSerialize = ActorQueryResultSerialize;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerializeFixedMediaTypes.js
var require_ActorQueryResultSerializeFixedMediaTypes = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerializeFixedMediaTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeFixedMediaTypes = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var core_1 = require_lib();
    var ActorQueryResultSerializeFixedMediaTypes = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTypedFixed {
      /* eslint-disable max-len */
      /**
       * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor
       * @param args -
       *   \ @defaultNested {<cbqrs:components/ActorQueryResultSerialize.jsonld#ActorQueryResultSerialize_default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}} busFailMessage
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(_action, _context) {
        return (0, core_1.passTestVoid)();
      }
    };
    exports.ActorQueryResultSerializeFixedMediaTypes = ActorQueryResultSerializeFixedMediaTypes;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/index.js
var require_lib33 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-result-serialize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerialize(), exports);
    __exportStar(require_ActorQueryResultSerializeFixedMediaTypes(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-json/lib/ActorQueryResultSerializeJson.js
var require_ActorQueryResultSerializeJson = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-json/lib/ActorQueryResultSerializeJson.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeJson = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var asynciterator_1 = require_asynciterator();
    var RdfString = require_rdf_string();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeJson = class extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/json": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/json": "https://comunica.linkeddatafragments.org/#results_JSON"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async testHandleChecked(action, _context) {
        if (!["bindings", "quads", "boolean"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings or quad streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        if (action.type === "bindings" || action.type === "quads") {
          let stream = action.type === "bindings" ? (0, asynciterator_1.wrap)(action.bindingsStream).map((element) => JSON.stringify(Object.fromEntries([...element].map(([key, value]) => [key.value, RdfString.termToString(value)])))) : (0, asynciterator_1.wrap)(action.quadStream).map((element) => JSON.stringify(RdfString.quadToStringQuad(element)));
          let empty = true;
          stream = stream.map((element) => {
            const ret = `${empty ? "" : ","}
${element}`;
            empty = false;
            return ret;
          }).prepend(["["]).append(["\n]\n"]);
          data.wrap(stream);
        } else {
          try {
            data.push(`${JSON.stringify(await action.execute())}
`);
            data.push(null);
          } catch (error) {
            setTimeout(() => data.emit("error", error));
          }
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeJson = ActorQueryResultSerializeJson;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-json/lib/index.js
var require_lib34 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-json/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeJson(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-simple/lib/ActorQueryResultSerializeSimple.js
var require_ActorQueryResultSerializeSimple = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-simple/lib/ActorQueryResultSerializeSimple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSimple = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeSimple = class _ActorQueryResultSerializeSimple extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "simple": 0.9 }} mediaTypePriorities
       *   \ @defaultNested {{ "simple": "https://comunica.linkeddatafragments.org/#results_simple" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async testHandleChecked(action, _context) {
        if (!["bindings", "quads", "boolean", "void"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings streams, quad streams, booleans, or updates.");
        }
        return (0, core_1.passTestVoid)();
      }
      static termToString(term) {
        return term.termType === "Quad" ? (0, rdf_string_1.termToString)(term) : term.value;
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        if (action.type === "bindings") {
          data.wrap(action.bindingsStream.map((bindings) => `${[...bindings].map(([key, value]) => `?${key.value}: ${_ActorQueryResultSerializeSimple.termToString(value)}`).join("\n")}

`));
        } else if (action.type === "quads") {
          data.wrap(action.quadStream.map((quad) => `subject: ${_ActorQueryResultSerializeSimple.termToString(quad.subject)}
predicate: ${_ActorQueryResultSerializeSimple.termToString(quad.predicate)}
object: ${_ActorQueryResultSerializeSimple.termToString(quad.object)}
graph: ${_ActorQueryResultSerializeSimple.termToString(quad.graph)}

`));
        } else {
          data.wrap((0, asynciterator_1.wrap)(action.type === "boolean" ? action.execute().then((value) => [`${value}
`]) : action.execute().then(() => ["ok\n"])));
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSimple = ActorQueryResultSerializeSimple;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-simple/lib/index.js
var require_lib35 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-simple/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSimple(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/ActorQueryResultSerializeSparqlCsv.js
var require_ActorQueryResultSerializeSparqlCsv = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/ActorQueryResultSerializeSparqlCsv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlCsv = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeSparqlCsv = class _ActorQueryResultSerializeSparqlCsv extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/csv": 0.75
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/csv": "http://www.w3.org/ns/formats/SPARQL_Results_CSV"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its CSV representation.
       * @param {RDF.Term} value An RDF term.
       * @return {string} A string representation of the given value.
       */
      static bindingToCsvBindings(value) {
        if (!value) {
          return "";
        }
        let stringValue = value.value;
        if (value.termType === "Literal") {
          stringValue = `${stringValue}`;
        } else if (value.termType === "BlankNode") {
          stringValue = `_:${stringValue}`;
        } else if (value.termType === "Quad") {
          let object = _ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.object);
          if (value.object.termType === "Literal") {
            object = `"${object.replaceAll('"', '""')}"`;
          }
          stringValue = `<< ${_ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.subject)} ${_ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.predicate)} ${object} >>`;
        } else {
          stringValue = `<${stringValue}>`;
        }
        if (/[",\n\r]/u.test(stringValue)) {
          stringValue = `"${stringValue.replaceAll('"', '""')}"`;
        }
        return stringValue;
      }
      async testHandleChecked(action, _context) {
        if (action.type !== "bindings") {
          return (0, core_1.failTest)("This actor can only handle bindings streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType, _context) {
        const bindingsAction = action;
        const data = new readable_stream_1.Readable();
        const metadata = await bindingsAction.metadata();
        data.push(`${metadata.variables.map((variable) => variable.variable.value).join(",")}\r
`);
        data.wrap(bindingsAction.bindingsStream.map((bindings) => `${metadata.variables.map((key) => _ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(bindings.get(key.variable))).join(",")}\r
`));
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlCsv = ActorQueryResultSerializeSparqlCsv;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/index.js
var require_lib36 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlCsv(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-string-ttl/lib/TermUtil.js
var require_TermUtil3 = __commonJS({
  "../../lipdjs/node_modules/rdf-string-ttl/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringQuadToQuad = exports.quadToStringQuad = exports.stringToTerm = exports.getLiteralLanguage = exports.getLiteralType = exports.getLiteralValue = exports.termToString = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return `<${escapeIRI(term.value)}>`;
        case "BlankNode":
          return `_:${term.value}`;
        case "Literal": {
          const literalValue = term;
          return `"${escapeStringRDF(literalValue.value)}"${literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" ? `^^<${literalValue.datatype.value}>` : ""}${literalValue.language ? `@${literalValue.language}` : ""}`;
        }
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : ` ${termToString(term.graph)}`}>>`;
        case "Variable":
          return `?${term.value}`;
        case "DefaultGraph":
          return term.value;
      }
    }
    exports.termToString = termToString;
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"((\^\^.*)|(@.*))?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1].replace(/\\"/ug, '"');
    }
    exports.getLiteralValue = getLiteralValue;
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^<([^"]+)>|(@)[^@"]+)?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    exports.getLiteralType = getLiteralType;
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1] ? match[1].toLowerCase() : "";
    }
    exports.getLiteralLanguage = getLiteralLanguage;
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || value.length === 0) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.slice(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.slice(1));
        case '"': {
          const language = getLiteralLanguage(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language || type);
        }
        case "<":
        default:
          if (value.startsWith("<<") && value.endsWith(">>")) {
            const terms = value.slice(2, -2);
            const stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            for (let i = 0; i < terms.length; i++) {
              const char = terms[i];
              if (char === "<") {
                ignoreTags++;
              }
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error(`Found closing tag without opening tag in ${value}`);
                } else {
                  ignoreTags--;
                }
              }
              if (char === " " && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i));
                lastIndex = i + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error(`Found opening tag without closing tag in ${value}`);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error(`Nested quad syntax error ${value}`);
            }
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          if (!value.startsWith("<") || !value.endsWith(">")) {
            throw new Error(`Detected invalid iri for named node (must be wrapped in <>): ${value}`);
          }
          return dataFactory.namedNode(value.slice(1, -1));
      }
    }
    exports.stringToTerm = stringToTerm;
    function quadToStringQuad(quad) {
      return {
        subject: termToString(quad.subject),
        predicate: termToString(quad.predicate),
        object: termToString(quad.object),
        graph: termToString(quad.graph)
      };
    }
    exports.quadToStringQuad = quadToStringQuad;
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
    exports.stringQuadToQuad = stringQuadToQuad;
    function escapeIRI(iriValue) {
      return iriValue.replace(escapePattern, replaceEscapedCharacter);
    }
    function escapeStringRDF(stringValue) {
      if (escapePattern.test(stringValue)) {
        stringValue = stringValue.replace(escapePattern, replaceEscapedCharacter);
      }
      return stringValue;
    }
    var escapePattern = /["\\\t\n\r\b\f\u0000-\u0019]|[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var escapes = /* @__PURE__ */ new Map([
      ["\\", "\\\\"],
      ['"', '\\"'],
      ["	", "\\t"],
      ["\n", "\\n"],
      ["\r", "\\r"],
      ["\b", "\\b"],
      ["\f", "\\f"]
    ]);
    function replaceEscapedCharacter(character) {
      const result = escapes.get(character);
      if (!result) {
        if (character.length === 1) {
          const code2 = character.charCodeAt(0).toString(16);
          return `${"\\u0000".slice(0, -code2.length)}${code2}`;
        }
        const code = ((character.charCodeAt(0) - 55296) * 1024 + character.charCodeAt(1) + 9216).toString(16);
        return `${"\\U00000000".slice(0, -code.length)}${code}`;
      }
      return result;
    }
  }
});

// ../../lipdjs/node_modules/rdf-string-ttl/index.js
var require_rdf_string_ttl = __commonJS({
  "../../lipdjs/node_modules/rdf-string-ttl/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil3();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/ActorQueryResultSerializeSparqlTsv.js
var require_ActorQueryResultSerializeSparqlTsv = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/ActorQueryResultSerializeSparqlTsv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlTsv = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeSparqlTsv = class _ActorQueryResultSerializeSparqlTsv extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/tab-separated-values": 0.75
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/tab-separated-values": "http://www.w3.org/ns/formats/SPARQL_Results_TSV"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its TSV representation.
       * @param {RDF.Term} value An RDF term.
       * @return {string} A string representation of the given value.
       */
      static bindingToTsvBindings(value) {
        if (!value) {
          return "";
        }
        return (0, rdf_string_ttl_1.termToString)(value).replaceAll("	", "\\t").replaceAll("\n", "\\n").replaceAll("\r", "\\r");
      }
      async testHandleChecked(action, _context) {
        if (action.type !== "bindings") {
          return (0, core_1.failTest)("This actor can only handle bindings streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType, _context) {
        const bindingsAction = action;
        const data = new readable_stream_1.Readable();
        const metadata = await bindingsAction.metadata();
        data.push(`${metadata.variables.map((variable) => variable.variable.value).join("	")}
`);
        data.wrap(bindingsAction.bindingsStream.map((bindings) => `${metadata.variables.map((key) => _ActorQueryResultSerializeSparqlTsv.bindingToTsvBindings(bindings.get(key.variable))).join("	")}
`));
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlTsv = ActorQueryResultSerializeSparqlTsv;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/index.js
var require_lib37 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlTsv(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/XmlSerializer.js
var require_XmlSerializer = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/XmlSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XmlSerializer = void 0;
    var XmlSerializer = class {
      constructor() {
        this.stack = [];
      }
      /**
       *
       * @param name should be a valid XML tag name
       * @param attributes keys should be valid attribute names
       */
      open(name, attributes) {
        const res = `${this.identation() + this.formatTag(name, attributes, "open")}
`;
        this.stack.push(name);
        return res;
      }
      close() {
        const name = this.stack.pop();
        if (name === void 0) {
          throw new Error("There is no tag left to close");
        }
        return `${this.identation() + this.formatTag(name, {}, "close")}
`;
      }
      serializeNode(node) {
        if (node.children === void 0) {
          return `${this.identation() + this.formatTag(node.name, node.attributes, "self-closing")}
`;
        }
        if (typeof node.children === "string") {
          return `${this.identation() + this.formatTag(node.name, node.attributes, "open") + this.escape(node.children) + this.formatTag(node.name, {}, "close")}
`;
        }
        const parts = [];
        parts.push(`${this.identation() + this.formatTag(node.name, node.attributes, "open")}
`);
        this.stack.push(node.name);
        for (const child of node.children) {
          parts.push(this.serializeNode(child));
        }
        this.stack.pop();
        parts.push(`${this.identation() + this.formatTag(node.name, {}, "close")}
`);
        return parts.join("");
      }
      identation() {
        return this.stack.map((_) => "  ").join("");
      }
      formatTag(name, attributes, state) {
        return `<${state === "close" ? "/" : ""}${name}${Object.entries(attributes ?? {}).map((attr) => ` ${attr[0]}="${this.escape(attr[1])}"`)}${state === "self-closing" ? "/" : ""}>`;
      }
      escape(text) {
        return text.replaceAll(/["&'<>]/gu, (char) => {
          switch (char) {
            case "<":
              return "&lt;";
            case ">":
              return "&gt;";
            case "&":
              return "&amp;";
            case "'":
              return "&apos;";
            case '"':
              return "&quot;";
          }
        });
      }
    };
    exports.XmlSerializer = XmlSerializer;
    XmlSerializer.header = `<?xml version="1.0" encoding="UTF-8"?>
`;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/ActorQueryResultSerializeSparqlXml.js
var require_ActorQueryResultSerializeSparqlXml = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/ActorQueryResultSerializeSparqlXml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlXml = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var asynciterator_1 = require_asynciterator();
    var readable_stream_1 = require_browser2();
    var XmlSerializer_1 = require_XmlSerializer();
    var ActorQueryResultSerializeSparqlXml = class _ActorQueryResultSerializeSparqlXml extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/sparql-results+xml": 0.8
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/sparql-results+xml": "http://www.w3.org/ns/formats/SPARQL_Results_XML"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its object-based XML representation.
       * @param {RDF.Term} value An RDF term.
       * @param {string} key A variable name, '?' must be included as a prefix.
       * @return {IXmlNode} An object-based XML tag.
       */
      static bindingToXmlBindings(value, key) {
        return { name: "binding", attributes: { name: key.value }, children: [this.valueToXmlValue(value)] };
      }
      static valueToXmlValue(value) {
        let attributes;
        switch (value.termType) {
          case "Literal":
            if (value.language) {
              attributes = { "xml:lang": value.language };
            } else if (value.datatype && value.datatype.value !== "http://www.w3.org/2001/XMLSchema#string") {
              attributes = { datatype: value.datatype.value };
            } else {
              attributes = {};
            }
            return { name: "literal", attributes, children: value.value };
          case "BlankNode":
            return { name: "bnode", children: value.value };
          case "Quad":
            return {
              name: "triple",
              children: [
                { name: "subject", children: [this.valueToXmlValue(value.subject)] },
                { name: "predicate", children: [this.valueToXmlValue(value.predicate)] },
                { name: "object", children: [this.valueToXmlValue(value.object)] }
              ]
            };
          default:
            return { name: "uri", children: value.value };
        }
      }
      async testHandleChecked(action, _context) {
        if (!["bindings", "boolean"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings streams or booleans.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const serializer = new XmlSerializer_1.XmlSerializer();
        const metadata = await action.metadata();
        data.push(XmlSerializer_1.XmlSerializer.header);
        data.push(serializer.open("sparql", { xmlns: "http://www.w3.org/2005/sparql-results#" }));
        data.push(serializer.serializeNode({
          name: "head",
          children: metadata.variables.map((variable) => ({ name: "variable", attributes: { name: variable.variable.value } }))
        }));
        if (action.type === "bindings") {
          function* end() {
            yield serializer.close();
            yield serializer.close();
          }
          data.push(serializer.open("results"));
          const stream = (0, asynciterator_1.wrap)(action.bindingsStream).map((bindings) => serializer.serializeNode({
            name: "result",
            children: [...bindings].map(([key, value]) => _ActorQueryResultSerializeSparqlXml.bindingToXmlBindings(value, key))
          })).append((0, asynciterator_1.wrap)(end()));
          data.wrap(stream);
        } else {
          try {
            const result = await action.execute();
            data.push(serializer.serializeNode({ name: "boolean", children: result.toString() }));
            data.push(serializer.close());
            setTimeout(() => data.push(null));
          } catch (error) {
            setTimeout(() => data.emit("error", error));
          }
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlXml = ActorQueryResultSerializeSparqlXml;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/index.js
var require_lib38 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlXml(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-table/lib/ActorQueryResultSerializeTable.js
var require_ActorQueryResultSerializeTable = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-table/lib/ActorQueryResultSerializeTable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeTable = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeTable = class _ActorQueryResultSerializeTable extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "table": 0.6 }} mediaTypePriorities
       *   \ @defaultNested {{ "table": "https://comunica.linkeddatafragments.org/#results_table" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
        this.padding = _ActorQueryResultSerializeTable.repeat(" ", this.columnWidth);
      }
      static repeat(str, count2) {
        return str.repeat(count2);
      }
      async testHandleChecked(action, _context) {
        if (!["bindings", "quads"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings or quad streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      termToString(term) {
        return term.termType === "Quad" ? (0, rdf_string_1.termToString)(term) : term.value;
      }
      pad(str) {
        if (str.length <= this.columnWidth) {
          return str + this.padding.slice(str.length);
        }
        return `${str.slice(0, this.columnWidth - 1)}…`;
      }
      pushHeader(data, labels) {
        const header = labels.map((label) => this.pad(label.value)).join(" ");
        data.push(`${header}
${_ActorQueryResultSerializeTable.repeat("-", header.length)}
`);
      }
      createRow(labels, bindings) {
        return `${labels.map((label) => bindings.has(label) ? this.termToString(bindings.get(label)) : "").map((label) => this.pad(label)).join(" ")}
`;
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        let resultStream;
        if (action.type === "bindings") {
          resultStream = action.bindingsStream.map((bindings) => this.createRow(labels, bindings));
          const labels = (await action.metadata()).variables.map((v) => v.variable);
          this.pushHeader(data, labels);
        } else {
          resultStream = action.quadStream.map((quad) => `${(0, rdf_terms_1.getTerms)(quad).map((term) => this.pad(this.termToString(term))).join(" ")}
`);
          const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
          this.pushHeader(data, rdf_terms_1.QUAD_TERM_NAMES.map((name) => dataFactory.variable(name)));
        }
        data.wrap(resultStream);
        return { data };
      }
    };
    exports.ActorQueryResultSerializeTable = ActorQueryResultSerializeTable;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-table/lib/index.js
var require_lib39 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-table/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeTable(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/Translator.js
var require_Translator = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/Translator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Translator = void 0;
    var Translator = class {
      constructor() {
        this.supportedRdfDatatypes = [];
        this.fromRdfHandlers = {};
        this.toRdfHandlers = {};
      }
      static incorrectRdfDataType(literal) {
        throw new Error(`Invalid RDF ${literal.datatype.value} value: '${literal.value}'`);
      }
      registerHandler(handler, rdfDatatypes, javaScriptDataTypes) {
        for (const rdfDatatype of rdfDatatypes) {
          this.supportedRdfDatatypes.push(rdfDatatype);
          this.fromRdfHandlers[rdfDatatype.value] = handler;
        }
        for (const javaScriptDataType of javaScriptDataTypes) {
          let existingToRdfHandlers = this.toRdfHandlers[javaScriptDataType];
          if (!existingToRdfHandlers) {
            this.toRdfHandlers[javaScriptDataType] = existingToRdfHandlers = [];
          }
          existingToRdfHandlers.push(handler);
        }
      }
      fromRdf(literal, validate) {
        const handler = this.fromRdfHandlers[literal.datatype.value];
        if (handler) {
          return handler.fromRdf(literal, validate);
        } else {
          return literal.value;
        }
      }
      toRdf(value, options) {
        const handlers = this.toRdfHandlers[typeof value];
        if (handlers) {
          for (const handler of handlers) {
            const ret = handler.toRdf(value, options);
            if (ret) {
              return ret;
            }
          }
        }
        throw new Error(`Invalid JavaScript value: '${value}'`);
      }
      /**
       * @return {NamedNode[]} An array of all supported RDF datatypes.
       */
      getSupportedRdfDatatypes() {
        return this.supportedRdfDatatypes;
      }
      /**
       * @return {string[]} An array of all supported JavaScript types.
       */
      getSupportedJavaScriptPrimitives() {
        return Object.keys(this.toRdfHandlers);
      }
    };
    exports.Translator = Translator;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerBoolean.js
var require_TypeHandlerBoolean = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerBoolean = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerBoolean = class _TypeHandlerBoolean {
      fromRdf(literal, validate) {
        switch (literal.value) {
          case "true":
            return true;
          case "false":
            return false;
          case "1":
            return true;
          case "0":
            return false;
        }
        if (validate) {
          Translator_1.Translator.incorrectRdfDataType(literal);
        }
        return false;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(value ? "true" : "false", datatype || dataFactory.namedNode(_TypeHandlerBoolean.TYPE));
      }
    };
    TypeHandlerBoolean.TYPE = "http://www.w3.org/2001/XMLSchema#boolean";
    exports.TypeHandlerBoolean = TypeHandlerBoolean;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerDate.js
var require_TypeHandlerDate = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerDate = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerDate = class _TypeHandlerDate {
      fromRdf(literal, validate) {
        if (validate && !literal.value.match(_TypeHandlerDate.VALIDATORS[literal.datatype.value.substr(33, literal.datatype.value.length)])) {
          Translator_1.Translator.incorrectRdfDataType(literal);
        }
        switch (literal.datatype.value) {
          case "http://www.w3.org/2001/XMLSchema#gDay":
            return new Date(0, 0, parseInt(literal.value, 10));
          case "http://www.w3.org/2001/XMLSchema#gMonthDay":
            const partsMonthDay = literal.value.split("-");
            return new Date(0, parseInt(partsMonthDay[0], 10) - 1, parseInt(partsMonthDay[1], 10));
          case "http://www.w3.org/2001/XMLSchema#gYear":
            return /* @__PURE__ */ new Date(literal.value + "-01-01");
          case "http://www.w3.org/2001/XMLSchema#gYearMonth":
            return /* @__PURE__ */ new Date(literal.value + "-01");
          default:
            return new Date(literal.value);
        }
      }
      toRdf(value, { datatype, dataFactory }) {
        datatype = datatype || dataFactory.namedNode(_TypeHandlerDate.TYPES[0]);
        if (!(value instanceof Date)) {
          return null;
        }
        const date = value;
        let valueString;
        switch (datatype.value) {
          case "http://www.w3.org/2001/XMLSchema#gDay":
            valueString = String(date.getUTCDate());
            break;
          case "http://www.w3.org/2001/XMLSchema#gMonthDay":
            valueString = date.getUTCMonth() + 1 + "-" + date.getUTCDate();
            break;
          case "http://www.w3.org/2001/XMLSchema#gYear":
            valueString = String(date.getUTCFullYear());
            break;
          case "http://www.w3.org/2001/XMLSchema#gYearMonth":
            valueString = date.getUTCFullYear() + "-" + (date.getUTCMonth() + 1);
            break;
          case "http://www.w3.org/2001/XMLSchema#date":
            valueString = date.toISOString().replace(/T.*$/, "");
            break;
          default:
            valueString = date.toISOString();
        }
        return dataFactory.literal(valueString, datatype);
      }
    };
    TypeHandlerDate.TYPES = [
      "http://www.w3.org/2001/XMLSchema#dateTime",
      "http://www.w3.org/2001/XMLSchema#date",
      "http://www.w3.org/2001/XMLSchema#gDay",
      "http://www.w3.org/2001/XMLSchema#gMonthDay",
      "http://www.w3.org/2001/XMLSchema#gYear",
      "http://www.w3.org/2001/XMLSchema#gYearMonth"
    ];
    TypeHandlerDate.VALIDATORS = {
      date: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,
      dateTime: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\.[0-9][0-9][0-9])?((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
      gDay: /^[0-9]+$/,
      gMonthDay: /^[0-9]+-[0-9][0-9]$/,
      gYear: /^[0-9]+$/,
      gYearMonth: /^[0-9]+-[0-9][0-9]$/
    };
    exports.TypeHandlerDate = TypeHandlerDate;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerNumberDouble.js
var require_TypeHandlerNumberDouble = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerNumberDouble.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerNumberDouble = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerNumberDouble = class _TypeHandlerNumberDouble {
      fromRdf(literal, validate) {
        const parsed = parseFloat(literal.value);
        if (validate) {
          if (isNaN(parsed)) {
            Translator_1.Translator.incorrectRdfDataType(literal);
          }
        }
        return parsed;
      }
      toRdf(value, { datatype, dataFactory }) {
        datatype = datatype || dataFactory.namedNode(_TypeHandlerNumberDouble.TYPES[0]);
        if (isNaN(value)) {
          return dataFactory.literal("NaN", datatype);
        }
        if (!isFinite(value)) {
          return dataFactory.literal(value > 0 ? "INF" : "-INF", datatype);
        }
        if (value % 1 === 0) {
          return null;
        }
        return dataFactory.literal(value.toExponential(15).replace(/(\d)0*e\+?/, "$1E"), datatype);
      }
    };
    TypeHandlerNumberDouble.TYPES = [
      "http://www.w3.org/2001/XMLSchema#double",
      "http://www.w3.org/2001/XMLSchema#decimal",
      "http://www.w3.org/2001/XMLSchema#float"
    ];
    exports.TypeHandlerNumberDouble = TypeHandlerNumberDouble;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerNumberInteger.js
var require_TypeHandlerNumberInteger = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerNumberInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerNumberInteger = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerNumberInteger = class _TypeHandlerNumberInteger {
      fromRdf(literal, validate) {
        const parsed = parseInt(literal.value, 10);
        if (validate) {
          if (isNaN(parsed) || literal.value.indexOf(".") >= 0) {
            Translator_1.Translator.incorrectRdfDataType(literal);
          }
        }
        return parsed;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(String(value), datatype || (value <= _TypeHandlerNumberInteger.MAX_INT && value >= _TypeHandlerNumberInteger.MIN_INT ? dataFactory.namedNode(_TypeHandlerNumberInteger.TYPES[0]) : dataFactory.namedNode(_TypeHandlerNumberInteger.TYPES[1])));
      }
    };
    TypeHandlerNumberInteger.TYPES = [
      "http://www.w3.org/2001/XMLSchema#integer",
      "http://www.w3.org/2001/XMLSchema#long",
      "http://www.w3.org/2001/XMLSchema#int",
      "http://www.w3.org/2001/XMLSchema#byte",
      "http://www.w3.org/2001/XMLSchema#short",
      "http://www.w3.org/2001/XMLSchema#negativeInteger",
      "http://www.w3.org/2001/XMLSchema#nonNegativeInteger",
      "http://www.w3.org/2001/XMLSchema#nonPositiveInteger",
      "http://www.w3.org/2001/XMLSchema#positiveInteger",
      "http://www.w3.org/2001/XMLSchema#unsignedByte",
      "http://www.w3.org/2001/XMLSchema#unsignedInt",
      "http://www.w3.org/2001/XMLSchema#unsignedLong",
      "http://www.w3.org/2001/XMLSchema#unsignedShort"
    ];
    TypeHandlerNumberInteger.MAX_INT = 2147483647;
    TypeHandlerNumberInteger.MIN_INT = -2147483648;
    exports.TypeHandlerNumberInteger = TypeHandlerNumberInteger;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerString.js
var require_TypeHandlerString = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/TypeHandlerString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerString = void 0;
    var TypeHandlerString = class {
      fromRdf(literal) {
        return literal.value;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(value, datatype);
      }
    };
    TypeHandlerString.TYPES = [
      "http://www.w3.org/2001/XMLSchema#string",
      "http://www.w3.org/2001/XMLSchema#normalizedString",
      "http://www.w3.org/2001/XMLSchema#anyURI",
      "http://www.w3.org/2001/XMLSchema#base64Binary",
      "http://www.w3.org/2001/XMLSchema#language",
      "http://www.w3.org/2001/XMLSchema#Name",
      "http://www.w3.org/2001/XMLSchema#NCName",
      "http://www.w3.org/2001/XMLSchema#NMTOKEN",
      "http://www.w3.org/2001/XMLSchema#token",
      "http://www.w3.org/2001/XMLSchema#hexBinary",
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString",
      "http://www.w3.org/2001/XMLSchema#time",
      "http://www.w3.org/2001/XMLSchema#duration"
    ];
    exports.TypeHandlerString = TypeHandlerString;
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/handler/index.js
var require_handler2 = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/handler/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_TypeHandlerBoolean(), exports);
    __exportStar(require_TypeHandlerDate(), exports);
    __exportStar(require_TypeHandlerNumberDouble(), exports);
    __exportStar(require_TypeHandlerNumberInteger(), exports);
    __exportStar(require_TypeHandlerString(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-literal/lib/ITypeHandler.js
var require_ITypeHandler = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/lib/ITypeHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdf-literal/index.js
var require_rdf_literal = __commonJS({
  "../../lipdjs/node_modules/rdf-literal/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSupportedJavaScriptPrimitives = exports.getSupportedRdfDatatypes = exports.getTermRaw = exports.toRdf = exports.fromRdf = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var handler_1 = require_handler2();
    var Translator_1 = require_Translator();
    __exportStar(require_handler2(), exports);
    __exportStar(require_ITypeHandler(), exports);
    __exportStar(require_Translator(), exports);
    var DF = new rdf_data_factory_1.DataFactory();
    var translator = new Translator_1.Translator();
    translator.registerHandler(new handler_1.TypeHandlerString(), handler_1.TypeHandlerString.TYPES.map((t) => DF.namedNode(t)), ["string"]);
    translator.registerHandler(new handler_1.TypeHandlerBoolean(), [handler_1.TypeHandlerBoolean.TYPE].map((t) => DF.namedNode(t)), ["boolean"]);
    translator.registerHandler(new handler_1.TypeHandlerNumberDouble(), handler_1.TypeHandlerNumberDouble.TYPES.map((t) => DF.namedNode(t)), ["number"]);
    translator.registerHandler(new handler_1.TypeHandlerNumberInteger(), handler_1.TypeHandlerNumberInteger.TYPES.map((t) => DF.namedNode(t)), ["number"]);
    translator.registerHandler(new handler_1.TypeHandlerDate(), handler_1.TypeHandlerDate.TYPES.map((t) => DF.namedNode(t)), ["object"]);
    function fromRdf(literal, validate) {
      return translator.fromRdf(literal, validate);
    }
    exports.fromRdf = fromRdf;
    function toRdf(value, options) {
      if (options && "namedNode" in options) {
        options = { dataFactory: options };
      }
      options = options || {};
      if (options && !options.dataFactory) {
        options.dataFactory = DF;
      }
      return translator.toRdf(value, options);
    }
    exports.toRdf = toRdf;
    function getTermRaw(term, validate) {
      if (term.termType === "Literal") {
        return fromRdf(term, validate);
      }
      return term.value;
    }
    exports.getTermRaw = getTermRaw;
    function getSupportedRdfDatatypes() {
      return translator.getSupportedRdfDatatypes();
    }
    exports.getSupportedRdfDatatypes = getSupportedRdfDatatypes;
    function getSupportedJavaScriptPrimitives() {
      return translator.getSupportedJavaScriptPrimitives();
    }
    exports.getSupportedJavaScriptPrimitives = getSupportedJavaScriptPrimitives;
  }
});

// ../../lipdjs/node_modules/@bergos/jsonparse/jsonparse.js
var require_jsonparse = __commonJS({
  "../../lipdjs/node_modules/@bergos/jsonparse/jsonparse.js"(exports, module) {
    var { Buffer: Buffer2 } = require_buffer();
    var C = {};
    var LEFT_BRACE = C.LEFT_BRACE = 1;
    var RIGHT_BRACE = C.RIGHT_BRACE = 2;
    var LEFT_BRACKET = C.LEFT_BRACKET = 3;
    var RIGHT_BRACKET = C.RIGHT_BRACKET = 4;
    var COLON = C.COLON = 5;
    var COMMA = C.COMMA = 6;
    var TRUE = C.TRUE = 7;
    var FALSE = C.FALSE = 8;
    var NULL = C.NULL = 9;
    var STRING = C.STRING = 10;
    var NUMBER = C.NUMBER = 11;
    var START = C.START = 17;
    var STOP = C.STOP = 18;
    var TRUE1 = C.TRUE1 = 33;
    var TRUE2 = C.TRUE2 = 34;
    var TRUE3 = C.TRUE3 = 35;
    var FALSE1 = C.FALSE1 = 49;
    var FALSE2 = C.FALSE2 = 50;
    var FALSE3 = C.FALSE3 = 51;
    var FALSE4 = C.FALSE4 = 52;
    var NULL1 = C.NULL1 = 65;
    var NULL2 = C.NULL2 = 66;
    var NULL3 = C.NULL3 = 67;
    var NUMBER1 = C.NUMBER1 = 81;
    var NUMBER3 = C.NUMBER3 = 83;
    var STRING1 = C.STRING1 = 97;
    var STRING2 = C.STRING2 = 98;
    var STRING3 = C.STRING3 = 99;
    var STRING4 = C.STRING4 = 100;
    var STRING5 = C.STRING5 = 101;
    var STRING6 = C.STRING6 = 102;
    var VALUE = C.VALUE = 113;
    var KEY = C.KEY = 114;
    var OBJECT = C.OBJECT = 129;
    var ARRAY = C.ARRAY = 130;
    var BACK_SLASH = "\\".charCodeAt(0);
    var FORWARD_SLASH = "/".charCodeAt(0);
    var BACKSPACE = "\b".charCodeAt(0);
    var FORM_FEED = "\f".charCodeAt(0);
    var NEWLINE = "\n".charCodeAt(0);
    var CARRIAGE_RETURN = "\r".charCodeAt(0);
    var TAB = "	".charCodeAt(0);
    var STRING_BUFFER_SIZE = 64 * 1024;
    function alloc(size) {
      return Buffer2.alloc ? Buffer2.alloc(size) : new Buffer2(size);
    }
    function Parser2() {
      this.tState = START;
      this.value = void 0;
      this.string = void 0;
      this.stringBuffer = alloc(STRING_BUFFER_SIZE);
      this.stringBufferOffset = 0;
      this.unicode = void 0;
      this.highSurrogate = void 0;
      this.key = void 0;
      this.mode = void 0;
      this.stack = [];
      this.state = VALUE;
      this.bytes_remaining = 0;
      this.bytes_in_sequence = 0;
      this.temp_buffs = { "2": alloc(2), "3": alloc(3), "4": alloc(4) };
      this.offset = -1;
    }
    Parser2.toknam = function(code) {
      var keys2 = Object.keys(C);
      for (var i = 0, l = keys2.length; i < l; i++) {
        var key = keys2[i];
        if (C[key] === code) {
          return key;
        }
      }
      return code && "0x" + code.toString(16);
    };
    var proto = Parser2.prototype;
    proto.onError = function(err) {
      throw err;
    };
    proto.charError = function(buffer, i) {
      this.tState = STOP;
      this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer[i])) + " at position " + i + " in state " + Parser2.toknam(this.tState)));
    };
    proto.appendStringChar = function(char) {
      if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
        this.string += this.stringBuffer.toString("utf8");
        this.stringBufferOffset = 0;
      }
      this.stringBuffer[this.stringBufferOffset++] = char;
    };
    proto.appendStringBuf = function(buf, start, end) {
      var size = buf.length;
      if (typeof start === "number") {
        if (typeof end === "number") {
          if (end < 0) {
            size = buf.length - start + end;
          } else {
            size = end - start;
          }
        } else {
          size = buf.length - start;
        }
      }
      if (size < 0) {
        size = 0;
      }
      if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
        this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
        this.stringBufferOffset = 0;
      }
      buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
      this.stringBufferOffset += size;
    };
    proto.write = function(buffer) {
      if (typeof buffer === "string") buffer = new Buffer2(buffer);
      var n;
      for (var i = 0, l = buffer.length; i < l; i++) {
        if (this.tState === START) {
          n = buffer[i];
          this.offset++;
          if (n === 123) {
            this.onToken(LEFT_BRACE, "{");
          } else if (n === 125) {
            this.onToken(RIGHT_BRACE, "}");
          } else if (n === 91) {
            this.onToken(LEFT_BRACKET, "[");
          } else if (n === 93) {
            this.onToken(RIGHT_BRACKET, "]");
          } else if (n === 58) {
            this.onToken(COLON, ":");
          } else if (n === 44) {
            this.onToken(COMMA, ",");
          } else if (n === 116) {
            this.tState = TRUE1;
          } else if (n === 102) {
            this.tState = FALSE1;
          } else if (n === 110) {
            this.tState = NULL1;
          } else if (n === 34) {
            this.string = "";
            this.stringBufferOffset = 0;
            this.tState = STRING1;
          } else if (n === 45) {
            this.string = "-";
            this.tState = NUMBER1;
          } else {
            if (n >= 48 && n < 64) {
              this.string = String.fromCharCode(n);
              this.tState = NUMBER3;
            } else if (n === 32 || n === 9 || n === 10 || n === 13) {
            } else {
              return this.charError(buffer, i);
            }
          }
        } else if (this.tState === STRING1) {
          n = buffer[i];
          if (this.bytes_remaining > 0) {
            for (var j = 0; j < this.bytes_remaining; j++) {
              this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];
            }
            this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
            this.bytes_in_sequence = this.bytes_remaining = 0;
            i = i + j - 1;
          } else if (this.bytes_remaining === 0 && n >= 128) {
            if (n <= 193 || n > 244) {
              return this.onError(new Error("Invalid UTF-8 character at position " + i + " in state " + Parser2.toknam(this.tState)));
            }
            if (n >= 194 && n <= 223) this.bytes_in_sequence = 2;
            if (n >= 224 && n <= 239) this.bytes_in_sequence = 3;
            if (n >= 240 && n <= 244) this.bytes_in_sequence = 4;
            if (this.bytes_in_sequence + i > buffer.length) {
              for (var k = 0; k <= buffer.length - 1 - i; k++) {
                this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k];
              }
              this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;
              i = buffer.length - 1;
            } else {
              this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);
              i = i + this.bytes_in_sequence - 1;
            }
          } else if (n === 34) {
            this.tState = START;
            this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
            this.stringBufferOffset = 0;
            this.onToken(STRING, this.string);
            this.offset += Buffer2.byteLength(this.string, "utf8") + 1;
            this.string = void 0;
          } else if (n === 92) {
            this.tState = STRING2;
          } else if (n >= 32) {
            this.appendStringChar(n);
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === STRING2) {
          n = buffer[i];
          if (n === 34) {
            this.appendStringChar(n);
            this.tState = STRING1;
          } else if (n === 92) {
            this.appendStringChar(BACK_SLASH);
            this.tState = STRING1;
          } else if (n === 47) {
            this.appendStringChar(FORWARD_SLASH);
            this.tState = STRING1;
          } else if (n === 98) {
            this.appendStringChar(BACKSPACE);
            this.tState = STRING1;
          } else if (n === 102) {
            this.appendStringChar(FORM_FEED);
            this.tState = STRING1;
          } else if (n === 110) {
            this.appendStringChar(NEWLINE);
            this.tState = STRING1;
          } else if (n === 114) {
            this.appendStringChar(CARRIAGE_RETURN);
            this.tState = STRING1;
          } else if (n === 116) {
            this.appendStringChar(TAB);
            this.tState = STRING1;
          } else if (n === 117) {
            this.unicode = "";
            this.tState = STRING3;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6) {
          n = buffer[i];
          if (n >= 48 && n < 64 || n > 64 && n <= 70 || n > 96 && n <= 102) {
            this.unicode += String.fromCharCode(n);
            if (this.tState++ === STRING6) {
              var intVal = parseInt(this.unicode, 16);
              this.unicode = void 0;
              if (this.highSurrogate !== void 0 && intVal >= 56320 && intVal < 57343 + 1) {
                this.appendStringBuf(new Buffer2(String.fromCharCode(this.highSurrogate, intVal)));
                this.highSurrogate = void 0;
              } else if (this.highSurrogate === void 0 && intVal >= 55296 && intVal < 56319 + 1) {
                this.highSurrogate = intVal;
              } else {
                if (this.highSurrogate !== void 0) {
                  this.appendStringBuf(new Buffer2(String.fromCharCode(this.highSurrogate)));
                  this.highSurrogate = void 0;
                }
                this.appendStringBuf(new Buffer2(String.fromCharCode(intVal)));
              }
              this.tState = STRING1;
            }
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
          n = buffer[i];
          switch (n) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 46:
            case 101:
            case 69:
            case 43:
            case 45:
              this.string += String.fromCharCode(n);
              this.tState = NUMBER3;
              break;
            default:
              this.tState = START;
              var error = this.numberReviver(this.string, buffer, i);
              if (error) {
                return error;
              }
              this.offset += this.string.length - 1;
              this.string = void 0;
              i--;
              break;
          }
        } else if (this.tState === TRUE1) {
          if (buffer[i] === 114) {
            this.tState = TRUE2;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === TRUE2) {
          if (buffer[i] === 117) {
            this.tState = TRUE3;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === TRUE3) {
          if (buffer[i] === 101) {
            this.tState = START;
            this.onToken(TRUE, true);
            this.offset += 3;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === FALSE1) {
          if (buffer[i] === 97) {
            this.tState = FALSE2;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === FALSE2) {
          if (buffer[i] === 108) {
            this.tState = FALSE3;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === FALSE3) {
          if (buffer[i] === 115) {
            this.tState = FALSE4;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === FALSE4) {
          if (buffer[i] === 101) {
            this.tState = START;
            this.onToken(FALSE, false);
            this.offset += 4;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === NULL1) {
          if (buffer[i] === 117) {
            this.tState = NULL2;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === NULL2) {
          if (buffer[i] === 108) {
            this.tState = NULL3;
          } else {
            return this.charError(buffer, i);
          }
        } else if (this.tState === NULL3) {
          if (buffer[i] === 108) {
            this.tState = START;
            this.onToken(NULL, null);
            this.offset += 3;
          } else {
            return this.charError(buffer, i);
          }
        }
      }
    };
    proto.onToken = function(token, value) {
    };
    proto.parseError = function(token, value) {
      this.tState = STOP;
      this.onError(new Error("Unexpected " + Parser2.toknam(token) + (value ? "(" + JSON.stringify(value) + ")" : "") + " in state " + Parser2.toknam(this.state)));
    };
    proto.push = function() {
      this.stack.push({ value: this.value, key: this.key, mode: this.mode });
    };
    proto.pop = function() {
      var value = this.value;
      var parent = this.stack.pop();
      this.value = parent.value;
      this.key = parent.key;
      this.mode = parent.mode;
      this.emit(value);
      if (!this.mode) {
        this.state = VALUE;
      }
    };
    proto.emit = function(value) {
      if (this.mode) {
        this.state = COMMA;
      }
      this.onValue(value);
    };
    proto.onValue = function(value) {
    };
    proto.onToken = function(token, value) {
      if (this.state === VALUE) {
        if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {
          if (this.value) {
            this.value[this.key] = value;
          }
          this.emit(value);
        } else if (token === LEFT_BRACE) {
          this.push();
          if (this.value) {
            this.value = this.value[this.key] = {};
          } else {
            this.value = {};
          }
          this.key = void 0;
          this.state = KEY;
          this.mode = OBJECT;
        } else if (token === LEFT_BRACKET) {
          this.push();
          if (this.value) {
            this.value = this.value[this.key] = [];
          } else {
            this.value = [];
          }
          this.key = 0;
          this.mode = ARRAY;
          this.state = VALUE;
        } else if (token === RIGHT_BRACE) {
          if (this.mode === OBJECT) {
            this.pop();
          } else {
            return this.parseError(token, value);
          }
        } else if (token === RIGHT_BRACKET) {
          if (this.mode === ARRAY) {
            this.pop();
          } else {
            return this.parseError(token, value);
          }
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === KEY) {
        if (token === STRING) {
          this.key = value;
          this.state = COLON;
        } else if (token === RIGHT_BRACE) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === COLON) {
        if (token === COLON) {
          this.state = VALUE;
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === COMMA) {
        if (token === COMMA) {
          if (this.mode === ARRAY) {
            this.key++;
            this.state = VALUE;
          } else if (this.mode === OBJECT) {
            this.state = KEY;
          }
        } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      } else {
        return this.parseError(token, value);
      }
    };
    proto.numberReviver = function(text, buffer, i) {
      var result = Number(text);
      if (isNaN(result)) {
        return this.charError(buffer, i);
      }
      if (text.match(/[0-9]+/) == text && result.toString() != text) {
        this.onToken(STRING, text);
      } else {
        this.onToken(NUMBER, result);
      }
    };
    Parser2.C = C;
    module.exports = Parser2;
  }
});

// ../../lipdjs/node_modules/sparqljson-parse/lib/SparqlJsonParser.js
var require_SparqlJsonParser = __commonJS({
  "../../lipdjs/node_modules/sparqljson-parse/lib/SparqlJsonParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlJsonParser = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var readable_stream_1 = require_browser2();
    var JsonParser = require_jsonparse();
    var SparqlJsonParser = class {
      constructor(settings) {
        var _a;
        settings = settings || {};
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.prefixVariableQuestionMark = !!settings.prefixVariableQuestionMark;
        this.suppressMissingStreamResultsError = (_a = settings.suppressMissingStreamResultsError) !== null && _a !== void 0 ? _a : true;
      }
      /**
       * Convert a SPARQL JSON bindings response to an array of bindings objects.
       * @param sparqlResponse A SPARQL JSON response.
       * @return {IBindings[]} An array of bindings.
       */
      parseJsonResults(sparqlResponse) {
        return sparqlResponse.results.bindings.map((rawBindings) => this.parseJsonBindings(rawBindings));
      }
      /**
       * Convert a SPARQL JSON bindings response stream to a stream of bindings objects.
       *
       * The bindings stream will emit a 'variables' event that will contain
       * the array of variables (as RDF.Variable[]), as defined in the response head.
       *
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL JSON response stream.
       * @return {NodeJS.ReadableStream} A stream of bindings.
       */
      parseJsonResultsStream(sparqlResponseStream) {
        const errorListener = (error) => resultStream.emit("error", error);
        sparqlResponseStream.on("error", errorListener);
        const jsonParser = new JsonParser();
        jsonParser.onError = errorListener;
        let variablesFound = false;
        let resultsFound = false;
        jsonParser.onValue = (value) => {
          if (jsonParser.key === "vars" && jsonParser.stack.length === 2 && jsonParser.stack[1].key === "head") {
            resultStream.emit("variables", value.map((v) => this.dataFactory.variable(v)));
            variablesFound = true;
          } else if (jsonParser.key === "results" && jsonParser.stack.length === 1) {
            resultsFound = true;
          } else if (typeof jsonParser.key === "number" && jsonParser.stack.length === 3 && jsonParser.stack[1].key === "results" && jsonParser.stack[2].key === "bindings") {
            try {
              resultStream.push(this.parseJsonBindings(value));
            } catch (error) {
              resultStream.emit("error", error);
            }
          } else if (jsonParser.key === "metadata" && jsonParser.stack.length === 1) {
            resultStream.emit("metadata", value);
          }
        };
        const resultStream = sparqlResponseStream.on("end", (_) => {
          if (!resultsFound && !this.suppressMissingStreamResultsError) {
            resultStream.emit("error", new Error("No valid SPARQL query results were found."));
          } else if (!variablesFound) {
            resultStream.emit("variables", []);
          }
        }).pipe(new readable_stream_1.Transform({
          objectMode: true,
          transform(chunk, encoding, callback) {
            jsonParser.write(chunk);
            callback();
          }
        }));
        return resultStream;
      }
      /**
       * Convert a SPARQL JSON result binding to a bindings object.
       * @param rawBindings A SPARQL JSON result binding.
       * @return {IBindings} A bindings object.
       */
      parseJsonBindings(rawBindings) {
        const bindings = {};
        for (const key in rawBindings) {
          const rawValue = rawBindings[key];
          bindings[this.prefixVariableQuestionMark ? "?" + key : key] = this.parseJsonValue(rawValue);
        }
        return bindings;
      }
      /**
       * Convert a SPARQL JSON result value to an RDF term.
       * @param rawValue A SPARQL JSON result value
       * @return {RDF.Term} An RDF term.
       */
      parseJsonValue(rawValue) {
        let value;
        switch (rawValue.type) {
          case "bnode":
            value = this.dataFactory.blankNode(rawValue.value);
            break;
          case "literal":
            if (rawValue["xml:lang"]) {
              value = this.dataFactory.literal(rawValue.value, rawValue["xml:lang"]);
            } else if (rawValue.datatype) {
              value = this.dataFactory.literal(rawValue.value, this.dataFactory.namedNode(rawValue.datatype));
            } else {
              value = this.dataFactory.literal(rawValue.value);
            }
            break;
          case "typed-literal":
            value = this.dataFactory.literal(rawValue.value, this.dataFactory.namedNode(rawValue.datatype));
            break;
          case "triple":
            const tripleValue = rawValue.value;
            if (!tripleValue || !tripleValue.subject || !tripleValue.predicate || !tripleValue.object) {
              throw new Error("Invalid quoted triple: " + JSON.stringify(rawValue));
            }
            value = this.dataFactory.quad(this.parseJsonValue(tripleValue.subject), this.parseJsonValue(tripleValue.predicate), this.parseJsonValue(tripleValue.object));
            break;
          default:
            value = this.dataFactory.namedNode(rawValue.value);
            break;
        }
        return value;
      }
      /**
       * Convert a SPARQL JSON boolean response to a boolean.
       * This will throw an error if the given reponse was not a valid boolean response.
       * @param sparqlResponse A SPARQL JSON response.
       * @return {IBindings[]} An array of bindings.
       */
      parseJsonBoolean(sparqlResponse) {
        if ("boolean" in sparqlResponse) {
          return sparqlResponse.boolean;
        }
        throw new Error("No valid ASK response was found.");
      }
      /**
       * Convert a SPARQL JSON boolean response stream to a promise resolving to a boolean.
       * This will reject if the given reponse was not a valid boolean response.
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL JSON response stream.
       * @return {Promise<boolean>} The response boolean.
       */
      parseJsonBooleanStream(sparqlResponseStream) {
        return new Promise((resolve, reject) => {
          const parser = new JsonParser();
          parser.onError = reject;
          parser.onValue = (value) => {
            if (parser.key === "boolean" && typeof value === "boolean" && parser.stack.length === 1) {
              resolve(value);
            }
          };
          sparqlResponseStream.on("error", reject).on("data", (d) => parser.write(d)).on("end", () => reject(new Error("No valid ASK response was found.")));
        });
      }
    };
    exports.SparqlJsonParser = SparqlJsonParser;
  }
});

// ../../lipdjs/node_modules/sparqljson-parse/index.js
var require_sparqljson_parse = __commonJS({
  "../../lipdjs/node_modules/sparqljson-parse/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlJsonParser(), exports);
  }
});

// ../../lipdjs/node_modules/sparqljson-to-tree/lib/Converter.js
var require_Converter2 = __commonJS({
  "../../lipdjs/node_modules/sparqljson-to-tree/lib/Converter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Converter = void 0;
    var rdf_literal_1 = require_rdf_literal();
    var sparqljson_parse_1 = require_sparqljson_parse();
    var Converter = class _Converter {
      constructor(settings) {
        settings = settings || { delimiter: "_" };
        settings.prefixVariableQuestionMark = false;
        this.delimiter = settings.delimiter || "_";
        this.parser = new sparqljson_parse_1.SparqlJsonParser(settings);
        this.materializeRdfJsTerms = settings.materializeRdfJsTerms;
      }
      /**
       * Adds a value to a tree.
       * @param tree A tree datastructure.
       * @param {string[]} path The path of keys in the tree.
       * @param {Term} value A value to add.
       * @param {string} lastKeyPath The accumulated key path (separated by the given delimiter)
       *                             through recursive calls, can be empty.
       * @param {ISchema} schema A schema.
       * @param {string} delimiter The string to join key paths by.
       */
      static addValueToTree(tree, path, value, lastKeyPath, schema, delimiter) {
        const key = path[0];
        const keyPath = lastKeyPath ? lastKeyPath + delimiter + key : key;
        const singularize = schema.singularizeVariables[keyPath];
        if (path.length === 1) {
          if (singularize) {
            if (!tree[key]) {
              tree[key] = value;
            }
          } else {
            if (!tree[key]) {
              tree[key] = [];
            }
            tree[key].push(value);
          }
        } else {
          let nextNode;
          if (singularize) {
            if (!tree[key]) {
              tree[key] = {};
            }
            nextNode = tree[key];
          } else {
            if (!tree[key]) {
              tree[key] = [{}];
            }
            nextNode = tree[key][0];
          }
          _Converter.addValueToTree(nextNode, path.slice(1), value, keyPath, schema, delimiter);
        }
      }
      /**
       * Recursively merge the two given trees.
       * @param tree1 A first tree (has key priority on literals).
       * @param tree2 A second tree. All arrays will/should only have a single element.
       * @return {any} The merged tree.
       */
      static mergeTrees(tree1, tree2) {
        if (typeof tree1 !== typeof tree2) {
          throw new Error(`Two incompatible tree nodes were found: ${typeof tree1} and ${typeof tree2}`);
        }
        if (Array.isArray(tree1) !== Array.isArray(tree2)) {
          throw new Error(`Two incompatible tree nodes were found: Array?${Array.isArray(tree1)} and Array?${Array.isArray(tree2)}`);
        }
        if (typeof tree1 === "object" && typeof tree2 === "object") {
          if (tree1.termType && tree2.termType) {
            if (tree1.equals(tree2)) {
              return { valid: true, result: tree1 };
            } else {
              return { valid: false, result: tree1 };
            }
          }
          if (Array.isArray(tree1) && Array.isArray(tree2)) {
            if (tree1.length > 0) {
              const merged = [];
              let valid = false;
              for (const tree1Element of tree1) {
                const mergedElement = _Converter.mergeTrees(tree1Element, tree2[0]);
                if (mergedElement.valid) {
                  valid = true;
                  merged.push(mergedElement.result);
                } else {
                  merged.push(tree1Element);
                }
              }
              if (valid) {
                return { valid: true, result: merged };
              }
            }
            return { valid: true, result: tree1.concat(tree2) };
          } else {
            const merged = {};
            for (const key2 in tree2) {
              merged[key2] = tree2[key2];
            }
            for (const key1 in tree1) {
              if (merged[key1]) {
                const mergedElement = _Converter.mergeTrees(tree1[key1], merged[key1]);
                if (mergedElement.valid) {
                  merged[key1] = mergedElement.result;
                } else {
                  return { valid: false, result: tree1 };
                }
              } else {
                merged[key1] = tree1[key1];
              }
            }
            return { valid: true, result: merged };
          }
        } else {
          throw new Error(`Unmergable tree types: ${typeof tree1} and ${typeof tree2}`);
        }
      }
      /**
       * Materialize all RDF terms in the given tree to raw values.
       * This does not mutate the original tree.
       * @param tree A tree.
       * @return {any} A materialized tree.
       */
      static materializeTree(tree) {
        if (tree.termType) {
          return (0, rdf_literal_1.getTermRaw)(tree);
        } else if (Array.isArray(tree)) {
          return tree.map(_Converter.materializeTree);
        } else {
          const materialized = {};
          for (const key in tree) {
            materialized[key] = _Converter.materializeTree(tree[key]);
          }
          return materialized;
        }
      }
      /**
       * Convert a complete SPARQL JSON response to a GraphQL results tree.
       * @param sparqlResponse A SPARQL JSON response.
       * @param {ISchema} schema A schema.
       * @return {any} A GraphQL results tree.
       */
      sparqlJsonResultsToTree(sparqlResponse, schema) {
        return this.bindingsToTree(this.parser.parseJsonResults(sparqlResponse), schema || { singularizeVariables: {} });
      }
      /**
       * Convert an array of bindings to a GraphQL results tree.
       * @param {IBindings[]} bindingsArray An array of bindings.
       * @param {ISchema} schema A schema.
       * @return {any} A GraphQL results tree.
       */
      bindingsToTree(bindingsArray, schema) {
        const singularRoot = schema && schema.singularizeVariables[""];
        let tree = singularRoot ? {} : [];
        for (const bindings of bindingsArray) {
          const subTree = singularRoot ? {} : [{}];
          for (const key in bindings) {
            const path = key.split(this.delimiter);
            const value = bindings[key];
            _Converter.addValueToTree(singularRoot ? subTree : subTree[0], path, value, "", schema, this.delimiter);
          }
          tree = _Converter.mergeTrees(tree, subTree).result;
        }
        if (this.materializeRdfJsTerms) {
          tree = _Converter.materializeTree(tree);
        }
        return tree;
      }
    };
    exports.Converter = Converter;
  }
});

// ../../lipdjs/node_modules/sparqljson-to-tree/index.js
var require_sparqljson_to_tree = __commonJS({
  "../../lipdjs/node_modules/sparqljson-to-tree/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Converter2(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-tree/lib/ActorQueryResultSerializeTree.js
var require_ActorQueryResultSerializeTree = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-tree/lib/ActorQueryResultSerializeTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeTree = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    var sparqljson_to_tree_1 = require_sparqljson_to_tree();
    var ActorQueryResultSerializeTree = class _ActorQueryResultSerializeTree extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "tree": 0.5 }} mediaTypePriorities
       *   \ @defaultNested {{ "tree": "https://comunica.linkeddatafragments.org/#results_tree" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       *
       * @param {BindingsStream} bindingsStream
       * @param context
       * @param {IConverterSettings} converterSettings
       * @return {Promise<string>}
       */
      static async bindingsStreamToGraphQl(bindingsStream, context, converterSettings) {
        const actionContext = core_1.ActionContext.ensureActionContext(context);
        const converter = new sparqljson_to_tree_1.Converter(converterSettings);
        const schema = {
          singularizeVariables: actionContext.get(context_entries_1.KeysInitQuery.graphqlSingularizeVariables) ?? {}
        };
        return converter.bindingsToTree(await bindingsStream.map((bindings) => Object.fromEntries([...bindings].map(([key, value]) => [key.value, value]))).toArray(), schema);
      }
      async testHandleChecked(action) {
        if (action.type !== "bindings") {
          return (0, core_1.failTest)("This actor can only handle bindings streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
          data._read = () => {
          };
          _ActorQueryResultSerializeTree.bindingsStreamToGraphQl(action.bindingsStream, action.context, { materializeRdfJsTerms: true }).then((result) => {
            data.push(JSON.stringify(result, null, "  "));
            data.push(null);
          }).catch((error) => data.emit("error", error));
        };
        return { data };
      }
    };
    exports.ActorQueryResultSerializeTree = ActorQueryResultSerializeTree;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-tree/lib/index.js
var require_lib40 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-tree/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindingsStreamToGraphQl = void 0;
    var ActorQueryResultSerializeTree_1 = require_ActorQueryResultSerializeTree();
    var { bindingsStreamToGraphQl } = ActorQueryResultSerializeTree_1.ActorQueryResultSerializeTree;
    exports.bindingsStreamToGraphQl = bindingsStreamToGraphQl;
    __exportStar(require_ActorQueryResultSerializeTree(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-combine-union/lib/MediatorCombineUnion.js
var require_MediatorCombineUnion = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-combine-union/lib/MediatorCombineUnion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorCombineUnion = void 0;
    var core_1 = require_lib();
    var MediatorCombineUnion = class extends core_1.Mediator {
      constructor(args) {
        super(args);
        this.combiner = this.createCombiner();
      }
      async mediate(action) {
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          testResults = [];
        }
        if (this.filterFailures) {
          const _testResults = [];
          for (const result of testResults) {
            const reply = await result.reply;
            if (reply.isPassed()) {
              _testResults.push(result);
            }
          }
          testResults = _testResults;
        }
        const sideDatas = [];
        await Promise.all(testResults.map(async ({ reply }, i) => {
          const awaited = await reply;
          const value = awaited.getOrThrow();
          sideDatas[i] = awaited.getSideData();
          return value;
        }));
        const results = await Promise.all(testResults.map((result, i) => result.actor.runObservable(action, sideDatas[i])));
        return this.combiner(results);
      }
      mediateWith() {
        throw new Error("Method not supported.");
      }
      createCombiner() {
        return (results) => {
          const data = {};
          data[this.field] = {};
          [{}].concat(results.map((result) => result[this.field])).forEach((value) => {
            data[this.field] = { ...value, ...data[this.field] };
          });
          return data;
        };
      }
    };
    exports.MediatorCombineUnion = MediatorCombineUnion;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-combine-union/lib/index.js
var require_lib41 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-combine-union/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorCombineUnion(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-number/lib/MediatorNumber.js
var require_MediatorNumber = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-number/lib/MediatorNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorNumber = void 0;
    var core_1 = require_lib();
    var MediatorNumber = class extends core_1.Mediator {
      constructor(args) {
        super(args);
        this.indexPicker = this.createIndexPicker();
      }
      /**
       * @return {(tests: T[]) => number} A function that returns the index of the test result
       *                                  that has been chosen by this mediator.
       */
      createIndexPicker() {
        switch (this.type) {
          case "min":
            return (tests) => tests.reduce((prev, curr, i) => {
              const val = this.getOrDefault(curr[this.field], Number.POSITIVE_INFINITY);
              return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [val, i] : prev;
            }, [Number.NaN, -1])[1];
          case "max":
            return (tests) => tests.reduce((prev, curr, i) => {
              const val = this.getOrDefault(curr[this.field], Number.NEGATIVE_INFINITY);
              return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [val, i] : prev;
            }, [Number.NaN, -1])[1];
          default:
            throw new Error(`No valid "type" value was given, must be either 'min' or 'max', but got: ${this.type}`);
        }
      }
      getOrDefault(value, defaultValue) {
        return value === void 0 ? defaultValue : value;
      }
      async mediateWith(action, testResults) {
        let wrappedResults = await Promise.all(testResults.map(({ reply }) => reply));
        const failures = [];
        if (this.ignoreFailures) {
          const dummy = {};
          dummy[this.field] = null;
          wrappedResults = wrappedResults.map((result) => {
            if (result.isFailed()) {
              failures.push(result.getFailMessage());
              return (0, core_1.passTestWithSideData)(dummy, void 0);
            }
            return result;
          });
        }
        const sideDatas = [];
        const results = wrappedResults.map((result, i) => {
          const value = result.getOrThrow();
          sideDatas[i] = result.getSideData();
          return value;
        });
        const index = this.indexPicker(results);
        if (index < 0) {
          return (0, core_1.failTest)(this.constructFailureMessage(action, failures));
        }
        return (0, core_1.passTestWithSideData)(testResults[index].actor, sideDatas[index]);
      }
    };
    exports.MediatorNumber = MediatorNumber;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-number/lib/index.js
var require_lib42 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-number/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorNumber(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereferenceBase.js
var require_ActorDereferenceBase = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereferenceBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceBase = exports.isHardError = exports.emptyReadable = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    function emptyReadable() {
      const data = new readable_stream_1.Readable();
      data.push(null);
      return data;
    }
    exports.emptyReadable = emptyReadable;
    function isHardError(context) {
      return !context.get(context_entries_1.KeysInitQuery.lenient);
    }
    exports.isHardError = isHardError;
    var ActorDereferenceBase = class extends core_1.Actor {
      constructor(args) {
        super(args);
      }
      /**
       * Handle the given error as a rejection or delegate it to the logger,
       * depending on whether or not hard errors are enabled.
       * @param {I} action An action.
       * @param {Error} error An error that has occurred.
       * @param {N} output Data to add to the output
       */
      async dereferenceErrorHandler(action, error, output) {
        if (isHardError(action.context)) {
          throw error;
        }
        this.logWarn(action.context, error.message, () => ({ url: action.url }));
        return { ...output, data: emptyReadable() };
      }
    };
    exports.ActorDereferenceBase = ActorDereferenceBase;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereference.js
var require_ActorDereference = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereference.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereference = void 0;
    var ActorDereferenceBase_1 = require_ActorDereferenceBase();
    var ActorDereference = class extends ActorDereferenceBase_1.ActorDereferenceBase {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Dereferencing failed: none of the configured actors were able to handle ${action.url}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
      /**
       * Handle the given error as a rejection or delegate it to the logger,
       * depending on whether or not hard errors are enabled.
       * @param {IActionDereference} action A dereference action.
       * @param {Error} error An error that has occurred.
       * @param headers Optional HTTP headers to pass.
       * @param {number} requestTime The time it took to request the page in milliseconds.
       * @return {Promise<IActorDereferenceOutput>} A promise that rejects or resolves to an empty output.
       */
      async handleDereferenceErrors(action, error, headers, requestTime = 0) {
        return this.dereferenceErrorHandler(action, error, { url: action.url, exists: false, headers, requestTime });
      }
    };
    exports.ActorDereference = ActorDereference;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereferenceParse.js
var require_ActorDereferenceParse = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference/lib/ActorDereferenceParse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceParse = exports.getMediaTypeFromExtension = void 0;
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    var ActorDereferenceBase_1 = require_ActorDereferenceBase();
    function getMediaTypeFromExtension(path, mediaMappings) {
      const dotIndex = path.lastIndexOf(".");
      return dotIndex >= 0 && (mediaMappings == null ? void 0 : mediaMappings[path.slice(dotIndex + 1)]) || "";
    }
    exports.getMediaTypeFromExtension = getMediaTypeFromExtension;
    var ActorDereferenceParse = class extends ActorDereferenceBase_1.ActorDereferenceBase {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      /**
       * If hard errors are disabled, modify the given stream so that errors are delegated to the logger.
       * @param {IActionDereferenceParse} action A dereference action.
       * @param {Readable} data A data stream.
       * @return {Readable} The resulting data stream.
       */
      handleDereferenceStreamErrors(action, data) {
        if (!(0, ActorDereferenceBase_1.isHardError)(action.context)) {
          data.on("error", (error) => {
            this.logWarn(action.context, error.message, () => ({ url: action.url }));
            data.push(null);
          });
          data = data.pipe(new readable_stream_1.PassThrough({ objectMode: true }));
        }
        return data;
      }
      async run(action) {
        var _a, _b, _c, _d;
        const { context } = action;
        const dereference = await this.mediatorDereference.mediate({
          ...action,
          mediaTypes: async () => {
            var _a2, _b2;
            return (_b2 = await ((_a2 = this.mediatorParseMediatypes) == null ? void 0 : _a2.mediate({ context, mediaTypes: true }))) == null ? void 0 : _b2.mediaTypes;
          }
        });
        let result;
        if (dereference.exists) {
          try {
            result = (await this.mediatorParse.mediate({
              context,
              handle: { context, ...dereference, metadata: await this.getMetadata(dereference) },
              // eslint-disable-next-line ts/prefer-nullish-coalescing
              handleMediaType: dereference.mediaType || action.mediaType || getMediaTypeFromExtension(dereference.url, this.mediaMappings)
            })).handle;
            result.data = this.handleDereferenceStreamErrors(action, result.data);
          } catch (error) {
            await ((_b = (_a = dereference.data).close) == null ? void 0 : _b.call(_a));
            result = await this.dereferenceErrorHandler(action, error, {});
          }
        } else {
          await ((_d = (_c = dereference.data).close) == null ? void 0 : _d.call(_c));
          result = { data: (0, ActorDereferenceBase_1.emptyReadable)() };
        }
        return { ...dereference, ...result };
      }
    };
    exports.ActorDereferenceParse = ActorDereferenceParse;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference/lib/index.js
var require_lib43 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorDereference(), exports);
    __exportStar(require_ActorDereferenceParse(), exports);
    __exportStar(require_ActorDereferenceBase(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-fallback/lib/ActorDereferenceFallback.js
var require_ActorDereferenceFallback = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-fallback/lib/ActorDereferenceFallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceFallback = void 0;
    var bus_dereference_1 = require_lib43();
    var core_1 = require_lib();
    var ActorDereferenceFallback = class extends bus_dereference_1.ActorDereference {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return this.handleDereferenceErrors(action, new Error(`Could not dereference '${action.url}'`));
      }
    };
    exports.ActorDereferenceFallback = ActorDereferenceFallback;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-fallback/lib/index.js
var require_lib44 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-fallback/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorDereferenceFallback(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join-entries-sort/lib/ActorRdfJoinEntriesSort.js
var require_ActorRdfJoinEntriesSort = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join-entries-sort/lib/ActorRdfJoinEntriesSort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinEntriesSort = void 0;
    var core_1 = require_lib();
    var ActorRdfJoinEntriesSort = class extends core_1.Actor {
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Sorting join entries failed: none of the configured actors were able to sort} busFailMessage
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfJoinEntriesSort = ActorRdfJoinEntriesSort;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join-entries-sort/lib/index.js
var require_lib45 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join-entries-sort/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinEntriesSort(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/ActorRdfJoinEntriesSortCardinality.js
var require_ActorRdfJoinEntriesSortCardinality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/ActorRdfJoinEntriesSortCardinality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinEntriesSortCardinality = void 0;
    var bus_rdf_join_entries_sort_1 = require_lib45();
    var core_1 = require_lib();
    var ActorRdfJoinEntriesSortCardinality = class extends bus_rdf_join_entries_sort_1.ActorRdfJoinEntriesSort {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return (0, core_1.passTest)({
          accuracy: action.entries.length === 0 ? 1 : action.entries.reduce((sum, entry) => sum + (Number.isFinite(entry.metadata.cardinality.value) ? 1 : 0), 0) / action.entries.length
        });
      }
      async run(action) {
        const entries3 = [...action.entries].sort((entryLeft, entryRight) => entryLeft.metadata.cardinality.value - entryRight.metadata.cardinality.value);
        return { entries: entries3 };
      }
    };
    exports.ActorRdfJoinEntriesSortCardinality = ActorRdfJoinEntriesSortCardinality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/index.js
var require_lib46 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinEntriesSortCardinality(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join-selectivity/lib/ActorRdfJoinSelectivity.js
var require_ActorRdfJoinSelectivity = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join-selectivity/lib/ActorRdfJoinSelectivity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSelectivity = void 0;
    var core_1 = require_lib();
    var ActorRdfJoinSelectivity = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Determining join selectivity failed: none of the configured actors were able to calculate selectivities} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfJoinSelectivity = ActorRdfJoinSelectivity;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join-selectivity/lib/index.js
var require_lib47 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join-selectivity/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSelectivity(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/ActorRdfJoinSelectivityVariableCounting.js
var require_ActorRdfJoinSelectivityVariableCounting = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/ActorRdfJoinSelectivityVariableCounting.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoinTypes = exports.ActorRdfJoinSelectivityVariableCounting = void 0;
    var bus_rdf_join_selectivity_1 = require_lib47();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinSelectivityVariableCounting = class _ActorRdfJoinSelectivityVariableCounting extends bus_rdf_join_selectivity_1.ActorRdfJoinSelectivity {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTest)({ accuracy: 0.5 });
      }
      static getPatternCost(pattern) {
        let cost = 1;
        if (pattern.subject.termType === "Variable") {
          cost += 4;
        }
        if (pattern.predicate.termType === "Variable" || pattern.type === sparqlalgebrajs_1.Algebra.types.PATH) {
          cost += 1;
        }
        if (pattern.object.termType === "Variable") {
          cost += 2;
        }
        if (pattern.graph.termType === "Variable") {
          cost += 1;
        }
        return cost / 9;
      }
      static getJoinTypes(operation1, operation2) {
        const joinTypes = [];
        if (operation1.subject.termType === "Variable") {
          if (operation1.subject.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundSS);
          }
          if (operation2.type === "pattern" && operation1.subject.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundSP);
          }
          if (operation1.subject.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundSO);
          }
          if (operation1.subject.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundSG);
          }
        } else {
          if (operation1.subject.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundSS);
          }
          if (operation2.type === "pattern" && operation1.subject.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundSP);
          }
          if (operation1.subject.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundSO);
          }
          if (operation1.subject.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundSG);
          }
        }
        if (operation1.type === "pattern") {
          if (operation1.predicate.termType === "Variable") {
            if (operation1.predicate.equals(operation2.subject)) {
              joinTypes.push(JoinTypes.unboundPS);
            }
            if (operation2.type === "pattern" && operation1.predicate.equals(operation2.predicate)) {
              joinTypes.push(JoinTypes.unboundPP);
            }
            if (operation1.predicate.equals(operation2.object)) {
              joinTypes.push(JoinTypes.unboundPO);
            }
            if (operation1.predicate.equals(operation2.graph)) {
              joinTypes.push(JoinTypes.unboundPG);
            }
          } else {
            if (operation1.predicate.equals(operation2.subject)) {
              joinTypes.push(JoinTypes.boundPS);
            }
            if (operation2.type === "pattern" && operation1.predicate.equals(operation2.predicate)) {
              joinTypes.push(JoinTypes.boundPP);
            }
            if (operation1.predicate.equals(operation2.object)) {
              joinTypes.push(JoinTypes.boundPO);
            }
            if (operation1.predicate.equals(operation2.graph)) {
              joinTypes.push(JoinTypes.boundPG);
            }
          }
        }
        if (operation1.object.termType === "Variable") {
          if (operation1.object.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundOS);
          }
          if (operation2.type === "pattern" && operation1.object.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundOP);
          }
          if (operation1.object.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundOO);
          }
          if (operation1.object.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundOG);
          }
        } else {
          if (operation1.object.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundOS);
          }
          if (operation2.type === "pattern" && operation1.object.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundOP);
          }
          if (operation1.object.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundOO);
          }
          if (operation1.object.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundOG);
          }
        }
        if (operation1.graph.termType === "Variable") {
          if (operation1.graph.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundGS);
          }
          if (operation2.type === "pattern" && operation1.graph.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundGP);
          }
          if (operation1.graph.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundGO);
          }
          if (operation1.graph.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundGG);
          }
        } else {
          if (operation1.graph.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundGS);
          }
          if (operation2.type === "pattern" && operation1.graph.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundGP);
          }
          if (operation1.graph.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundGO);
          }
          if (operation1.graph.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundGG);
          }
        }
        return joinTypes;
      }
      static getOperationsPairwiseJoinCost(operation1, operation2) {
        let cost = _ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST;
        for (const joinType of _ActorRdfJoinSelectivityVariableCounting.getJoinTypes(operation1, operation2)) {
          switch (joinType) {
            case JoinTypes.boundSS:
              cost -= 2 * 2;
              break;
            case JoinTypes.boundSP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundSO:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundSG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPS:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPP:
              return 1;
            case JoinTypes.boundPO:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundOS:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundOP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundOO:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundOG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGS:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGO:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGG:
              cost -= 3 * 2;
              break;
            case JoinTypes.unboundSS:
              cost -= 2;
              break;
            case JoinTypes.unboundSP:
              cost -= 3;
              break;
            case JoinTypes.unboundSO:
              cost -= 1;
              break;
            case JoinTypes.unboundSG:
              cost -= 3;
              break;
            case JoinTypes.unboundPS:
              cost -= 3;
              break;
            case JoinTypes.unboundPP:
              cost -= 3;
              break;
            case JoinTypes.unboundPO:
              cost -= 3;
              break;
            case JoinTypes.unboundPG:
              cost -= 3;
              break;
            case JoinTypes.unboundOS:
              cost -= 1;
              break;
            case JoinTypes.unboundOP:
              cost -= 3;
              break;
            case JoinTypes.unboundOO:
              cost -= 1;
              break;
            case JoinTypes.unboundOG:
              cost -= 3;
              break;
            case JoinTypes.unboundGS:
              cost -= 3;
              break;
            case JoinTypes.unboundGP:
              cost -= 3;
              break;
            case JoinTypes.unboundGO:
              cost -= 3;
              break;
            case JoinTypes.unboundGG:
              cost -= 3;
              break;
          }
        }
        return cost / _ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST;
      }
      static getOperationsJoinCost(operations) {
        const patterns = [];
        for (const operation of operations) {
          sparqlalgebrajs_1.Util.recurseOperation(operation, {
            [sparqlalgebrajs_1.Algebra.types.PATTERN](pattern) {
              patterns.push(pattern);
              return false;
            },
            [sparqlalgebrajs_1.Algebra.types.PATH](path) {
              patterns.push(path);
              return false;
            }
          });
        }
        let totalCost = 0;
        let costEntries = 0;
        for (const pattern1 of patterns) {
          for (const pattern2 of patterns) {
            if (pattern1 !== pattern2) {
              totalCost += _ActorRdfJoinSelectivityVariableCounting.getOperationsPairwiseJoinCost(pattern1, pattern2);
              costEntries++;
            }
          }
        }
        if (costEntries === 0) {
          return 1;
        }
        return totalCost / costEntries * patterns.reduce((factor, pattern) => factor * _ActorRdfJoinSelectivityVariableCounting.getPatternCost(pattern), 1);
      }
      async run(action) {
        if (action.entries.length <= 1) {
          return { selectivity: 1 };
        }
        return {
          selectivity: _ActorRdfJoinSelectivityVariableCounting.getOperationsJoinCost(action.entries.map((entry) => entry.operation))
        };
      }
    };
    exports.ActorRdfJoinSelectivityVariableCounting = ActorRdfJoinSelectivityVariableCounting;
    ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST = 41 * 2;
    var JoinTypes;
    (function(JoinTypes2) {
      JoinTypes2[JoinTypes2["boundSS"] = 0] = "boundSS";
      JoinTypes2[JoinTypes2["boundSP"] = 1] = "boundSP";
      JoinTypes2[JoinTypes2["boundSO"] = 2] = "boundSO";
      JoinTypes2[JoinTypes2["boundSG"] = 3] = "boundSG";
      JoinTypes2[JoinTypes2["boundPS"] = 4] = "boundPS";
      JoinTypes2[JoinTypes2["boundPP"] = 5] = "boundPP";
      JoinTypes2[JoinTypes2["boundPO"] = 6] = "boundPO";
      JoinTypes2[JoinTypes2["boundPG"] = 7] = "boundPG";
      JoinTypes2[JoinTypes2["boundOS"] = 8] = "boundOS";
      JoinTypes2[JoinTypes2["boundOP"] = 9] = "boundOP";
      JoinTypes2[JoinTypes2["boundOO"] = 10] = "boundOO";
      JoinTypes2[JoinTypes2["boundOG"] = 11] = "boundOG";
      JoinTypes2[JoinTypes2["boundGS"] = 12] = "boundGS";
      JoinTypes2[JoinTypes2["boundGP"] = 13] = "boundGP";
      JoinTypes2[JoinTypes2["boundGO"] = 14] = "boundGO";
      JoinTypes2[JoinTypes2["boundGG"] = 15] = "boundGG";
      JoinTypes2[JoinTypes2["unboundSS"] = 16] = "unboundSS";
      JoinTypes2[JoinTypes2["unboundSP"] = 17] = "unboundSP";
      JoinTypes2[JoinTypes2["unboundSO"] = 18] = "unboundSO";
      JoinTypes2[JoinTypes2["unboundSG"] = 19] = "unboundSG";
      JoinTypes2[JoinTypes2["unboundPS"] = 20] = "unboundPS";
      JoinTypes2[JoinTypes2["unboundPP"] = 21] = "unboundPP";
      JoinTypes2[JoinTypes2["unboundPO"] = 22] = "unboundPO";
      JoinTypes2[JoinTypes2["unboundPG"] = 23] = "unboundPG";
      JoinTypes2[JoinTypes2["unboundOS"] = 24] = "unboundOS";
      JoinTypes2[JoinTypes2["unboundOP"] = 25] = "unboundOP";
      JoinTypes2[JoinTypes2["unboundOO"] = 26] = "unboundOO";
      JoinTypes2[JoinTypes2["unboundOG"] = 27] = "unboundOG";
      JoinTypes2[JoinTypes2["unboundGS"] = 28] = "unboundGS";
      JoinTypes2[JoinTypes2["unboundGP"] = 29] = "unboundGP";
      JoinTypes2[JoinTypes2["unboundGO"] = 30] = "unboundGO";
      JoinTypes2[JoinTypes2["unboundGG"] = 31] = "unboundGG";
    })(JoinTypes || (exports.JoinTypes = JoinTypes = {}));
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/index.js
var require_lib48 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSelectivityVariableCounting(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata/lib/ActorRdfMetadata.js
var require_ActorRdfMetadata = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata/lib/ActorRdfMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadata = void 0;
    var core_1 = require_lib();
    var ActorRdfMetadata = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Metadata splicing failed: none of the configured actors were able to splice metadata from ${action.url}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfMetadata = ActorRdfMetadata;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata/lib/index.js
var require_lib49 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadata(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-primary-topic/lib/ActorRdfMetadataPrimaryTopic.js
var require_ActorRdfMetadataPrimaryTopic = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-primary-topic/lib/ActorRdfMetadataPrimaryTopic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataPrimaryTopic = void 0;
    var bus_rdf_metadata_1 = require_lib49();
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    var ActorRdfMetadataPrimaryTopic = class extends bus_rdf_metadata_1.ActorRdfMetadata {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.triples) {
          return (0, core_1.failTest)("This actor only supports non-triple quad streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const data = new readable_stream_1.Readable({ objectMode: true });
        const metadata = new readable_stream_1.Readable({ objectMode: true });
        const attachListeners = () => {
          data._read = metadata._read = () => {
          };
          action.quads.on("error", (error) => {
            data.emit("error", error);
            metadata.emit("error", error);
          });
          const graphs = {};
          let endpointIdentifier;
          const primaryTopics = {};
          action.quads.on("data", (quad) => {
            if (quad.predicate.value === "http://rdfs.org/ns/void#subset" && quad.object.value === action.url) {
              endpointIdentifier = quad.subject.value;
            } else if (quad.predicate.value === "http://xmlns.com/foaf/0.1/primaryTopic") {
              primaryTopics[quad.object.value] = quad.subject.value;
            }
            let quads = graphs[quad.graph.value];
            if (!quads) {
              quads = graphs[quad.graph.value] = [];
            }
            quads.push(quad);
          });
          action.quads.on("end", () => {
            const metadataGraph = endpointIdentifier ? primaryTopics[endpointIdentifier] : void 0;
            for (const graphName in graphs) {
              if (graphName === metadataGraph) {
                for (const quad of graphs[graphName]) {
                  metadata.push(quad);
                }
                if (this.metadataToData) {
                  for (const quad of graphs[graphName]) {
                    data.push(quad);
                  }
                }
              } else {
                for (const quad of graphs[graphName]) {
                  data.push(quad);
                }
                if (!metadataGraph && this.dataToMetadataOnInvalidMetadataGraph) {
                  for (const quad of graphs[graphName]) {
                    metadata.push(quad);
                  }
                }
              }
            }
            data.push(null);
            metadata.push(null);
          });
        };
        data._read = metadata._read = () => {
          attachListeners();
        };
        return { data, metadata };
      }
    };
    exports.ActorRdfMetadataPrimaryTopic = ActorRdfMetadataPrimaryTopic;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-primary-topic/lib/index.js
var require_lib50 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-primary-topic/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataPrimaryTopic(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-all/lib/ActorRdfMetadataAll.js
var require_ActorRdfMetadataAll = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-all/lib/ActorRdfMetadataAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAll = void 0;
    var bus_rdf_metadata_1 = require_lib49();
    var core_1 = require_lib();
    var readable_stream_1 = require_browser2();
    var ActorRdfMetadataAll = class extends bus_rdf_metadata_1.ActorRdfMetadata {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const data = new readable_stream_1.Readable({ objectMode: true });
        const metadata = new readable_stream_1.Readable({ objectMode: true });
        action.quads.on("error", (error) => {
          data.emit("error", error);
          metadata.emit("error", error);
        });
        action.quads.on("end", () => {
          data.push(null);
          metadata.push(null);
        });
        const read = data._read = metadata._read = (size) => {
          while (size > 0) {
            const item = action.quads.read();
            if (item === null) {
              return action.quads.once("readable", () => read(size));
            }
            size--;
            data.push(item);
            metadata.push(item);
          }
        };
        return { data, metadata };
      }
    };
    exports.ActorRdfMetadataAll = ActorRdfMetadataAll;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-all/lib/index.js
var require_lib51 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-all/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAll(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata-accumulate/lib/ActorRdfMetadataAccumulate.js
var require_ActorRdfMetadataAccumulate = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata-accumulate/lib/ActorRdfMetadataAccumulate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulate = void 0;
    var core_1 = require_lib();
    var ActorRdfMetadataAccumulate = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Metadata accumulation failed: none of the configured actors were able to accumulate metadata in mode ${action.mode}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfMetadataAccumulate = ActorRdfMetadataAccumulate;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata-accumulate/lib/index.js
var require_lib52 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata-accumulate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/ActorRdfMetadataAccumulateCardinality.js
var require_ActorRdfMetadataAccumulateCardinality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/ActorRdfMetadataAccumulateCardinality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulateCardinality = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib52();
    var core_1 = require_lib();
    var ActorRdfMetadataAccumulateCardinality = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: { cardinality: { type: "exact", value: 0 } } };
        }
        const cardinality = { ...action.accumulatedMetadata.cardinality };
        if (cardinality.dataset) {
          if (action.accumulatedMetadata.defaultGraph === cardinality.dataset && cardinality.dataset !== action.appendingMetadata.cardinality.dataset) {
            return { metadata: { cardinality: action.appendingMetadata.cardinality } };
          }
          if (action.appendingMetadata.cardinality.dataset) {
            if (cardinality.dataset !== action.appendingMetadata.cardinality.dataset && action.appendingMetadata.subsetOf === cardinality.dataset) {
              return { metadata: { cardinality: action.appendingMetadata.cardinality } };
            }
            if (cardinality.dataset === action.appendingMetadata.cardinality.dataset) {
              return { metadata: { cardinality } };
            }
            delete cardinality.dataset;
          } else {
            return { metadata: { cardinality } };
          }
        }
        if (!action.appendingMetadata.cardinality || !Number.isFinite(action.appendingMetadata.cardinality.value)) {
          cardinality.type = "estimate";
          cardinality.value = Number.POSITIVE_INFINITY;
        } else {
          if (action.appendingMetadata.cardinality.type === "estimate") {
            cardinality.type = "estimate";
          }
          cardinality.value += action.appendingMetadata.cardinality.value;
        }
        return { metadata: { cardinality } };
      }
    };
    exports.ActorRdfMetadataAccumulateCardinality = ActorRdfMetadataAccumulateCardinality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/index.js
var require_lib53 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulateCardinality(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/ActorRdfMetadataAccumulatePageSize.js
var require_ActorRdfMetadataAccumulatePageSize = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/ActorRdfMetadataAccumulatePageSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulatePageSize = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib52();
    var core_1 = require_lib();
    var ActorRdfMetadataAccumulatePageSize = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: {} };
        }
        return {
          metadata: {
            ..."pageSize" in action.accumulatedMetadata || "pageSize" in action.appendingMetadata ? {
              pageSize: (action.accumulatedMetadata.pageSize ?? 0) + (action.appendingMetadata.pageSize ?? 0)
            } : {}
          }
        };
      }
    };
    exports.ActorRdfMetadataAccumulatePageSize = ActorRdfMetadataAccumulatePageSize;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/index.js
var require_lib54 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulatePageSize(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/ActorRdfMetadataAccumulateRequestTime.js
var require_ActorRdfMetadataAccumulateRequestTime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/ActorRdfMetadataAccumulateRequestTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulateRequestTime = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib52();
    var core_1 = require_lib();
    var ActorRdfMetadataAccumulateRequestTime = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: {} };
        }
        return {
          metadata: {
            ..."requestTime" in action.accumulatedMetadata || "requestTime" in action.appendingMetadata ? {
              requestTime: (action.accumulatedMetadata.requestTime ?? 0) + (action.appendingMetadata.requestTime ?? 0)
            } : {}
          }
        };
      }
    };
    exports.ActorRdfMetadataAccumulateRequestTime = ActorRdfMetadataAccumulateRequestTime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/index.js
var require_lib55 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulateRequestTime(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata-extract/lib/ActorRdfMetadataExtract.js
var require_ActorRdfMetadataExtract = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata-extract/lib/ActorRdfMetadataExtract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtract = void 0;
    var core_1 = require_lib();
    var ActorRdfMetadataExtract = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfMetadataExtract = ActorRdfMetadataExtract;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-metadata-extract/lib/index.js
var require_lib56 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-metadata-extract/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtract(), exports);
  }
});

// ../../lipdjs/node_modules/uritemplate/bin/uritemplate.js
var require_uritemplate = __commonJS({
  "../../lipdjs/node_modules/uritemplate/bin/uritemplate.js"(exports, module) {
    (function(exportCallback) {
      "use strict";
      var UriTemplateError = function() {
        function UriTemplateError2(options) {
          this.options = options;
        }
        UriTemplateError2.prototype.toString = function() {
          if (JSON && JSON.stringify) {
            return JSON.stringify(this.options);
          } else {
            return this.options;
          }
        };
        return UriTemplateError2;
      }();
      var objectHelper = /* @__PURE__ */ function() {
        function isArray(value) {
          return Object.prototype.toString.apply(value) === "[object Array]";
        }
        function isString(value) {
          return Object.prototype.toString.apply(value) === "[object String]";
        }
        function isNumber(value) {
          return Object.prototype.toString.apply(value) === "[object Number]";
        }
        function isBoolean(value) {
          return Object.prototype.toString.apply(value) === "[object Boolean]";
        }
        function join3(arr, separator) {
          var result = "", first3 = true, index;
          for (index = 0; index < arr.length; index += 1) {
            if (first3) {
              first3 = false;
            } else {
              result += separator;
            }
            result += arr[index];
          }
          return result;
        }
        function map2(arr, mapper) {
          var result = [], index = 0;
          for (; index < arr.length; index += 1) {
            result.push(mapper(arr[index]));
          }
          return result;
        }
        function filter3(arr, predicate) {
          var result = [], index = 0;
          for (; index < arr.length; index += 1) {
            if (predicate(arr[index])) {
              result.push(arr[index]);
            }
          }
          return result;
        }
        function deepFreezeUsingObjectFreeze(object) {
          if (typeof object !== "object" || object === null) {
            return object;
          }
          Object.freeze(object);
          var property, propertyName;
          for (propertyName in object) {
            if (object.hasOwnProperty(propertyName)) {
              property = object[propertyName];
              if (typeof property === "object") {
                deepFreeze(property);
              }
            }
          }
          return object;
        }
        function deepFreeze(object) {
          if (typeof Object.freeze === "function") {
            return deepFreezeUsingObjectFreeze(object);
          }
          return object;
        }
        return {
          isArray,
          isString,
          isNumber,
          isBoolean,
          join: join3,
          map: map2,
          filter: filter3,
          deepFreeze
        };
      }();
      var charHelper = /* @__PURE__ */ function() {
        function isAlpha(chr) {
          return chr >= "a" && chr <= "z" || chr >= "A" && chr <= "Z";
        }
        function isDigit(chr) {
          return chr >= "0" && chr <= "9";
        }
        function isHexDigit(chr) {
          return isDigit(chr) || chr >= "a" && chr <= "f" || chr >= "A" && chr <= "F";
        }
        return {
          isAlpha,
          isDigit,
          isHexDigit
        };
      }();
      var pctEncoder = /* @__PURE__ */ function() {
        var utf8 = {
          encode: function(chr) {
            return unescape(encodeURIComponent(chr));
          },
          numBytes: function(firstCharCode) {
            if (firstCharCode <= 127) {
              return 1;
            } else if (194 <= firstCharCode && firstCharCode <= 223) {
              return 2;
            } else if (224 <= firstCharCode && firstCharCode <= 239) {
              return 3;
            } else if (240 <= firstCharCode && firstCharCode <= 244) {
              return 4;
            }
            return 0;
          },
          isValidFollowingCharCode: function(charCode) {
            return 128 <= charCode && charCode <= 191;
          }
        };
        function encodeCharacter(chr) {
          var result = "", octets = utf8.encode(chr), octet, index;
          for (index = 0; index < octets.length; index += 1) {
            octet = octets.charCodeAt(index);
            result += "%" + (octet < 16 ? "0" : "") + octet.toString(16).toUpperCase();
          }
          return result;
        }
        function isPercentDigitDigit(text, start) {
          return text.charAt(start) === "%" && charHelper.isHexDigit(text.charAt(start + 1)) && charHelper.isHexDigit(text.charAt(start + 2));
        }
        function parseHex2(text, start) {
          return parseInt(text.substr(start, 2), 16);
        }
        function isPctEncoded(chr) {
          if (!isPercentDigitDigit(chr, 0)) {
            return false;
          }
          var firstCharCode = parseHex2(chr, 1);
          var numBytes = utf8.numBytes(firstCharCode);
          if (numBytes === 0) {
            return false;
          }
          for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {
            if (!isPercentDigitDigit(chr, 3 * byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(chr, 3 * byteNumber + 1))) {
              return false;
            }
          }
          return true;
        }
        function pctCharAt(text, startIndex) {
          var chr = text.charAt(startIndex);
          if (!isPercentDigitDigit(text, startIndex)) {
            return chr;
          }
          var utf8CharCode = parseHex2(text, startIndex + 1);
          var numBytes = utf8.numBytes(utf8CharCode);
          if (numBytes === 0) {
            return chr;
          }
          for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {
            if (!isPercentDigitDigit(text, startIndex + 3 * byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(text, startIndex + 3 * byteNumber + 1))) {
              return chr;
            }
          }
          return text.substr(startIndex, 3 * numBytes);
        }
        return {
          encodeCharacter,
          isPctEncoded,
          pctCharAt
        };
      }();
      var rfcCharHelper = /* @__PURE__ */ function() {
        function isVarchar(chr) {
          return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === "_" || pctEncoder.isPctEncoded(chr);
        }
        function isUnreserved(chr) {
          return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === "-" || chr === "." || chr === "_" || chr === "~";
        }
        function isReserved(chr) {
          return chr === ":" || chr === "/" || chr === "?" || chr === "#" || chr === "[" || chr === "]" || chr === "@" || chr === "!" || chr === "$" || chr === "&" || chr === "(" || chr === ")" || chr === "*" || chr === "+" || chr === "," || chr === ";" || chr === "=" || chr === "'";
        }
        return {
          isVarchar,
          isUnreserved,
          isReserved
        };
      }();
      var encodingHelper = /* @__PURE__ */ function() {
        function encode(text, passReserved) {
          var result = "", index, chr = "";
          if (typeof text === "number" || typeof text === "boolean") {
            text = text.toString();
          }
          for (index = 0; index < text.length; index += chr.length) {
            chr = text.charAt(index);
            result += rfcCharHelper.isUnreserved(chr) || passReserved && rfcCharHelper.isReserved(chr) ? chr : pctEncoder.encodeCharacter(chr);
          }
          return result;
        }
        function encodePassReserved(text) {
          return encode(text, true);
        }
        function encodeLiteralCharacter(literal, index) {
          var chr = pctEncoder.pctCharAt(literal, index);
          if (chr.length > 1) {
            return chr;
          } else {
            return rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);
          }
        }
        function encodeLiteral(literal) {
          var result = "", index, chr = "";
          for (index = 0; index < literal.length; index += chr.length) {
            chr = pctEncoder.pctCharAt(literal, index);
            if (chr.length > 1) {
              result += chr;
            } else {
              result += rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);
            }
          }
          return result;
        }
        return {
          encode,
          encodePassReserved,
          encodeLiteral,
          encodeLiteralCharacter
        };
      }();
      var operators = function() {
        var bySymbol = {};
        function create(symbol) {
          bySymbol[symbol] = {
            symbol,
            separator: symbol === "?" ? "&" : symbol === "" || symbol === "+" || symbol === "#" ? "," : symbol,
            named: symbol === ";" || symbol === "&" || symbol === "?",
            ifEmpty: symbol === "&" || symbol === "?" ? "=" : "",
            first: symbol === "+" ? "" : symbol,
            encode: symbol === "+" || symbol === "#" ? encodingHelper.encodePassReserved : encodingHelper.encode,
            toString: function() {
              return this.symbol;
            }
          };
        }
        create("");
        create("+");
        create("#");
        create(".");
        create("/");
        create(";");
        create("?");
        create("&");
        return {
          valueOf: function(chr) {
            if (bySymbol[chr]) {
              return bySymbol[chr];
            }
            if ("=,!@|".indexOf(chr) >= 0) {
              return null;
            }
            return bySymbol[""];
          }
        };
      }();
      function isDefined(object) {
        var propertyName;
        if (object === null || object === void 0) {
          return false;
        }
        if (objectHelper.isArray(object)) {
          return object.length > 0;
        }
        if (typeof object === "string" || typeof object === "number" || typeof object === "boolean") {
          return true;
        }
        for (propertyName in object) {
          if (object.hasOwnProperty(propertyName) && isDefined(object[propertyName])) {
            return true;
          }
        }
        return false;
      }
      var LiteralExpression = function() {
        function LiteralExpression2(literal) {
          this.literal = encodingHelper.encodeLiteral(literal);
        }
        LiteralExpression2.prototype.expand = function() {
          return this.literal;
        };
        LiteralExpression2.prototype.toString = LiteralExpression2.prototype.expand;
        return LiteralExpression2;
      }();
      var parse2 = /* @__PURE__ */ function() {
        function parseExpression(expressionText) {
          var operator, varspecs = [], varspec = null, varnameStart = null, maxLengthStart = null, index, chr = "";
          function closeVarname() {
            var varname = expressionText.substring(varnameStart, index);
            if (varname.length === 0) {
              throw new UriTemplateError({ expressionText, message: "a varname must be specified", position: index });
            }
            varspec = { varname, exploded: false, maxLength: null };
            varnameStart = null;
          }
          function closeMaxLength() {
            if (maxLengthStart === index) {
              throw new UriTemplateError({ expressionText, message: "after a ':' you have to specify the length", position: index });
            }
            varspec.maxLength = parseInt(expressionText.substring(maxLengthStart, index), 10);
            maxLengthStart = null;
          }
          operator = function(operatorText) {
            var op = operators.valueOf(operatorText);
            if (op === null) {
              throw new UriTemplateError({ expressionText, message: "illegal use of reserved operator", position: index, operator: operatorText });
            }
            return op;
          }(expressionText.charAt(0));
          index = operator.symbol.length;
          varnameStart = index;
          for (; index < expressionText.length; index += chr.length) {
            chr = pctEncoder.pctCharAt(expressionText, index);
            if (varnameStart !== null) {
              if (chr === ".") {
                if (varnameStart === index) {
                  throw new UriTemplateError({ expressionText, message: "a varname MUST NOT start with a dot", position: index });
                }
                continue;
              }
              if (rfcCharHelper.isVarchar(chr)) {
                continue;
              }
              closeVarname();
            }
            if (maxLengthStart !== null) {
              if (index === maxLengthStart && chr === "0") {
                throw new UriTemplateError({ expressionText, message: "A :prefix must not start with digit 0", position: index });
              }
              if (charHelper.isDigit(chr)) {
                if (index - maxLengthStart >= 4) {
                  throw new UriTemplateError({ expressionText, message: "A :prefix must have max 4 digits", position: index });
                }
                continue;
              }
              closeMaxLength();
            }
            if (chr === ":") {
              if (varspec.maxLength !== null) {
                throw new UriTemplateError({ expressionText, message: "only one :maxLength is allowed per varspec", position: index });
              }
              if (varspec.exploded) {
                throw new UriTemplateError({ expressionText, message: "an exploeded varspec MUST NOT be varspeced", position: index });
              }
              maxLengthStart = index + 1;
              continue;
            }
            if (chr === "*") {
              if (varspec === null) {
                throw new UriTemplateError({ expressionText, message: "exploded without varspec", position: index });
              }
              if (varspec.exploded) {
                throw new UriTemplateError({ expressionText, message: "exploded twice", position: index });
              }
              if (varspec.maxLength) {
                throw new UriTemplateError({ expressionText, message: "an explode (*) MUST NOT follow to a prefix", position: index });
              }
              varspec.exploded = true;
              continue;
            }
            if (chr === ",") {
              varspecs.push(varspec);
              varspec = null;
              varnameStart = index + 1;
              continue;
            }
            throw new UriTemplateError({ expressionText, message: "illegal character", character: chr, position: index });
          }
          if (varnameStart !== null) {
            closeVarname();
          }
          if (maxLengthStart !== null) {
            closeMaxLength();
          }
          varspecs.push(varspec);
          return new VariableExpression(expressionText, operator, varspecs);
        }
        function parse3(uriTemplateText) {
          var index, chr, expressions = [], braceOpenIndex = null, literalStart = 0;
          for (index = 0; index < uriTemplateText.length; index += 1) {
            chr = uriTemplateText.charAt(index);
            if (literalStart !== null) {
              if (chr === "}") {
                throw new UriTemplateError({ templateText: uriTemplateText, message: "unopened brace closed", position: index });
              }
              if (chr === "{") {
                if (literalStart < index) {
                  expressions.push(new LiteralExpression(uriTemplateText.substring(literalStart, index)));
                }
                literalStart = null;
                braceOpenIndex = index;
              }
              continue;
            }
            if (braceOpenIndex !== null) {
              if (chr === "{") {
                throw new UriTemplateError({ templateText: uriTemplateText, message: "brace already opened", position: index });
              }
              if (chr === "}") {
                if (braceOpenIndex + 1 === index) {
                  throw new UriTemplateError({ templateText: uriTemplateText, message: "empty braces", position: braceOpenIndex });
                }
                try {
                  expressions.push(parseExpression(uriTemplateText.substring(braceOpenIndex + 1, index)));
                } catch (error) {
                  if (error.prototype === UriTemplateError.prototype) {
                    throw new UriTemplateError({ templateText: uriTemplateText, message: error.options.message, position: braceOpenIndex + error.options.position, details: error.options });
                  }
                  throw error;
                }
                braceOpenIndex = null;
                literalStart = index + 1;
              }
              continue;
            }
            throw new Error("reached unreachable code");
          }
          if (braceOpenIndex !== null) {
            throw new UriTemplateError({ templateText: uriTemplateText, message: "unclosed brace", position: braceOpenIndex });
          }
          if (literalStart < uriTemplateText.length) {
            expressions.push(new LiteralExpression(uriTemplateText.substr(literalStart)));
          }
          return new UriTemplate(uriTemplateText, expressions);
        }
        return parse3;
      }();
      var VariableExpression = function() {
        function prettyPrint(value) {
          return JSON && JSON.stringify ? JSON.stringify(value) : value;
        }
        function isEmpty2(value) {
          if (!isDefined(value)) {
            return true;
          }
          if (objectHelper.isString(value)) {
            return value === "";
          }
          if (objectHelper.isNumber(value) || objectHelper.isBoolean(value)) {
            return false;
          }
          if (objectHelper.isArray(value)) {
            return value.length === 0;
          }
          for (var propertyName in value) {
            if (value.hasOwnProperty(propertyName)) {
              return false;
            }
          }
          return true;
        }
        function propertyArray(object) {
          var result = [], propertyName;
          for (propertyName in object) {
            if (object.hasOwnProperty(propertyName)) {
              result.push({ name: propertyName, value: object[propertyName] });
            }
          }
          return result;
        }
        function VariableExpression2(templateText, operator, varspecs) {
          this.templateText = templateText;
          this.operator = operator;
          this.varspecs = varspecs;
        }
        VariableExpression2.prototype.toString = function() {
          return this.templateText;
        };
        function expandSimpleValue(varspec, operator, value) {
          var result = "";
          value = value.toString();
          if (operator.named) {
            result += encodingHelper.encodeLiteral(varspec.varname);
            if (value === "") {
              result += operator.ifEmpty;
              return result;
            }
            result += "=";
          }
          if (varspec.maxLength !== null) {
            value = value.substr(0, varspec.maxLength);
          }
          result += operator.encode(value);
          return result;
        }
        function valueDefined(nameValue) {
          return isDefined(nameValue.value);
        }
        function expandNotExploded(varspec, operator, value) {
          var arr = [], result = "";
          if (operator.named) {
            result += encodingHelper.encodeLiteral(varspec.varname);
            if (isEmpty2(value)) {
              result += operator.ifEmpty;
              return result;
            }
            result += "=";
          }
          if (objectHelper.isArray(value)) {
            arr = value;
            arr = objectHelper.filter(arr, isDefined);
            arr = objectHelper.map(arr, operator.encode);
            result += objectHelper.join(arr, ",");
          } else {
            arr = propertyArray(value);
            arr = objectHelper.filter(arr, valueDefined);
            arr = objectHelper.map(arr, function(nameValue) {
              return operator.encode(nameValue.name) + "," + operator.encode(nameValue.value);
            });
            result += objectHelper.join(arr, ",");
          }
          return result;
        }
        function expandExplodedNamed(varspec, operator, value) {
          var isArray = objectHelper.isArray(value), arr = [];
          if (isArray) {
            arr = value;
            arr = objectHelper.filter(arr, isDefined);
            arr = objectHelper.map(arr, function(listElement) {
              var tmp = encodingHelper.encodeLiteral(varspec.varname);
              if (isEmpty2(listElement)) {
                tmp += operator.ifEmpty;
              } else {
                tmp += "=" + operator.encode(listElement);
              }
              return tmp;
            });
          } else {
            arr = propertyArray(value);
            arr = objectHelper.filter(arr, valueDefined);
            arr = objectHelper.map(arr, function(nameValue) {
              var tmp = encodingHelper.encodeLiteral(nameValue.name);
              if (isEmpty2(nameValue.value)) {
                tmp += operator.ifEmpty;
              } else {
                tmp += "=" + operator.encode(nameValue.value);
              }
              return tmp;
            });
          }
          return objectHelper.join(arr, operator.separator);
        }
        function expandExplodedUnnamed(operator, value) {
          var arr = [], result = "";
          if (objectHelper.isArray(value)) {
            arr = value;
            arr = objectHelper.filter(arr, isDefined);
            arr = objectHelper.map(arr, operator.encode);
            result += objectHelper.join(arr, operator.separator);
          } else {
            arr = propertyArray(value);
            arr = objectHelper.filter(arr, function(nameValue) {
              return isDefined(nameValue.value);
            });
            arr = objectHelper.map(arr, function(nameValue) {
              return operator.encode(nameValue.name) + "=" + operator.encode(nameValue.value);
            });
            result += objectHelper.join(arr, operator.separator);
          }
          return result;
        }
        VariableExpression2.prototype.expand = function(variables) {
          var expanded = [], index, varspec, value, valueIsArr, oneExploded = false, operator = this.operator;
          for (index = 0; index < this.varspecs.length; index += 1) {
            varspec = this.varspecs[index];
            value = variables[varspec.varname];
            if (value === null || value === void 0) {
              continue;
            }
            if (varspec.exploded) {
              oneExploded = true;
            }
            valueIsArr = objectHelper.isArray(value);
            if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
              expanded.push(expandSimpleValue(varspec, operator, value));
            } else if (varspec.maxLength && isDefined(value)) {
              throw new Error("Prefix modifiers are not applicable to variables that have composite values. You tried to expand " + this + " with " + prettyPrint(value));
            } else if (!varspec.exploded) {
              if (operator.named || !isEmpty2(value)) {
                expanded.push(expandNotExploded(varspec, operator, value));
              }
            } else if (isDefined(value)) {
              if (operator.named) {
                expanded.push(expandExplodedNamed(varspec, operator, value));
              } else {
                expanded.push(expandExplodedUnnamed(operator, value));
              }
            }
          }
          if (expanded.length === 0) {
            return "";
          } else {
            return operator.first + objectHelper.join(expanded, operator.separator);
          }
        };
        return VariableExpression2;
      }();
      var UriTemplate = function() {
        function UriTemplate2(templateText, expressions) {
          this.templateText = templateText;
          this.expressions = expressions;
          objectHelper.deepFreeze(this);
        }
        UriTemplate2.prototype.toString = function() {
          return this.templateText;
        };
        UriTemplate2.prototype.expand = function(variables) {
          var index, result = "";
          for (index = 0; index < this.expressions.length; index += 1) {
            result += this.expressions[index].expand(variables);
          }
          return result;
        };
        UriTemplate2.parse = parse2;
        UriTemplate2.UriTemplateError = UriTemplateError;
        return UriTemplate2;
      }();
      exportCallback(UriTemplate);
    })(
      function(UriTemplate) {
        "use strict";
        if (typeof module !== "undefined") {
          module.exports = UriTemplate;
        } else if (typeof define === "function") {
          define([], function() {
            return UriTemplate;
          });
        } else if (typeof window !== "undefined") {
          window.UriTemplate = UriTemplate;
        } else {
          global.UriTemplate = UriTemplate;
        }
      }
    );
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-controls/lib/ActorRdfMetadataExtractHydraControls.js
var require_ActorRdfMetadataExtractHydraControls = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-controls/lib/ActorRdfMetadataExtractHydraControls.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractHydraControls = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var uritemplate_1 = require_uritemplate();
    var ActorRdfMetadataExtractHydraControls = class _ActorRdfMetadataExtractHydraControls extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
        this.parsedUriTemplateCache = {};
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      /**
       * Collect all Hydra page links from the given Hydra properties object.
       * @param pageUrl The page URL in which the Hydra properties are defined.
       * @param hydraProperties The collected Hydra properties.
       * @return The Hydra links
       */
      getLinks(pageUrl, hydraProperties) {
        return Object.fromEntries(_ActorRdfMetadataExtractHydraControls.LINK_TYPES.map((link) => {
          const links = hydraProperties[link] || hydraProperties[`${link}Page`];
          const linkTargets = links && links[pageUrl];
          return [link, linkTargets && linkTargets.length > 0 ? [linkTargets[0]] : []];
        }));
      }
      /**
       * Parse a URI template, or retrieve it from a cache.
       * @param {string} template A URI template string.
       * @return {} A parsed URI template object.
       */
      parseUriTemplateCached(template) {
        const cachedUriTemplate = this.parsedUriTemplateCache[template];
        if (cachedUriTemplate) {
          return cachedUriTemplate;
        }
        return this.parsedUriTemplateCache[template] = (0, uritemplate_1.parse)(template);
      }
      /**
       * Collect all search forms from the given Hydra properties object.
       * @param hydraProperties The collected Hydra properties.
       * @return The search forms.
       */
      getSearchForms(hydraProperties) {
        const searchFormData = hydraProperties.search;
        const searchForms = [];
        if (searchFormData) {
          for (const dataset in searchFormData) {
            for (const searchFormId of searchFormData[dataset]) {
              const searchTemplates = (hydraProperties.template || {})[searchFormId] || [];
              if (searchTemplates.length !== 1) {
                throw new Error(`Expected 1 hydra:template for ${searchFormId}`);
              }
              const template = searchTemplates[0];
              const searchTemplate = this.parseUriTemplateCached(template);
              const mappings = Object.fromEntries(((hydraProperties.mapping || {})[searchFormId] || []).map((mapping) => {
                const variable = ((hydraProperties.variable || {})[mapping] || [])[0];
                const property = ((hydraProperties.property || {})[mapping] || [])[0];
                if (!variable) {
                  throw new Error(`Expected a hydra:variable for ${mapping}`);
                }
                if (!property) {
                  throw new Error(`Expected a hydra:property for ${mapping}`);
                }
                return [property, variable];
              }));
              const getUri = (entries3) => searchTemplate.expand(Object.fromEntries(Object.keys(entries3).map((key) => [mappings[key], entries3[key]])));
              searchForms.push({ dataset, template, mappings, getUri });
            }
          }
        }
        return { values: searchForms };
      }
      /**
       * Collect all hydra properties from a given metadata stream
       * in a nice convenient nested hash (property / subject / objects).
       * @param {RDF.Stream} metadata
       * @return The collected Hydra properties.
       */
      getHydraProperties(metadata) {
        return new Promise((resolve, reject) => {
          metadata.on("error", reject);
          const hydraProperties = {};
          metadata.on("data", (quad) => {
            if (quad.predicate.value.startsWith(_ActorRdfMetadataExtractHydraControls.HYDRA)) {
              const property = quad.predicate.value.slice(_ActorRdfMetadataExtractHydraControls.HYDRA.length);
              const subjectProperties = hydraProperties[property] || (hydraProperties[property] = {});
              const objects = subjectProperties[quad.subject.value] || (subjectProperties[quad.subject.value] = []);
              objects.push(quad.object.value);
            }
          });
          metadata.on("end", () => resolve(hydraProperties));
        });
      }
      async run(action) {
        const metadata = {};
        const hydraProperties = await this.getHydraProperties(action.metadata);
        Object.assign(metadata, this.getLinks(action.url, hydraProperties));
        metadata.searchForms = this.getSearchForms(hydraProperties);
        return { metadata };
      }
    };
    exports.ActorRdfMetadataExtractHydraControls = ActorRdfMetadataExtractHydraControls;
    ActorRdfMetadataExtractHydraControls.HYDRA = "http://www.w3.org/ns/hydra/core#";
    ActorRdfMetadataExtractHydraControls.LINK_TYPES = ["first", "next", "previous", "last"];
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-controls/lib/index.js
var require_lib57 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-controls/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractHydraControls(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-count/lib/ActorRdfMetadataExtractHydraCount.js
var require_ActorRdfMetadataExtractHydraCount = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-count/lib/ActorRdfMetadataExtractHydraCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractHydraCount = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractHydraCount = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      run(action) {
        return new Promise((resolve, reject) => {
          action.metadata.on("error", reject);
          action.metadata.on("data", (quad) => {
            if (this.predicates.includes(quad.predicate.value)) {
              resolve({
                metadata: {
                  cardinality: {
                    type: "estimate",
                    value: Number.parseInt(quad.object.value, 10),
                    dataset: quad.subject.value
                  }
                }
              });
            }
          });
          action.metadata.on("end", () => {
            resolve({ metadata: { cardinality: { type: "estimate", value: 0 } } });
          });
        });
      }
    };
    exports.ActorRdfMetadataExtractHydraCount = ActorRdfMetadataExtractHydraCount;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-count/lib/index.js
var require_lib58 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-count/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractHydraCount(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-pagesize/lib/ActorRdfMetadataExtractHydraPagesize.js
var require_ActorRdfMetadataExtractHydraPagesize = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-pagesize/lib/ActorRdfMetadataExtractHydraPagesize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractHydraPagesize = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractHydraPagesize = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return new Promise((resolve, reject) => {
          action.metadata.on("error", reject);
          action.metadata.on("data", (quad) => {
            if (this.predicates.includes(quad.predicate.value)) {
              resolve({ metadata: { pageSize: Number.parseInt(quad.object.value, 10) } });
            }
          });
          action.metadata.on("end", () => {
            resolve({ metadata: {} });
          });
        });
      }
    };
    exports.ActorRdfMetadataExtractHydraPagesize = ActorRdfMetadataExtractHydraPagesize;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-pagesize/lib/index.js
var require_lib59 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-hydra-pagesize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractHydraPagesize(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-request-time/lib/ActorRdfMetadataExtractRequestTime.js
var require_ActorRdfMetadataExtractRequestTime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-request-time/lib/ActorRdfMetadataExtractRequestTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractRequestTime = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractRequestTime = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return { metadata: { requestTime: action.requestTime } };
      }
    };
    exports.ActorRdfMetadataExtractRequestTime = ActorRdfMetadataExtractRequestTime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-request-time/lib/index.js
var require_lib60 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-request-time/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractRequestTime(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-allow-http-methods/lib/ActorRdfMetadataExtractAllowHttpMethods.js
var require_ActorRdfMetadataExtractAllowHttpMethods = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-allow-http-methods/lib/ActorRdfMetadataExtractAllowHttpMethods.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractAllowHttpMethods = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractAllowHttpMethods = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        var _a, _b;
        const metadata = {};
        if ((_a = action.headers) == null ? void 0 : _a.get("allow")) {
          metadata.allowHttpMethods = (_b = action.headers.get("allow")) == null ? void 0 : _b.split(/, */u);
        }
        return { metadata };
      }
    };
    exports.ActorRdfMetadataExtractAllowHttpMethods = ActorRdfMetadataExtractAllowHttpMethods;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-allow-http-methods/lib/index.js
var require_lib61 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-allow-http-methods/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractAllowHttpMethods(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-put-accepted/lib/ActorRdfMetadataExtractPutAccepted.js
var require_ActorRdfMetadataExtractPutAccepted = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-put-accepted/lib/ActorRdfMetadataExtractPutAccepted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractPutAccepted = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractPutAccepted = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        var _a, _b;
        const metadata = {};
        if ((_a = action.headers) == null ? void 0 : _a.get("accept-put")) {
          metadata.putAccepted = (_b = action.headers.get("accept-put")) == null ? void 0 : _b.split(/, */u);
        }
        return { metadata };
      }
    };
    exports.ActorRdfMetadataExtractPutAccepted = ActorRdfMetadataExtractPutAccepted;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-put-accepted/lib/index.js
var require_lib62 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-put-accepted/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractPutAccepted(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-patch-sparql-update/lib/ActorRdfMetadataExtractPatchSparqlUpdate.js
var require_ActorRdfMetadataExtractPatchSparqlUpdate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-patch-sparql-update/lib/ActorRdfMetadataExtractPatchSparqlUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractPatchSparqlUpdate = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var ActorRdfMetadataExtractPatchSparqlUpdate = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        var _a, _b, _c, _d;
        const metadata = {};
        if (((_b = (_a = action.headers) == null ? void 0 : _a.get("accept-patch")) == null ? void 0 : _b.includes("application/sparql-update")) ?? ((_d = (_c = action.headers) == null ? void 0 : _c.get("ms-author-via")) == null ? void 0 : _d.includes("SPARQL"))) {
          metadata.patchSparqlUpdate = true;
        }
        return { metadata };
      }
    };
    exports.ActorRdfMetadataExtractPatchSparqlUpdate = ActorRdfMetadataExtractPatchSparqlUpdate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-patch-sparql-update/lib/index.js
var require_lib63 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-patch-sparql-update/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractPatchSparqlUpdate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-sparql-service/lib/ActorRdfMetadataExtractSparqlService.js
var require_ActorRdfMetadataExtractSparqlService = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-sparql-service/lib/ActorRdfMetadataExtractSparqlService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractSparqlService = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ActorRdfMetadataExtractSparqlService = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return new Promise((resolve, reject) => {
          action.metadata.on("error", reject);
          const acceptSubjectUris = /* @__PURE__ */ new Set([action.url]);
          const metadata = {};
          const inputFormats = /* @__PURE__ */ new Set();
          const resultFormats = /* @__PURE__ */ new Set();
          const supportedLanguages = /* @__PURE__ */ new Set();
          action.metadata.on("data", (quad) => {
            if (quad.predicate.value === "http://rdfs.org/ns/void#subset" && quad.object.value === action.url) {
              acceptSubjectUris.add(quad.subject.value);
            } else if (quad.subject.value === metadata.defaultDataset || quad.subject.termType === "BlankNode" || acceptSubjectUris.has(quad.subject.value)) {
              switch (quad.predicate.value) {
                case "http://www.w3.org/ns/sparql-service-description#endpoint":
                  metadata.sparqlService = quad.object.termType === "Literal" ? (0, relative_to_absolute_iri_1.resolve)(quad.object.value, action.url) : quad.object.value;
                  if (this.inferHttpsEndpoint && action.url.startsWith("https") && !quad.object.value.startsWith("https")) {
                    metadata.sparqlService = metadata.sparqlService.replace(/^http:/u, "https:");
                  }
                  break;
                case "http://www.w3.org/ns/sparql-service-description#defaultDataset":
                  metadata.defaultDataset = quad.object.value;
                  break;
                case "http://www.w3.org/ns/sparql-service-description#defaultGraph":
                  metadata.defaultGraph = quad.object.value;
                  break;
                case "http://www.w3.org/ns/sparql-service-description#inputFormat":
                  inputFormats.add(quad.object.value);
                  break;
                case "http://www.w3.org/ns/sparql-service-description#resultFormat":
                  resultFormats.add(quad.object.value);
                  break;
                case "http://www.w3.org/ns/sparql-service-description#supportedLanguage":
                  supportedLanguages.add(quad.object.value);
                  break;
                case "http://www.w3.org/ns/sparql-service-description#feature":
                  if (quad.object.value === "http://www.w3.org/ns/sparql-service-description#UnionDefaultGraph") {
                    metadata.unionDefaultGraph = true;
                  } else if (quad.object.value === "http://www.w3.org/ns/sparql-service-description#BasicFederatedQuery") {
                    metadata.basicFederatedQuery = true;
                  }
                  break;
              }
            }
          });
          action.metadata.on("end", () => {
            resolve({ metadata: {
              ...metadata,
              ...inputFormats.size > 0 ? { inputFormats: [...inputFormats.values()] } : {},
              ...resultFormats.size > 0 ? { resultFormats: [...resultFormats.values()] } : {},
              ...supportedLanguages.size > 0 ? { supportedLanguages: [...supportedLanguages.values()] } : {}
            } });
          });
        });
      }
    };
    exports.ActorRdfMetadataExtractSparqlService = ActorRdfMetadataExtractSparqlService;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-sparql-service/lib/index.js
var require_lib64 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-sparql-service/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractSparqlService(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/Definitions.js
var require_Definitions = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/Definitions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VOID_CLASS_PARTITION = exports.VOID_PROPERTY_PARTITION = exports.VOID_DISTINCT_SUBJECTS = exports.VOID_DISTINCT_OBJECTS = exports.VOID_URI_REGEX_PATTERN = exports.VOID_URI_SPACE = exports.VOID_VOCABULARY = exports.VOID_PROPERTY = exports.VOID_CLASS = exports.VOID_ENTITIES = exports.VOID_TRIPLES = exports.VOID_CLASSES = exports.VOID_DATASET = exports.VOID = exports.SD_GRAPH = exports.SD_FEATURE = exports.SD_UNION_DEFAULT_GRAPH = exports.SD_DEFAULT_GRAPH = exports.SD_DEFAULT_DATASET = exports.SD = exports.RDF_TYPE = void 0;
    exports.RDF_TYPE = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
    exports.SD = "http://www.w3.org/ns/sparql-service-description#";
    exports.SD_DEFAULT_DATASET = `${exports.SD}defaultDataset`;
    exports.SD_DEFAULT_GRAPH = `${exports.SD}defaultGraph`;
    exports.SD_UNION_DEFAULT_GRAPH = `${exports.SD}UnionDefaultGraph`;
    exports.SD_FEATURE = `${exports.SD}feature`;
    exports.SD_GRAPH = `${exports.SD}Graph`;
    exports.VOID = "http://rdfs.org/ns/void#";
    exports.VOID_DATASET = `${exports.VOID}Dataset`;
    exports.VOID_CLASSES = `${exports.VOID}classes`;
    exports.VOID_TRIPLES = `${exports.VOID}triples`;
    exports.VOID_ENTITIES = `${exports.VOID}entities`;
    exports.VOID_CLASS = `${exports.VOID}class`;
    exports.VOID_PROPERTY = `${exports.VOID}property`;
    exports.VOID_VOCABULARY = `${exports.VOID}vocabulary`;
    exports.VOID_URI_SPACE = `${exports.VOID}uriSpace`;
    exports.VOID_URI_REGEX_PATTERN = `${exports.VOID}uriRegexPattern`;
    exports.VOID_DISTINCT_OBJECTS = `${exports.VOID}distinctSubjects`;
    exports.VOID_DISTINCT_SUBJECTS = `${exports.VOID}distinctObjects`;
    exports.VOID_PROPERTY_PARTITION = `${exports.VOID}propertyPartition`;
    exports.VOID_CLASS_PARTITION = `${exports.VOID}classPartition`;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/Estimators.js
var require_Estimators = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/Estimators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassPartitionEntities = exports.getPredicateTriples = exports.getPredicateSubjects = exports.getPredicateObjects = exports.getDistinctSubjects = exports.getDistinctObjects = exports.estimatePatternCardinalityRaw = exports.matchPatternVocabularies = exports.matchPatternResourceUris = exports.estimatePatternCardinality = void 0;
    var Definitions_1 = require_Definitions();
    function estimatePatternCardinality(dataset, pattern) {
      const estimate = { type: "exact", value: 0 };
      if (matchPatternVocabularies(dataset, pattern) && matchPatternResourceUris(dataset, pattern)) {
        const value = estimatePatternCardinalityRaw(dataset, pattern);
        if (value > 0) {
          estimate.value = value;
          estimate.type = "estimate";
        }
      }
      return estimate;
    }
    exports.estimatePatternCardinality = estimatePatternCardinality;
    function matchPatternResourceUris(dataset, pattern) {
      return !dataset.uriRegexPattern || (pattern.subject.termType !== "NamedNode" || dataset.uriRegexPattern.test(pattern.subject.value)) || (pattern.object.termType !== "NamedNode" || dataset.uriRegexPattern.test(pattern.object.value));
    }
    exports.matchPatternResourceUris = matchPatternResourceUris;
    function matchPatternVocabularies(dataset, pattern) {
      if (dataset.vocabularies !== void 0 && pattern.predicate.termType === "NamedNode") {
        return dataset.vocabularies.some((vc) => pattern.predicate.value.startsWith(vc));
      }
      return true;
    }
    exports.matchPatternVocabularies = matchPatternVocabularies;
    function estimatePatternCardinalityRaw(dataset, pattern) {
      if (pattern.subject.termType === "Variable" && pattern.predicate.termType === "NamedNode" && pattern.predicate.value === Definitions_1.RDF_TYPE && (pattern.object.termType === "NamedNode" || pattern.object.termType === "BlankNode")) {
        return getClassPartitionEntities(dataset, pattern.object);
      }
      if (pattern.subject.termType === "Variable" && pattern.predicate.termType === "Variable" && pattern.object.termType === "Variable") {
        return dataset.triples;
      }
      if ((pattern.subject.termType === "NamedNode" || pattern.subject.termType === "BlankNode") && pattern.predicate.termType === "Variable" && (pattern.object.termType === "Variable" || pattern.object.termType === "Literal")) {
        const distinctSubjects = getDistinctSubjects(dataset);
        if (distinctSubjects > 0) {
          return dataset.triples / distinctSubjects;
        }
      }
      if (pattern.subject.termType === "Variable" && pattern.predicate.termType === "NamedNode" && (pattern.object.termType === "Variable" || pattern.object.termType === "Literal")) {
        return getPredicateTriples(dataset, pattern.predicate);
      }
      if (pattern.subject.termType === "Variable" && pattern.predicate.termType === "Variable" && (pattern.object.termType === "NamedNode" || pattern.object.termType === "BlankNode" || pattern.object.termType === "Literal")) {
        const distinctObjects = getDistinctObjects(dataset);
        if (distinctObjects > 0) {
          return dataset.triples / distinctObjects;
        }
      }
      if ((pattern.subject.termType === "NamedNode" || pattern.subject.termType === "BlankNode") && pattern.predicate.termType === "NamedNode" && (pattern.object.termType === "Variable" || pattern.object.termType === "Literal")) {
        const predicateTriples = getPredicateTriples(dataset, pattern.predicate);
        const predicateSubjects = getPredicateSubjects(dataset, pattern.predicate);
        return predicateSubjects > 0 ? predicateTriples / predicateSubjects : predicateTriples;
      }
      if ((pattern.subject.termType === "NamedNode" || pattern.subject.termType === "BlankNode") && pattern.predicate.termType === "Variable" && (pattern.object.termType === "NamedNode" || pattern.object.termType === "BlankNode")) {
        const distinctSubjects = getDistinctSubjects(dataset);
        const distinctObjects = getDistinctObjects(dataset);
        if (distinctSubjects > 0 && distinctObjects > 0) {
          return dataset.triples / (distinctSubjects * distinctObjects);
        }
      }
      if (pattern.subject.termType === "Variable" && pattern.predicate.termType === "NamedNode" && (pattern.object.termType === "NamedNode" || pattern.object.termType === "BlankNode")) {
        const predicateTriples = getPredicateTriples(dataset, pattern.predicate);
        const predicateObjects = getPredicateObjects(dataset, pattern.predicate);
        return predicateObjects > 0 ? predicateTriples / predicateObjects : predicateTriples;
      }
      if ((pattern.subject.termType === "NamedNode" || pattern.subject.termType === "BlankNode") && pattern.predicate.termType === "NamedNode" && (pattern.object.termType === "NamedNode" || pattern.object.termType === "BlankNode")) {
        const predicateTriples = getPredicateTriples(dataset, pattern.predicate);
        const predicateSubjects = getPredicateSubjects(dataset, pattern.predicate);
        const predicateObjects = getPredicateObjects(dataset, pattern.predicate);
        return predicateSubjects > 0 && predicateObjects > 0 ? predicateTriples / (predicateSubjects * predicateObjects) : predicateTriples;
      }
      return dataset.triples;
    }
    exports.estimatePatternCardinalityRaw = estimatePatternCardinalityRaw;
    function getDistinctObjects(dataset) {
      return dataset.distinctObjects ?? dataset.entities ?? dataset.triples;
    }
    exports.getDistinctObjects = getDistinctObjects;
    function getDistinctSubjects(dataset) {
      return dataset.distinctSubjects ?? dataset.entities ?? dataset.triples;
    }
    exports.getDistinctSubjects = getDistinctSubjects;
    function getPredicateObjects(dataset, predicate) {
      if (dataset.propertyPartitions) {
        const partition2 = dataset.propertyPartitions[predicate.value];
        return (partition2 == null ? void 0 : partition2.distinctObjects) ?? (partition2 == null ? void 0 : partition2.triples) ?? 0;
      }
      return dataset.triples;
    }
    exports.getPredicateObjects = getPredicateObjects;
    function getPredicateSubjects(dataset, predicate) {
      if (dataset.propertyPartitions) {
        const partition2 = dataset.propertyPartitions[predicate.value];
        return (partition2 == null ? void 0 : partition2.distinctSubjects) ?? (partition2 == null ? void 0 : partition2.triples) ?? 0;
      }
      return dataset.triples;
    }
    exports.getPredicateSubjects = getPredicateSubjects;
    function getPredicateTriples(dataset, predicate) {
      var _a;
      if (dataset.propertyPartitions) {
        return ((_a = dataset.propertyPartitions[predicate.value]) == null ? void 0 : _a.triples) ?? 0;
      }
      return dataset.triples;
    }
    exports.getPredicateTriples = getPredicateTriples;
    function getClassPartitionEntities(dataset, object) {
      var _a;
      if (dataset.classPartitions) {
        return ((_a = dataset.classPartitions[object.value]) == null ? void 0 : _a.entities) ?? 0;
      }
      if (dataset.entities !== void 0 && dataset.classes) {
        return dataset.entities / dataset.classes;
      }
      return dataset.triples;
    }
    exports.getClassPartitionEntities = getClassPartitionEntities;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/ActorRdfMetadataExtractVoid.js
var require_ActorRdfMetadataExtractVoid = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/ActorRdfMetadataExtractVoid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataExtractVoid = void 0;
    var bus_rdf_metadata_extract_1 = require_lib56();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var Definitions_1 = require_Definitions();
    var Estimators_1 = require_Estimators();
    var ActorRdfMetadataExtractVoid = class extends bus_rdf_metadata_extract_1.ActorRdfMetadataExtract {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return new Promise((resolve, reject) => {
          const datasetUris = /* @__PURE__ */ new Set();
          const ignoredUris = /* @__PURE__ */ new Set();
          const triples = {};
          const entities = {};
          const vocabularies = {};
          const classes = {};
          const distinctObjects = {};
          const distinctSubjects = {};
          const uriRegexPatterns = {};
          const propertyPartitions = {};
          const propertyPartitionProperties = {};
          const classPartitions = {};
          const classPartitionClasses = {};
          let defaultDatasetUri;
          let defaultGraphUri;
          let unionDefaultGraph = false;
          action.metadata.on("error", reject).on("data", (quad) => {
            switch (quad.predicate.value) {
              case Definitions_1.RDF_TYPE:
                if (quad.object.value === Definitions_1.SD_GRAPH || quad.object.value === Definitions_1.VOID_DATASET) {
                  datasetUris.add(quad.subject.value);
                }
                break;
              case Definitions_1.VOID_TRIPLES:
                triples[quad.subject.value] = Number.parseInt(quad.object.value, 10);
                break;
              case Definitions_1.VOID_ENTITIES:
                entities[quad.subject.value] = Number.parseInt(quad.object.value, 10);
                break;
              case Definitions_1.VOID_CLASSES:
                classes[quad.subject.value] = Number.parseInt(quad.object.value, 10);
                break;
              case Definitions_1.VOID_CLASS:
                classPartitionClasses[quad.subject.value] = quad.object.value;
                break;
              case Definitions_1.VOID_PROPERTY:
                propertyPartitionProperties[quad.subject.value] = quad.object.value;
                break;
              case Definitions_1.VOID_DISTINCT_OBJECTS:
                distinctObjects[quad.subject.value] = Number.parseInt(quad.object.value, 10);
                break;
              case Definitions_1.VOID_DISTINCT_SUBJECTS:
                distinctSubjects[quad.subject.value] = Number.parseInt(quad.object.value, 10);
                break;
              case Definitions_1.VOID_VOCABULARY:
                if (vocabularies[quad.subject.value]) {
                  vocabularies[quad.subject.value].push(quad.object.value);
                } else {
                  vocabularies[quad.subject.value] = [quad.object.value];
                }
                break;
              case Definitions_1.VOID_URI_SPACE:
                if (!uriRegexPatterns[quad.subject.value]) {
                  uriRegexPatterns[quad.subject.value] = new RegExp(`^${quad.object.value}`, "u");
                }
                break;
              case Definitions_1.VOID_URI_REGEX_PATTERN:
                uriRegexPatterns[quad.subject.value] = new RegExp(quad.object.value, "u");
                break;
              case Definitions_1.VOID_PROPERTY_PARTITION:
                ignoredUris.add(quad.object.value);
                if (propertyPartitions[quad.subject.value]) {
                  propertyPartitions[quad.subject.value].push(quad.object.value);
                } else {
                  propertyPartitions[quad.subject.value] = [quad.object.value];
                }
                break;
              case Definitions_1.VOID_CLASS_PARTITION:
                ignoredUris.add(quad.object.value);
                if (classPartitions[quad.subject.value]) {
                  classPartitions[quad.subject.value].push(quad.object.value);
                } else {
                  classPartitions[quad.subject.value] = [quad.object.value];
                }
                break;
              case Definitions_1.SD_DEFAULT_DATASET:
                defaultDatasetUri = quad.object.value;
                break;
              case Definitions_1.SD_DEFAULT_GRAPH:
                defaultGraphUri = quad.object.value;
                break;
              case Definitions_1.SD_FEATURE:
                if (quad.object.value === Definitions_1.SD_UNION_DEFAULT_GRAPH) {
                  unionDefaultGraph = true;
                }
                break;
            }
          }).on("end", () => {
            var _a;
            const datasets = [];
            const getPropertyPartitions = (uri) => {
              const partitions = {};
              for (const partitionUri of propertyPartitions[uri]) {
                const propertyUri = propertyPartitionProperties[partitionUri];
                if (propertyUri) {
                  partitions[propertyUri] = {
                    distinctObjects: distinctObjects[partitionUri],
                    distinctSubjects: distinctSubjects[partitionUri],
                    triples: triples[partitionUri]
                  };
                }
              }
              return partitions;
            };
            const getClassPartitions = (uri) => {
              const partitions = {};
              for (const partitionUri of classPartitions[uri]) {
                const classUri = classPartitionClasses[partitionUri];
                if (classUri) {
                  partitions[classUri] = {
                    entities: entities[partitionUri],
                    propertyPartitions: propertyPartitions[partitionUri] ? getPropertyPartitions(partitionUri) : void 0
                  };
                }
              }
              return partitions;
            };
            if (defaultDatasetUri) {
              ignoredUris.add(defaultDatasetUri);
            }
            if (unionDefaultGraph && defaultGraphUri) {
              ignoredUris.add(defaultGraphUri);
            }
            if (defaultDatasetUri && defaultGraphUri && vocabularies[defaultDatasetUri]) {
              vocabularies[defaultGraphUri] = [
                ...vocabularies[defaultGraphUri] ?? [],
                ...vocabularies[defaultDatasetUri]
              ];
            }
            for (const uri of ignoredUris) {
              datasetUris.delete(uri);
            }
            for (const uri of datasetUris) {
              if (triples[uri]) {
                const dataset = {
                  entities: entities[uri],
                  identifier: uri,
                  classes: classes[uri] ?? ((_a = classPartitions[uri]) == null ? void 0 : _a.length) ?? 0,
                  classPartitions: classPartitions[uri] ? getClassPartitions(uri) : void 0,
                  distinctObjects: distinctObjects[uri],
                  distinctSubjects: distinctSubjects[uri],
                  propertyPartitions: propertyPartitions[uri] ? getPropertyPartitions(uri) : void 0,
                  triples: triples[uri],
                  uriRegexPattern: uriRegexPatterns[uri],
                  vocabularies: vocabularies[uri]
                };
                datasets.push({
                  uri,
                  source: action.url,
                  getCardinality: (operation) => {
                    if (operation.type === sparqlalgebrajs_1.Algebra.types.PATTERN) {
                      return { ...(0, Estimators_1.estimatePatternCardinality)(dataset, operation), dataset: uri };
                    }
                  }
                });
              }
            }
            resolve({ metadata: datasets.length > 0 ? { datasets } : {} });
          });
        });
      }
    };
    exports.ActorRdfMetadataExtractVoid = ActorRdfMetadataExtractVoid;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/index.js
var require_lib65 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-metadata-extract-void/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataExtractVoid(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/ActorRdfParse.js
var require_ActorRdfParse = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/ActorRdfParse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParse = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var ActorRdfParse = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTyped {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfParse = ActorRdfParse;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/ActorRdfParseFixedMediaTypes.js
var require_ActorRdfParseFixedMediaTypes = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/ActorRdfParseFixedMediaTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseFixedMediaTypes = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var core_1 = require_lib();
    var ActorRdfParseFixedMediaTypes = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTypedFixed {
      /* eslint-disable max-len */
      /**
       * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor
       * @param args -
       *   \ @defaultNested {<cbrp:components/ActorRdfParse.jsonld#ActorRdfParse_default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}} busFailMessage
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(_action) {
        return (0, core_1.passTestVoid)();
      }
    };
    exports.ActorRdfParseFixedMediaTypes = ActorRdfParseFixedMediaTypes;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/index.js
var require_lib66 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-parse/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParse(), exports);
    __exportStar(require_ActorRdfParseFixedMediaTypes(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-n3/lib/ActorRdfParseN3.js
var require_ActorRdfParseN3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-n3/lib/ActorRdfParseN3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseN3 = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var context_entries_1 = require_lib3();
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var ActorRdfParseN3 = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/n-quads": 1.0,
       *       "application/trig": 0.95,
       *       "application/n-triples": 0.8,
       *       "text/turtle": 0.6,
       *       "text/n3": 0.35
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/n-quads": "http://www.w3.org/ns/formats/N-Quads",
       *       "application/trig": "http://www.w3.org/ns/formats/TriG",
       *       "application/n-triples": "http://www.w3.org/ns/formats/N-Triples",
       *       "text/turtle": "http://www.w3.org/ns/formats/Turtle",
       *       "text/n3": "http://www.w3.org/ns/formats/N3"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, _context) {
        var _a;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        action.data.on("error", (error) => data.emit("error", error));
        const data = action.data.pipe(new n3_1.StreamParser({
          factory: dataFactory,
          baseIRI: (_a = action.metadata) == null ? void 0 : _a.baseIRI,
          // Enable RDF-star-mode on all formats, except N3, where this is not supported.
          format: mediaType.endsWith("n3") ? mediaType : `${mediaType}*`
        }));
        return {
          data,
          metadata: {
            triples: mediaType === "text/turtle" || mediaType === "application/n-triples" || mediaType === "text/n3"
          }
        };
      }
    };
    exports.ActorRdfParseN3 = ActorRdfParseN3;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-n3/lib/index.js
var require_lib67 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-n3/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseN3(), exports);
  }
});

// ../../lipdjs/node_modules/xmlchars/xml/1.0/ed5.js
var require_ed5 = __commonJS({
  "../../lipdjs/node_modules/xmlchars/xml/1.0/ed5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAR = "	\n\r -퟿-�𐀀-􏿿";
    exports.S = " 	\r\n";
    exports.NAME_START_CHAR = ":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿";
    exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9·̀-ͯ‿-⁀";
    exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
    exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
    exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
    exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
    exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
    exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    exports.S_LIST = [SPACE, NL, CR, TAB];
    function isChar(c) {
      return c >= SPACE && c <= 55295 || c === NL || c === CR || c === TAB || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isChar = isChar;
    function isS(c) {
      return c === SPACE || c === NL || c === CR || c === TAB;
    }
    exports.isS = isS;
    function isNameStartChar(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122 || c === 58 || c === 95 || c === 8204 || c === 8205 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNameStartChar = isNameStartChar;
    function isNameChar(c) {
      return isNameStartChar(c) || c >= 48 && c <= 57 || c === 45 || c === 46 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256;
    }
    exports.isNameChar = isNameChar;
  }
});

// ../../lipdjs/node_modules/xmlchars/xml/1.1/ed2.js
var require_ed2 = __commonJS({
  "../../lipdjs/node_modules/xmlchars/xml/1.1/ed2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAR = "-퟿-�𐀀-􏿿";
    exports.RESTRICTED_CHAR = "-\b\v\f---";
    exports.S = " 	\r\n";
    exports.NAME_START_CHAR = ":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿";
    exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9·̀-ͯ‿-⁀";
    exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
    exports.RESTRICTED_CHAR_RE = new RegExp("^[" + exports.RESTRICTED_CHAR + "]$", "u");
    exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
    exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
    exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
    exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
    exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    exports.S_LIST = [SPACE, NL, CR, TAB];
    function isChar(c) {
      return c >= 1 && c <= 55295 || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isChar = isChar;
    function isRestrictedChar(c) {
      return c >= 1 && c <= 8 || c === 11 || c === 12 || c >= 14 && c <= 31 || c >= 127 && c <= 132 || c >= 134 && c <= 159;
    }
    exports.isRestrictedChar = isRestrictedChar;
    function isCharAndNotRestricted(c) {
      return c === 9 || c === 10 || c === 13 || c > 31 && c < 127 || c === 133 || c > 159 && c <= 55295 || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isCharAndNotRestricted = isCharAndNotRestricted;
    function isS(c) {
      return c === SPACE || c === NL || c === CR || c === TAB;
    }
    exports.isS = isS;
    function isNameStartChar(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122 || c === 58 || c === 95 || c === 8204 || c === 8205 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNameStartChar = isNameStartChar;
    function isNameChar(c) {
      return isNameStartChar(c) || c >= 48 && c <= 57 || c === 45 || c === 46 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256;
    }
    exports.isNameChar = isNameChar;
  }
});

// ../../lipdjs/node_modules/xmlchars/xmlns/1.0/ed3.js
var require_ed3 = __commonJS({
  "../../lipdjs/node_modules/xmlchars/xmlns/1.0/ed3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NC_NAME_START_CHAR = "A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�𐀀-󯿿";
    exports.NC_NAME_CHAR = "-" + exports.NC_NAME_START_CHAR + ".0-9·̀-ͯ‿-⁀";
    exports.NC_NAME_START_CHAR_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "]$", "u");
    exports.NC_NAME_CHAR_RE = new RegExp("^[" + exports.NC_NAME_CHAR + "]$", "u");
    exports.NC_NAME_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "][" + exports.NC_NAME_CHAR + "]*$", "u");
    function isNCNameStartChar(c) {
      return c >= 65 && c <= 90 || c === 95 || c >= 97 && c <= 122 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNCNameStartChar = isNCNameStartChar;
    function isNCNameChar(c) {
      return isNCNameStartChar(c) || (c === 45 || c === 46 || c >= 48 && c <= 57 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256);
    }
    exports.isNCNameChar = isNCNameChar;
  }
});

// ../../lipdjs/node_modules/@rubensworks/saxes/saxes.js
var require_saxes = __commonJS({
  "../../lipdjs/node_modules/@rubensworks/saxes/saxes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SaxesParser = exports.EVENTS = void 0;
    var ed5 = require_ed5();
    var ed2 = require_ed2();
    var NSed3 = require_ed3();
    var isS = ed5.isS;
    var isChar10 = ed5.isChar;
    var isNameStartChar = ed5.isNameStartChar;
    var isNameChar = ed5.isNameChar;
    var S_LIST = ed5.S_LIST;
    var NAME_RE = ed5.NAME_RE;
    var isChar11 = ed2.isChar;
    var isNCNameStartChar = NSed3.isNCNameStartChar;
    var isNCNameChar = NSed3.isNCNameChar;
    var NC_NAME_RE = NSed3.NC_NAME_RE;
    var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
    var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
    var rootNS = {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
      __proto__: null,
      xml: XML_NAMESPACE,
      xmlns: XMLNS_NAMESPACE
    };
    var XML_ENTITIES = {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
      __proto__: null,
      amp: "&",
      gt: ">",
      lt: "<",
      quot: '"',
      apos: "'"
    };
    var EOC = -1;
    var NL_LIKE = -2;
    var S_BEGIN = 0;
    var S_BEGIN_WHITESPACE = 1;
    var S_DOCTYPE = 2;
    var S_DOCTYPE_QUOTE = 3;
    var S_DTD = 4;
    var S_DTD_QUOTED = 5;
    var S_DTD_OPEN_WAKA = 6;
    var S_DTD_OPEN_WAKA_BANG = 7;
    var S_DTD_COMMENT = 8;
    var S_DTD_COMMENT_ENDING = 9;
    var S_DTD_COMMENT_ENDED = 10;
    var S_DTD_PI = 11;
    var S_DTD_PI_ENDING = 12;
    var S_TEXT = 13;
    var S_ENTITY = 14;
    var S_OPEN_WAKA = 15;
    var S_OPEN_WAKA_BANG = 16;
    var S_COMMENT = 17;
    var S_COMMENT_ENDING = 18;
    var S_COMMENT_ENDED = 19;
    var S_CDATA = 20;
    var S_CDATA_ENDING = 21;
    var S_CDATA_ENDING_2 = 22;
    var S_PI_FIRST_CHAR = 23;
    var S_PI_REST = 24;
    var S_PI_BODY = 25;
    var S_PI_ENDING = 26;
    var S_XML_DECL_NAME_START = 27;
    var S_XML_DECL_NAME = 28;
    var S_XML_DECL_EQ = 29;
    var S_XML_DECL_VALUE_START = 30;
    var S_XML_DECL_VALUE = 31;
    var S_XML_DECL_SEPARATOR = 32;
    var S_XML_DECL_ENDING = 33;
    var S_OPEN_TAG = 34;
    var S_OPEN_TAG_SLASH = 35;
    var S_ATTRIB = 36;
    var S_ATTRIB_NAME = 37;
    var S_ATTRIB_NAME_SAW_WHITE = 38;
    var S_ATTRIB_VALUE = 39;
    var S_ATTRIB_VALUE_QUOTED = 40;
    var S_ATTRIB_VALUE_CLOSED = 41;
    var S_ATTRIB_VALUE_UNQUOTED = 42;
    var S_CLOSE_TAG = 43;
    var S_CLOSE_TAG_SAW_WHITE = 44;
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    var BANG = 33;
    var DQUOTE = 34;
    var AMP = 38;
    var SQUOTE = 39;
    var MINUS = 45;
    var FORWARD_SLASH = 47;
    var SEMICOLON = 59;
    var LESS = 60;
    var EQUAL = 61;
    var GREATER = 62;
    var QUESTION = 63;
    var OPEN_BRACKET = 91;
    var CLOSE_BRACKET = 93;
    var NEL = 133;
    var LS = 8232;
    var isQuote = (c) => c === DQUOTE || c === SQUOTE;
    var QUOTES = [DQUOTE, SQUOTE];
    var DOCTYPE_TERMINATOR = [...QUOTES, OPEN_BRACKET, GREATER];
    var DTD_TERMINATOR = [...QUOTES, LESS, CLOSE_BRACKET];
    var XML_DECL_NAME_TERMINATOR = [EQUAL, QUESTION, ...S_LIST];
    var ATTRIB_VALUE_UNQUOTED_TERMINATOR = [...S_LIST, GREATER, AMP, LESS];
    function nsPairCheck(parser, prefix, uri) {
      switch (prefix) {
        case "xml":
          if (uri !== XML_NAMESPACE) {
            parser.fail(`xml prefix must be bound to ${XML_NAMESPACE}.`);
          }
          break;
        case "xmlns":
          if (uri !== XMLNS_NAMESPACE) {
            parser.fail(`xmlns prefix must be bound to ${XMLNS_NAMESPACE}.`);
          }
          break;
        default:
      }
      switch (uri) {
        case XMLNS_NAMESPACE:
          parser.fail(prefix === "" ? `the default namespace may not be set to ${uri}.` : `may not assign a prefix (even "xmlns") to the URI ${XMLNS_NAMESPACE}.`);
          break;
        case XML_NAMESPACE:
          switch (prefix) {
            case "xml":
              break;
            case "":
              parser.fail(`the default namespace may not be set to ${uri}.`);
              break;
            default:
              parser.fail("may not assign the xml namespace to another prefix.");
          }
          break;
        default:
      }
    }
    function nsMappingCheck(parser, mapping) {
      for (const local of Object.keys(mapping)) {
        nsPairCheck(parser, local, mapping[local]);
      }
    }
    var isNCName = (name) => NC_NAME_RE.test(name);
    var isName = (name) => NAME_RE.test(name);
    var FORBIDDEN_START = 0;
    var FORBIDDEN_BRACKET = 1;
    var FORBIDDEN_BRACKET_BRACKET = 2;
    exports.EVENTS = [
      "xmldecl",
      "text",
      "processinginstruction",
      "doctype",
      "comment",
      "opentagstart",
      "attribute",
      "opentag",
      "closetag",
      "cdata",
      "error",
      "end",
      "ready"
    ];
    var EVENT_NAME_TO_HANDLER_NAME = {
      xmldecl: "xmldeclHandler",
      text: "textHandler",
      processinginstruction: "piHandler",
      doctype: "doctypeHandler",
      comment: "commentHandler",
      opentagstart: "openTagStartHandler",
      attribute: "attributeHandler",
      opentag: "openTagHandler",
      closetag: "closeTagHandler",
      cdata: "cdataHandler",
      error: "errorHandler",
      end: "endHandler",
      ready: "readyHandler"
    };
    var SaxesParser = class {
      /**
       * Indicates whether or not the parser is closed. If ``true``, wait for
       * the ``ready`` event to write again.
       */
      get closed() {
        return this._closed;
      }
      /**
       * @param opt The parser options.
       */
      constructor(opt) {
        this.opt = opt !== null && opt !== void 0 ? opt : {};
        this.fragmentOpt = !!this.opt.fragment;
        const xmlnsOpt = this.xmlnsOpt = !!this.opt.xmlns;
        this.trackPosition = this.opt.position !== false;
        this.fileName = this.opt.fileName;
        if (xmlnsOpt) {
          this.nameStartCheck = isNCNameStartChar;
          this.nameCheck = isNCNameChar;
          this.isName = isNCName;
          this.processAttribs = this.processAttribsNS;
          this.pushAttrib = this.pushAttribNS;
          this.ns = Object.assign({ __proto__: null }, rootNS);
          const additional = this.opt.additionalNamespaces;
          if (additional != null) {
            nsMappingCheck(this, additional);
            Object.assign(this.ns, additional);
          }
        } else {
          this.nameStartCheck = isNameStartChar;
          this.nameCheck = isNameChar;
          this.isName = isName;
          this.processAttribs = this.processAttribsPlain;
          this.pushAttrib = this.pushAttribPlain;
        }
        this.stateTable = [
          /* eslint-disable @typescript-eslint/unbound-method */
          this.sBegin,
          this.sBeginWhitespace,
          this.sDoctype,
          this.sDoctypeQuote,
          this.sDTD,
          this.sDTDQuoted,
          this.sDTDOpenWaka,
          this.sDTDOpenWakaBang,
          this.sDTDComment,
          this.sDTDCommentEnding,
          this.sDTDCommentEnded,
          this.sDTDPI,
          this.sDTDPIEnding,
          this.sText,
          this.sEntity,
          this.sOpenWaka,
          this.sOpenWakaBang,
          this.sComment,
          this.sCommentEnding,
          this.sCommentEnded,
          this.sCData,
          this.sCDataEnding,
          this.sCDataEnding2,
          this.sPIFirstChar,
          this.sPIRest,
          this.sPIBody,
          this.sPIEnding,
          this.sXMLDeclNameStart,
          this.sXMLDeclName,
          this.sXMLDeclEq,
          this.sXMLDeclValueStart,
          this.sXMLDeclValue,
          this.sXMLDeclSeparator,
          this.sXMLDeclEnding,
          this.sOpenTag,
          this.sOpenTagSlash,
          this.sAttrib,
          this.sAttribName,
          this.sAttribNameSawWhite,
          this.sAttribValue,
          this.sAttribValueQuoted,
          this.sAttribValueClosed,
          this.sAttribValueUnquoted,
          this.sCloseTag,
          this.sCloseTagSawWhite
          /* eslint-enable @typescript-eslint/unbound-method */
        ];
        this._init();
      }
      _init() {
        var _a;
        this.openWakaBang = "";
        this.text = "";
        this.name = "";
        this.piTarget = "";
        this.entity = "";
        this.q = null;
        this.tags = [];
        this.tag = null;
        this.topNS = null;
        this.chunk = "";
        this.chunkPosition = 0;
        this.i = 0;
        this.prevI = 0;
        this.carriedFromPrevious = void 0;
        this.forbiddenState = FORBIDDEN_START;
        this.attribList = [];
        const { fragmentOpt } = this;
        this.state = fragmentOpt ? S_TEXT : S_BEGIN;
        this.reportedTextBeforeRoot = this.reportedTextAfterRoot = this.closedRoot = this.sawRoot = fragmentOpt;
        this.xmlDeclPossible = !fragmentOpt;
        this.xmlDeclExpects = ["version"];
        this.entityReturnState = void 0;
        let { defaultXMLVersion } = this.opt;
        if (defaultXMLVersion === void 0) {
          if (this.opt.forceXMLVersion === true) {
            throw new Error("forceXMLVersion set but defaultXMLVersion is not set");
          }
          defaultXMLVersion = "1.0";
        }
        this.setXMLVersion(defaultXMLVersion);
        this.positionAtNewLine = 0;
        this.doctype = false;
        this._closed = false;
        this.xmlDecl = {
          version: void 0,
          encoding: void 0,
          standalone: void 0
        };
        this.line = 1;
        this.column = 0;
        this.ENTITIES = Object.create(XML_ENTITIES);
        (_a = this.readyHandler) === null || _a === void 0 ? void 0 : _a.call(this);
      }
      /**
       * The stream position the parser is currently looking at. This field is
       * zero-based.
       *
       * This field is not based on counting Unicode characters but is to be
       * interpreted as a plain index into a JavaScript string.
       */
      get position() {
        return this.chunkPosition + this.i;
      }
      /**
       * The column number of the next character to be read by the parser.  *
       * This field is zero-based. (The first column in a line is 0.)
       *
       * This field reports the index at which the next character would be in the
       * line if the line were represented as a JavaScript string.  Note that this
       * *can* be different to a count based on the number of *Unicode characters*
       * due to how JavaScript handles astral plane characters.
       *
       * See [[column]] for a number that corresponds to a count of Unicode
       * characters.
       */
      get columnIndex() {
        return this.position - this.positionAtNewLine;
      }
      /**
       * Set an event listener on an event. The parser supports one handler per
       * event type. If you try to set an event handler over an existing handler,
       * the old handler is silently overwritten.
       *
       * @param name The event to listen to.
       *
       * @param handler The handler to set.
       */
      on(name, handler) {
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = handler;
      }
      /**
       * Unset an event handler.
       *
       * @parma name The event to stop listening to.
       */
      off(name) {
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = void 0;
      }
      /**
       * Make an error object. The error object will have a message that contains
       * the ``fileName`` option passed at the creation of the parser. If position
       * tracking was turned on, it will also have line and column number
       * information.
       *
       * @param message The message describing the error to report.
       *
       * @returns An error object with a properly formatted message.
       */
      makeError(message) {
        var _a;
        let msg = (_a = this.fileName) !== null && _a !== void 0 ? _a : "";
        if (this.trackPosition) {
          if (msg.length > 0) {
            msg += ":";
          }
          msg += `${this.line}:${this.column}`;
        }
        if (msg.length > 0) {
          msg += ": ";
        }
        return new Error(msg + message);
      }
      /**
       * Report a parsing error. This method is made public so that client code may
       * check for issues that are outside the scope of this project and can report
       * errors.
       *
       * @param message The error to report.
       *
       * @returns this
       */
      fail(message) {
        const err = this.makeError(message);
        const handler = this.errorHandler;
        if (handler === void 0) {
          throw err;
        } else {
          handler(err);
        }
        return this;
      }
      /**
       * Write a XML data to the parser.
       *
       * @param chunk The XML data to write.
       *
       * @returns this
       */
      // We do need object for the type here. Yes, it often causes problems
      // but not in this case.
      write(chunk) {
        if (this.closed) {
          return this.fail("cannot write after close; assign an onready handler.");
        }
        let end = false;
        if (chunk === null) {
          end = true;
          chunk = "";
        } else if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        if (this.carriedFromPrevious !== void 0) {
          chunk = `${this.carriedFromPrevious}${chunk}`;
          this.carriedFromPrevious = void 0;
        }
        let limit = chunk.length;
        const lastCode = chunk.charCodeAt(limit - 1);
        if (!end && // A trailing CR or surrogate must be carried over to the next
        // chunk.
        (lastCode === CR || lastCode >= 55296 && lastCode <= 56319)) {
          this.carriedFromPrevious = chunk[limit - 1];
          limit--;
          chunk = chunk.slice(0, limit);
        }
        const { stateTable } = this;
        this.chunk = chunk;
        this.i = 0;
        while (this.i < limit) {
          stateTable[this.state].call(this);
        }
        this.chunkPosition += limit;
        return end ? this.end() : this;
      }
      /**
       * Close the current stream. Perform final well-formedness checks and reset
       * the parser tstate.
       *
       * @returns this
       */
      close() {
        return this.write(null);
      }
      /**
       * Get a single code point out of the current chunk. This updates the current
       * position if we do position tracking.
       *
       * This is the algorithm to use for XML 1.0.
       *
       * @returns The character read.
       */
      getCode10() {
        const { chunk, i } = this;
        this.prevI = i;
        this.i = i + 1;
        if (i >= chunk.length) {
          return EOC;
        }
        const code = chunk.charCodeAt(i);
        this.column++;
        if (code < 55296) {
          if (code >= SPACE || code === TAB) {
            return code;
          }
          switch (code) {
            case NL:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL;
            case CR:
              if (chunk.charCodeAt(i + 1) === NL) {
                this.i = i + 2;
              }
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL_LIKE;
            default:
              this.fail("disallowed character.");
              return code;
          }
        }
        if (code > 56319) {
          if (!(code >= 57344 && code <= 65533)) {
            this.fail("disallowed character.");
          }
          return code;
        }
        const final = 65536 + (code - 55296) * 1024 + (chunk.charCodeAt(i + 1) - 56320);
        this.i = i + 2;
        if (final > 1114111) {
          this.fail("disallowed character.");
        }
        return final;
      }
      /**
       * Get a single code point out of the current chunk. This updates the current
       * position if we do position tracking.
       *
       * This is the algorithm to use for XML 1.1.
       *
       * @returns {number} The character read.
       */
      getCode11() {
        const { chunk, i } = this;
        this.prevI = i;
        this.i = i + 1;
        if (i >= chunk.length) {
          return EOC;
        }
        const code = chunk.charCodeAt(i);
        this.column++;
        if (code < 55296) {
          if (code > 31 && code < 127 || code > 159 && code !== LS || code === TAB) {
            return code;
          }
          switch (code) {
            case NL:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL;
            case CR: {
              const next = chunk.charCodeAt(i + 1);
              if (next === NL || next === NEL) {
                this.i = i + 2;
              }
            }
            case NEL:
            case LS:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL_LIKE;
            default:
              this.fail("disallowed character.");
              return code;
          }
        }
        if (code > 56319) {
          if (!(code >= 57344 && code <= 65533)) {
            this.fail("disallowed character.");
          }
          return code;
        }
        const final = 65536 + (code - 55296) * 1024 + (chunk.charCodeAt(i + 1) - 56320);
        this.i = i + 2;
        if (final > 1114111) {
          this.fail("disallowed character.");
        }
        return final;
      }
      /**
       * Like ``getCode`` but with the return value normalized so that ``NL`` is
       * returned for ``NL_LIKE``.
       */
      getCodeNorm() {
        const c = this.getCode();
        return c === NL_LIKE ? NL : c;
      }
      unget() {
        this.i = this.prevI;
        this.column--;
      }
      /**
       * Capture characters into a buffer until encountering one of a set of
       * characters.
       *
       * @param chars An array of codepoints. Encountering a character in the array
       * ends the capture. (``chars`` may safely contain ``NL``.)
       *
       * @return The character code that made the capture end, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      captureTo(chars) {
        let { i: start } = this;
        const { chunk } = this;
        while (true) {
          const c = this.getCode();
          const isNLLike = c === NL_LIKE;
          const final = isNLLike ? NL : c;
          if (final === EOC || chars.includes(final)) {
            this.text += chunk.slice(start, this.prevI);
            return final;
          }
          if (isNLLike) {
            this.text += `${chunk.slice(start, this.prevI)}
`;
            start = this.i;
          }
        }
      }
      /**
       * Capture characters into a buffer until encountering a character.
       *
       * @param char The codepoint that ends the capture. **NOTE ``char`` MAY NOT
       * CONTAIN ``NL``.** Passing ``NL`` will result in buggy behavior.
       *
       * @return ``true`` if we ran into the character. Otherwise, we ran into the
       * end of the current chunk.
       */
      captureToChar(char) {
        let { i: start } = this;
        const { chunk } = this;
        while (true) {
          let c = this.getCode();
          switch (c) {
            case NL_LIKE:
              this.text += `${chunk.slice(start, this.prevI)}
`;
              start = this.i;
              c = NL;
              break;
            case EOC:
              this.text += chunk.slice(start);
              return false;
            default:
          }
          if (c === char) {
            this.text += chunk.slice(start, this.prevI);
            return true;
          }
        }
      }
      /**
       * Capture characters that satisfy ``isNameChar`` into the ``name`` field of
       * this parser.
       *
       * @return The character code that made the test fail, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      captureNameChars() {
        const { chunk, i: start } = this;
        while (true) {
          const c = this.getCode();
          if (c === EOC) {
            this.name += chunk.slice(start);
            return EOC;
          }
          if (!isNameChar(c)) {
            this.name += chunk.slice(start, this.prevI);
            return c === NL_LIKE ? NL : c;
          }
        }
      }
      /**
       * Skip white spaces.
       *
       * @return The character that ended the skip, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      skipSpaces() {
        while (true) {
          const c = this.getCodeNorm();
          if (c === EOC || !isS(c)) {
            return c;
          }
        }
      }
      setXMLVersion(version2) {
        this.currentXMLVersion = version2;
        if (version2 === "1.0") {
          this.isChar = isChar10;
          this.getCode = this.getCode10;
        } else {
          this.isChar = isChar11;
          this.getCode = this.getCode11;
        }
      }
      // STATE ENGINE METHODS
      // This needs to be a state separate from S_BEGIN_WHITESPACE because we want
      // to be sure never to come back to this state later.
      sBegin() {
        if (this.chunk.charCodeAt(0) === 65279) {
          this.i++;
          this.column++;
        }
        this.state = S_BEGIN_WHITESPACE;
      }
      sBeginWhitespace() {
        const iBefore = this.i;
        const c = this.skipSpaces();
        if (this.prevI !== iBefore) {
          this.xmlDeclPossible = false;
        }
        switch (c) {
          case LESS:
            this.state = S_OPEN_WAKA;
            if (this.text.length !== 0) {
              throw new Error("no-empty text at start");
            }
            break;
          case EOC:
            break;
          default:
            this.unget();
            this.state = S_TEXT;
            this.xmlDeclPossible = false;
        }
      }
      sDoctype() {
        var _a;
        const c = this.captureTo(DOCTYPE_TERMINATOR);
        switch (c) {
          case GREATER: {
            (_a = this.doctypeHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
            this.text = "";
            this.state = S_TEXT;
            this.doctype = true;
            break;
          }
          case EOC:
            break;
          default:
            this.text += String.fromCodePoint(c);
            if (c === OPEN_BRACKET) {
              this.state = S_DTD;
            } else if (isQuote(c)) {
              this.state = S_DOCTYPE_QUOTE;
              this.q = c;
            }
        }
      }
      sDoctypeQuote() {
        const q = this.q;
        if (this.captureToChar(q)) {
          this.text += String.fromCodePoint(q);
          this.q = null;
          this.state = S_DOCTYPE;
        }
      }
      sDTD() {
        const c = this.captureTo(DTD_TERMINATOR);
        if (c === EOC) {
          return;
        }
        this.text += String.fromCodePoint(c);
        if (c === CLOSE_BRACKET) {
          this.state = S_DOCTYPE;
        } else if (c === LESS) {
          this.state = S_DTD_OPEN_WAKA;
        } else if (isQuote(c)) {
          this.state = S_DTD_QUOTED;
          this.q = c;
        }
      }
      sDTDQuoted() {
        const q = this.q;
        if (this.captureToChar(q)) {
          this.text += String.fromCodePoint(q);
          this.state = S_DTD;
          this.q = null;
        }
      }
      sDTDOpenWaka() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        switch (c) {
          case BANG:
            this.state = S_DTD_OPEN_WAKA_BANG;
            this.openWakaBang = "";
            break;
          case QUESTION:
            this.state = S_DTD_PI;
            break;
          default:
            this.state = S_DTD;
        }
      }
      sDTDOpenWakaBang() {
        const char = String.fromCodePoint(this.getCodeNorm());
        const owb = this.openWakaBang += char;
        this.text += char;
        if (owb !== "-") {
          this.state = owb === "--" ? S_DTD_COMMENT : S_DTD;
          this.openWakaBang = "";
        }
      }
      sDTDComment() {
        if (this.captureToChar(MINUS)) {
          this.text += "-";
          this.state = S_DTD_COMMENT_ENDING;
        }
      }
      sDTDCommentEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        this.state = c === MINUS ? S_DTD_COMMENT_ENDED : S_DTD_COMMENT;
      }
      sDTDCommentEnded() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
          this.state = S_DTD;
        } else {
          this.fail("malformed comment.");
          this.state = S_DTD_COMMENT;
        }
      }
      sDTDPI() {
        if (this.captureToChar(QUESTION)) {
          this.text += "?";
          this.state = S_DTD_PI_ENDING;
        }
      }
      sDTDPIEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
          this.state = S_DTD;
        }
      }
      sText() {
        if (this.tags.length !== 0) {
          this.handleTextInRoot();
        } else {
          this.handleTextOutsideRoot();
        }
      }
      sEntity() {
        let { i: start } = this;
        const { chunk } = this;
        loop:
          while (true) {
            switch (this.getCode()) {
              case NL_LIKE:
                this.entity += `${chunk.slice(start, this.prevI)}
`;
                start = this.i;
                break;
              case SEMICOLON: {
                const { entityReturnState } = this;
                const entity = this.entity + chunk.slice(start, this.prevI);
                this.state = entityReturnState;
                let parsed;
                if (entity === "") {
                  this.fail("empty entity name.");
                  parsed = "&;";
                } else {
                  parsed = this.parseEntity(entity);
                  this.entity = "";
                }
                if (entityReturnState !== S_TEXT || this.textHandler !== void 0) {
                  this.text += parsed;
                }
                break loop;
              }
              case EOC:
                this.entity += chunk.slice(start);
                break loop;
              default:
            }
          }
      }
      sOpenWaka() {
        const c = this.getCode();
        if (isNameStartChar(c)) {
          this.state = S_OPEN_TAG;
          this.unget();
          this.xmlDeclPossible = false;
        } else {
          switch (c) {
            case FORWARD_SLASH:
              this.state = S_CLOSE_TAG;
              this.xmlDeclPossible = false;
              break;
            case BANG:
              this.state = S_OPEN_WAKA_BANG;
              this.openWakaBang = "";
              this.xmlDeclPossible = false;
              break;
            case QUESTION:
              this.state = S_PI_FIRST_CHAR;
              break;
            default:
              this.fail("disallowed character in tag name");
              this.state = S_TEXT;
              this.xmlDeclPossible = false;
          }
        }
      }
      sOpenWakaBang() {
        this.openWakaBang += String.fromCodePoint(this.getCodeNorm());
        switch (this.openWakaBang) {
          case "[CDATA[":
            if (!this.sawRoot && !this.reportedTextBeforeRoot) {
              this.fail("text data outside of root node.");
              this.reportedTextBeforeRoot = true;
            }
            if (this.closedRoot && !this.reportedTextAfterRoot) {
              this.fail("text data outside of root node.");
              this.reportedTextAfterRoot = true;
            }
            this.state = S_CDATA;
            this.openWakaBang = "";
            break;
          case "--":
            this.state = S_COMMENT;
            this.openWakaBang = "";
            break;
          case "DOCTYPE":
            this.state = S_DOCTYPE;
            if (this.doctype || this.sawRoot) {
              this.fail("inappropriately located doctype declaration.");
            }
            this.openWakaBang = "";
            break;
          default:
            if (this.openWakaBang.length >= 7) {
              this.fail("incorrect syntax.");
            }
        }
      }
      sComment() {
        if (this.captureToChar(MINUS)) {
          this.state = S_COMMENT_ENDING;
        }
      }
      sCommentEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === MINUS) {
          this.state = S_COMMENT_ENDED;
          (_a = this.commentHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
          this.text = "";
        } else {
          this.text += `-${String.fromCodePoint(c)}`;
          this.state = S_COMMENT;
        }
      }
      sCommentEnded() {
        const c = this.getCodeNorm();
        if (c !== GREATER) {
          this.fail("malformed comment.");
          this.text += `--${String.fromCodePoint(c)}`;
          this.state = S_COMMENT;
        } else {
          this.state = S_TEXT;
        }
      }
      sCData() {
        if (this.captureToChar(CLOSE_BRACKET)) {
          this.state = S_CDATA_ENDING;
        }
      }
      sCDataEnding() {
        const c = this.getCodeNorm();
        if (c === CLOSE_BRACKET) {
          this.state = S_CDATA_ENDING_2;
        } else {
          this.text += `]${String.fromCodePoint(c)}`;
          this.state = S_CDATA;
        }
      }
      sCDataEnding2() {
        var _a;
        const c = this.getCodeNorm();
        switch (c) {
          case GREATER: {
            (_a = this.cdataHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
            this.text = "";
            this.state = S_TEXT;
            break;
          }
          case CLOSE_BRACKET:
            this.text += "]";
            break;
          default:
            this.text += `]]${String.fromCodePoint(c)}`;
            this.state = S_CDATA;
        }
      }
      // We need this separate state to check the first character fo the pi target
      // with this.nameStartCheck which allows less characters than this.nameCheck.
      sPIFirstChar() {
        const c = this.getCodeNorm();
        if (this.nameStartCheck(c)) {
          this.piTarget += String.fromCodePoint(c);
          this.state = S_PI_REST;
        } else if (c === QUESTION || isS(c)) {
          this.fail("processing instruction without a target.");
          this.state = c === QUESTION ? S_PI_ENDING : S_PI_BODY;
        } else {
          this.fail("disallowed character in processing instruction name.");
          this.piTarget += String.fromCodePoint(c);
          this.state = S_PI_REST;
        }
      }
      sPIRest() {
        const { chunk, i: start } = this;
        while (true) {
          const c = this.getCodeNorm();
          if (c === EOC) {
            this.piTarget += chunk.slice(start);
            return;
          }
          if (!this.nameCheck(c)) {
            this.piTarget += chunk.slice(start, this.prevI);
            const isQuestion = c === QUESTION;
            if (isQuestion || isS(c)) {
              if (this.piTarget === "xml") {
                if (!this.xmlDeclPossible) {
                  this.fail("an XML declaration must be at the start of the document.");
                }
                this.state = isQuestion ? S_XML_DECL_ENDING : S_XML_DECL_NAME_START;
              } else {
                this.state = isQuestion ? S_PI_ENDING : S_PI_BODY;
              }
            } else {
              this.fail("disallowed character in processing instruction name.");
              this.piTarget += String.fromCodePoint(c);
            }
            break;
          }
        }
      }
      sPIBody() {
        if (this.text.length === 0) {
          const c = this.getCodeNorm();
          if (c === QUESTION) {
            this.state = S_PI_ENDING;
          } else if (!isS(c)) {
            this.text = String.fromCodePoint(c);
          }
        } else if (this.captureToChar(QUESTION)) {
          this.state = S_PI_ENDING;
        }
      }
      sPIEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
          const { piTarget } = this;
          if (piTarget.toLowerCase() === "xml") {
            this.fail("the XML declaration must appear at the start of the document.");
          }
          (_a = this.piHandler) === null || _a === void 0 ? void 0 : _a.call(this, {
            target: piTarget,
            body: this.text
          });
          this.piTarget = this.text = "";
          this.state = S_TEXT;
        } else if (c === QUESTION) {
          this.text += "?";
        } else {
          this.text += `?${String.fromCodePoint(c)}`;
          this.state = S_PI_BODY;
        }
        this.xmlDeclPossible = false;
      }
      sXMLDeclNameStart() {
        const c = this.skipSpaces();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          return;
        }
        if (c !== EOC) {
          this.state = S_XML_DECL_NAME;
          this.name = String.fromCodePoint(c);
        }
      }
      sXMLDeclName() {
        const c = this.captureTo(XML_DECL_NAME_TERMINATOR);
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.name += this.text;
          this.text = "";
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (!(isS(c) || c === EQUAL)) {
          return;
        }
        this.name += this.text;
        this.text = "";
        if (!this.xmlDeclExpects.includes(this.name)) {
          switch (this.name.length) {
            case 0:
              this.fail("did not expect any more name/value pairs.");
              break;
            case 1:
              this.fail(`expected the name ${this.xmlDeclExpects[0]}.`);
              break;
            default:
              this.fail(`expected one of ${this.xmlDeclExpects.join(", ")}`);
          }
        }
        this.state = c === EQUAL ? S_XML_DECL_VALUE_START : S_XML_DECL_EQ;
      }
      sXMLDeclEq() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (isS(c)) {
          return;
        }
        if (c !== EQUAL) {
          this.fail("value required.");
        }
        this.state = S_XML_DECL_VALUE_START;
      }
      sXMLDeclValueStart() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (isS(c)) {
          return;
        }
        if (!isQuote(c)) {
          this.fail("value must be quoted.");
          this.q = SPACE;
        } else {
          this.q = c;
        }
        this.state = S_XML_DECL_VALUE;
      }
      sXMLDeclValue() {
        const c = this.captureTo([this.q, QUESTION]);
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.text = "";
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (c === EOC) {
          return;
        }
        const value = this.text;
        this.text = "";
        switch (this.name) {
          case "version": {
            this.xmlDeclExpects = ["encoding", "standalone"];
            const version2 = value;
            this.xmlDecl.version = version2;
            if (!/^1\.[0-9]+$/.test(version2)) {
              this.fail("version number must match /^1\\.[0-9]+$/.");
            } else if (!this.opt.forceXMLVersion) {
              this.setXMLVersion(version2);
            }
            break;
          }
          case "encoding":
            if (!/^[A-Za-z][A-Za-z0-9._-]*$/.test(value)) {
              this.fail("encoding value must match /^[A-Za-z0-9][A-Za-z0-9._-]*$/.");
            }
            this.xmlDeclExpects = ["standalone"];
            this.xmlDecl.encoding = value;
            break;
          case "standalone":
            if (value !== "yes" && value !== "no") {
              this.fail('standalone value must match "yes" or "no".');
            }
            this.xmlDeclExpects = [];
            this.xmlDecl.standalone = value;
            break;
          default:
        }
        this.name = "";
        this.state = S_XML_DECL_SEPARATOR;
      }
      sXMLDeclSeparator() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          return;
        }
        if (!isS(c)) {
          this.fail("whitespace required.");
          this.unget();
        }
        this.state = S_XML_DECL_NAME_START;
      }
      sXMLDeclEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
          if (this.piTarget !== "xml") {
            this.fail("processing instructions are not allowed before root.");
          } else if (this.name !== "version" && this.xmlDeclExpects.includes("version")) {
            this.fail("XML declaration must contain a version.");
          }
          (_a = this.xmldeclHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.xmlDecl);
          this.name = "";
          this.piTarget = this.text = "";
          this.state = S_TEXT;
        } else {
          this.fail("The character ? is disallowed anywhere in XML declarations.");
        }
        this.xmlDeclPossible = false;
      }
      sOpenTag() {
        var _a;
        const c = this.captureNameChars();
        if (c === EOC) {
          return;
        }
        const tag = this.tag = {
          name: this.name,
          attributes: /* @__PURE__ */ Object.create(null)
        };
        this.name = "";
        if (this.xmlnsOpt) {
          this.topNS = tag.ns = /* @__PURE__ */ Object.create(null);
        }
        (_a = this.openTagStartHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        this.sawRoot = true;
        if (!this.fragmentOpt && this.closedRoot) {
          this.fail("documents may contain only one root.");
        }
        switch (c) {
          case GREATER:
            this.openTag();
            break;
          case FORWARD_SLASH:
            this.state = S_OPEN_TAG_SLASH;
            break;
          default:
            if (!isS(c)) {
              this.fail("disallowed character in tag name.");
            }
            this.state = S_ATTRIB;
        }
      }
      sOpenTagSlash() {
        if (this.getCode() === GREATER) {
          this.openSelfClosingTag();
        } else {
          this.fail("forward-slash in opening tag not followed by >.");
          this.state = S_ATTRIB;
        }
      }
      sAttrib() {
        const c = this.skipSpaces();
        if (c === EOC) {
          return;
        }
        if (isNameStartChar(c)) {
          this.unget();
          this.state = S_ATTRIB_NAME;
        } else if (c === GREATER) {
          this.openTag();
        } else if (c === FORWARD_SLASH) {
          this.state = S_OPEN_TAG_SLASH;
        } else {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribName() {
        const c = this.captureNameChars();
        if (c === EQUAL) {
          this.state = S_ATTRIB_VALUE;
        } else if (isS(c)) {
          this.state = S_ATTRIB_NAME_SAW_WHITE;
        } else if (c === GREATER) {
          this.fail("attribute without value.");
          this.pushAttrib(this.name, this.name);
          this.name = this.text = "";
          this.openTag();
        } else if (c !== EOC) {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribNameSawWhite() {
        const c = this.skipSpaces();
        switch (c) {
          case EOC:
            return;
          case EQUAL:
            this.state = S_ATTRIB_VALUE;
            break;
          default:
            this.fail("attribute without value.");
            this.text = "";
            this.name = "";
            if (c === GREATER) {
              this.openTag();
            } else if (isNameStartChar(c)) {
              this.unget();
              this.state = S_ATTRIB_NAME;
            } else {
              this.fail("disallowed character in attribute name.");
              this.state = S_ATTRIB;
            }
        }
      }
      sAttribValue() {
        const c = this.getCodeNorm();
        if (isQuote(c)) {
          this.q = c;
          this.state = S_ATTRIB_VALUE_QUOTED;
        } else if (!isS(c)) {
          this.fail("unquoted attribute value.");
          this.state = S_ATTRIB_VALUE_UNQUOTED;
          this.unget();
        }
      }
      sAttribValueQuoted() {
        const { q, chunk } = this;
        let { i: start } = this;
        while (true) {
          switch (this.getCode()) {
            case q:
              this.pushAttrib(this.name, this.text + chunk.slice(start, this.prevI));
              this.name = this.text = "";
              this.q = null;
              this.state = S_ATTRIB_VALUE_CLOSED;
              return;
            case AMP:
              this.text += chunk.slice(start, this.prevI);
              this.state = S_ENTITY;
              this.entityReturnState = S_ATTRIB_VALUE_QUOTED;
              return;
            case NL:
            case NL_LIKE:
            case TAB:
              this.text += `${chunk.slice(start, this.prevI)} `;
              start = this.i;
              break;
            case LESS:
              this.text += chunk.slice(start, this.prevI);
              this.fail("disallowed character.");
              return;
            case EOC:
              this.text += chunk.slice(start);
              return;
            default:
          }
        }
      }
      sAttribValueClosed() {
        const c = this.getCodeNorm();
        if (isS(c)) {
          this.state = S_ATTRIB;
        } else if (c === GREATER) {
          this.openTag();
        } else if (c === FORWARD_SLASH) {
          this.state = S_OPEN_TAG_SLASH;
        } else if (isNameStartChar(c)) {
          this.fail("no whitespace between attributes.");
          this.unget();
          this.state = S_ATTRIB_NAME;
        } else {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribValueUnquoted() {
        const c = this.captureTo(ATTRIB_VALUE_UNQUOTED_TERMINATOR);
        switch (c) {
          case AMP:
            this.state = S_ENTITY;
            this.entityReturnState = S_ATTRIB_VALUE_UNQUOTED;
            break;
          case LESS:
            this.fail("disallowed character.");
            break;
          case EOC:
            break;
          default:
            if (this.text.includes("]]>")) {
              this.fail('the string "]]>" is disallowed in char data.');
            }
            this.pushAttrib(this.name, this.text);
            this.name = this.text = "";
            if (c === GREATER) {
              this.openTag();
            } else {
              this.state = S_ATTRIB;
            }
        }
      }
      sCloseTag() {
        const c = this.captureNameChars();
        if (c === GREATER) {
          this.closeTag();
        } else if (isS(c)) {
          this.state = S_CLOSE_TAG_SAW_WHITE;
        } else if (c !== EOC) {
          this.fail("disallowed character in closing tag.");
        }
      }
      sCloseTagSawWhite() {
        switch (this.skipSpaces()) {
          case GREATER:
            this.closeTag();
            break;
          case EOC:
            break;
          default:
            this.fail("disallowed character in closing tag.");
        }
      }
      // END OF STATE ENGINE METHODS
      handleTextInRoot() {
        let { i: start, forbiddenState } = this;
        const { chunk, textHandler: handler } = this;
        scanLoop:
          while (true) {
            switch (this.getCode()) {
              case LESS: {
                this.state = S_OPEN_WAKA;
                if (handler !== void 0) {
                  const { text } = this;
                  const slice3 = chunk.slice(start, this.prevI);
                  if (text.length !== 0) {
                    handler(text + slice3);
                    this.text = "";
                  } else if (slice3.length !== 0) {
                    handler(slice3);
                  }
                }
                forbiddenState = FORBIDDEN_START;
                break scanLoop;
              }
              case AMP:
                this.state = S_ENTITY;
                this.entityReturnState = S_TEXT;
                if (handler !== void 0) {
                  this.text += chunk.slice(start, this.prevI);
                }
                forbiddenState = FORBIDDEN_START;
                break scanLoop;
              case CLOSE_BRACKET:
                switch (forbiddenState) {
                  case FORBIDDEN_START:
                    forbiddenState = FORBIDDEN_BRACKET;
                    break;
                  case FORBIDDEN_BRACKET:
                    forbiddenState = FORBIDDEN_BRACKET_BRACKET;
                    break;
                  case FORBIDDEN_BRACKET_BRACKET:
                    break;
                  default:
                    throw new Error("impossible state");
                }
                break;
              case GREATER:
                if (forbiddenState === FORBIDDEN_BRACKET_BRACKET) {
                  this.fail('the string "]]>" is disallowed in char data.');
                }
                forbiddenState = FORBIDDEN_START;
                break;
              case NL_LIKE:
                if (handler !== void 0) {
                  this.text += `${chunk.slice(start, this.prevI)}
`;
                }
                start = this.i;
                forbiddenState = FORBIDDEN_START;
                break;
              case EOC:
                if (handler !== void 0) {
                  this.text += chunk.slice(start);
                }
                break scanLoop;
              default:
                forbiddenState = FORBIDDEN_START;
            }
          }
        this.forbiddenState = forbiddenState;
      }
      handleTextOutsideRoot() {
        let { i: start } = this;
        const { chunk, textHandler: handler } = this;
        let nonSpace = false;
        outRootLoop:
          while (true) {
            const code = this.getCode();
            switch (code) {
              case LESS: {
                this.state = S_OPEN_WAKA;
                if (handler !== void 0) {
                  const { text } = this;
                  const slice3 = chunk.slice(start, this.prevI);
                  if (text.length !== 0) {
                    handler(text + slice3);
                    this.text = "";
                  } else if (slice3.length !== 0) {
                    handler(slice3);
                  }
                }
                break outRootLoop;
              }
              case AMP:
                this.state = S_ENTITY;
                this.entityReturnState = S_TEXT;
                if (handler !== void 0) {
                  this.text += chunk.slice(start, this.prevI);
                }
                nonSpace = true;
                break outRootLoop;
              case NL_LIKE:
                if (handler !== void 0) {
                  this.text += `${chunk.slice(start, this.prevI)}
`;
                }
                start = this.i;
                break;
              case EOC:
                if (handler !== void 0) {
                  this.text += chunk.slice(start);
                }
                break outRootLoop;
              default:
                if (!isS(code)) {
                  nonSpace = true;
                }
            }
          }
        if (!nonSpace) {
          return;
        }
        if (!this.sawRoot && !this.reportedTextBeforeRoot) {
          this.fail("text data outside of root node.");
          this.reportedTextBeforeRoot = true;
        }
        if (this.closedRoot && !this.reportedTextAfterRoot) {
          this.fail("text data outside of root node.");
          this.reportedTextAfterRoot = true;
        }
      }
      pushAttribNS(name, value) {
        var _a;
        const { prefix, local } = this.qname(name);
        const attr = { name, prefix, local, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
        if (prefix === "xmlns") {
          const trimmed = value.trim();
          if (this.currentXMLVersion === "1.0" && trimmed === "") {
            this.fail("invalid attempt to undefine prefix in XML 1.0");
          }
          this.topNS[local] = trimmed;
          nsPairCheck(this, local, trimmed);
        } else if (name === "xmlns") {
          const trimmed = value.trim();
          this.topNS[""] = trimmed;
          nsPairCheck(this, "", trimmed);
        }
      }
      pushAttribPlain(name, value) {
        var _a;
        const attr = { name, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
      }
      /**
       * End parsing. This performs final well-formedness checks and resets the
       * parser to a clean state.
       *
       * @returns this
       */
      end() {
        var _a, _b;
        if (!this.sawRoot) {
          this.fail("document must contain a root element.");
        }
        const { tags } = this;
        while (tags.length > 0) {
          const tag = tags.pop();
          this.fail(`unclosed tag: ${tag.name}`);
        }
        if (this.state !== S_BEGIN && this.state !== S_TEXT) {
          this.fail("unexpected end.");
        }
        const { text } = this;
        if (text.length !== 0) {
          (_a = this.textHandler) === null || _a === void 0 ? void 0 : _a.call(this, text);
          this.text = "";
        }
        this._closed = true;
        (_b = this.endHandler) === null || _b === void 0 ? void 0 : _b.call(this);
        this._init();
        return this;
      }
      /**
       * Resolve a namespace prefix.
       *
       * @param prefix The prefix to resolve.
       *
       * @returns The namespace URI or ``undefined`` if the prefix is not defined.
       */
      resolve(prefix) {
        var _a, _b;
        let uri = this.topNS[prefix];
        if (uri !== void 0) {
          return uri;
        }
        const { tags } = this;
        for (let index = tags.length - 1; index >= 0; index--) {
          uri = tags[index].ns[prefix];
          if (uri !== void 0) {
            return uri;
          }
        }
        uri = this.ns[prefix];
        if (uri !== void 0) {
          return uri;
        }
        return (_b = (_a = this.opt).resolvePrefix) === null || _b === void 0 ? void 0 : _b.call(_a, prefix);
      }
      /**
       * Parse a qname into its prefix and local name parts.
       *
       * @param name The name to parse
       *
       * @returns
       */
      qname(name) {
        const colon = name.indexOf(":");
        if (colon === -1) {
          return { prefix: "", local: name };
        }
        const local = name.slice(colon + 1);
        const prefix = name.slice(0, colon);
        if (prefix === "" || local === "" || local.includes(":")) {
          this.fail(`malformed name: ${name}.`);
        }
        return { prefix, local };
      }
      processAttribsNS() {
        var _a;
        const { attribList } = this;
        const tag = this.tag;
        {
          const { prefix, local } = this.qname(tag.name);
          tag.prefix = prefix;
          tag.local = local;
          const uri = tag.uri = (_a = this.resolve(prefix)) !== null && _a !== void 0 ? _a : "";
          if (prefix !== "") {
            if (prefix === "xmlns") {
              this.fail('tags may not have "xmlns" as prefix.');
            }
            if (uri === "") {
              this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
              tag.uri = prefix;
            }
          }
        }
        if (attribList.length === 0) {
          return;
        }
        const { attributes } = tag;
        const seen = /* @__PURE__ */ new Set();
        for (const attr of attribList) {
          const { name, prefix, local } = attr;
          let uri;
          let eqname;
          if (prefix === "") {
            uri = name === "xmlns" ? XMLNS_NAMESPACE : "";
            eqname = name;
          } else {
            uri = this.resolve(prefix);
            if (uri === void 0) {
              this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
              uri = prefix;
            }
            eqname = `{${uri}}${local}`;
          }
          if (seen.has(eqname)) {
            this.fail(`duplicate attribute: ${eqname}.`);
          }
          seen.add(eqname);
          attr.uri = uri;
          attributes[name] = attr;
        }
        this.attribList = [];
      }
      processAttribsPlain() {
        const { attribList } = this;
        const attributes = this.tag.attributes;
        for (const { name, value } of attribList) {
          if (attributes[name] !== void 0) {
            this.fail(`duplicate attribute: ${name}.`);
          }
          attributes[name] = value;
        }
        this.attribList = [];
      }
      /**
       * Handle a complete open tag. This parser code calls this once it has seen
       * the whole tag. This method checks for well-formeness and then emits
       * ``onopentag``.
       */
      openTag() {
        var _a;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = false;
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        tags.push(tag);
        this.state = S_TEXT;
        this.name = "";
      }
      /**
       * Handle a complete self-closing tag. This parser code calls this once it has
       * seen the whole tag. This method checks for well-formeness and then emits
       * ``onopentag`` and ``onclosetag``.
       */
      openSelfClosingTag() {
        var _a, _b, _c;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = true;
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        (_b = this.closeTagHandler) === null || _b === void 0 ? void 0 : _b.call(this, tag);
        const top = this.tag = (_c = tags[tags.length - 1]) !== null && _c !== void 0 ? _c : null;
        if (top === null) {
          this.closedRoot = true;
        }
        this.state = S_TEXT;
        this.name = "";
      }
      /**
       * Handle a complete close tag. This parser code calls this once it has seen
       * the whole tag. This method checks for well-formeness and then emits
       * ``onclosetag``.
       */
      closeTag() {
        const { tags, name } = this;
        this.state = S_TEXT;
        this.name = "";
        if (name === "") {
          this.fail("weird empty close tag.");
          this.text += "</>";
          return;
        }
        const handler = this.closeTagHandler;
        let l = tags.length;
        while (l-- > 0) {
          const tag = this.tag = tags.pop();
          this.topNS = tag.ns;
          handler === null || handler === void 0 ? void 0 : handler(tag);
          if (tag.name === name) {
            break;
          }
          this.fail("unexpected close tag.");
        }
        if (l === 0) {
          this.closedRoot = true;
        } else if (l < 0) {
          this.fail(`unmatched closing tag: ${name}.`);
          this.text += `</${name}>`;
        }
      }
      /**
       * Resolves an entity. Makes any necessary well-formedness checks.
       *
       * @param entity The entity to resolve.
       *
       * @returns The parsed entity.
       */
      parseEntity(entity) {
        if (entity[0] !== "#") {
          const defined = this.ENTITIES[entity];
          if (defined !== void 0) {
            return defined;
          }
          this.fail(this.isName(entity) ? "undefined entity." : "disallowed character in entity name.");
          return `&${entity};`;
        }
        let num = NaN;
        if (entity[1] === "x" && /^#x[0-9a-f]+$/i.test(entity)) {
          num = parseInt(entity.slice(2), 16);
        } else if (/^#[0-9]+$/.test(entity)) {
          num = parseInt(entity.slice(1), 10);
        }
        if (!this.isChar(num)) {
          this.fail("malformed character entity.");
          return `&${entity};`;
        }
        return String.fromCodePoint(num);
      }
    };
    exports.SaxesParser = SaxesParser;
  }
});

// ../../lipdjs/node_modules/rdfxml-streaming-parser/lib/ParseError.js
var require_ParseError = __commonJS({
  "../../lipdjs/node_modules/rdfxml-streaming-parser/lib/ParseError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParseError = void 0;
    var ParseError = class extends Error {
      constructor(parser, message) {
        const saxParser = parser.saxParser;
        super(parser.trackPosition ? `Line ${saxParser.line} column ${saxParser.column + 1}: ${message}` : message);
      }
    };
    exports.ParseError = ParseError;
  }
});

// ../../lipdjs/node_modules/validate-iri/lib/Validate.js
var require_Validate = __commonJS({
  "../../lipdjs/node_modules/validate-iri/lib/Validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateIri = exports.IriValidationStrategy = void 0;
    function buildAbsoluteIriRfc3987Regex() {
      const sub_delims_raw = `!$&'()*+,;=`;
      const sub_delims = `[${sub_delims_raw}]`;
      const pct_encoded = `%[a-fA-F0-9]{2}`;
      const dec_octet = "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
      const ipv4address = `${dec_octet}\\.${dec_octet}\\.${dec_octet}\\.${dec_octet}`;
      const h16 = `[a-fA-F0-9]{1,4}`;
      const ls32 = `(${h16}:${h16}|${ipv4address})`;
      const ipv6address = `((${h16}:){6}${ls32}|::(${h16}:){5}${ls32}|(${h16})?::(${h16}:){4}${ls32}|((${h16}:){0,1}${h16})?::(${h16}:){3}${ls32}|((${h16}:){0,2}${h16})?::(${h16}:){2}${ls32}|((${h16}:){0,3}${h16})?::${h16}:${ls32}|((${h16}:){0,4}${h16})?::${ls32}|((${h16}:){0,5}${h16})?::${h16}|((${h16}:){0,6}${h16})?::)`;
      const ipvfuture = `v[a-fA-F0-9]+\\.(${sub_delims}|${sub_delims}|":)+`;
      const ip_literal = `\\[(${ipv6address}|${ipvfuture})\\]`;
      const port = `[0-9]*`;
      const scheme = `[a-zA-Z][a-zA-Z0-9+\\-.]*`;
      const iprivate_raw = `-󰀀-󿿽􀀀-􏿽`;
      const iprivate = `[${iprivate_raw}]`;
      const ucschar_raw = ` -퟿豈-﷏ﷰ-￯𐀀-🿽𠀀-𯿽𰀀-𿿽񀀀-񏿽񐀀-񟿽񠀀-񯿽񰀀-񿿽򀀀-򏿽򐀀-򟿽򠀀-򯿽򰀀-򿿽󀀀-󏿽󐀀-󟿽󡀀-󯿽`;
      const iunreserved_raw = `a-zA-Z0-9\\-._~${ucschar_raw}`;
      const iunreserved = `[${iunreserved_raw}]`;
      const ipchar = `(${iunreserved}|${pct_encoded}|${sub_delims}|[:@])*`;
      const ifragment = `(${ipchar}|[\\/?])*`;
      const iquery = `(${ipchar}|${iprivate}|[\\/?])*`;
      const isegment_nz = `(${ipchar})+`;
      const isegment = `(${ipchar})*`;
      const ipath_empty = "";
      const ipath_rootless = `${isegment_nz}(\\/${isegment})*`;
      const ipath_absolute = `\\/(${isegment_nz}(\\/${isegment})*)?`;
      const ipath_abempty = `(\\/${isegment})*`;
      const ireg_name = `(${iunreserved}|${pct_encoded}|${sub_delims})*`;
      const ihost = `(${ip_literal}|${ipv4address}|${ireg_name})`;
      const iuserinfo = `(${iunreserved}|${pct_encoded}|${sub_delims}|:)*`;
      const iauthority = `(${iuserinfo}@)?${ihost}(:${port})?`;
      const ihier_part = `(\\/\\/${iauthority}${ipath_abempty}|${ipath_absolute}|${ipath_rootless}|${ipath_empty})`;
      const iri = `^${scheme}:${ihier_part}(\\?${iquery})?(#${ifragment})?$`;
      return new RegExp(iri, "u");
    }
    var STRICT_IRI_REGEX = buildAbsoluteIriRfc3987Regex();
    var PRAGMATIC_IRI_REGEX = /^[A-Za-z][\d+-.A-Za-z]*:[^\u0000-\u0020"<>\\^`{|}]*$/u;
    var IriValidationStrategy;
    (function(IriValidationStrategy2) {
      IriValidationStrategy2["Strict"] = "strict";
      IriValidationStrategy2["Pragmatic"] = "pragmatic";
      IriValidationStrategy2["None"] = "none";
    })(IriValidationStrategy = exports.IriValidationStrategy || (exports.IriValidationStrategy = {}));
    function validateIri(iri, strategy = IriValidationStrategy.Strict) {
      switch (strategy) {
        case IriValidationStrategy.Strict:
          return STRICT_IRI_REGEX.test(iri) ? void 0 : new Error(`Invalid IRI according to RFC 3987: '${iri}'`);
        case IriValidationStrategy.Pragmatic:
          return PRAGMATIC_IRI_REGEX.test(iri) ? void 0 : new Error(`Invalid IRI according to RDF Turtle: '${iri}'`);
        case IriValidationStrategy.None:
          return void 0;
        default:
          return new Error(`Not supported validation strategy "${strategy}"`);
      }
    }
    exports.validateIri = validateIri;
  }
});

// ../../lipdjs/node_modules/validate-iri/index.js
var require_validate_iri = __commonJS({
  "../../lipdjs/node_modules/validate-iri/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Validate(), exports);
  }
});

// ../../lipdjs/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js
var require_RdfXmlParser = __commonJS({
  "../../lipdjs/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParseType = exports.RdfXmlParser = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var saxes_1 = require_saxes();
    var readable_stream_1 = require_browser2();
    var ParseError_1 = require_ParseError();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var validate_iri_1 = require_validate_iri();
    var RdfXmlParser = class _RdfXmlParser extends readable_stream_1.Transform {
      constructor(args) {
        super({ readableObjectMode: true });
        this.activeTagStack = [];
        this.nodeIds = {};
        if (args) {
          Object.assign(this, args);
          this.options = args;
        }
        if (!this.dataFactory) {
          this.dataFactory = new rdf_data_factory_1.DataFactory();
        }
        if (!this.baseIRI) {
          this.baseIRI = "";
        }
        if (!this.defaultGraph) {
          this.defaultGraph = this.dataFactory.defaultGraph();
        }
        if (this.validateUri !== false) {
          this.validateUri = true;
        }
        if (!this.iriValidationStrategy) {
          this.iriValidationStrategy = this.validateUri ? validate_iri_1.IriValidationStrategy.Pragmatic : validate_iri_1.IriValidationStrategy.None;
        }
        this.saxParser = new saxes_1.SaxesParser({ xmlns: true, position: this.trackPosition });
        this.attachSaxListeners();
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
        stream.on("error", (error) => parsed.emit("error", error));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _RdfXmlParser(this.options));
        return parsed;
      }
      _transform(chunk, encoding, callback) {
        try {
          this.saxParser.write(chunk);
        } catch (e) {
          return callback(e);
        }
        callback();
      }
      /**
       * Create a new parse error instance.
       * @param {string} message An error message.
       * @return {Error} An error instance.
       */
      newParseError(message) {
        return new ParseError_1.ParseError(this, message);
      }
      /**
       * Convert the given value to a IRI by taking into account the baseIRI.
       *
       * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.
       *
       * @param {string} value The value to convert to an IRI.
       * @param {IActiveTag} activeTag The active tag.
       * @return {NamedNode} an IRI.
       */
      valueToUri(value, activeTag) {
        return this.uriToNamedNode((0, relative_to_absolute_iri_1.resolve)(value, activeTag.baseIRI));
      }
      /**
       * Convert the given value URI string to a named node.
       *
       * This throw an error if the URI is invalid.
       *
       * @param {string} uri A URI string.
       * @return {NamedNode} a named node.
       */
      uriToNamedNode(uri) {
        const uriValidationResult = (0, validate_iri_1.validateIri)(uri, this.iriValidationStrategy);
        if (uriValidationResult instanceof Error) {
          throw this.newParseError(uriValidationResult.message);
        }
        return this.dataFactory.namedNode(uri);
      }
      /**
       * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName
       * If it is invalid, an error will thrown emitted.
       * @param {string} value A value.
       */
      validateNcname(value) {
        if (!_RdfXmlParser.NCNAME_MATCHER.test(value)) {
          throw this.newParseError(`Not a valid NCName: ${value}`);
        }
      }
      attachSaxListeners() {
        this.saxParser.on("error", (error) => this.emit("error", error));
        this.saxParser.on("opentag", this.onTag.bind(this));
        this.saxParser.on("text", this.onText.bind(this));
        this.saxParser.on("cdata", this.onText.bind(this));
        this.saxParser.on("closetag", this.onCloseTag.bind(this));
        this.saxParser.on("doctype", this.onDoctype.bind(this));
      }
      /**
       * Handle the given tag.
       * @param {SaxesTagNS} tag A SAX tag.
       */
      onTag(tag) {
        const parentTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;
        let currentParseType = ParseType.RESOURCE;
        if (parentTag) {
          parentTag.hadChildren = true;
          currentParseType = parentTag.childrenParseType;
        }
        if (parentTag && parentTag.childrenStringTags) {
          const tagName = tag.name;
          let attributes = "";
          for (const attributeKey in tag.attributes) {
            attributes += ` ${attributeKey}="${tag.attributes[attributeKey].value}"`;
          }
          const tagContents = `${tagName}${attributes}`;
          const tagString = `<${tagContents}>`;
          parentTag.childrenStringTags.push(tagString);
          const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };
          stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;
          this.activeTagStack.push(stringActiveTag);
          return;
        }
        const activeTag = {};
        if (parentTag) {
          activeTag.language = parentTag.language;
          activeTag.baseIRI = parentTag.baseIRI;
        } else {
          activeTag.baseIRI = this.baseIRI;
        }
        this.activeTagStack.push(activeTag);
        if (currentParseType === ParseType.RESOURCE) {
          this.onTagResource(tag, activeTag, parentTag, !parentTag);
        } else {
          this.onTagProperty(tag, activeTag, parentTag);
        }
      }
      /**
       * Handle the given node element in resource-mode.
       * @param {SaxesTagNS} tag A SAX tag.
       * @param {IActiveTag} activeTag The currently active tag.
       * @param {IActiveTag} parentTag The parent tag or null.
       * @param {boolean} rootTag If we are currently processing the root tag.
       */
      onTagResource(tag, activeTag, parentTag, rootTag) {
        activeTag.childrenParseType = ParseType.PROPERTY;
        let typedNode = true;
        if (tag.uri === _RdfXmlParser.RDF) {
          if (!rootTag && _RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tag.local) >= 0) {
            throw this.newParseError(`Illegal node element name: ${tag.local}`);
          }
          switch (tag.local) {
            case "RDF":
              activeTag.childrenParseType = ParseType.RESOURCE;
            case "Description":
              typedNode = false;
          }
        }
        const predicates = [];
        const objects = [];
        let activeSubjectValue = null;
        let claimSubjectNodeId = false;
        let subjectValueBlank = false;
        let explicitType = null;
        for (const attributeKey in tag.attributes) {
          const attribute = tag.attributes[attributeKey];
          if (parentTag && attribute.uri === _RdfXmlParser.RDF) {
            switch (attribute.local) {
              case "about":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                activeSubjectValue = attribute.value;
                continue;
              case "ID":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                this.validateNcname(attribute.value);
                activeSubjectValue = "#" + attribute.value;
                claimSubjectNodeId = true;
                continue;
              case "nodeID":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                this.validateNcname(attribute.value);
                activeSubjectValue = attribute.value;
                subjectValueBlank = true;
                continue;
              case "bagID":
                throw this.newParseError(`rdf:bagID is not supported.`);
              case "type":
                explicitType = attribute.value;
                continue;
              case "aboutEach":
                throw this.newParseError(`rdf:aboutEach is not supported.`);
              case "aboutEachPrefix":
                throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);
              case "li":
                throw this.newParseError(`rdf:li on node elements are not supported.`);
            }
          } else if (attribute.uri === _RdfXmlParser.XML) {
            if (attribute.local === "lang") {
              activeTag.language = attribute.value === "" ? null : attribute.value.toLowerCase();
              continue;
            } else if (attribute.local === "base") {
              activeTag.baseIRI = (0, relative_to_absolute_iri_1.resolve)(attribute.value, activeTag.baseIRI);
              continue;
            }
          }
          if (attribute.prefix !== "xml" && attribute.prefix !== "xmlns" && (attribute.prefix !== "" || attribute.local !== "xmlns") && attribute.uri) {
            predicates.push(this.uriToNamedNode(attribute.uri + attribute.local));
            objects.push(attribute.value);
          }
        }
        if (activeSubjectValue !== null) {
          activeTag.subject = subjectValueBlank ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);
          if (claimSubjectNodeId) {
            this.claimNodeId(activeTag.subject);
          }
        }
        if (!activeTag.subject) {
          activeTag.subject = this.dataFactory.blankNode();
        }
        if (typedNode) {
          const type = this.uriToNamedNode(tag.uri + tag.local);
          this.emitTriple(activeTag.subject, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), type, parentTag ? parentTag.reifiedStatementId : null);
        }
        if (parentTag) {
          if (parentTag.predicate) {
            if (parentTag.childrenCollectionSubject) {
              const linkTerm = this.dataFactory.blankNode();
              this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);
              this.emitTriple(linkTerm, this.dataFactory.namedNode(_RdfXmlParser.RDF + "first"), activeTag.subject, activeTag.reifiedStatementId);
              parentTag.childrenCollectionSubject = linkTerm;
              parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(_RdfXmlParser.RDF + "rest");
            } else {
              this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);
              for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {
                this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);
              }
              parentTag.predicateSubPredicates = [];
              parentTag.predicateSubObjects = [];
              parentTag.predicateEmitted = true;
            }
          }
          for (let i = 0; i < predicates.length; i++) {
            const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);
            this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);
          }
          if (explicitType) {
            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), this.uriToNamedNode(explicitType), null);
          }
        }
      }
      /**
       * Handle the given property element in property-mode.
       * @param {SaxesTagNS} tag A SAX tag.
       * @param {IActiveTag} activeTag The currently active tag.
       * @param {IActiveTag} parentTag The parent tag or null.
       */
      onTagProperty(tag, activeTag, parentTag) {
        activeTag.childrenParseType = ParseType.RESOURCE;
        activeTag.subject = parentTag.subject;
        if (tag.uri === _RdfXmlParser.RDF && tag.local === "li") {
          if (!parentTag.listItemCounter) {
            parentTag.listItemCounter = 1;
          }
          activeTag.predicate = this.uriToNamedNode(tag.uri + "_" + parentTag.listItemCounter++);
        } else {
          activeTag.predicate = this.uriToNamedNode(tag.uri + tag.local);
        }
        if (tag.uri === _RdfXmlParser.RDF && _RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tag.local) >= 0) {
          throw this.newParseError(`Illegal property element name: ${tag.local}`);
        }
        activeTag.predicateSubPredicates = [];
        activeTag.predicateSubObjects = [];
        let parseType2 = false;
        let attributedProperty = false;
        let activeSubSubjectValue = null;
        let subSubjectValueBlank = true;
        const predicates = [];
        const objects = [];
        for (const propertyAttributeKey in tag.attributes) {
          const propertyAttribute = tag.attributes[propertyAttributeKey];
          if (propertyAttribute.uri === _RdfXmlParser.RDF) {
            switch (propertyAttribute.local) {
              case "resource":
                if (activeSubSubjectValue) {
                  throw this.newParseError(`Found both rdf:resource (${propertyAttribute.value}) and rdf:nodeID (${activeSubSubjectValue}).`);
                }
                if (parseType2) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttribute.value})`);
                }
                activeTag.hadChildren = true;
                activeSubSubjectValue = propertyAttribute.value;
                subSubjectValueBlank = false;
                continue;
              case "datatype":
                if (attributedProperty) {
                  throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttribute.value}).`);
                }
                if (parseType2) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttribute.value})`);
                }
                activeTag.datatype = this.valueToUri(propertyAttribute.value, activeTag);
                continue;
              case "nodeID":
                if (attributedProperty) {
                  throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttribute.value}).`);
                }
                if (activeTag.hadChildren) {
                  throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttribute.value}).`);
                }
                if (parseType2) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttribute.value})`);
                }
                this.validateNcname(propertyAttribute.value);
                activeTag.hadChildren = true;
                activeSubSubjectValue = propertyAttribute.value;
                subSubjectValueBlank = true;
                continue;
              case "bagID":
                throw this.newParseError(`rdf:bagID is not supported.`);
              case "parseType":
                if (attributedProperty) {
                  throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);
                }
                if (activeTag.datatype) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);
                }
                if (activeSubSubjectValue) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);
                }
                if (propertyAttribute.value === "Resource") {
                  parseType2 = true;
                  activeTag.childrenParseType = ParseType.PROPERTY;
                  const nestedBNode = this.dataFactory.blankNode();
                  this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);
                  activeTag.subject = nestedBNode;
                  activeTag.predicate = null;
                } else if (propertyAttribute.value === "Collection") {
                  parseType2 = true;
                  activeTag.hadChildren = true;
                  activeTag.childrenCollectionSubject = activeTag.subject;
                  activeTag.childrenCollectionPredicate = activeTag.predicate;
                  subSubjectValueBlank = false;
                } else if (propertyAttribute.value === "Literal") {
                  parseType2 = true;
                  activeTag.childrenTagsToString = true;
                  activeTag.childrenStringTags = [];
                }
                continue;
              case "ID":
                this.validateNcname(propertyAttribute.value);
                activeTag.reifiedStatementId = this.valueToUri("#" + propertyAttribute.value, activeTag);
                this.claimNodeId(activeTag.reifiedStatementId);
                continue;
            }
          } else if (propertyAttribute.uri === _RdfXmlParser.XML && propertyAttribute.local === "lang") {
            activeTag.language = propertyAttribute.value === "" ? null : propertyAttribute.value.toLowerCase();
            continue;
          }
          if (propertyAttribute.prefix !== "xml" && propertyAttribute.prefix !== "xmlns" && (propertyAttribute.prefix !== "" || propertyAttribute.local !== "xmlns") && propertyAttribute.uri) {
            if (parseType2 || activeTag.datatype) {
              throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttribute.value}`);
            }
            activeTag.hadChildren = true;
            attributedProperty = true;
            predicates.push(this.uriToNamedNode(propertyAttribute.uri + propertyAttribute.local));
            objects.push(this.dataFactory.literal(propertyAttribute.value, activeTag.datatype || activeTag.language));
          }
        }
        if (activeSubSubjectValue !== null) {
          const subjectParent = activeTag.subject;
          activeTag.subject = subSubjectValueBlank ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);
          this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);
          for (let i = 0; i < predicates.length; i++) {
            this.emitTriple(activeTag.subject, predicates[i], objects[i], null);
          }
          activeTag.predicateEmitted = true;
        } else if (subSubjectValueBlank) {
          activeTag.predicateSubPredicates = predicates;
          activeTag.predicateSubObjects = objects;
          activeTag.predicateEmitted = false;
        }
      }
      /**
       * Emit the given triple to the stream.
       * @param {Term} subject A subject term.
       * @param {Term} predicate A predicate term.
       * @param {Term} object An object term.
       * @param {Term} statementId An optional resource that identifies the triple.
       *                           If truthy, then the given triple will also be emitted reified.
       */
      emitTriple(subject, predicate, object, statementId) {
        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));
        if (statementId) {
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), this.dataFactory.namedNode(_RdfXmlParser.RDF + "Statement"), this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "subject"), subject, this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "predicate"), predicate, this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "object"), object, this.defaultGraph));
        }
      }
      /**
       * Register the given term as a node ID.
       * If one was already registered, this will emit an error.
       *
       * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.
       * @param {Term} term An RDF term.
       */
      claimNodeId(term) {
        if (!this.allowDuplicateRdfIds) {
          if (this.nodeIds[term.value]) {
            throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);
          }
          this.nodeIds[term.value] = true;
        }
      }
      /**
       * Handle the given text string.
       * @param {string} text A parsed text string.
       */
      onText(text) {
        const activeTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;
        if (activeTag) {
          if (activeTag.childrenStringTags) {
            activeTag.childrenStringTags.push(text);
          } else if (activeTag.predicate) {
            activeTag.text = text;
          }
        }
      }
      /**
       * Handle the closing of the last tag.
       */
      onCloseTag() {
        const poppedTag = this.activeTagStack.pop();
        if (poppedTag.childrenStringEmitClosingTag) {
          poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);
        }
        if (poppedTag.childrenTagsToString) {
          poppedTag.datatype = this.dataFactory.namedNode(_RdfXmlParser.RDF + "XMLLiteral");
          poppedTag.text = poppedTag.childrenStringTags.join("");
          poppedTag.hadChildren = false;
        }
        if (poppedTag.childrenCollectionSubject) {
          this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(_RdfXmlParser.RDF + "nil"), poppedTag.reifiedStatementId);
        } else if (poppedTag.predicate) {
          if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {
            this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || "", poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);
          } else if (!poppedTag.predicateEmitted) {
            const subject = this.dataFactory.blankNode();
            this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);
            for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {
              this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);
            }
          }
        }
      }
      /**
       * Fetch local DOCTYPE ENTITY's and make the parser recognise them.
       * @param {string} doctype The read doctype.
       */
      onDoctype(doctype) {
        doctype.replace(/<!ENTITY\s+([^\s]+)\s+["']([^"']+)["']\s*>/g, (match, prefix, uri) => {
          this.saxParser.ENTITIES[prefix] = uri;
          return "";
        });
      }
    };
    exports.RdfXmlParser = RdfXmlParser;
    RdfXmlParser.MIME_TYPE = "application/rdf+xml";
    RdfXmlParser.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    RdfXmlParser.XML = "http://www.w3.org/XML/1998/namespace";
    RdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [
      "RDF",
      "ID",
      "about",
      "bagID",
      "parseType",
      "resource",
      "nodeID",
      "li",
      "aboutEach",
      "aboutEachPrefix"
    ];
    RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [
      "Description",
      "RDF",
      "ID",
      "about",
      "bagID",
      "parseType",
      "resource",
      "nodeID",
      "aboutEach",
      "aboutEachPrefix"
    ];
    RdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_])([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_\-.0-9#xB7\u{0300}-\u{036F}\u{203F}-\u{2040}])*$/u;
    var ParseType;
    (function(ParseType2) {
      ParseType2[ParseType2["RESOURCE"] = 0] = "RESOURCE";
      ParseType2[ParseType2["PROPERTY"] = 1] = "PROPERTY";
    })(ParseType || (exports.ParseType = ParseType = {}));
  }
});

// ../../lipdjs/node_modules/rdfxml-streaming-parser/index.js
var require_rdfxml_streaming_parser = __commonJS({
  "../../lipdjs/node_modules/rdfxml-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_RdfXmlParser(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-rdfxml/lib/ActorRdfParseRdfXml.js
var require_ActorRdfParseRdfXml = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-rdfxml/lib/ActorRdfParseRdfXml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseRdfXml = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var context_entries_1 = require_lib3();
    var rdfxml_streaming_parser_1 = require_rdfxml_streaming_parser();
    var ActorRdfParseRdfXml = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/rdf+xml": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/rdf+xml": "http://www.w3.org/ns/formats/RDF_XML"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action) {
        var _a;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        action.data.on("error", (error) => data.emit("error", error));
        const data = action.data.pipe(new rdfxml_streaming_parser_1.RdfXmlParser({
          dataFactory,
          baseIRI: (_a = action.metadata) == null ? void 0 : _a.baseIRI
        }));
        return {
          data,
          metadata: { triples: true }
        };
      }
    };
    exports.ActorRdfParseRdfXml = ActorRdfParseRdfXml;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-rdfxml/lib/index.js
var require_lib68 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-rdfxml/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseRdfXml(), exports);
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/IActiveTag.js
var require_IActiveTag = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/IActiveTag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/IHtmlParseListener.js
var require_IHtmlParseListener = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/IHtmlParseListener.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/IRdfaPattern.js
var require_IRdfaPattern = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/IRdfaPattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/generated/decode-data-html.js
var require_decode_data_html = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/generated/decode-data-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/generated/decode-data-xml.js
var require_decode_data_xml = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/generated/decode-data-xml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.replaceCodePoint = exports.fromCodePoint = void 0;
    var decodeMap = /* @__PURE__ */ new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
    (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function replaceCodePoint(codePoint) {
      var _a2;
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return 65533;
      }
      return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
    }
    exports.replaceCodePoint = replaceCodePoint;
    function decodeCodePoint(codePoint) {
      return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
    }
    exports.default = decodeCodePoint;
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/decode.js
var require_decode = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
    var decode_data_html_js_1 = __importDefault(require_decode_data_html());
    exports.htmlDecodeTree = decode_data_html_js_1.default;
    var decode_data_xml_js_1 = __importDefault(require_decode_data_xml());
    exports.xmlDecodeTree = decode_data_xml_js_1.default;
    var decode_codepoint_js_1 = __importStar(require_decode_codepoint());
    exports.decodeCodePoint = decode_codepoint_js_1.default;
    var decode_codepoint_js_2 = require_decode_codepoint();
    Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.replaceCodePoint;
    } });
    Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.fromCodePoint;
    } });
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
      CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
      CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
      CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
      CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
      CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
      CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
      CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
      CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
      CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
      CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
    })(CharCodes || (CharCodes = {}));
    var TO_LOWER_BIT = 32;
    var BinTrieFlags;
    (function(BinTrieFlags2) {
      BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
    })(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
    function isNumber(code) {
      return code >= CharCodes.ZERO && code <= CharCodes.NINE;
    }
    function isHexadecimalCharacter(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
    }
    function isAsciiAlphaNumeric(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
    }
    function isEntityInAttributeInvalidEnd(code) {
      return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
    }
    var EntityDecoderState;
    (function(EntityDecoderState2) {
      EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
    })(EntityDecoderState || (EntityDecoderState = {}));
    var DecodingMode;
    (function(DecodingMode2) {
      DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
      DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
      DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
    })(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
    var EntityDecoder = (
      /** @class */
      function() {
        function EntityDecoder2(decodeTree, emitCodePoint, errors) {
          this.decodeTree = decodeTree;
          this.emitCodePoint = emitCodePoint;
          this.errors = errors;
          this.state = EntityDecoderState.EntityStart;
          this.consumed = 1;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.decodeMode = DecodingMode.Strict;
        }
        EntityDecoder2.prototype.startEntity = function(decodeMode) {
          this.decodeMode = decodeMode;
          this.state = EntityDecoderState.EntityStart;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.consumed = 1;
        };
        EntityDecoder2.prototype.write = function(str, offset) {
          switch (this.state) {
            case EntityDecoderState.EntityStart: {
              if (str.charCodeAt(offset) === CharCodes.NUM) {
                this.state = EntityDecoderState.NumericStart;
                this.consumed += 1;
                return this.stateNumericStart(str, offset + 1);
              }
              this.state = EntityDecoderState.NamedEntity;
              return this.stateNamedEntity(str, offset);
            }
            case EntityDecoderState.NumericStart: {
              return this.stateNumericStart(str, offset);
            }
            case EntityDecoderState.NumericDecimal: {
              return this.stateNumericDecimal(str, offset);
            }
            case EntityDecoderState.NumericHex: {
              return this.stateNumericHex(str, offset);
            }
            case EntityDecoderState.NamedEntity: {
              return this.stateNamedEntity(str, offset);
            }
          }
        };
        EntityDecoder2.prototype.stateNumericStart = function(str, offset) {
          if (offset >= str.length) {
            return -1;
          }
          if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
          }
          this.state = EntityDecoderState.NumericDecimal;
          return this.stateNumericDecimal(str, offset);
        };
        EntityDecoder2.prototype.addToNumericResult = function(str, start, end, base) {
          if (start !== end) {
            var digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
          }
        };
        EntityDecoder2.prototype.stateNumericHex = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 16);
              return this.emitNumericEntity(char, 3);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 16);
          return -1;
        };
        EntityDecoder2.prototype.stateNumericDecimal = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 10);
              return this.emitNumericEntity(char, 2);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 10);
          return -1;
        };
        EntityDecoder2.prototype.emitNumericEntity = function(lastCp, expectedLength) {
          var _a;
          if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
          } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
          }
          this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
          if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
              this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
          }
          return this.consumed;
        };
        EntityDecoder2.prototype.stateNamedEntity = function(str, offset) {
          var decodeTree = this.decodeTree;
          var current = decodeTree[this.treeIndex];
          var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          for (; offset < str.length; offset++, this.excess++) {
            var char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
              return this.result === 0 || // If we are parsing an attribute
              this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
              (valueLength === 0 || // And there should be no invalid characters.
              isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            if (valueLength !== 0) {
              if (char === CharCodes.SEMI) {
                return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
              }
              if (this.decodeMode !== DecodingMode.Strict) {
                this.result = this.treeIndex;
                this.consumed += this.excess;
                this.excess = 0;
              }
            }
          }
          return -1;
        };
        EntityDecoder2.prototype.emitNotTerminatedNamedEntity = function() {
          var _a;
          var _b = this, result = _b.result, decodeTree = _b.decodeTree;
          var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
          this.emitNamedEntityData(result, valueLength, this.consumed);
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
          return this.consumed;
        };
        EntityDecoder2.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
          var decodeTree = this.decodeTree;
          this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
          if (valueLength === 3) {
            this.emitCodePoint(decodeTree[result + 2], consumed);
          }
          return consumed;
        };
        EntityDecoder2.prototype.end = function() {
          var _a;
          switch (this.state) {
            case EntityDecoderState.NamedEntity: {
              return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
            }
            case EntityDecoderState.NumericDecimal: {
              return this.emitNumericEntity(0, 2);
            }
            case EntityDecoderState.NumericHex: {
              return this.emitNumericEntity(0, 3);
            }
            case EntityDecoderState.NumericStart: {
              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
              return 0;
            }
            case EntityDecoderState.EntityStart: {
              return 0;
            }
          }
        };
        return EntityDecoder2;
      }()
    );
    exports.EntityDecoder = EntityDecoder;
    function getDecoder(decodeTree) {
      var ret = "";
      var decoder = new EntityDecoder(decodeTree, function(str) {
        return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);
      });
      return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while ((offset = str.indexOf("&", offset)) >= 0) {
          ret += str.slice(lastIndex, offset);
          decoder.startEntity(decodeMode);
          var len = decoder.write(
            str,
            // Skip the "&"
            offset + 1
          );
          if (len < 0) {
            lastIndex = offset + decoder.end();
            break;
          }
          lastIndex = offset + len;
          offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        ret = "";
        return result;
      };
    }
    function determineBranch(decodeTree, current, nodeIdx, char) {
      var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
      }
      if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
      }
      var lo = nodeIdx;
      var hi = lo + branchCount - 1;
      while (lo <= hi) {
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) {
          lo = mid + 1;
        } else if (midVal > char) {
          hi = mid - 1;
        } else {
          return decodeTree[mid + branchCount];
        }
      }
      return -1;
    }
    exports.determineBranch = determineBranch;
    var htmlDecoder = getDecoder(decode_data_html_js_1.default);
    var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
    function decodeHTML(str, mode) {
      if (mode === void 0) {
        mode = DecodingMode.Legacy;
      }
      return htmlDecoder(str, mode);
    }
    exports.decodeHTML = decodeHTML;
    function decodeHTMLAttribute(str) {
      return htmlDecoder(str, DecodingMode.Attribute);
    }
    exports.decodeHTMLAttribute = decodeHTMLAttribute;
    function decodeHTMLStrict(str) {
      return htmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeHTMLStrict = decodeHTMLStrict;
    function decodeXML(str) {
      return xmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeXML = decodeXML;
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoteType = void 0;
    var decode_js_1 = require_decode();
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["Tab"] = 9] = "Tab";
      CharCodes2[CharCodes2["NewLine"] = 10] = "NewLine";
      CharCodes2[CharCodes2["FormFeed"] = 12] = "FormFeed";
      CharCodes2[CharCodes2["CarriageReturn"] = 13] = "CarriageReturn";
      CharCodes2[CharCodes2["Space"] = 32] = "Space";
      CharCodes2[CharCodes2["ExclamationMark"] = 33] = "ExclamationMark";
      CharCodes2[CharCodes2["Number"] = 35] = "Number";
      CharCodes2[CharCodes2["Amp"] = 38] = "Amp";
      CharCodes2[CharCodes2["SingleQuote"] = 39] = "SingleQuote";
      CharCodes2[CharCodes2["DoubleQuote"] = 34] = "DoubleQuote";
      CharCodes2[CharCodes2["Dash"] = 45] = "Dash";
      CharCodes2[CharCodes2["Slash"] = 47] = "Slash";
      CharCodes2[CharCodes2["Zero"] = 48] = "Zero";
      CharCodes2[CharCodes2["Nine"] = 57] = "Nine";
      CharCodes2[CharCodes2["Semi"] = 59] = "Semi";
      CharCodes2[CharCodes2["Lt"] = 60] = "Lt";
      CharCodes2[CharCodes2["Eq"] = 61] = "Eq";
      CharCodes2[CharCodes2["Gt"] = 62] = "Gt";
      CharCodes2[CharCodes2["Questionmark"] = 63] = "Questionmark";
      CharCodes2[CharCodes2["UpperA"] = 65] = "UpperA";
      CharCodes2[CharCodes2["LowerA"] = 97] = "LowerA";
      CharCodes2[CharCodes2["UpperF"] = 70] = "UpperF";
      CharCodes2[CharCodes2["LowerF"] = 102] = "LowerF";
      CharCodes2[CharCodes2["UpperZ"] = 90] = "UpperZ";
      CharCodes2[CharCodes2["LowerZ"] = 122] = "LowerZ";
      CharCodes2[CharCodes2["LowerX"] = 120] = "LowerX";
      CharCodes2[CharCodes2["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
    })(CharCodes || (CharCodes = {}));
    var State;
    (function(State2) {
      State2[State2["Text"] = 1] = "Text";
      State2[State2["BeforeTagName"] = 2] = "BeforeTagName";
      State2[State2["InTagName"] = 3] = "InTagName";
      State2[State2["InSelfClosingTag"] = 4] = "InSelfClosingTag";
      State2[State2["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
      State2[State2["InClosingTagName"] = 6] = "InClosingTagName";
      State2[State2["AfterClosingTagName"] = 7] = "AfterClosingTagName";
      State2[State2["BeforeAttributeName"] = 8] = "BeforeAttributeName";
      State2[State2["InAttributeName"] = 9] = "InAttributeName";
      State2[State2["AfterAttributeName"] = 10] = "AfterAttributeName";
      State2[State2["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
      State2[State2["InAttributeValueDq"] = 12] = "InAttributeValueDq";
      State2[State2["InAttributeValueSq"] = 13] = "InAttributeValueSq";
      State2[State2["InAttributeValueNq"] = 14] = "InAttributeValueNq";
      State2[State2["BeforeDeclaration"] = 15] = "BeforeDeclaration";
      State2[State2["InDeclaration"] = 16] = "InDeclaration";
      State2[State2["InProcessingInstruction"] = 17] = "InProcessingInstruction";
      State2[State2["BeforeComment"] = 18] = "BeforeComment";
      State2[State2["CDATASequence"] = 19] = "CDATASequence";
      State2[State2["InSpecialComment"] = 20] = "InSpecialComment";
      State2[State2["InCommentLike"] = 21] = "InCommentLike";
      State2[State2["BeforeSpecialS"] = 22] = "BeforeSpecialS";
      State2[State2["SpecialStartSequence"] = 23] = "SpecialStartSequence";
      State2[State2["InSpecialTag"] = 24] = "InSpecialTag";
      State2[State2["BeforeEntity"] = 25] = "BeforeEntity";
      State2[State2["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
      State2[State2["InNamedEntity"] = 27] = "InNamedEntity";
      State2[State2["InNumericEntity"] = 28] = "InNumericEntity";
      State2[State2["InHexEntity"] = 29] = "InHexEntity";
    })(State || (State = {}));
    function isWhitespace(c) {
      return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;
    }
    function isEndOfTagSection(c) {
      return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);
    }
    function isNumber(c) {
      return c >= CharCodes.Zero && c <= CharCodes.Nine;
    }
    function isASCIIAlpha(c) {
      return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;
    }
    function isHexDigit(c) {
      return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;
    }
    var QuoteType;
    (function(QuoteType2) {
      QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
      QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
      QuoteType2[QuoteType2["Single"] = 2] = "Single";
      QuoteType2[QuoteType2["Double"] = 3] = "Double";
    })(QuoteType = exports.QuoteType || (exports.QuoteType = {}));
    var Sequences = {
      Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
      CdataEnd: new Uint8Array([93, 93, 62]),
      CommentEnd: new Uint8Array([45, 45, 62]),
      ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
      StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
      TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101])
      // `</title`
    };
    var Tokenizer = (
      /** @class */
      function() {
        function Tokenizer2(_a, cbs) {
          var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;
          this.cbs = cbs;
          this.state = State.Text;
          this.buffer = "";
          this.sectionStart = 0;
          this.index = 0;
          this.baseState = State.Text;
          this.isSpecial = false;
          this.running = true;
          this.offset = 0;
          this.currentSequence = void 0;
          this.sequenceIndex = 0;
          this.trieIndex = 0;
          this.trieCurrent = 0;
          this.entityResult = 0;
          this.entityExcess = 0;
          this.xmlMode = xmlMode;
          this.decodeEntities = decodeEntities;
          this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;
        }
        Tokenizer2.prototype.reset = function() {
          this.state = State.Text;
          this.buffer = "";
          this.sectionStart = 0;
          this.index = 0;
          this.baseState = State.Text;
          this.currentSequence = void 0;
          this.running = true;
          this.offset = 0;
        };
        Tokenizer2.prototype.write = function(chunk) {
          this.offset += this.buffer.length;
          this.buffer = chunk;
          this.parse();
        };
        Tokenizer2.prototype.end = function() {
          if (this.running)
            this.finish();
        };
        Tokenizer2.prototype.pause = function() {
          this.running = false;
        };
        Tokenizer2.prototype.resume = function() {
          this.running = true;
          if (this.index < this.buffer.length + this.offset) {
            this.parse();
          }
        };
        Tokenizer2.prototype.getIndex = function() {
          return this.index;
        };
        Tokenizer2.prototype.getSectionStart = function() {
          return this.sectionStart;
        };
        Tokenizer2.prototype.stateText = function(c) {
          if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
            if (this.index > this.sectionStart) {
              this.cbs.ontext(this.sectionStart, this.index);
            }
            this.state = State.BeforeTagName;
            this.sectionStart = this.index;
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateSpecialStartSequence = function(c) {
          var isEnd = this.sequenceIndex === this.currentSequence.length;
          var isMatch = isEnd ? (
            // If we are at the end of the sequence, make sure the tag name has ended
            isEndOfTagSection(c)
          ) : (
            // Otherwise, do a case-insensitive comparison
            (c | 32) === this.currentSequence[this.sequenceIndex]
          );
          if (!isMatch) {
            this.isSpecial = false;
          } else if (!isEnd) {
            this.sequenceIndex++;
            return;
          }
          this.sequenceIndex = 0;
          this.state = State.InTagName;
          this.stateInTagName(c);
        };
        Tokenizer2.prototype.stateInSpecialTag = function(c) {
          if (this.sequenceIndex === this.currentSequence.length) {
            if (c === CharCodes.Gt || isWhitespace(c)) {
              var endOfText = this.index - this.currentSequence.length;
              if (this.sectionStart < endOfText) {
                var actualIndex = this.index;
                this.index = endOfText;
                this.cbs.ontext(this.sectionStart, endOfText);
                this.index = actualIndex;
              }
              this.isSpecial = false;
              this.sectionStart = endOfText + 2;
              this.stateInClosingTagName(c);
              return;
            }
            this.sequenceIndex = 0;
          }
          if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
          } else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
              if (this.decodeEntities && c === CharCodes.Amp) {
                this.state = State.BeforeEntity;
              }
            } else if (this.fastForwardTo(CharCodes.Lt)) {
              this.sequenceIndex = 1;
            }
          } else {
            this.sequenceIndex = Number(c === CharCodes.Lt);
          }
        };
        Tokenizer2.prototype.stateCDATASequence = function(c) {
          if (c === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
              this.state = State.InCommentLike;
              this.currentSequence = Sequences.CdataEnd;
              this.sequenceIndex = 0;
              this.sectionStart = this.index + 1;
            }
          } else {
            this.sequenceIndex = 0;
            this.state = State.InDeclaration;
            this.stateInDeclaration(c);
          }
        };
        Tokenizer2.prototype.fastForwardTo = function(c) {
          while (++this.index < this.buffer.length + this.offset) {
            if (this.buffer.charCodeAt(this.index - this.offset) === c) {
              return true;
            }
          }
          this.index = this.buffer.length + this.offset - 1;
          return false;
        };
        Tokenizer2.prototype.stateInCommentLike = function(c) {
          if (c === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
              if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, this.index, 2);
              } else {
                this.cbs.oncomment(this.sectionStart, this.index, 2);
              }
              this.sequenceIndex = 0;
              this.sectionStart = this.index + 1;
              this.state = State.Text;
            }
          } else if (this.sequenceIndex === 0) {
            if (this.fastForwardTo(this.currentSequence[0])) {
              this.sequenceIndex = 1;
            }
          } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
            this.sequenceIndex = 0;
          }
        };
        Tokenizer2.prototype.isTagStartChar = function(c) {
          return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
        };
        Tokenizer2.prototype.startSpecial = function(sequence, offset) {
          this.isSpecial = true;
          this.currentSequence = sequence;
          this.sequenceIndex = offset;
          this.state = State.SpecialStartSequence;
        };
        Tokenizer2.prototype.stateBeforeTagName = function(c) {
          if (c === CharCodes.ExclamationMark) {
            this.state = State.BeforeDeclaration;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.Questionmark) {
            this.state = State.InProcessingInstruction;
            this.sectionStart = this.index + 1;
          } else if (this.isTagStartChar(c)) {
            var lower = c | 32;
            this.sectionStart = this.index;
            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
              this.startSpecial(Sequences.TitleEnd, 3);
            } else {
              this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;
            }
          } else if (c === CharCodes.Slash) {
            this.state = State.BeforeClosingTagName;
          } else {
            this.state = State.Text;
            this.stateText(c);
          }
        };
        Tokenizer2.prototype.stateInTagName = function(c) {
          if (isEndOfTagSection(c)) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
          if (isWhitespace(c)) {
          } else if (c === CharCodes.Gt) {
            this.state = State.Text;
          } else {
            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateInClosingTagName = function(c) {
          if (c === CharCodes.Gt || isWhitespace(c)) {
            this.cbs.onclosetag(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterClosingTagName;
            this.stateAfterClosingTagName(c);
          }
        };
        Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
          if (c === CharCodes.Gt) {
            this.cbs.onopentagend(this.index);
            if (this.isSpecial) {
              this.state = State.InSpecialTag;
              this.sequenceIndex = 0;
            } else {
              this.state = State.Text;
            }
            this.baseState = this.state;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.Slash) {
            this.state = State.InSelfClosingTag;
          } else if (!isWhitespace(c)) {
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
          if (c === CharCodes.Gt) {
            this.cbs.onselfclosingtag(this.index);
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
            this.isSpecial = false;
          } else if (!isWhitespace(c)) {
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateInAttributeName = function(c) {
          if (c === CharCodes.Eq || isEndOfTagSection(c)) {
            this.cbs.onattribname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterAttributeName;
            this.stateAfterAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateAfterAttributeName = function(c) {
          if (c === CharCodes.Eq) {
            this.state = State.BeforeAttributeValue;
          } else if (c === CharCodes.Slash || c === CharCodes.Gt) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          } else if (!isWhitespace(c)) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
          if (c === CharCodes.DoubleQuote) {
            this.state = State.InAttributeValueDq;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.SingleQuote) {
            this.state = State.InAttributeValueSq;
            this.sectionStart = this.index + 1;
          } else if (!isWhitespace(c)) {
            this.sectionStart = this.index;
            this.state = State.InAttributeValueNq;
            this.stateInAttributeValueNoQuotes(c);
          }
        };
        Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
          if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
            this.state = State.BeforeAttributeName;
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
          this.handleInAttributeValue(c, CharCodes.DoubleQuote);
        };
        Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
          this.handleInAttributeValue(c, CharCodes.SingleQuote);
        };
        Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
          if (isWhitespace(c) || c === CharCodes.Gt) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(QuoteType.Unquoted, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
          if (c === CharCodes.OpeningSquareBracket) {
            this.state = State.CDATASequence;
            this.sequenceIndex = 0;
          } else {
            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
          }
        };
        Tokenizer2.prototype.stateInDeclaration = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.ondeclaration(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.onprocessinginstruction(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeComment = function(c) {
          if (c === CharCodes.Dash) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CommentEnd;
            this.sequenceIndex = 2;
            this.sectionStart = this.index + 1;
          } else {
            this.state = State.InDeclaration;
          }
        };
        Tokenizer2.prototype.stateInSpecialComment = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.oncomment(this.sectionStart, this.index, 0);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
          var lower = c | 32;
          if (lower === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
          } else if (lower === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
          } else {
            this.state = State.InTagName;
            this.stateInTagName(c);
          }
        };
        Tokenizer2.prototype.stateBeforeEntity = function(c) {
          this.entityExcess = 1;
          this.entityResult = 0;
          if (c === CharCodes.Number) {
            this.state = State.BeforeNumericEntity;
          } else if (c === CharCodes.Amp) {
          } else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.state = State.InNamedEntity;
            this.stateInNamedEntity(c);
          }
        };
        Tokenizer2.prototype.stateInNamedEntity = function(c) {
          this.entityExcess += 1;
          this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
          if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this.index--;
            return;
          }
          this.trieCurrent = this.entityTrie[this.trieIndex];
          var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;
          if (masked) {
            var valueLength = (masked >> 14) - 1;
            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {
              this.trieIndex += valueLength;
            } else {
              var entityStart = this.index - this.entityExcess + 1;
              if (entityStart > this.sectionStart) {
                this.emitPartial(this.sectionStart, entityStart);
              }
              this.entityResult = this.trieIndex;
              this.trieIndex += valueLength;
              this.entityExcess = 0;
              this.sectionStart = this.index + 1;
              if (valueLength === 0) {
                this.emitNamedEntity();
              }
            }
          }
        };
        Tokenizer2.prototype.emitNamedEntity = function() {
          this.state = this.baseState;
          if (this.entityResult === 0) {
            return;
          }
          var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;
          switch (valueLength) {
            case 1: {
              this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);
              break;
            }
            case 2: {
              this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
              break;
            }
            case 3: {
              this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
              this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
            }
          }
        };
        Tokenizer2.prototype.stateBeforeNumericEntity = function(c) {
          if ((c | 32) === CharCodes.LowerX) {
            this.entityExcess++;
            this.state = State.InHexEntity;
          } else {
            this.state = State.InNumericEntity;
            this.stateInNumericEntity(c);
          }
        };
        Tokenizer2.prototype.emitNumericEntity = function(strict) {
          var entityStart = this.index - this.entityExcess - 1;
          var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);
          if (numberStart !== this.index) {
            if (entityStart > this.sectionStart) {
              this.emitPartial(this.sectionStart, entityStart);
            }
            this.sectionStart = this.index + Number(strict);
            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));
          }
          this.state = this.baseState;
        };
        Tokenizer2.prototype.stateInNumericEntity = function(c) {
          if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
          } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);
            this.entityExcess++;
          } else {
            if (this.allowLegacyEntity()) {
              this.emitNumericEntity(false);
            } else {
              this.state = this.baseState;
            }
            this.index--;
          }
        };
        Tokenizer2.prototype.stateInHexEntity = function(c) {
          if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
          } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);
            this.entityExcess++;
          } else if (isHexDigit(c)) {
            this.entityResult = this.entityResult * 16 + ((c | 32) - CharCodes.LowerA + 10);
            this.entityExcess++;
          } else {
            if (this.allowLegacyEntity()) {
              this.emitNumericEntity(false);
            } else {
              this.state = this.baseState;
            }
            this.index--;
          }
        };
        Tokenizer2.prototype.allowLegacyEntity = function() {
          return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);
        };
        Tokenizer2.prototype.cleanup = function() {
          if (this.running && this.sectionStart !== this.index) {
            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
              this.cbs.ontext(this.sectionStart, this.index);
              this.sectionStart = this.index;
            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = this.index;
            }
          }
        };
        Tokenizer2.prototype.shouldContinue = function() {
          return this.index < this.buffer.length + this.offset && this.running;
        };
        Tokenizer2.prototype.parse = function() {
          while (this.shouldContinue()) {
            var c = this.buffer.charCodeAt(this.index - this.offset);
            switch (this.state) {
              case State.Text: {
                this.stateText(c);
                break;
              }
              case State.SpecialStartSequence: {
                this.stateSpecialStartSequence(c);
                break;
              }
              case State.InSpecialTag: {
                this.stateInSpecialTag(c);
                break;
              }
              case State.CDATASequence: {
                this.stateCDATASequence(c);
                break;
              }
              case State.InAttributeValueDq: {
                this.stateInAttributeValueDoubleQuotes(c);
                break;
              }
              case State.InAttributeName: {
                this.stateInAttributeName(c);
                break;
              }
              case State.InCommentLike: {
                this.stateInCommentLike(c);
                break;
              }
              case State.InSpecialComment: {
                this.stateInSpecialComment(c);
                break;
              }
              case State.BeforeAttributeName: {
                this.stateBeforeAttributeName(c);
                break;
              }
              case State.InTagName: {
                this.stateInTagName(c);
                break;
              }
              case State.InClosingTagName: {
                this.stateInClosingTagName(c);
                break;
              }
              case State.BeforeTagName: {
                this.stateBeforeTagName(c);
                break;
              }
              case State.AfterAttributeName: {
                this.stateAfterAttributeName(c);
                break;
              }
              case State.InAttributeValueSq: {
                this.stateInAttributeValueSingleQuotes(c);
                break;
              }
              case State.BeforeAttributeValue: {
                this.stateBeforeAttributeValue(c);
                break;
              }
              case State.BeforeClosingTagName: {
                this.stateBeforeClosingTagName(c);
                break;
              }
              case State.AfterClosingTagName: {
                this.stateAfterClosingTagName(c);
                break;
              }
              case State.BeforeSpecialS: {
                this.stateBeforeSpecialS(c);
                break;
              }
              case State.InAttributeValueNq: {
                this.stateInAttributeValueNoQuotes(c);
                break;
              }
              case State.InSelfClosingTag: {
                this.stateInSelfClosingTag(c);
                break;
              }
              case State.InDeclaration: {
                this.stateInDeclaration(c);
                break;
              }
              case State.BeforeDeclaration: {
                this.stateBeforeDeclaration(c);
                break;
              }
              case State.BeforeComment: {
                this.stateBeforeComment(c);
                break;
              }
              case State.InProcessingInstruction: {
                this.stateInProcessingInstruction(c);
                break;
              }
              case State.InNamedEntity: {
                this.stateInNamedEntity(c);
                break;
              }
              case State.BeforeEntity: {
                this.stateBeforeEntity(c);
                break;
              }
              case State.InHexEntity: {
                this.stateInHexEntity(c);
                break;
              }
              case State.InNumericEntity: {
                this.stateInNumericEntity(c);
                break;
              }
              default: {
                this.stateBeforeNumericEntity(c);
              }
            }
            this.index++;
          }
          this.cleanup();
        };
        Tokenizer2.prototype.finish = function() {
          if (this.state === State.InNamedEntity) {
            this.emitNamedEntity();
          }
          if (this.sectionStart < this.index) {
            this.handleTrailingData();
          }
          this.cbs.onend();
        };
        Tokenizer2.prototype.handleTrailingData = function() {
          var endIndex = this.buffer.length + this.offset;
          if (this.state === State.InCommentLike) {
            if (this.currentSequence === Sequences.CdataEnd) {
              this.cbs.oncdata(this.sectionStart, endIndex, 0);
            } else {
              this.cbs.oncomment(this.sectionStart, endIndex, 0);
            }
          } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
          } else {
            this.cbs.ontext(this.sectionStart, endIndex);
          }
        };
        Tokenizer2.prototype.emitPartial = function(start, endIndex) {
          if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribdata(start, endIndex);
          } else {
            this.cbs.ontext(start, endIndex);
          }
        };
        Tokenizer2.prototype.emitCodePoint = function(cp) {
          if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribentity(cp);
          } else {
            this.cbs.ontextentity(cp);
          }
        };
        return Tokenizer2;
      }()
    );
    exports.default = Tokenizer;
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/Parser.js
var require_Parser = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/Parser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var Tokenizer_js_1 = __importStar(require_Tokenizer());
    var decode_js_1 = require_decode();
    var formTags = /* @__PURE__ */ new Set([
      "input",
      "option",
      "optgroup",
      "select",
      "button",
      "datalist",
      "textarea"
    ]);
    var pTag = /* @__PURE__ */ new Set(["p"]);
    var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
    var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
    var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
    var openImpliesClose = /* @__PURE__ */ new Map([
      ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
      ["th", /* @__PURE__ */ new Set(["th"])],
      ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
      ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
      ["li", /* @__PURE__ */ new Set(["li"])],
      ["p", pTag],
      ["h1", pTag],
      ["h2", pTag],
      ["h3", pTag],
      ["h4", pTag],
      ["h5", pTag],
      ["h6", pTag],
      ["select", formTags],
      ["input", formTags],
      ["output", formTags],
      ["button", formTags],
      ["datalist", formTags],
      ["textarea", formTags],
      ["option", /* @__PURE__ */ new Set(["option"])],
      ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
      ["dd", ddtTags],
      ["dt", ddtTags],
      ["address", pTag],
      ["article", pTag],
      ["aside", pTag],
      ["blockquote", pTag],
      ["details", pTag],
      ["div", pTag],
      ["dl", pTag],
      ["fieldset", pTag],
      ["figcaption", pTag],
      ["figure", pTag],
      ["footer", pTag],
      ["form", pTag],
      ["header", pTag],
      ["hr", pTag],
      ["main", pTag],
      ["nav", pTag],
      ["ol", pTag],
      ["pre", pTag],
      ["section", pTag],
      ["table", pTag],
      ["ul", pTag],
      ["rt", rtpTags],
      ["rp", rtpTags],
      ["tbody", tableSectionTags],
      ["tfoot", tableSectionTags]
    ]);
    var voidElements = /* @__PURE__ */ new Set([
      "area",
      "base",
      "basefont",
      "br",
      "col",
      "command",
      "embed",
      "frame",
      "hr",
      "img",
      "input",
      "isindex",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
    var htmlIntegrationElements = /* @__PURE__ */ new Set([
      "mi",
      "mo",
      "mn",
      "ms",
      "mtext",
      "annotation-xml",
      "foreignobject",
      "desc",
      "title"
    ]);
    var reNameEnd = /\s|\//;
    var Parser2 = (
      /** @class */
      function() {
        function Parser3(cbs, options) {
          if (options === void 0) {
            options = {};
          }
          var _a, _b, _c, _d, _e;
          this.options = options;
          this.startIndex = 0;
          this.endIndex = 0;
          this.openTagStart = 0;
          this.tagname = "";
          this.attribname = "";
          this.attribvalue = "";
          this.attribs = null;
          this.stack = [];
          this.foreignContext = [];
          this.buffers = [];
          this.bufferOffset = 0;
          this.writeIndex = 0;
          this.ended = false;
          this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
          this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
          this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
          this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);
          (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
        }
        Parser3.prototype.ontext = function(start, endIndex) {
          var _a, _b;
          var data = this.getSlice(start, endIndex);
          this.endIndex = endIndex - 1;
          (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
          this.startIndex = endIndex;
        };
        Parser3.prototype.ontextentity = function(cp) {
          var _a, _b;
          var index = this.tokenizer.getSectionStart();
          this.endIndex = index - 1;
          (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));
          this.startIndex = index;
        };
        Parser3.prototype.isVoidElement = function(name) {
          return !this.options.xmlMode && voidElements.has(name);
        };
        Parser3.prototype.onopentagname = function(start, endIndex) {
          this.endIndex = endIndex;
          var name = this.getSlice(start, endIndex);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          this.emitOpenTag(name);
        };
        Parser3.prototype.emitOpenTag = function(name) {
          var _a, _b, _c, _d;
          this.openTagStart = this.startIndex;
          this.tagname = name;
          var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
          if (impliesClose) {
            while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
              var element = this.stack.pop();
              (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
            }
          }
          if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
              this.foreignContext.push(true);
            } else if (htmlIntegrationElements.has(name)) {
              this.foreignContext.push(false);
            }
          }
          (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
          if (this.cbs.onopentag)
            this.attribs = {};
        };
        Parser3.prototype.endOpenTag = function(isImplied) {
          var _a, _b;
          this.startIndex = this.openTagStart;
          if (this.attribs) {
            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
            this.attribs = null;
          }
          if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
          }
          this.tagname = "";
        };
        Parser3.prototype.onopentagend = function(endIndex) {
          this.endIndex = endIndex;
          this.endOpenTag(false);
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onclosetag = function(start, endIndex) {
          var _a, _b, _c, _d, _e, _f;
          this.endIndex = endIndex;
          var name = this.getSlice(start, endIndex);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
          }
          if (!this.isVoidElement(name)) {
            var pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
              if (this.cbs.onclosetag) {
                var count2 = this.stack.length - pos;
                while (count2--) {
                  this.cbs.onclosetag(this.stack.pop(), count2 !== 0);
                }
              } else
                this.stack.length = pos;
            } else if (!this.options.xmlMode && name === "p") {
              this.emitOpenTag("p");
              this.closeCurrentTag(true);
            }
          } else if (!this.options.xmlMode && name === "br") {
            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, "br");
            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", false);
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onselfclosingtag = function(endIndex) {
          this.endIndex = endIndex;
          if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag(false);
            this.startIndex = endIndex + 1;
          } else {
            this.onopentagend(endIndex);
          }
        };
        Parser3.prototype.closeCurrentTag = function(isOpenImplied) {
          var _a, _b;
          var name = this.tagname;
          this.endOpenTag(isOpenImplied);
          if (this.stack[this.stack.length - 1] === name) {
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
            this.stack.pop();
          }
        };
        Parser3.prototype.onattribname = function(start, endIndex) {
          this.startIndex = start;
          var name = this.getSlice(start, endIndex);
          this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
        };
        Parser3.prototype.onattribdata = function(start, endIndex) {
          this.attribvalue += this.getSlice(start, endIndex);
        };
        Parser3.prototype.onattribentity = function(cp) {
          this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
        };
        Parser3.prototype.onattribend = function(quote, endIndex) {
          var _a, _b;
          this.endIndex = endIndex;
          (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? void 0 : null);
          if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
          }
          this.attribvalue = "";
        };
        Parser3.prototype.getInstructionName = function(value) {
          var index = value.search(reNameEnd);
          var name = index < 0 ? value : value.substr(0, index);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          return name;
        };
        Parser3.prototype.ondeclaration = function(start, endIndex) {
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex);
          if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onprocessinginstruction = function(start, endIndex) {
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex);
          if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.oncomment = function(start, endIndex, offset) {
          var _a, _b, _c, _d;
          this.endIndex = endIndex;
          (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
          (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.oncdata = function(start, endIndex, offset) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex - offset);
          if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
          } else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value, "]]"));
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onend = function() {
          var _a, _b;
          if (this.cbs.onclosetag) {
            this.endIndex = this.startIndex;
            for (var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true))
              ;
          }
          (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        Parser3.prototype.reset = function() {
          var _a, _b, _c, _d;
          (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
          this.tokenizer.reset();
          this.tagname = "";
          this.attribname = "";
          this.attribs = null;
          this.stack.length = 0;
          this.startIndex = 0;
          this.endIndex = 0;
          (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
          this.buffers.length = 0;
          this.bufferOffset = 0;
          this.writeIndex = 0;
          this.ended = false;
        };
        Parser3.prototype.parseComplete = function(data) {
          this.reset();
          this.end(data);
        };
        Parser3.prototype.getSlice = function(start, end) {
          while (start - this.bufferOffset >= this.buffers[0].length) {
            this.shiftBuffer();
          }
          var slice3 = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
          while (end - this.bufferOffset > this.buffers[0].length) {
            this.shiftBuffer();
            slice3 += this.buffers[0].slice(0, end - this.bufferOffset);
          }
          return slice3;
        };
        Parser3.prototype.shiftBuffer = function() {
          this.bufferOffset += this.buffers[0].length;
          this.writeIndex--;
          this.buffers.shift();
        };
        Parser3.prototype.write = function(chunk) {
          var _a, _b;
          if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
            return;
          }
          this.buffers.push(chunk);
          if (this.tokenizer.running) {
            this.tokenizer.write(chunk);
            this.writeIndex++;
          }
        };
        Parser3.prototype.end = function(chunk) {
          var _a, _b;
          if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
            return;
          }
          if (chunk)
            this.write(chunk);
          this.ended = true;
          this.tokenizer.end();
        };
        Parser3.prototype.pause = function() {
          this.tokenizer.pause();
        };
        Parser3.prototype.resume = function() {
          this.tokenizer.resume();
          while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
            this.tokenizer.write(this.buffers[this.writeIndex++]);
          }
          if (this.ended)
            this.tokenizer.end();
        };
        Parser3.prototype.parseChunk = function(chunk) {
          this.write(chunk);
        };
        Parser3.prototype.done = function(chunk) {
          this.end(chunk);
        };
        return Parser3;
      }()
    );
    exports.Parser = Parser2;
  }
});

// ../../lipdjs/node_modules/domelementtype/lib/index.js
var require_lib69 = __commonJS({
  "../../lipdjs/node_modules/domelementtype/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
    var ElementType;
    (function(ElementType2) {
      ElementType2["Root"] = "root";
      ElementType2["Text"] = "text";
      ElementType2["Directive"] = "directive";
      ElementType2["Comment"] = "comment";
      ElementType2["Script"] = "script";
      ElementType2["Style"] = "style";
      ElementType2["Tag"] = "tag";
      ElementType2["CDATA"] = "cdata";
      ElementType2["Doctype"] = "doctype";
    })(ElementType = exports.ElementType || (exports.ElementType = {}));
    function isTag(elem) {
      return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
    }
    exports.isTag = isTag;
    exports.Root = ElementType.Root;
    exports.Text = ElementType.Text;
    exports.Directive = ElementType.Directive;
    exports.Comment = ElementType.Comment;
    exports.Script = ElementType.Script;
    exports.Style = ElementType.Style;
    exports.Tag = ElementType.Tag;
    exports.CDATA = ElementType.CDATA;
    exports.Doctype = ElementType.Doctype;
  }
});

// ../../lipdjs/node_modules/domhandler/lib/node.js
var require_node = __commonJS({
  "../../lipdjs/node_modules/domhandler/lib/node.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
    var domelementtype_1 = require_lib69();
    var Node = (
      /** @class */
      function() {
        function Node2() {
          this.parent = null;
          this.prev = null;
          this.next = null;
          this.startIndex = null;
          this.endIndex = null;
        }
        Object.defineProperty(Node2.prototype, "parentNode", {
          // Read-write aliases for properties
          /**
           * Same as {@link parent}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.parent;
          },
          set: function(parent) {
            this.parent = parent;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node2.prototype, "previousSibling", {
          /**
           * Same as {@link prev}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.prev;
          },
          set: function(prev) {
            this.prev = prev;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node2.prototype, "nextSibling", {
          /**
           * Same as {@link next}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.next;
          },
          set: function(next) {
            this.next = next;
          },
          enumerable: false,
          configurable: true
        });
        Node2.prototype.cloneNode = function(recursive) {
          if (recursive === void 0) {
            recursive = false;
          }
          return cloneNode(this, recursive);
        };
        return Node2;
      }()
    );
    exports.Node = Node;
    var DataNode = (
      /** @class */
      function(_super) {
        __extends(DataNode2, _super);
        function DataNode2(data) {
          var _this = _super.call(this) || this;
          _this.data = data;
          return _this;
        }
        Object.defineProperty(DataNode2.prototype, "nodeValue", {
          /**
           * Same as {@link data}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.data;
          },
          set: function(data) {
            this.data = data;
          },
          enumerable: false,
          configurable: true
        });
        return DataNode2;
      }(Node)
    );
    exports.DataNode = DataNode;
    var Text = (
      /** @class */
      function(_super) {
        __extends(Text2, _super);
        function Text2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = domelementtype_1.ElementType.Text;
          return _this;
        }
        Object.defineProperty(Text2.prototype, "nodeType", {
          get: function() {
            return 3;
          },
          enumerable: false,
          configurable: true
        });
        return Text2;
      }(DataNode)
    );
    exports.Text = Text;
    var Comment = (
      /** @class */
      function(_super) {
        __extends(Comment2, _super);
        function Comment2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = domelementtype_1.ElementType.Comment;
          return _this;
        }
        Object.defineProperty(Comment2.prototype, "nodeType", {
          get: function() {
            return 8;
          },
          enumerable: false,
          configurable: true
        });
        return Comment2;
      }(DataNode)
    );
    exports.Comment = Comment;
    var ProcessingInstruction = (
      /** @class */
      function(_super) {
        __extends(ProcessingInstruction2, _super);
        function ProcessingInstruction2(name, data) {
          var _this = _super.call(this, data) || this;
          _this.name = name;
          _this.type = domelementtype_1.ElementType.Directive;
          return _this;
        }
        Object.defineProperty(ProcessingInstruction2.prototype, "nodeType", {
          get: function() {
            return 1;
          },
          enumerable: false,
          configurable: true
        });
        return ProcessingInstruction2;
      }(DataNode)
    );
    exports.ProcessingInstruction = ProcessingInstruction;
    var NodeWithChildren = (
      /** @class */
      function(_super) {
        __extends(NodeWithChildren2, _super);
        function NodeWithChildren2(children) {
          var _this = _super.call(this) || this;
          _this.children = children;
          return _this;
        }
        Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
          // Aliases
          /** First child of the node. */
          get: function() {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
          /** Last child of the node. */
          get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
          /**
           * Same as {@link children}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.children;
          },
          set: function(children) {
            this.children = children;
          },
          enumerable: false,
          configurable: true
        });
        return NodeWithChildren2;
      }(Node)
    );
    exports.NodeWithChildren = NodeWithChildren;
    var CDATA = (
      /** @class */
      function(_super) {
        __extends(CDATA2, _super);
        function CDATA2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = domelementtype_1.ElementType.CDATA;
          return _this;
        }
        Object.defineProperty(CDATA2.prototype, "nodeType", {
          get: function() {
            return 4;
          },
          enumerable: false,
          configurable: true
        });
        return CDATA2;
      }(NodeWithChildren)
    );
    exports.CDATA = CDATA;
    var Document2 = (
      /** @class */
      function(_super) {
        __extends(Document3, _super);
        function Document3() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = domelementtype_1.ElementType.Root;
          return _this;
        }
        Object.defineProperty(Document3.prototype, "nodeType", {
          get: function() {
            return 9;
          },
          enumerable: false,
          configurable: true
        });
        return Document3;
      }(NodeWithChildren)
    );
    exports.Document = Document2;
    var Element = (
      /** @class */
      function(_super) {
        __extends(Element2, _super);
        function Element2(name, attribs, children, type) {
          if (children === void 0) {
            children = [];
          }
          if (type === void 0) {
            type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
          }
          var _this = _super.call(this, children) || this;
          _this.name = name;
          _this.attribs = attribs;
          _this.type = type;
          return _this;
        }
        Object.defineProperty(Element2.prototype, "nodeType", {
          get: function() {
            return 1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Element2.prototype, "tagName", {
          // DOM Level 1 aliases
          /**
           * Same as {@link name}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.name;
          },
          set: function(name) {
            this.name = name;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Element2.prototype, "attributes", {
          get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name) {
              var _a, _b;
              return {
                name,
                value: _this.attribs[name],
                namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
              };
            });
          },
          enumerable: false,
          configurable: true
        });
        return Element2;
      }(NodeWithChildren)
    );
    exports.Element = Element;
    function isTag(node) {
      return (0, domelementtype_1.isTag)(node);
    }
    exports.isTag = isTag;
    function isCDATA(node) {
      return node.type === domelementtype_1.ElementType.CDATA;
    }
    exports.isCDATA = isCDATA;
    function isText(node) {
      return node.type === domelementtype_1.ElementType.Text;
    }
    exports.isText = isText;
    function isComment(node) {
      return node.type === domelementtype_1.ElementType.Comment;
    }
    exports.isComment = isComment;
    function isDirective(node) {
      return node.type === domelementtype_1.ElementType.Directive;
    }
    exports.isDirective = isDirective;
    function isDocument(node) {
      return node.type === domelementtype_1.ElementType.Root;
    }
    exports.isDocument = isDocument;
    function hasChildren(node) {
      return Object.prototype.hasOwnProperty.call(node, "children");
    }
    exports.hasChildren = hasChildren;
    function cloneNode(node, recursive) {
      if (recursive === void 0) {
        recursive = false;
      }
      var result;
      if (isText(node)) {
        result = new Text(node.data);
      } else if (isComment(node)) {
        result = new Comment(node.data);
      } else if (isTag(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);
        children.forEach(function(child) {
          return child.parent = clone_1;
        });
        if (node.namespace != null) {
          clone_1.namespace = node.namespace;
        }
        if (node["x-attribsNamespace"]) {
          clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
        }
        if (node["x-attribsPrefix"]) {
          clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
        }
        result = clone_1;
      } else if (isCDATA(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_2 = new CDATA(children);
        children.forEach(function(child) {
          return child.parent = clone_2;
        });
        result = clone_2;
      } else if (isDocument(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_3 = new Document2(children);
        children.forEach(function(child) {
          return child.parent = clone_3;
        });
        if (node["x-mode"]) {
          clone_3["x-mode"] = node["x-mode"];
        }
        result = clone_3;
      } else if (isDirective(node)) {
        var instruction = new ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
          instruction["x-name"] = node["x-name"];
          instruction["x-publicId"] = node["x-publicId"];
          instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
      } else {
        throw new Error("Not implemented yet: ".concat(node.type));
      }
      result.startIndex = node.startIndex;
      result.endIndex = node.endIndex;
      if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
      }
      return result;
    }
    exports.cloneNode = cloneNode;
    function cloneChildren(childs) {
      var children = childs.map(function(child) {
        return cloneNode(child, true);
      });
      for (var i = 1; i < children.length; i++) {
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
      }
      return children;
    }
  }
});

// ../../lipdjs/node_modules/domhandler/lib/index.js
var require_lib70 = __commonJS({
  "../../lipdjs/node_modules/domhandler/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomHandler = void 0;
    var domelementtype_1 = require_lib69();
    var node_js_1 = require_node();
    __exportStar(require_node(), exports);
    var defaultOpts = {
      withStartIndices: false,
      withEndIndices: false,
      xmlMode: false
    };
    var DomHandler = (
      /** @class */
      function() {
        function DomHandler2(callback, options, elementCB) {
          this.dom = [];
          this.root = new node_js_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
          if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
          }
          if (typeof callback === "object") {
            options = callback;
            callback = void 0;
          }
          this.callback = callback !== null && callback !== void 0 ? callback : null;
          this.options = options !== null && options !== void 0 ? options : defaultOpts;
          this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler2.prototype.onparserinit = function(parser) {
          this.parser = parser;
        };
        DomHandler2.prototype.onreset = function() {
          this.dom = [];
          this.root = new node_js_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
        };
        DomHandler2.prototype.onend = function() {
          if (this.done)
            return;
          this.done = true;
          this.parser = null;
          this.handleCallback(null);
        };
        DomHandler2.prototype.onerror = function(error) {
          this.handleCallback(error);
        };
        DomHandler2.prototype.onclosetag = function() {
          this.lastNode = null;
          var elem = this.tagStack.pop();
          if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
          }
          if (this.elementCB)
            this.elementCB(elem);
        };
        DomHandler2.prototype.onopentag = function(name, attribs) {
          var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : void 0;
          var element = new node_js_1.Element(name, attribs, void 0, type);
          this.addNode(element);
          this.tagStack.push(element);
        };
        DomHandler2.prototype.ontext = function(data) {
          var lastNode = this.lastNode;
          if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
            lastNode.data += data;
            if (this.options.withEndIndices) {
              lastNode.endIndex = this.parser.endIndex;
            }
          } else {
            var node = new node_js_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
          }
        };
        DomHandler2.prototype.oncomment = function(data) {
          if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
            this.lastNode.data += data;
            return;
          }
          var node = new node_js_1.Comment(data);
          this.addNode(node);
          this.lastNode = node;
        };
        DomHandler2.prototype.oncommentend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.oncdatastart = function() {
          var text = new node_js_1.Text("");
          var node = new node_js_1.CDATA([text]);
          this.addNode(node);
          text.parent = node;
          this.lastNode = text;
        };
        DomHandler2.prototype.oncdataend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.onprocessinginstruction = function(name, data) {
          var node = new node_js_1.ProcessingInstruction(name, data);
          this.addNode(node);
        };
        DomHandler2.prototype.handleCallback = function(error) {
          if (typeof this.callback === "function") {
            this.callback(error, this.dom);
          } else if (error) {
            throw error;
          }
        };
        DomHandler2.prototype.addNode = function(node) {
          var parent = this.tagStack[this.tagStack.length - 1];
          var previousSibling = parent.children[parent.children.length - 1];
          if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
          }
          if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
          }
          parent.children.push(node);
          if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
          }
          node.parent = parent;
          this.lastNode = null;
        };
        return DomHandler2;
      }()
    );
    exports.DomHandler = DomHandler;
    exports.default = DomHandler;
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/decode-data-html.js
var require_decode_data_html2 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/decode-data-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/decode-data-xml.js
var require_decode_data_xml2 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/decode-data-xml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint2 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.replaceCodePoint = exports.fromCodePoint = void 0;
    var decodeMap = /* @__PURE__ */ new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
    (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function replaceCodePoint(codePoint) {
      var _a2;
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return 65533;
      }
      return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
    }
    exports.replaceCodePoint = replaceCodePoint;
    function decodeCodePoint(codePoint) {
      return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
    }
    exports.default = decodeCodePoint;
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
    var decode_data_html_js_1 = __importDefault(require_decode_data_html2());
    exports.htmlDecodeTree = decode_data_html_js_1.default;
    var decode_data_xml_js_1 = __importDefault(require_decode_data_xml2());
    exports.xmlDecodeTree = decode_data_xml_js_1.default;
    var decode_codepoint_js_1 = __importStar(require_decode_codepoint2());
    exports.decodeCodePoint = decode_codepoint_js_1.default;
    var decode_codepoint_js_2 = require_decode_codepoint2();
    Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.replaceCodePoint;
    } });
    Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.fromCodePoint;
    } });
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
      CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
      CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
      CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
      CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
      CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
      CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
      CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
      CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
      CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
      CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
    })(CharCodes || (CharCodes = {}));
    var TO_LOWER_BIT = 32;
    var BinTrieFlags;
    (function(BinTrieFlags2) {
      BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
    })(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
    function isNumber(code) {
      return code >= CharCodes.ZERO && code <= CharCodes.NINE;
    }
    function isHexadecimalCharacter(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
    }
    function isAsciiAlphaNumeric(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
    }
    function isEntityInAttributeInvalidEnd(code) {
      return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
    }
    var EntityDecoderState;
    (function(EntityDecoderState2) {
      EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
    })(EntityDecoderState || (EntityDecoderState = {}));
    var DecodingMode;
    (function(DecodingMode2) {
      DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
      DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
      DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
    })(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
    var EntityDecoder = (
      /** @class */
      function() {
        function EntityDecoder2(decodeTree, emitCodePoint, errors) {
          this.decodeTree = decodeTree;
          this.emitCodePoint = emitCodePoint;
          this.errors = errors;
          this.state = EntityDecoderState.EntityStart;
          this.consumed = 1;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.decodeMode = DecodingMode.Strict;
        }
        EntityDecoder2.prototype.startEntity = function(decodeMode) {
          this.decodeMode = decodeMode;
          this.state = EntityDecoderState.EntityStart;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.consumed = 1;
        };
        EntityDecoder2.prototype.write = function(str, offset) {
          switch (this.state) {
            case EntityDecoderState.EntityStart: {
              if (str.charCodeAt(offset) === CharCodes.NUM) {
                this.state = EntityDecoderState.NumericStart;
                this.consumed += 1;
                return this.stateNumericStart(str, offset + 1);
              }
              this.state = EntityDecoderState.NamedEntity;
              return this.stateNamedEntity(str, offset);
            }
            case EntityDecoderState.NumericStart: {
              return this.stateNumericStart(str, offset);
            }
            case EntityDecoderState.NumericDecimal: {
              return this.stateNumericDecimal(str, offset);
            }
            case EntityDecoderState.NumericHex: {
              return this.stateNumericHex(str, offset);
            }
            case EntityDecoderState.NamedEntity: {
              return this.stateNamedEntity(str, offset);
            }
          }
        };
        EntityDecoder2.prototype.stateNumericStart = function(str, offset) {
          if (offset >= str.length) {
            return -1;
          }
          if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
          }
          this.state = EntityDecoderState.NumericDecimal;
          return this.stateNumericDecimal(str, offset);
        };
        EntityDecoder2.prototype.addToNumericResult = function(str, start, end, base) {
          if (start !== end) {
            var digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
          }
        };
        EntityDecoder2.prototype.stateNumericHex = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 16);
              return this.emitNumericEntity(char, 3);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 16);
          return -1;
        };
        EntityDecoder2.prototype.stateNumericDecimal = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 10);
              return this.emitNumericEntity(char, 2);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 10);
          return -1;
        };
        EntityDecoder2.prototype.emitNumericEntity = function(lastCp, expectedLength) {
          var _a;
          if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
          } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
          }
          this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
          if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
              this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
          }
          return this.consumed;
        };
        EntityDecoder2.prototype.stateNamedEntity = function(str, offset) {
          var decodeTree = this.decodeTree;
          var current = decodeTree[this.treeIndex];
          var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          for (; offset < str.length; offset++, this.excess++) {
            var char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
              return this.result === 0 || // If we are parsing an attribute
              this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
              (valueLength === 0 || // And there should be no invalid characters.
              isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            if (valueLength !== 0) {
              if (char === CharCodes.SEMI) {
                return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
              }
              if (this.decodeMode !== DecodingMode.Strict) {
                this.result = this.treeIndex;
                this.consumed += this.excess;
                this.excess = 0;
              }
            }
          }
          return -1;
        };
        EntityDecoder2.prototype.emitNotTerminatedNamedEntity = function() {
          var _a;
          var _b = this, result = _b.result, decodeTree = _b.decodeTree;
          var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
          this.emitNamedEntityData(result, valueLength, this.consumed);
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
          return this.consumed;
        };
        EntityDecoder2.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
          var decodeTree = this.decodeTree;
          this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
          if (valueLength === 3) {
            this.emitCodePoint(decodeTree[result + 2], consumed);
          }
          return consumed;
        };
        EntityDecoder2.prototype.end = function() {
          var _a;
          switch (this.state) {
            case EntityDecoderState.NamedEntity: {
              return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
            }
            case EntityDecoderState.NumericDecimal: {
              return this.emitNumericEntity(0, 2);
            }
            case EntityDecoderState.NumericHex: {
              return this.emitNumericEntity(0, 3);
            }
            case EntityDecoderState.NumericStart: {
              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
              return 0;
            }
            case EntityDecoderState.EntityStart: {
              return 0;
            }
          }
        };
        return EntityDecoder2;
      }()
    );
    exports.EntityDecoder = EntityDecoder;
    function getDecoder(decodeTree) {
      var ret = "";
      var decoder = new EntityDecoder(decodeTree, function(str) {
        return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);
      });
      return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while ((offset = str.indexOf("&", offset)) >= 0) {
          ret += str.slice(lastIndex, offset);
          decoder.startEntity(decodeMode);
          var len = decoder.write(
            str,
            // Skip the "&"
            offset + 1
          );
          if (len < 0) {
            lastIndex = offset + decoder.end();
            break;
          }
          lastIndex = offset + len;
          offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        ret = "";
        return result;
      };
    }
    function determineBranch(decodeTree, current, nodeIdx, char) {
      var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
      }
      if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
      }
      var lo = nodeIdx;
      var hi = lo + branchCount - 1;
      while (lo <= hi) {
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) {
          lo = mid + 1;
        } else if (midVal > char) {
          hi = mid - 1;
        } else {
          return decodeTree[mid + branchCount];
        }
      }
      return -1;
    }
    exports.determineBranch = determineBranch;
    var htmlDecoder = getDecoder(decode_data_html_js_1.default);
    var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
    function decodeHTML(str, mode) {
      if (mode === void 0) {
        mode = DecodingMode.Legacy;
      }
      return htmlDecoder(str, mode);
    }
    exports.decodeHTML = decodeHTML;
    function decodeHTMLAttribute(str) {
      return htmlDecoder(str, DecodingMode.Attribute);
    }
    exports.decodeHTMLAttribute = decodeHTMLAttribute;
    function decodeHTMLStrict(str) {
      return htmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeHTMLStrict = decodeHTMLStrict;
    function decodeXML(str) {
      return xmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeXML = decodeXML;
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/encode-html.js
var require_encode_html = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/generated/encode-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function restoreDiff(arr) {
      for (var i = 1; i < arr.length; i++) {
        arr[i][0] += arr[i - 1][0] + 1;
      }
      return arr;
    }
    exports.default = new Map(restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]]));
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/escape.js
var require_escape = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/escape.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;
    exports.xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
    var xmlCodeMap = /* @__PURE__ */ new Map([
      [34, "&quot;"],
      [38, "&amp;"],
      [39, "&apos;"],
      [60, "&lt;"],
      [62, "&gt;"]
    ]);
    exports.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.prototype.codePointAt != null ? function(str, index) {
      return str.codePointAt(index);
    } : (
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      function(c, index) {
        return (c.charCodeAt(index) & 64512) === 55296 ? (c.charCodeAt(index) - 55296) * 1024 + c.charCodeAt(index + 1) - 56320 + 65536 : c.charCodeAt(index);
      }
    );
    function encodeXML(str) {
      var ret = "";
      var lastIdx = 0;
      var match;
      while ((match = exports.xmlReplacer.exec(str)) !== null) {
        var i = match.index;
        var char = str.charCodeAt(i);
        var next = xmlCodeMap.get(char);
        if (next !== void 0) {
          ret += str.substring(lastIdx, i) + next;
          lastIdx = i + 1;
        } else {
          ret += "".concat(str.substring(lastIdx, i), "&#x").concat((0, exports.getCodePoint)(str, i).toString(16), ";");
          lastIdx = exports.xmlReplacer.lastIndex += Number((char & 64512) === 55296);
        }
      }
      return ret + str.substr(lastIdx);
    }
    exports.encodeXML = encodeXML;
    exports.escape = encodeXML;
    function getEscaper(regex, map2) {
      return function escape(data) {
        var match;
        var lastIdx = 0;
        var result = "";
        while (match = regex.exec(data)) {
          if (lastIdx !== match.index) {
            result += data.substring(lastIdx, match.index);
          }
          result += map2.get(match[0].charCodeAt(0));
          lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
      };
    }
    exports.escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
    exports.escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
      [34, "&quot;"],
      [38, "&amp;"],
      [160, "&nbsp;"]
    ]));
    exports.escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
      [38, "&amp;"],
      [60, "&lt;"],
      [62, "&gt;"],
      [160, "&nbsp;"]
    ]));
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/encode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeNonAsciiHTML = exports.encodeHTML = void 0;
    var encode_html_js_1 = __importDefault(require_encode_html());
    var escape_js_1 = require_escape();
    var htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
    function encodeHTML(data) {
      return encodeHTMLTrieRe(htmlReplacer, data);
    }
    exports.encodeHTML = encodeHTML;
    function encodeNonAsciiHTML(data) {
      return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);
    }
    exports.encodeNonAsciiHTML = encodeNonAsciiHTML;
    function encodeHTMLTrieRe(regExp, str) {
      var ret = "";
      var lastIdx = 0;
      var match;
      while ((match = regExp.exec(str)) !== null) {
        var i = match.index;
        ret += str.substring(lastIdx, i);
        var char = str.charCodeAt(i);
        var next = encode_html_js_1.default.get(char);
        if (typeof next === "object") {
          if (i + 1 < str.length) {
            var nextChar = str.charCodeAt(i + 1);
            var value = typeof next.n === "number" ? next.n === nextChar ? next.o : void 0 : next.n.get(nextChar);
            if (value !== void 0) {
              ret += value;
              lastIdx = regExp.lastIndex += 1;
              continue;
            }
          }
          next = next.v;
        }
        if (next !== void 0) {
          ret += next;
          lastIdx = i + 1;
        } else {
          var cp = (0, escape_js_1.getCodePoint)(str, i);
          ret += "&#x".concat(cp.toString(16), ";");
          lastIdx = regExp.lastIndex += Number(cp !== char);
        }
      }
      return ret + str.substr(lastIdx);
    }
  }
});

// ../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/index.js
var require_lib71 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/node_modules/entities/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;
    var decode_js_1 = require_decode2();
    var encode_js_1 = require_encode();
    var escape_js_1 = require_escape();
    var EntityLevel;
    (function(EntityLevel2) {
      EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
      EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
    })(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));
    var EncodingMode;
    (function(EncodingMode2) {
      EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
      EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
      EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
      EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
      EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
    })(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));
    function decode(data, options) {
      if (options === void 0) {
        options = EntityLevel.XML;
      }
      var level = typeof options === "number" ? options : options.level;
      if (level === EntityLevel.HTML) {
        var mode = typeof options === "object" ? options.mode : void 0;
        return (0, decode_js_1.decodeHTML)(data, mode);
      }
      return (0, decode_js_1.decodeXML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, options) {
      var _a;
      if (options === void 0) {
        options = EntityLevel.XML;
      }
      var opts = typeof options === "number" ? { level: options } : options;
      (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = decode_js_1.DecodingMode.Strict;
      return decode(data, opts);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, options) {
      if (options === void 0) {
        options = EntityLevel.XML;
      }
      var opts = typeof options === "number" ? { level: options } : options;
      if (opts.mode === EncodingMode.UTF8)
        return (0, escape_js_1.escapeUTF8)(data);
      if (opts.mode === EncodingMode.Attribute)
        return (0, escape_js_1.escapeAttribute)(data);
      if (opts.mode === EncodingMode.Text)
        return (0, escape_js_1.escapeText)(data);
      if (opts.level === EntityLevel.HTML) {
        if (opts.mode === EncodingMode.ASCII) {
          return (0, encode_js_1.encodeNonAsciiHTML)(data);
        }
        return (0, encode_js_1.encodeHTML)(data);
      }
      return (0, escape_js_1.encodeXML)(data);
    }
    exports.encode = encode;
    var escape_js_2 = require_escape();
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
      return escape_js_2.encodeXML;
    } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
      return escape_js_2.escape;
    } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
      return escape_js_2.escapeUTF8;
    } });
    Object.defineProperty(exports, "escapeAttribute", { enumerable: true, get: function() {
      return escape_js_2.escapeAttribute;
    } });
    Object.defineProperty(exports, "escapeText", { enumerable: true, get: function() {
      return escape_js_2.escapeText;
    } });
    var encode_js_2 = require_encode();
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
      return encode_js_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_js_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
      return encode_js_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
      return encode_js_2.encodeHTML;
    } });
    var decode_js_2 = require_decode2();
    Object.defineProperty(exports, "EntityDecoder", { enumerable: true, get: function() {
      return decode_js_2.EntityDecoder;
    } });
    Object.defineProperty(exports, "DecodingMode", { enumerable: true, get: function() {
      return decode_js_2.DecodingMode;
    } });
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
      return decode_js_2.decodeXML;
    } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
      return decode_js_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_js_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTMLAttribute", { enumerable: true, get: function() {
      return decode_js_2.decodeHTMLAttribute;
    } });
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
      return decode_js_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
      return decode_js_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_js_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_js_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_js_2.decodeXML;
    } });
  }
});

// ../../lipdjs/node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/lib/foreignNames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.attributeNames = exports.elementNames = void 0;
    exports.elementNames = new Map([
      "altGlyph",
      "altGlyphDef",
      "altGlyphItem",
      "animateColor",
      "animateMotion",
      "animateTransform",
      "clipPath",
      "feBlend",
      "feColorMatrix",
      "feComponentTransfer",
      "feComposite",
      "feConvolveMatrix",
      "feDiffuseLighting",
      "feDisplacementMap",
      "feDistantLight",
      "feDropShadow",
      "feFlood",
      "feFuncA",
      "feFuncB",
      "feFuncG",
      "feFuncR",
      "feGaussianBlur",
      "feImage",
      "feMerge",
      "feMergeNode",
      "feMorphology",
      "feOffset",
      "fePointLight",
      "feSpecularLighting",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "foreignObject",
      "glyphRef",
      "linearGradient",
      "radialGradient",
      "textPath"
    ].map(function(val) {
      return [val.toLowerCase(), val];
    }));
    exports.attributeNames = new Map([
      "definitionURL",
      "attributeName",
      "attributeType",
      "baseFrequency",
      "baseProfile",
      "calcMode",
      "clipPathUnits",
      "diffuseConstant",
      "edgeMode",
      "filterUnits",
      "glyphRef",
      "gradientTransform",
      "gradientUnits",
      "kernelMatrix",
      "kernelUnitLength",
      "keyPoints",
      "keySplines",
      "keyTimes",
      "lengthAdjust",
      "limitingConeAngle",
      "markerHeight",
      "markerUnits",
      "markerWidth",
      "maskContentUnits",
      "maskUnits",
      "numOctaves",
      "pathLength",
      "patternContentUnits",
      "patternTransform",
      "patternUnits",
      "pointsAtX",
      "pointsAtY",
      "pointsAtZ",
      "preserveAlpha",
      "preserveAspectRatio",
      "primitiveUnits",
      "refX",
      "refY",
      "repeatCount",
      "repeatDur",
      "requiredExtensions",
      "requiredFeatures",
      "specularConstant",
      "specularExponent",
      "spreadMethod",
      "startOffset",
      "stdDeviation",
      "stitchTiles",
      "surfaceScale",
      "systemLanguage",
      "tableValues",
      "targetX",
      "targetY",
      "textLength",
      "viewBox",
      "viewTarget",
      "xChannelSelector",
      "yChannelSelector",
      "zoomAndPan"
    ].map(function(val) {
      return [val.toLowerCase(), val];
    }));
  }
});

// ../../lipdjs/node_modules/dom-serializer/lib/index.js
var require_lib72 = __commonJS({
  "../../lipdjs/node_modules/dom-serializer/lib/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.render = void 0;
    var ElementType = __importStar(require_lib69());
    var entities_1 = require_lib71();
    var foreignNames_js_1 = require_foreignNames();
    var unencodedElements = /* @__PURE__ */ new Set([
      "style",
      "script",
      "xmp",
      "iframe",
      "noembed",
      "noframes",
      "plaintext",
      "noscript"
    ]);
    function replaceQuotes(value) {
      return value.replace(/"/g, "&quot;");
    }
    function formatAttributes(attributes, opts) {
      var _a;
      if (!attributes)
        return;
      var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? entities_1.encodeXML : entities_1.escapeAttribute;
      return Object.keys(attributes).map(function(key) {
        var _a2, _b;
        var value = (_a2 = attributes[key]) !== null && _a2 !== void 0 ? _a2 : "";
        if (opts.xmlMode === "foreign") {
          key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
          return key;
        }
        return "".concat(key, '="').concat(encode(value), '"');
      }).join(" ");
    }
    var singleTag = /* @__PURE__ */ new Set([
      "area",
      "base",
      "basefont",
      "br",
      "col",
      "command",
      "embed",
      "frame",
      "hr",
      "img",
      "input",
      "isindex",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    function render(node, options) {
      if (options === void 0) {
        options = {};
      }
      var nodes = "length" in node ? node : [node];
      var output = "";
      for (var i = 0; i < nodes.length; i++) {
        output += renderNode(nodes[i], options);
      }
      return output;
    }
    exports.render = render;
    exports.default = render;
    function renderNode(node, options) {
      switch (node.type) {
        case ElementType.Root:
          return render(node.children, options);
        case ElementType.Doctype:
        case ElementType.Directive:
          return renderDirective(node);
        case ElementType.Comment:
          return renderComment(node);
        case ElementType.CDATA:
          return renderCdata(node);
        case ElementType.Script:
        case ElementType.Style:
        case ElementType.Tag:
          return renderTag(node, options);
        case ElementType.Text:
          return renderText(node, options);
      }
    }
    var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
      "mi",
      "mo",
      "mn",
      "ms",
      "mtext",
      "annotation-xml",
      "foreignObject",
      "desc",
      "title"
    ]);
    var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
    function renderTag(elem, opts) {
      var _a;
      if (opts.xmlMode === "foreign") {
        elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
          opts = __assign(__assign({}, opts), { xmlMode: false });
        }
      }
      if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
      }
      var tag = "<".concat(elem.name);
      var attribs = formatAttributes(elem.attribs, opts);
      if (attribs) {
        tag += " ".concat(attribs);
      }
      if (elem.children.length === 0 && (opts.xmlMode ? (
        // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
        opts.selfClosingTags !== false
      ) : (
        // User explicitly asked for self-closing tags, even in HTML mode
        opts.selfClosingTags && singleTag.has(elem.name)
      ))) {
        if (!opts.xmlMode)
          tag += " ";
        tag += "/>";
      } else {
        tag += ">";
        if (elem.children.length > 0) {
          tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
          tag += "</".concat(elem.name, ">");
        }
      }
      return tag;
    }
    function renderDirective(elem) {
      return "<".concat(elem.data, ">");
    }
    function renderText(elem, opts) {
      var _a;
      var data = elem.data || "";
      if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
        data = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, entities_1.encodeXML)(data) : (0, entities_1.escapeText)(data);
      }
      return data;
    }
    function renderCdata(elem) {
      return "<![CDATA[".concat(elem.children[0].data, "]]>");
    }
    function renderComment(elem) {
      return "<!--".concat(elem.data, "-->");
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/stringify.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOuterHTML = getOuterHTML;
    exports.getInnerHTML = getInnerHTML;
    exports.getText = getText;
    exports.textContent = textContent;
    exports.innerText = innerText;
    var domhandler_1 = require_lib70();
    var dom_serializer_1 = __importDefault(require_lib72());
    var domelementtype_1 = require_lib69();
    function getOuterHTML(node, options) {
      return (0, dom_serializer_1.default)(node, options);
    }
    function getInnerHTML(node, options) {
      return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node2) {
        return getOuterHTML(node2, options);
      }).join("") : "";
    }
    function getText(node) {
      if (Array.isArray(node))
        return node.map(getText).join("");
      if ((0, domhandler_1.isTag)(node))
        return node.name === "br" ? "\n" : getText(node.children);
      if ((0, domhandler_1.isCDATA)(node))
        return getText(node.children);
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
    function textContent(node) {
      if (Array.isArray(node))
        return node.map(textContent).join("");
      if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
        return textContent(node.children);
      }
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
    function innerText(node) {
      if (Array.isArray(node))
        return node.map(innerText).join("");
      if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
        return innerText(node.children);
      }
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/traversal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChildren = getChildren;
    exports.getParent = getParent;
    exports.getSiblings = getSiblings;
    exports.getAttributeValue = getAttributeValue;
    exports.hasAttrib = hasAttrib;
    exports.getName = getName;
    exports.nextElementSibling = nextElementSibling;
    exports.prevElementSibling = prevElementSibling;
    var domhandler_1 = require_lib70();
    function getChildren(elem) {
      return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];
    }
    function getParent(elem) {
      return elem.parent || null;
    }
    function getSiblings(elem) {
      var _a, _b;
      var parent = getParent(elem);
      if (parent != null)
        return getChildren(parent);
      var siblings = [elem];
      var prev = elem.prev, next = elem.next;
      while (prev != null) {
        siblings.unshift(prev);
        _a = prev, prev = _a.prev;
      }
      while (next != null) {
        siblings.push(next);
        _b = next, next = _b.next;
      }
      return siblings;
    }
    function getAttributeValue(elem, name) {
      var _a;
      return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
    }
    function hasAttrib(elem, name) {
      return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
    }
    function getName(elem) {
      return elem.name;
    }
    function nextElementSibling(elem) {
      var _a;
      var next = elem.next;
      while (next !== null && !(0, domhandler_1.isTag)(next))
        _a = next, next = _a.next;
      return next;
    }
    function prevElementSibling(elem) {
      var _a;
      var prev = elem.prev;
      while (prev !== null && !(0, domhandler_1.isTag)(prev))
        _a = prev, prev = _a.prev;
      return prev;
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/manipulation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeElement = removeElement;
    exports.replaceElement = replaceElement;
    exports.appendChild = appendChild;
    exports.append = append;
    exports.prependChild = prependChild;
    exports.prepend = prepend;
    function removeElement(elem) {
      if (elem.prev)
        elem.prev.next = elem.next;
      if (elem.next)
        elem.next.prev = elem.prev;
      if (elem.parent) {
        var childs = elem.parent.children;
        var childsIndex = childs.lastIndexOf(elem);
        if (childsIndex >= 0) {
          childs.splice(childsIndex, 1);
        }
      }
      elem.next = null;
      elem.prev = null;
      elem.parent = null;
    }
    function replaceElement(elem, replacement) {
      var prev = replacement.prev = elem.prev;
      if (prev) {
        prev.next = replacement;
      }
      var next = replacement.next = elem.next;
      if (next) {
        next.prev = replacement;
      }
      var parent = replacement.parent = elem.parent;
      if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
      }
    }
    function appendChild(parent, child) {
      removeElement(child);
      child.next = null;
      child.parent = parent;
      if (parent.children.push(child) > 1) {
        var sibling = parent.children[parent.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
      } else {
        child.prev = null;
      }
    }
    function append(elem, next) {
      removeElement(next);
      var parent = elem.parent;
      var currNext = elem.next;
      next.next = currNext;
      next.prev = elem;
      elem.next = next;
      next.parent = parent;
      if (currNext) {
        currNext.prev = next;
        if (parent) {
          var childs = parent.children;
          childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
      } else if (parent) {
        parent.children.push(next);
      }
    }
    function prependChild(parent, child) {
      removeElement(child);
      child.parent = parent;
      child.prev = null;
      if (parent.children.unshift(child) !== 1) {
        var sibling = parent.children[1];
        sibling.prev = child;
        child.next = sibling;
      } else {
        child.next = null;
      }
    }
    function prepend(elem, prev) {
      removeElement(prev);
      var parent = elem.parent;
      if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
      }
      if (elem.prev) {
        elem.prev.next = prev;
      }
      prev.parent = parent;
      prev.prev = elem.prev;
      prev.next = elem;
      elem.prev = prev;
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/querying.js
var require_querying = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/querying.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filter = filter3;
    exports.find = find2;
    exports.findOneChild = findOneChild;
    exports.findOne = findOne;
    exports.existsOne = existsOne;
    exports.findAll = findAll;
    var domhandler_1 = require_lib70();
    function filter3(test, node, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return find2(test, Array.isArray(node) ? node : [node], recurse, limit);
    }
    function find2(test, nodes, recurse, limit) {
      var result = [];
      var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
      var indexStack = [0];
      for (; ; ) {
        if (indexStack[0] >= nodeStack[0].length) {
          if (indexStack.length === 1) {
            return result;
          }
          nodeStack.shift();
          indexStack.shift();
          continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (test(elem)) {
          result.push(elem);
          if (--limit <= 0)
            return result;
        }
        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
          indexStack.unshift(0);
          nodeStack.unshift(elem.children);
        }
      }
    }
    function findOneChild(test, nodes) {
      return nodes.find(test);
    }
    function findOne(test, nodes, recurse) {
      if (recurse === void 0) {
        recurse = true;
      }
      var searchedNodes = Array.isArray(nodes) ? nodes : [nodes];
      for (var i = 0; i < searchedNodes.length; i++) {
        var node = searchedNodes[i];
        if ((0, domhandler_1.isTag)(node) && test(node)) {
          return node;
        }
        if (recurse && (0, domhandler_1.hasChildren)(node) && node.children.length > 0) {
          var found = findOne(test, node.children, true);
          if (found)
            return found;
        }
      }
      return null;
    }
    function existsOne(test, nodes) {
      return (Array.isArray(nodes) ? nodes : [nodes]).some(function(node) {
        return (0, domhandler_1.isTag)(node) && test(node) || (0, domhandler_1.hasChildren)(node) && existsOne(test, node.children);
      });
    }
    function findAll(test, nodes) {
      var result = [];
      var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
      var indexStack = [0];
      for (; ; ) {
        if (indexStack[0] >= nodeStack[0].length) {
          if (nodeStack.length === 1) {
            return result;
          }
          nodeStack.shift();
          indexStack.shift();
          continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if ((0, domhandler_1.isTag)(elem) && test(elem))
          result.push(elem);
        if ((0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
          indexStack.unshift(0);
          nodeStack.unshift(elem.children);
        }
      }
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/legacy.js
var require_legacy = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/legacy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.testElement = testElement;
    exports.getElements = getElements;
    exports.getElementById = getElementById;
    exports.getElementsByTagName = getElementsByTagName;
    exports.getElementsByClassName = getElementsByClassName;
    exports.getElementsByTagType = getElementsByTagType;
    var domhandler_1 = require_lib70();
    var querying_js_1 = require_querying();
    var Checks = {
      tag_name: function(name) {
        if (typeof name === "function") {
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && name(elem.name);
          };
        } else if (name === "*") {
          return domhandler_1.isTag;
        }
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && elem.name === name;
        };
      },
      tag_type: function(type) {
        if (typeof type === "function") {
          return function(elem) {
            return type(elem.type);
          };
        }
        return function(elem) {
          return elem.type === type;
        };
      },
      tag_contains: function(data) {
        if (typeof data === "function") {
          return function(elem) {
            return (0, domhandler_1.isText)(elem) && data(elem.data);
          };
        }
        return function(elem) {
          return (0, domhandler_1.isText)(elem) && elem.data === data;
        };
      }
    };
    function getAttribCheck(attrib, value) {
      if (typeof value === "function") {
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
        };
      }
      return function(elem) {
        return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
      };
    }
    function combineFuncs(a, b) {
      return function(elem) {
        return a(elem) || b(elem);
      };
    }
    function compileTest(options) {
      var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
      });
      return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
    }
    function testElement(options, node) {
      var test = compileTest(options);
      return test ? test(node) : true;
    }
    function getElements(options, nodes, recurse, limit) {
      if (limit === void 0) {
        limit = Infinity;
      }
      var test = compileTest(options);
      return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
    }
    function getElementById(id, nodes, recurse) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (!Array.isArray(nodes))
        nodes = [nodes];
      return (0, querying_js_1.findOne)(getAttribCheck("id", id), nodes, recurse);
    }
    function getElementsByTagName(tagName, nodes, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
    }
    function getElementsByClassName(className, nodes, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return (0, querying_js_1.filter)(getAttribCheck("class", className), nodes, recurse, limit);
    }
    function getElementsByTagType(type, nodes, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DocumentPosition = void 0;
    exports.removeSubsets = removeSubsets;
    exports.compareDocumentPosition = compareDocumentPosition;
    exports.uniqueSort = uniqueSort;
    var domhandler_1 = require_lib70();
    function removeSubsets(nodes) {
      var idx = nodes.length;
      while (--idx >= 0) {
        var node = nodes[idx];
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
          nodes.splice(idx, 1);
          continue;
        }
        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
          if (nodes.includes(ancestor)) {
            nodes.splice(idx, 1);
            break;
          }
        }
      }
      return nodes;
    }
    var DocumentPosition;
    (function(DocumentPosition2) {
      DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
      DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
      DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
      DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
      DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
    })(DocumentPosition || (exports.DocumentPosition = DocumentPosition = {}));
    function compareDocumentPosition(nodeA, nodeB) {
      var aParents = [];
      var bParents = [];
      if (nodeA === nodeB) {
        return 0;
      }
      var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
      while (current) {
        aParents.unshift(current);
        current = current.parent;
      }
      current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
      while (current) {
        bParents.unshift(current);
        current = current.parent;
      }
      var maxIdx = Math.min(aParents.length, bParents.length);
      var idx = 0;
      while (idx < maxIdx && aParents[idx] === bParents[idx]) {
        idx++;
      }
      if (idx === 0) {
        return DocumentPosition.DISCONNECTED;
      }
      var sharedParent = aParents[idx - 1];
      var siblings = sharedParent.children;
      var aSibling = aParents[idx];
      var bSibling = bParents[idx];
      if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
          return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
        }
        return DocumentPosition.FOLLOWING;
      }
      if (sharedParent === nodeA) {
        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
      }
      return DocumentPosition.PRECEDING;
    }
    function uniqueSort(nodes) {
      nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
      });
      nodes.sort(function(a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & DocumentPosition.PRECEDING) {
          return -1;
        } else if (relative & DocumentPosition.FOLLOWING) {
          return 1;
        }
        return 0;
      });
      return nodes;
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/feeds.js
var require_feeds = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/feeds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFeed = getFeed;
    var stringify_js_1 = require_stringify();
    var legacy_js_1 = require_legacy();
    function getFeed(doc) {
      var feedRoot = getOneElement(isValidFeed, doc);
      return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
    }
    function getAtomFeed(feedRoot) {
      var _a;
      var childs = feedRoot.children;
      var feed = {
        type: "atom",
        items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function(item) {
          var _a2;
          var children = item.children;
          var entry = { media: getMediaElements(children) };
          addConditionally(entry, "id", "id", children);
          addConditionally(entry, "title", "title", children);
          var href2 = (_a2 = getOneElement("link", children)) === null || _a2 === void 0 ? void 0 : _a2.attribs["href"];
          if (href2) {
            entry.link = href2;
          }
          var description = fetch2("summary", children) || fetch2("content", children);
          if (description) {
            entry.description = description;
          }
          var pubDate = fetch2("updated", children);
          if (pubDate) {
            entry.pubDate = new Date(pubDate);
          }
          return entry;
        })
      };
      addConditionally(feed, "id", "id", childs);
      addConditionally(feed, "title", "title", childs);
      var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
      if (href) {
        feed.link = href;
      }
      addConditionally(feed, "description", "subtitle", childs);
      var updated = fetch2("updated", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "email", childs, true);
      return feed;
    }
    function getRssFeed(feedRoot) {
      var _a, _b;
      var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
      var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
          var children = item.children;
          var entry = { media: getMediaElements(children) };
          addConditionally(entry, "id", "guid", children);
          addConditionally(entry, "title", "title", children);
          addConditionally(entry, "link", "link", children);
          addConditionally(entry, "description", "description", children);
          var pubDate = fetch2("pubDate", children) || fetch2("dc:date", children);
          if (pubDate)
            entry.pubDate = new Date(pubDate);
          return entry;
        })
      };
      addConditionally(feed, "title", "title", childs);
      addConditionally(feed, "link", "link", childs);
      addConditionally(feed, "description", "description", childs);
      var updated = fetch2("lastBuildDate", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "managingEditor", childs, true);
      return feed;
    }
    var MEDIA_KEYS_STRING = ["url", "type", "lang"];
    var MEDIA_KEYS_INT = [
      "fileSize",
      "bitrate",
      "framerate",
      "samplingrate",
      "channels",
      "duration",
      "height",
      "width"
    ];
    function getMediaElements(where) {
      return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
          medium: attribs["medium"],
          isDefault: !!attribs["isDefault"]
        };
        for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
          var attrib = MEDIA_KEYS_STRING_1[_i];
          if (attribs[attrib]) {
            media[attrib] = attribs[attrib];
          }
        }
        for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
          var attrib = MEDIA_KEYS_INT_1[_a];
          if (attribs[attrib]) {
            media[attrib] = parseInt(attribs[attrib], 10);
          }
        }
        if (attribs["expression"]) {
          media.expression = attribs["expression"];
        }
        return media;
      });
    }
    function getOneElement(tagName, node) {
      return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];
    }
    function fetch2(tagName, where, recurse) {
      if (recurse === void 0) {
        recurse = false;
      }
      return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
    }
    function addConditionally(obj, prop, tagName, where, recurse) {
      if (recurse === void 0) {
        recurse = false;
      }
      var val = fetch2(tagName, where, recurse);
      if (val)
        obj[prop] = val;
    }
    function isValidFeed(value) {
      return value === "rss" || value === "feed" || value === "rdf:RDF";
    }
  }
});

// ../../lipdjs/node_modules/domutils/lib/index.js
var require_lib73 = __commonJS({
  "../../lipdjs/node_modules/domutils/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
    __exportStar(require_stringify(), exports);
    __exportStar(require_traversal(), exports);
    __exportStar(require_manipulation(), exports);
    __exportStar(require_querying(), exports);
    __exportStar(require_legacy(), exports);
    __exportStar(require_helpers(), exports);
    __exportStar(require_feeds(), exports);
    var domhandler_1 = require_lib70();
    Object.defineProperty(exports, "isTag", { enumerable: true, get: function() {
      return domhandler_1.isTag;
    } });
    Object.defineProperty(exports, "isCDATA", { enumerable: true, get: function() {
      return domhandler_1.isCDATA;
    } });
    Object.defineProperty(exports, "isText", { enumerable: true, get: function() {
      return domhandler_1.isText;
    } });
    Object.defineProperty(exports, "isComment", { enumerable: true, get: function() {
      return domhandler_1.isComment;
    } });
    Object.defineProperty(exports, "isDocument", { enumerable: true, get: function() {
      return domhandler_1.isDocument;
    } });
    Object.defineProperty(exports, "hasChildren", { enumerable: true, get: function() {
      return domhandler_1.hasChildren;
    } });
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/index.js
var require_lib74 = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/node_modules/htmlparser2/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;
    var Parser_js_1 = require_Parser();
    var Parser_js_2 = require_Parser();
    Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
      return Parser_js_2.Parser;
    } });
    var domhandler_1 = require_lib70();
    var domhandler_2 = require_lib70();
    Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    function parseDocument(data, options) {
      var handler = new domhandler_1.DomHandler(void 0, options);
      new Parser_js_1.Parser(handler, options).end(data);
      return handler.root;
    }
    exports.parseDocument = parseDocument;
    function parseDOM(data, options) {
      return parseDocument(data, options).children;
    }
    exports.parseDOM = parseDOM;
    function createDomStream(callback, options, elementCallback) {
      var handler = new domhandler_1.DomHandler(callback, options, elementCallback);
      return new Parser_js_1.Parser(handler, options);
    }
    exports.createDomStream = createDomStream;
    var Tokenizer_js_1 = require_Tokenizer();
    Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
      return __importDefault(Tokenizer_js_1).default;
    } });
    exports.ElementType = __importStar(require_lib69());
    var domutils_1 = require_lib73();
    var domutils_2 = require_lib73();
    Object.defineProperty(exports, "getFeed", { enumerable: true, get: function() {
      return domutils_2.getFeed;
    } });
    var parseFeedDefaultOptions = { xmlMode: true };
    function parseFeed(feed, options) {
      if (options === void 0) {
        options = parseFeedDefaultOptions;
      }
      return (0, domutils_1.getFeed)(parseDOM(feed, options));
    }
    exports.parseFeed = parseFeed;
    exports.DomUtils = __importStar(require_lib73());
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/initial-context-xhtml.json
var require_initial_context_xhtml = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/initial-context-xhtml.json"(exports, module) {
    module.exports = {
      "@context": {
        alternate: "http://www.w3.org/1999/xhtml/vocab#alternate",
        appendix: "http://www.w3.org/1999/xhtml/vocab#appendix",
        cite: "http://www.w3.org/1999/xhtml/vocab#cite",
        bookmark: "http://www.w3.org/1999/xhtml/vocab#bookmark",
        contents: "http://www.w3.org/1999/xhtml/vocab#contents",
        chapter: "http://www.w3.org/1999/xhtml/vocab#chapter",
        copyright: "http://www.w3.org/1999/xhtml/vocab#copyright",
        first: "http://www.w3.org/1999/xhtml/vocab#first",
        glossary: "http://www.w3.org/1999/xhtml/vocab#glossary",
        help: "http://www.w3.org/1999/xhtml/vocab#help",
        icon: "http://www.w3.org/1999/xhtml/vocab#icon",
        index: "http://www.w3.org/1999/xhtml/vocab#index",
        last: "http://www.w3.org/1999/xhtml/vocab#last",
        license: "http://www.w3.org/1999/xhtml/vocab#license",
        meta: "http://www.w3.org/1999/xhtml/vocab#meta",
        next: "http://www.w3.org/1999/xhtml/vocab#next",
        prev: "http://www.w3.org/1999/xhtml/vocab#prev",
        previous: "http://www.w3.org/1999/xhtml/vocab#previous",
        section: "http://www.w3.org/1999/xhtml/vocab#section",
        start: "http://www.w3.org/1999/xhtml/vocab#start",
        stylesheet: "http://www.w3.org/1999/xhtml/vocab#stylesheet",
        subsection: "http://www.w3.org/1999/xhtml/vocab#subsection",
        top: "http://www.w3.org/1999/xhtml/vocab#top",
        up: "http://www.w3.org/1999/xhtml/vocab#up",
        p3pv1: "http://www.w3.org/1999/xhtml/vocab#p3pv1"
      }
    };
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/initial-context.json
var require_initial_context = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/initial-context.json"(exports, module) {
    module.exports = {
      "@context": {
        as: "https://www.w3.org/ns/activitystreams#",
        cat: "http://www.w3.org/ns/dcat#",
        cc: "http://creativecommons.org/ns#",
        cnt: "http://www.w3.org/2008/content#",
        csvw: "http://www.w3.org/ns/csvw#",
        ctag: "http://commontag.org/ns#",
        dc: "http://purl.org/dc/terms/",
        dc11: "http://purl.org/dc/elements/1.1/",
        dcat: "http://www.w3.org/ns/dcat#",
        dcterms: "http://purl.org/dc/terms/",
        dqv: "http://www.w3.org/ns/dqv#",
        duv: "https://www.w3.org/TR/vocab-duv#",
        earl: "http://www.w3.org/ns/earl#",
        foaf: "http://xmlns.com/foaf/0.1/",
        gldp: "http://www.w3.org/ns/people#",
        gr: "http://purl.org/goodrelations/v1#",
        grddl: "http://www.w3.org/2003/g/data-view#",
        ht: "http://www.w3.org/2006/http#",
        ical: "http://www.w3.org/2002/12/cal/icaltzd#",
        ldp: "http://www.w3.org/ns/ldp#",
        ma: "http://www.w3.org/ns/ma-ont#",
        oa: "http://www.w3.org/ns/oa#",
        odrl: "http://www.w3.org/ns/odrl/2/",
        og: "http://ogp.me/ns#",
        org: "http://www.w3.org/ns/org#",
        owl: "http://www.w3.org/2002/07/owl#",
        prov: "http://www.w3.org/ns/prov#",
        ptr: "http://www.w3.org/2009/pointers#",
        qb: "http://purl.org/linked-data/cube#",
        rev: "http://purl.org/stuff/rev#",
        rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        rdfa: "http://www.w3.org/ns/rdfa#",
        rdfs: "http://www.w3.org/2000/01/rdf-schema#",
        rif: "http://www.w3.org/2007/rif#",
        rr: "http://www.w3.org/ns/r2rml#",
        schema: "http://schema.org/",
        sd: "http://www.w3.org/ns/sparql-service-description#",
        sioc: "http://rdfs.org/sioc/ns#",
        skos: "http://www.w3.org/2004/02/skos/core#",
        skosxl: "http://www.w3.org/2008/05/skos-xl#",
        ssn: "http://www.w3.org/ns/ssn/",
        sosa: "http://www.w3.org/ns/sosa/",
        time: "http://www.w3.org/2006/time#",
        v: "http://rdf.data-vocabulary.org/#",
        vcard: "http://www.w3.org/2006/vcard/ns#",
        void: "http://rdfs.org/ns/void#",
        wdr: "http://www.w3.org/2007/05/powder#",
        wdrs: "http://www.w3.org/2007/05/powder-s#",
        xhv: "http://www.w3.org/1999/xhtml/vocab#",
        xml: "http://www.w3.org/XML/1998/namespace",
        xsd: "http://www.w3.org/2001/XMLSchema#",
        describedby: "http://www.w3.org/2007/05/powder-s#describedby",
        license: "http://www.w3.org/1999/xhtml/vocab#license",
        role: "http://www.w3.org/1999/xhtml/vocab#role"
      }
    };
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/RdfaProfile.js
var require_RdfaProfile = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/RdfaProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RDFA_CONTENTTYPES = exports.RDFA_FEATURES = void 0;
    exports.RDFA_FEATURES = {
      "": {
        baseTag: true,
        xmlBase: true,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: true,
        roleAttribute: true
      },
      "core": {
        baseTag: false,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: false,
        datetimeAttribute: false,
        timeTag: false,
        htmlDatatype: false,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: false
      },
      "html": {
        baseTag: true,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: true
      },
      "xhtml": {
        baseTag: true,
        xmlBase: false,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: true,
        inheritSubjectInHeadBody: true,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: true,
        copyRdfaPatterns: true,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: true,
        roleAttribute: true
      },
      "xml": {
        baseTag: false,
        xmlBase: true,
        langAttribute: true,
        onlyAllowUriRelRevIfProperty: false,
        inheritSubjectInHeadBody: false,
        datetimeAttribute: true,
        timeTag: true,
        htmlDatatype: false,
        copyRdfaPatterns: false,
        xmlnsPrefixMappings: true,
        xhtmlInitialContext: false,
        roleAttribute: true
      }
    };
    exports.RDFA_CONTENTTYPES = {
      // HTML
      "text/html": "html",
      // XHTML
      "application/xhtml+xml": "xhtml",
      // XML
      "application/xml": "xml",
      "text/xml": "xml",
      "image/svg+xml": "xml"
    };
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/Util.js
var require_Util3 = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var RdfaProfile_1 = require_RdfaProfile();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var Util = class _Util {
      constructor(dataFactory, baseIRI) {
        this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
        this.baseIRI = this.dataFactory.namedNode(baseIRI || "");
        this.baseIRIDocument = this.baseIRI;
      }
      /**
       * Retrieve the prefixes of the current tag's attributes.
       * @param {{[p: string]: string}} attributes A tag's attributes.
       * @param {{[p: string]: string}} parentPrefixes The prefixes from the parent tag.
       * @param {boolean} xmlnsPrefixMappings If prefixes should be extracted from xmlnsPrefixMappings.
       * @return {{[p: string]: string}} The new prefixes.
       */
      static parsePrefixes(attributes, parentPrefixes, xmlnsPrefixMappings) {
        const additionalPrefixes = {};
        if (xmlnsPrefixMappings) {
          for (const attribute in attributes) {
            if (attribute.startsWith("xmlns")) {
              additionalPrefixes[attribute.substr(6)] = attributes[attribute];
            }
          }
        }
        if (attributes.prefix || Object.keys(additionalPrefixes).length > 0) {
          const prefixes = Object.assign(Object.assign({}, parentPrefixes), additionalPrefixes);
          if (attributes.prefix) {
            let prefixMatch;
            while (prefixMatch = _Util.PREFIX_REGEX.exec(attributes.prefix)) {
              prefixes[prefixMatch[1]] = prefixMatch[2];
            }
          }
          return prefixes;
        } else {
          return parentPrefixes;
        }
      }
      /**
       * Expand the given term value based on the given prefixes.
       * @param {string} term A term value.
       * @param {{[p: string]: string}[]} prefixes The available prefixes.
       * @return {string} An expanded URL, or the term as-is.
       */
      static expandPrefixedTerm(term, activeTag) {
        const colonIndex = term.indexOf(":");
        let prefix;
        let local;
        if (colonIndex >= 0) {
          prefix = term.substr(0, colonIndex);
          local = term.substr(colonIndex + 1);
        }
        if (prefix === "") {
          return "http://www.w3.org/1999/xhtml/vocab#" + local;
        }
        if (prefix) {
          const prefixElement = activeTag.prefixesAll[prefix];
          if (prefixElement) {
            return prefixElement + local;
          }
        }
        if (term) {
          const expandedTerm = activeTag.prefixesAll[term.toLocaleLowerCase()];
          if (expandedTerm) {
            return expandedTerm;
          }
        }
        return term;
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return _Util.IRI_REGEX.test(iri);
      }
      /**
       * Determine the RDFa profile from the given content type.
       * Defaults to the default RDFa profile (all features enabled) for unknown content types.
       * @param {string} contentType A content type.
       * @returns {RdfaProfile} An RDFa profile.
       */
      static contentTypeToProfile(contentType) {
        return RdfaProfile_1.RDFA_CONTENTTYPES[contentType] || "";
      }
      /**
       * Get the base IRI.
       * @param {string} baseIriValue A base IRI value.
       * @return A base IRI named node.
       */
      getBaseIRI(baseIriValue) {
        let href = baseIriValue;
        const fragmentIndex = href.indexOf("#");
        if (fragmentIndex >= 0) {
          href = href.substr(0, fragmentIndex);
        }
        return this.dataFactory.namedNode((0, relative_to_absolute_iri_1.resolve)(href, this.baseIRI.value));
      }
      /**
       * If the term is a boolean, return the baseIRI, otherwise return the term as-is.
       * @param {Term | boolean} term A term or boolean, where the boolean indicates the baseIRI.
       * @param {IActiveTag} activeTag An active tag.
       * @returns {Term} A term.
       */
      getResourceOrBaseIri(term, activeTag) {
        return term === true ? this.getBaseIriTerm(activeTag) : term;
      }
      /**
       * Get the active base IRI as an RDF term.
       * @param {IActiveTag} activeTag The active tag.
       * @return {NamedNode} The base IRI term.
       */
      getBaseIriTerm(activeTag) {
        return activeTag.localBaseIRI || this.baseIRI;
      }
      createVocabIris(terms, activeTag, allowTerms, allowBlankNode) {
        return terms.split(/\s+/).filter((term) => term && (allowTerms || term.indexOf(":") >= 0)).map((property) => this.createIri(property, activeTag, true, true, allowBlankNode)).filter((term) => term != null);
      }
      /**
       * Create a new literal node.
       * @param {string} literal The literal value.
       * @param {IActiveTag} activeTag The current active tag.
       * @return {Literal} A new literal node.
       */
      createLiteral(literal, activeTag) {
        if (activeTag.interpretObjectAsTime && !activeTag.datatype) {
          for (const entry of _Util.TIME_REGEXES) {
            if (literal.match(entry.regex)) {
              activeTag.datatype = this.dataFactory.namedNode(_Util.XSD + entry.type);
              break;
            }
          }
        }
        return this.dataFactory.literal(literal, activeTag.datatype || activeTag.language);
      }
      /**
       * Create a blank node.
       * @returns {BlankNode} A new blank node.
       */
      createBlankNode() {
        if (this.blankNodeFactory) {
          return this.blankNodeFactory();
        }
        return this.dataFactory.blankNode();
      }
      createIri(term, activeTag, vocab, allowSafeCurie, allowBlankNode) {
        term = term || "";
        if (!allowSafeCurie) {
          if (!vocab) {
            term = (0, relative_to_absolute_iri_1.resolve)(term, this.getBaseIriTerm(activeTag).value);
          }
          if (!_Util.isValidIri(term)) {
            return null;
          }
          return this.dataFactory.namedNode(term);
        }
        if (term.length > 0 && term[0] === "[" && term[term.length - 1] === "]") {
          term = term.substr(1, term.length - 2);
          if (term.indexOf(":") < 0) {
            return null;
          }
        }
        if (term.startsWith("_:")) {
          return allowBlankNode ? this.dataFactory.blankNode(term.substr(2) || "b_identity") : null;
        }
        if (vocab) {
          if (activeTag.vocab && term.indexOf(":") < 0) {
            return this.dataFactory.namedNode(activeTag.vocab + term);
          }
        }
        let iri = _Util.expandPrefixedTerm(term, activeTag);
        if (!vocab) {
          iri = (0, relative_to_absolute_iri_1.resolve)(iri, this.getBaseIriTerm(activeTag).value);
        } else if (term !== iri) {
          iri = (0, relative_to_absolute_iri_1.resolve)(iri, this.baseIRIDocument.value);
        }
        if (!_Util.isValidIri(iri)) {
          return null;
        }
        return this.dataFactory.namedNode(iri);
      }
    };
    exports.Util = Util;
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.RDFA = "http://www.w3.org/ns/rdfa#";
    Util.PREFIX_REGEX = /\s*([^:\s]*)*:\s*([^\s]*)*\s*/g;
    Util.TIME_REGEXES = [
      {
        regex: /^-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9])?S)?)?$/,
        type: "duration"
      },
      {
        regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
        type: "dateTime"
      },
      { regex: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/, type: "date" },
      { regex: /^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/, type: "time" },
      { regex: /^[0-9]+-[0-9][0-9]$/, type: "gYearMonth" },
      { regex: /^[0-9]+$/, type: "gYear" }
    ];
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`]*$/;
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/lib/RdfaParser.js
var require_RdfaParser = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/lib/RdfaParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfaParser = void 0;
    var htmlparser2_1 = require_lib74();
    var readable_stream_1 = require_browser2();
    var INITIAL_CONTEXT_XHTML = require_initial_context_xhtml();
    var INITIAL_CONTEXT = require_initial_context();
    var RdfaProfile_1 = require_RdfaProfile();
    var Util_1 = require_Util3();
    var RdfaParser = class _RdfaParser extends readable_stream_1.Transform {
      constructor(options) {
        super({ readableObjectMode: true });
        this.activeTagStack = [];
        options = options || {};
        this.options = options;
        this.util = new Util_1.Util(options.dataFactory, options.baseIRI);
        this.defaultGraph = options.defaultGraph || this.util.dataFactory.defaultGraph();
        const profile = options.contentType ? Util_1.Util.contentTypeToProfile(options.contentType) : options.profile || "";
        this.features = options.features || RdfaProfile_1.RDFA_FEATURES[profile];
        this.htmlParseListener = options.htmlParseListener;
        this.rdfaPatterns = this.features.copyRdfaPatterns ? {} : null;
        this.pendingRdfaPatternCopies = this.features.copyRdfaPatterns ? {} : null;
        this.parser = this.initializeParser(profile === "xml");
        this.activeTagStack.push({
          incompleteTriples: [],
          inlist: false,
          language: options.language,
          listMapping: {},
          listMappingLocal: {},
          name: "",
          prefixesAll: Object.assign(Object.assign({}, INITIAL_CONTEXT["@context"]), this.features.xhtmlInitialContext ? INITIAL_CONTEXT_XHTML["@context"] : {}),
          prefixesCustom: {},
          skipElement: false,
          vocab: options.vocab
        });
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
        stream.on("error", (error) => parsed.emit("error", error));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _RdfaParser(this.options));
        return parsed;
      }
      _transform(chunk, encoding, callback) {
        this.parser.write(chunk.toString());
        callback();
      }
      _flush(callback) {
        this.parser.end();
        callback();
      }
      onTagOpen(name, attributes) {
        let parentTagI = this.activeTagStack.length - 1;
        while (parentTagI > 0 && this.activeTagStack[parentTagI].skipElement) {
          parentTagI--;
        }
        let parentTag = this.activeTagStack[parentTagI];
        if (parentTagI !== this.activeTagStack.length - 1) {
          parentTag = Object.assign(Object.assign({}, parentTag), { language: this.activeTagStack[this.activeTagStack.length - 1].language, prefixesAll: this.activeTagStack[this.activeTagStack.length - 1].prefixesAll, prefixesCustom: this.activeTagStack[this.activeTagStack.length - 1].prefixesCustom, vocab: this.activeTagStack[this.activeTagStack.length - 1].vocab });
        }
        const activeTag = {
          collectChildTags: parentTag.collectChildTags,
          incompleteTriples: [],
          inlist: "inlist" in attributes,
          listMapping: [],
          listMappingLocal: parentTag.listMapping,
          localBaseIRI: parentTag.localBaseIRI,
          name,
          prefixesAll: null,
          prefixesCustom: null,
          skipElement: false
        };
        this.activeTagStack.push(activeTag);
        if (activeTag.collectChildTags) {
          for (const prefix of Object.keys(parentTag.prefixesCustom).sort()) {
            const suffix = parentTag.prefixesCustom[prefix];
            const attributeKey = prefix === "" ? "xmlns" : "xmlns:" + prefix;
            if (!(attributeKey in attributes)) {
              attributes[attributeKey] = suffix;
            }
          }
          const attributesSerialized = Object.keys(attributes).map((key) => `${key}="${attributes[key]}"`).join(" ");
          activeTag.text = [`<${name}${attributesSerialized ? " " + attributesSerialized : ""}>`];
          if (this.features.skipHandlingXmlLiteralChildren) {
            return;
          }
        }
        let allowTermsInRelPredicates = true;
        let allowTermsInRevPredicates = true;
        if (this.features.onlyAllowUriRelRevIfProperty) {
          if ("property" in attributes && "rel" in attributes) {
            allowTermsInRelPredicates = false;
            if (attributes.rel.indexOf(":") < 0) {
              delete attributes.rel;
            }
          }
          if ("property" in attributes && "rev" in attributes) {
            allowTermsInRevPredicates = false;
            if (attributes.rev.indexOf(":") < 0) {
              delete attributes.rev;
            }
          }
        }
        if (this.features.copyRdfaPatterns) {
          if (parentTag.collectedPatternTag) {
            const patternTag = {
              attributes,
              children: [],
              name,
              referenced: false,
              rootPattern: false,
              text: []
            };
            parentTag.collectedPatternTag.children.push(patternTag);
            activeTag.collectedPatternTag = patternTag;
            return;
          }
          if (attributes.typeof === "rdfa:Pattern") {
            activeTag.collectedPatternTag = {
              attributes,
              children: [],
              name,
              parentTag,
              referenced: false,
              rootPattern: true,
              text: []
            };
            return;
          }
          if (attributes.property === "rdfa:copy") {
            const copyTargetPatternId = attributes.resource || attributes.href || attributes.src;
            if (this.rdfaPatterns[copyTargetPatternId]) {
              this.emitPatternCopy(parentTag, this.rdfaPatterns[copyTargetPatternId], copyTargetPatternId);
            } else {
              if (!this.pendingRdfaPatternCopies[copyTargetPatternId]) {
                this.pendingRdfaPatternCopies[copyTargetPatternId] = [];
              }
              this.pendingRdfaPatternCopies[copyTargetPatternId].push(parentTag);
            }
            return;
          }
        }
        if (this.features.baseTag && name === "base" && attributes.href) {
          this.util.baseIRI = this.util.getBaseIRI(attributes.href);
        }
        if (this.features.xmlBase && attributes["xml:base"]) {
          activeTag.localBaseIRI = this.util.getBaseIRI(attributes["xml:base"]);
        }
        if (this.features.timeTag && name === "time" && !attributes.datatype) {
          activeTag.interpretObjectAsTime = true;
        }
        let newSubject;
        let currentObjectResource;
        let typedResource;
        if ("vocab" in attributes) {
          if (attributes.vocab) {
            activeTag.vocab = attributes.vocab;
            this.emitTriple(this.util.getBaseIriTerm(activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDFA + "usesVocabulary"), this.util.dataFactory.namedNode(activeTag.vocab));
          } else {
            activeTag.vocab = this.activeTagStack[0].vocab;
          }
        } else {
          activeTag.vocab = parentTag.vocab;
        }
        activeTag.prefixesCustom = Util_1.Util.parsePrefixes(attributes, parentTag.prefixesCustom, this.features.xmlnsPrefixMappings);
        activeTag.prefixesAll = Object.keys(activeTag.prefixesCustom).length > 0 ? Object.assign(Object.assign({}, parentTag.prefixesAll), activeTag.prefixesCustom) : parentTag.prefixesAll;
        if (this.features.roleAttribute && attributes.role) {
          const roleSubject = attributes.id ? this.util.createIri("#" + attributes.id, activeTag, false, false, false) : this.util.createBlankNode();
          const vocabOld = activeTag.vocab;
          activeTag.vocab = "http://www.w3.org/1999/xhtml/vocab#";
          for (const role of this.util.createVocabIris(attributes.role, activeTag, true, false)) {
            this.emitTriple(roleSubject, this.util.dataFactory.namedNode("http://www.w3.org/1999/xhtml/vocab#role"), role);
          }
          activeTag.vocab = vocabOld;
        }
        if ("xml:lang" in attributes || this.features.langAttribute && "lang" in attributes) {
          activeTag.language = attributes["xml:lang"] || attributes.lang;
        } else {
          activeTag.language = parentTag.language;
        }
        const isRootTag = this.activeTagStack.length === 2;
        if (!("rel" in attributes) && !("rev" in attributes)) {
          if ("property" in attributes && !("content" in attributes) && !("datatype" in attributes)) {
            if ("about" in attributes) {
              newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
              activeTag.explicitNewSubject = !!newSubject;
            } else if (isRootTag) {
              newSubject = true;
            } else if (parentTag.object) {
              newSubject = parentTag.object;
            }
            if ("typeof" in attributes) {
              if ("about" in attributes) {
                typedResource = this.util.createIri(attributes.about, activeTag, false, true, true);
              }
              if (!typedResource && isRootTag) {
                typedResource = true;
              }
              if (!typedResource && "resource" in attributes) {
                typedResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
              }
              if (!typedResource && ("href" in attributes || "src" in attributes)) {
                typedResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
              }
              if (!typedResource && this.isInheritSubjectInHeadBody(name)) {
                typedResource = newSubject;
              }
              if (!typedResource) {
                typedResource = this.util.createBlankNode();
              }
              currentObjectResource = typedResource;
            }
          } else {
            if ("about" in attributes || "resource" in attributes) {
              newSubject = this.util.createIri(attributes.about || attributes.resource, activeTag, false, true, true);
              activeTag.explicitNewSubject = !!newSubject;
            }
            if (!newSubject && ("href" in attributes || "src" in attributes)) {
              newSubject = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
              activeTag.explicitNewSubject = !!newSubject;
            }
            if (!newSubject) {
              if (isRootTag) {
                newSubject = true;
              } else if (this.isInheritSubjectInHeadBody(name)) {
                newSubject = parentTag.object;
              } else if ("typeof" in attributes) {
                newSubject = this.util.createBlankNode();
                activeTag.explicitNewSubject = true;
              } else if (parentTag.object) {
                newSubject = parentTag.object;
                if (!("property" in attributes)) {
                  activeTag.skipElement = true;
                }
              }
            }
            if ("typeof" in attributes) {
              typedResource = newSubject;
            }
          }
        } else {
          if ("about" in attributes) {
            newSubject = this.util.createIri(attributes.about, activeTag, false, true, true);
            activeTag.explicitNewSubject = !!newSubject;
            if ("typeof" in attributes) {
              typedResource = newSubject;
            }
          } else if (isRootTag) {
            newSubject = true;
          } else if (parentTag.object) {
            newSubject = parentTag.object;
          }
          if ("resource" in attributes) {
            currentObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
          }
          if (!currentObjectResource) {
            if ("href" in attributes || "src" in attributes) {
              currentObjectResource = this.util.createIri(attributes.href || attributes.src, activeTag, false, false, true);
            } else if ("typeof" in attributes && !("about" in attributes) && !this.isInheritSubjectInHeadBody(name)) {
              currentObjectResource = this.util.createBlankNode();
            }
          }
          if ("typeof" in attributes && !("about" in attributes)) {
            if (this.isInheritSubjectInHeadBody(name)) {
              typedResource = newSubject;
            } else {
              typedResource = currentObjectResource;
            }
          }
        }
        if (typedResource) {
          for (const type of this.util.createVocabIris(attributes.typeof, activeTag, true, true)) {
            this.emitTriple(this.util.getResourceOrBaseIri(typedResource, activeTag), this.util.dataFactory.namedNode(Util_1.Util.RDF + "type"), type);
          }
        }
        if (newSubject) {
          activeTag.listMapping = {};
        }
        if (currentObjectResource) {
          if ("rel" in attributes && "inlist" in attributes) {
            for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
              this.addListMapping(activeTag, newSubject, predicate, currentObjectResource);
            }
          }
          if (!("rel" in attributes && "inlist" in attributes)) {
            if ("rel" in attributes) {
              for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                this.emitTriple(this.util.getResourceOrBaseIri(newSubject, activeTag), predicate, this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
              }
            }
            if ("rev" in attributes) {
              for (const predicate of this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)) {
                this.emitTriple(this.util.getResourceOrBaseIri(currentObjectResource, activeTag), predicate, this.util.getResourceOrBaseIri(newSubject, activeTag));
              }
            }
          }
        }
        if (!currentObjectResource) {
          if ("rel" in attributes) {
            if ("inlist" in attributes) {
              for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                this.addListMapping(activeTag, newSubject, predicate, null);
                activeTag.incompleteTriples.push({ predicate, reverse: false, list: true });
              }
            } else {
              for (const predicate of this.util.createVocabIris(attributes.rel, activeTag, allowTermsInRelPredicates, false)) {
                activeTag.incompleteTriples.push({ predicate, reverse: false });
              }
            }
          }
          if ("rev" in attributes) {
            for (const predicate of this.util.createVocabIris(attributes.rev, activeTag, allowTermsInRevPredicates, false)) {
              activeTag.incompleteTriples.push({ predicate, reverse: true });
            }
          }
          if (activeTag.incompleteTriples.length > 0) {
            currentObjectResource = this.util.createBlankNode();
          }
        }
        if ("property" in attributes) {
          activeTag.predicates = this.util.createVocabIris(attributes.property, activeTag, true, false);
          let localObjectResource;
          if ("datatype" in attributes) {
            activeTag.datatype = this.util.createIri(attributes.datatype, activeTag, true, true, false);
            if (activeTag.datatype && (activeTag.datatype.value === Util_1.Util.RDF + "XMLLiteral" || this.features.htmlDatatype && activeTag.datatype.value === Util_1.Util.RDF + "HTML")) {
              activeTag.collectChildTags = true;
            }
          } else {
            if (!("rev" in attributes) && !("rel" in attributes) && !("content" in attributes)) {
              if ("resource" in attributes) {
                localObjectResource = this.util.createIri(attributes.resource, activeTag, false, true, true);
              }
              if (!localObjectResource && "href" in attributes) {
                localObjectResource = this.util.createIri(attributes.href, activeTag, false, false, true);
              }
              if (!localObjectResource && "src" in attributes) {
                localObjectResource = this.util.createIri(attributes.src, activeTag, false, false, true);
              }
            }
            if ("typeof" in attributes && !("about" in attributes)) {
              localObjectResource = typedResource;
            }
          }
          if ("content" in attributes) {
            const object = this.util.createLiteral(attributes.content, activeTag);
            if ("inlist" in attributes) {
              for (const predicate of activeTag.predicates) {
                this.addListMapping(activeTag, newSubject, predicate, object);
              }
            } else {
              const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
              for (const predicate of activeTag.predicates) {
                this.emitTriple(subject, predicate, object);
              }
            }
            activeTag.predicates = null;
          } else if (this.features.datetimeAttribute && "datetime" in attributes) {
            activeTag.interpretObjectAsTime = true;
            const object = this.util.createLiteral(attributes.datetime, activeTag);
            if ("inlist" in attributes) {
              for (const predicate of activeTag.predicates) {
                this.addListMapping(activeTag, newSubject, predicate, object);
              }
            } else {
              const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
              for (const predicate of activeTag.predicates) {
                this.emitTriple(subject, predicate, object);
              }
            }
            activeTag.predicates = null;
          } else if (localObjectResource) {
            const object = this.util.getResourceOrBaseIri(localObjectResource, activeTag);
            if ("inlist" in attributes) {
              for (const predicate of activeTag.predicates) {
                this.addListMapping(activeTag, newSubject, predicate, object);
              }
            } else {
              const subject = this.util.getResourceOrBaseIri(newSubject, activeTag);
              for (const predicate of activeTag.predicates) {
                this.emitTriple(subject, predicate, object);
              }
            }
            activeTag.predicates = null;
          }
        }
        let incompleteTriplesCompleted = false;
        if (!activeTag.skipElement && newSubject && parentTag.incompleteTriples.length > 0) {
          incompleteTriplesCompleted = true;
          const subject = this.util.getResourceOrBaseIri(parentTag.subject, activeTag);
          const object = this.util.getResourceOrBaseIri(newSubject, activeTag);
          for (const incompleteTriple of parentTag.incompleteTriples) {
            if (!incompleteTriple.reverse) {
              if (incompleteTriple.list) {
                let firstInListTag = null;
                for (let i = this.activeTagStack.length - 1; i >= 0; i--) {
                  if (this.activeTagStack[i].inlist) {
                    firstInListTag = this.activeTagStack[i];
                    break;
                  }
                }
                this.addListMapping(firstInListTag, newSubject, incompleteTriple.predicate, object);
              } else {
                this.emitTriple(subject, incompleteTriple.predicate, object);
              }
            } else {
              this.emitTriple(object, incompleteTriple.predicate, subject);
            }
          }
        }
        if (!incompleteTriplesCompleted && parentTag.incompleteTriples.length > 0) {
          activeTag.incompleteTriples = activeTag.incompleteTriples.concat(parentTag.incompleteTriples);
        }
        activeTag.subject = newSubject || parentTag.subject;
        activeTag.object = currentObjectResource || newSubject;
      }
      onText(data) {
        const activeTag = this.activeTagStack[this.activeTagStack.length - 1];
        if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag) {
          activeTag.collectedPatternTag.text.push(data);
          return;
        }
        if (!activeTag.text) {
          activeTag.text = [];
        }
        activeTag.text.push(data);
      }
      onTagClose() {
        const activeTag = this.activeTagStack[this.activeTagStack.length - 1];
        const parentTag = this.activeTagStack[this.activeTagStack.length - 2];
        if (!(activeTag.collectChildTags && parentTag.collectChildTags && this.features.skipHandlingXmlLiteralChildren)) {
          if (this.features.copyRdfaPatterns && activeTag.collectedPatternTag && activeTag.collectedPatternTag.rootPattern) {
            const patternId = activeTag.collectedPatternTag.attributes.resource;
            delete activeTag.collectedPatternTag.attributes.resource;
            delete activeTag.collectedPatternTag.attributes.typeof;
            this.rdfaPatterns[patternId] = activeTag.collectedPatternTag;
            if (this.pendingRdfaPatternCopies[patternId]) {
              for (const tag of this.pendingRdfaPatternCopies[patternId]) {
                this.emitPatternCopy(tag, activeTag.collectedPatternTag, patternId);
              }
              delete this.pendingRdfaPatternCopies[patternId];
            }
            this.activeTagStack.pop();
            return;
          }
          if (activeTag.predicates) {
            const subject = this.util.getResourceOrBaseIri(activeTag.subject, activeTag);
            let textSegments = activeTag.text || [];
            if (activeTag.collectChildTags && parentTag.collectChildTags) {
              textSegments = textSegments.slice(1);
            }
            const object = this.util.createLiteral(textSegments.join(""), activeTag);
            if (activeTag.inlist) {
              for (const predicate of activeTag.predicates) {
                this.addListMapping(activeTag, subject, predicate, object);
              }
            } else {
              for (const predicate of activeTag.predicates) {
                this.emitTriple(subject, predicate, object);
              }
            }
            if (!parentTag.predicates) {
              activeTag.text = null;
            }
          }
          if (activeTag.object && Object.keys(activeTag.listMapping).length > 0) {
            const subject = this.util.getResourceOrBaseIri(activeTag.object, activeTag);
            for (const predicateValue in activeTag.listMapping) {
              const predicate = this.util.dataFactory.namedNode(predicateValue);
              const values2 = activeTag.listMapping[predicateValue];
              if (values2.length > 0) {
                const bnodes = values2.map(() => this.util.createBlankNode());
                for (let i = 0; i < values2.length; i++) {
                  const object = this.util.getResourceOrBaseIri(values2[i], activeTag);
                  this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + "first"), object);
                  this.emitTriple(bnodes[i], this.util.dataFactory.namedNode(Util_1.Util.RDF + "rest"), i < values2.length - 1 ? bnodes[i + 1] : this.util.dataFactory.namedNode(Util_1.Util.RDF + "nil"));
                }
                this.emitTriple(subject, predicate, bnodes[0]);
              } else {
                this.emitTriple(subject, predicate, this.util.dataFactory.namedNode(Util_1.Util.RDF + "nil"));
              }
            }
          }
        }
        this.activeTagStack.pop();
        if (activeTag.collectChildTags && activeTag.text) {
          activeTag.text.push(`</${activeTag.name}>`);
        }
        if (activeTag.text && parentTag) {
          if (!parentTag.text) {
            parentTag.text = activeTag.text;
          } else {
            parentTag.text = parentTag.text.concat(activeTag.text);
          }
        }
      }
      onEnd() {
        if (this.features.copyRdfaPatterns) {
          this.features.copyRdfaPatterns = false;
          for (const patternId in this.rdfaPatterns) {
            const pattern = this.rdfaPatterns[patternId];
            if (!pattern.referenced) {
              pattern.attributes.typeof = "rdfa:Pattern";
              pattern.attributes.resource = patternId;
              this.emitPatternCopy(pattern.parentTag, pattern, patternId);
              pattern.referenced = false;
              delete pattern.attributes.typeof;
              delete pattern.attributes.resource;
            }
          }
          for (const patternId in this.pendingRdfaPatternCopies) {
            for (const parentTag of this.pendingRdfaPatternCopies[patternId]) {
              this.activeTagStack.push(parentTag);
              this.onTagOpen("link", { property: "rdfa:copy", href: patternId });
              this.onTagClose();
              this.activeTagStack.pop();
            }
          }
          this.features.copyRdfaPatterns = true;
        }
      }
      /**
       * If the new subject can be inherited from the parent object
       * if the resource defines no new subject.
       * @param {string} name The current tag name.
       * @returns {boolean} If the subject can be inherited.
       */
      isInheritSubjectInHeadBody(name) {
        return this.features.inheritSubjectInHeadBody && (name === "head" || name === "body");
      }
      /**
       * Add a list mapping for the given predicate and object in the active tag.
       * @param {IActiveTag} activeTag The active tag.
       * @param {Term | boolean} subject A subject term, this will only be used to create a separate list
       *                                 if activeTag.explicitNewSubject is true.
       * @param {Term} predicate A predicate term.
       * @param {Term | boolean} currentObjectResource The current object resource.
       */
      addListMapping(activeTag, subject, predicate, currentObjectResource) {
        if (activeTag.explicitNewSubject) {
          const bNode = this.util.createBlankNode();
          this.emitTriple(this.util.getResourceOrBaseIri(subject, activeTag), predicate, bNode);
          this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + "first"), this.util.getResourceOrBaseIri(currentObjectResource, activeTag));
          this.emitTriple(bNode, this.util.dataFactory.namedNode(Util_1.Util.RDF + "rest"), this.util.dataFactory.namedNode(Util_1.Util.RDF + "nil"));
        } else {
          let predicateList = activeTag.listMappingLocal[predicate.value];
          if (!predicateList) {
            activeTag.listMappingLocal[predicate.value] = predicateList = [];
          }
          if (currentObjectResource) {
            predicateList.push(currentObjectResource);
          }
        }
      }
      /**
       * Emit the given triple to the stream.
       * @param {Term} subject A subject term.
       * @param {Term} predicate A predicate term.
       * @param {Term} object An object term.
       */
      emitTriple(subject, predicate, object) {
        if (subject.termType === "NamedNode" && subject.value.indexOf(":") < 0 || predicate.termType === "NamedNode" && predicate.value.indexOf(":") < 0 || object.termType === "NamedNode" && object.value.indexOf(":") < 0) {
          return;
        }
        this.push(this.util.dataFactory.quad(subject, predicate, object, this.defaultGraph));
      }
      /**
       * Emit an instantiation of the given pattern with the given parent tag.
       * @param {IActiveTag} parentTag The parent tag to instantiate in.
       * @param {IRdfaPattern} pattern The pattern to instantiate.
       * @param {string} rootPatternId The pattern id.
       */
      emitPatternCopy(parentTag, pattern, rootPatternId) {
        this.activeTagStack.push(parentTag);
        pattern.referenced = true;
        if (!pattern.constructedBlankNodes) {
          pattern.constructedBlankNodes = [];
          this.util.blankNodeFactory = () => {
            const bNode = this.util.dataFactory.blankNode();
            pattern.constructedBlankNodes.push(bNode);
            return bNode;
          };
        } else {
          let blankNodeIndex = 0;
          this.util.blankNodeFactory = () => pattern.constructedBlankNodes[blankNodeIndex++];
        }
        this.emitPatternCopyAbsolute(pattern, true, rootPatternId);
        this.util.blankNodeFactory = null;
        this.activeTagStack.pop();
      }
      /**
       * Emit an instantiation of the given pattern with the given parent tag.
       *
       * This should probably not be called directly,
       * call {@link emitPatternCopy} instead.
       *
       * @param {IRdfaPattern} pattern The pattern to instantiate.
       * @param {boolean} root If this is the root call for the given pattern.
       * @param {string} rootPatternId The pattern id.
       */
      emitPatternCopyAbsolute(pattern, root, rootPatternId) {
        if (!root && pattern.attributes.property === "rdfa:copy" && pattern.attributes.href === rootPatternId) {
          return;
        }
        this.onTagOpen(pattern.name, pattern.attributes);
        for (const text of pattern.text) {
          this.onText(text);
        }
        for (const child of pattern.children) {
          this.emitPatternCopyAbsolute(child, false, rootPatternId);
        }
        this.onTagClose();
      }
      initializeParser(xmlMode) {
        return new htmlparser2_1.Parser({
          onclosetag: () => {
            try {
              this.onTagClose();
              if (this.htmlParseListener) {
                this.htmlParseListener.onTagClose();
              }
            } catch (e) {
              this.emit("error", e);
            }
          },
          onend: () => {
            try {
              this.onEnd();
              if (this.htmlParseListener) {
                this.htmlParseListener.onEnd();
              }
            } catch (e) {
              this.emit("error", e);
            }
          },
          onopentag: (name, attributes) => {
            try {
              this.onTagOpen(name, attributes);
              if (this.htmlParseListener) {
                this.htmlParseListener.onTagOpen(name, attributes);
              }
            } catch (e) {
              this.emit("error", e);
            }
          },
          ontext: (data) => {
            try {
              this.onText(data);
              if (this.htmlParseListener) {
                this.htmlParseListener.onText(data);
              }
            } catch (e) {
              this.emit("error", e);
            }
          }
        }, {
          decodeEntities: true,
          recognizeSelfClosing: true,
          xmlMode
        });
      }
    };
    exports.RdfaParser = RdfaParser;
  }
});

// ../../lipdjs/node_modules/rdfa-streaming-parser/index.js
var require_rdfa_streaming_parser = __commonJS({
  "../../lipdjs/node_modules/rdfa-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IActiveTag(), exports);
    __exportStar(require_IHtmlParseListener(), exports);
    __exportStar(require_IRdfaPattern(), exports);
    __exportStar(require_RdfaParser(), exports);
    __exportStar(require_RdfaProfile(), exports);
    __exportStar(require_Util3(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-xml-rdfa/lib/ActorRdfParseXmlRdfa.js
var require_ActorRdfParseXmlRdfa = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-xml-rdfa/lib/ActorRdfParseXmlRdfa.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseXmlRdfa = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var context_entries_1 = require_lib3();
    var rdfa_streaming_parser_1 = require_rdfa_streaming_parser();
    var ActorRdfParseXmlRdfa = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/xml": 1.0,
       *       "text/xml": 1.0,
       *       "image/svg+xml": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/xml": "http://www.w3.org/ns/formats/RDFa",
       *       "text/xml": "http://www.w3.org/ns/formats/RDFa",
       *       "image/svg+xml": "http://www.w3.org/ns/formats/RDFa"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, _mediaType, _context) {
        var _a;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const language = (action.headers && action.headers.get("content-language")) ?? void 0;
        action.data.on("error", (error) => data.emit("error", error));
        const data = action.data.pipe(new rdfa_streaming_parser_1.RdfaParser({
          dataFactory,
          baseIRI: (_a = action.metadata) == null ? void 0 : _a.baseIRI,
          profile: "xml",
          language
        }));
        return { data, metadata: { triples: true } };
      }
    };
    exports.ActorRdfParseXmlRdfa = ActorRdfParseXmlRdfa;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-xml-rdfa/lib/index.js
var require_lib75 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-xml-rdfa/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseXmlRdfa(), exports);
  }
});

// ../../lipdjs/node_modules/event-emitter-promisify/dist/index.js
var require_dist = __commonJS({
  "../../lipdjs/node_modules/event-emitter-promisify/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promisifyEventEmitter = void 0;
    function promisifyEventEmitter(event, result) {
      return new Promise((resolve, reject) => {
        event.on("end", () => resolve(result));
        event.on("error", reject);
      });
    }
    exports.promisifyEventEmitter = promisifyEventEmitter;
  }
});

// ../../lipdjs/node_modules/@jeswr/stream-to-string/dist/index.js
var require_dist2 = __commonJS({
  "../../lipdjs/node_modules/@jeswr/stream-to-string/dist/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringify = stringify;
    var event_emitter_promisify_1 = require_dist();
    function stringify(ee) {
      return __awaiter(this, void 0, void 0, function* () {
        let str = "";
        ee.on("data", (chunk) => {
          str += chunk;
        });
        yield (0, event_emitter_promisify_1.promisifyEventEmitter)(ee);
        return str;
      });
    }
  }
});

// ../../lipdjs/node_modules/shaclc-parse/lib/ShaclcParser.js
var require_ShaclcParser = __commonJS({
  "../../lipdjs/node_modules/shaclc-parse/lib/ShaclcParser.js"(exports, module) {
    var ShaclcParser = function() {
      var o = function(k, v, o2, l) {
        for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v) ;
        return o2;
      }, $V0 = [7, 12, 13, 14, 15, 16, 20, 25, 115, 130], $V1 = [7, 13, 16, 20, 25, 115, 130], $V2 = [7, 13, 16, 115, 130], $V3 = [1, 25], $V4 = [1, 29], $V5 = [1, 27], $V6 = [1, 28], $V7 = [13, 16, 115, 130], $V8 = [13, 16, 28, 38, 40, 42, 44, 46, 48, 53, 56, 61, 67, 85, 87, 92, 93, 95, 96, 102, 110, 111, 115, 119, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136], $V9 = [28, 56], $Va = [1, 42], $Vb = [46, 48, 53, 56], $Vc = [1, 54], $Vd = [1, 60], $Ve = [1, 56], $Vf = [1, 57], $Vg = [1, 58], $Vh = [1, 63], $Vi = [1, 64], $Vj = [1, 65], $Vk = [1, 66], $Vl = [1, 67], $Vm = [1, 68], $Vn = [1, 75], $Vo = [28, 46, 48, 53, 56], $Vp = [28, 42, 46, 48, 53, 56], $Vq = [13, 16, 28, 38, 40, 42, 44, 46, 48, 53, 56, 92, 115, 119, 120, 130, 131, 132, 133, 134, 135, 136], $Vr = [13, 16, 28, 38, 40, 42, 44, 46, 48, 53, 56, 67, 85, 87, 92, 95, 96, 115, 119, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136], $Vs = [13, 16, 38, 40, 44, 92, 115, 119, 120, 130, 131, 132, 133, 134, 135, 136], $Vt = [13, 16, 28, 38, 40, 42, 44, 46, 48, 53, 56, 67, 85, 87, 92, 95, 96, 115, 117, 118, 119, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136], $Vu = [13, 16, 28, 56, 115, 130], $Vv = [13, 16, 38, 58, 87, 96, 109, 115, 126, 130], $Vw = [1, 116], $Vx = [1, 112], $Vy = [1, 108], $Vz = [1, 114], $VA = [1, 111], $VB = [7, 13, 16, 20, 25, 44, 48, 53, 56, 67, 85, 87, 95, 96, 115, 128, 129, 130], $VC = [48, 53], $VD = [48, 53, 87, 96, 126], $VE = [13, 16, 44, 48, 53, 56, 85, 87, 95, 96, 115, 128, 129, 130], $VF = [1, 126], $VG = [13, 16, 40, 44, 48, 53, 56, 85, 87, 95, 96, 115, 128, 129, 130], $VH = [1, 129], $VI = [48, 53, 67, 87, 96, 126], $VJ = [13, 16, 40, 44, 48, 53, 56, 67, 85, 87, 95, 96, 115, 128, 129, 130], $VK = [1, 133], $VL = [13, 16, 40, 44, 48, 53, 56, 67, 85, 87, 95, 96, 102, 115, 128, 129, 130], $VM = [13, 16, 40, 44, 48, 53, 56, 67, 85, 87, 93, 95, 96, 102, 110, 111, 115, 128, 129, 130], $VN = [1, 151], $VO = [1, 153], $VP = [1, 156], $VQ = [1, 157], $VR = [1, 158], $VS = [1, 167], $VT = [1, 175], $VU = [13, 16, 44, 48, 53, 56, 67, 85, 87, 95, 96, 115, 128, 129, 130], $VV = [13, 16, 44, 48, 53, 56, 67, 85, 87, 95, 96, 115, 126, 128, 129, 130], $VW = [13, 16, 46, 92, 115, 119, 120, 130, 131, 132, 133, 134, 135, 136];
      var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "shaclDoc": 3, "shaclDoc_repetition0": 4, "shaclDoc_repetition1": 5, "ttlSection": 6, "EOF": 7, "directive": 8, "baseDecl": 9, "importsDecl": 10, "prefixDecl": 11, "KW_BASE": 12, "IRIREF": 13, "KW_IMPORTS": 14, "KW_PREFIX": 15, "PNAME_NS": 16, "nodeShapeIri": 17, "iri": 18, "nodeShape": 19, "KW_SHAPE": 20, "nodeShape_option0": 21, "nodeShape_option1": 22, "nodeShapeBody": 23, "shapeClass": 24, "KW_SHAPE_CLASS": 25, "shapeClass_option0": 26, "turtleAnnotation": 27, ";": 28, "turtleAnnotation2": 29, "predicate": 30, "turtleAnnotation2_option0": 31, "objectList": 32, "object": 33, "objectList_repetition0": 34, "iriOrLiteral": 35, "blankNodeSection": 36, "list": 37, "(": 38, "list_repetition0": 39, ")": 40, "objectTail": 41, ",": 42, "LB": 43, "[": 44, "RB": 45, "]": 46, "LP": 47, "%": 48, "RP": 49, "pcSection": 50, "iriHead": 51, "ttlStatement": 52, ".": 53, "ttlSection_repetition0": 54, "startNodeShape": 55, "{": 56, "endNodeShape": 57, "}": 58, "nodeShapeBody_repetition0": 59, "targetClass": 60, "->": 61, "targetClass_repetition_plus0": 62, "constraint": 63, "constraint_group0": 64, "constraint_option0": 65, "orNotComponent": 66, "|": 67, "nodeNot": 68, "nodeOrEmit": 69, "nodeOr": 70, "nodeOr_repetition_plus0": 71, "nodeValue": 72, "negation": 73, "nodeValue_group0": 74, "=": 75, "iriOrLiteralOrArray": 76, "propertyShape": 77, "path": 78, "propertyShape_repetition0": 79, "propertyOrComponent": 80, "propertyNot": 81, "propertyOr": 82, "propertyOr_repetition_plus0": 83, "propertyAtom": 84, "NODEKIND": 85, "shapeRef": 86, "PARAM": 87, "propertyCount": 88, "propertyMinCount": 89, "..": 90, "propertyMaxCount": 91, "INTEGER": 92, "*": 93, "shapeRef_group0": 94, "@": 95, "!": 96, "pathAlternative": 97, "additionalAlternative": 98, "pathSequence": 99, "pathAlternative_repetition_plus0": 100, "additionalSequence": 101, "/": 102, "pathEltOrInverse": 103, "pathSequence_repetition_plus0": 104, "pathElt": 105, "pathPrimary": 106, "pathMod": 107, "pathInverse": 108, "^": 109, "?": 110, "+": 111, "iriOrLiteralOrArray_repetition0": 112, "literal": 113, "iri_group0": 114, "a": 115, "string": 116, "LANGTAG": 117, "^^": 118, "DECIMAL": 119, "DOUBLE": 120, "literal_group0": 121, "string_group0": 122, "string_group1": 123, "shaclDoc_repetition1_group0": 124, "constraint_group0_repetition_plus0": 125, "TARGET": 126, "propertyShape_repetition0_group0": 127, "ATPNAME_LN": 128, "ATPNAME_NS": 129, "PNAME_LN": 130, "KW_TRUE": 131, "KW_FALSE": 132, "STRING_LITERAL1": 133, "STRING_LITERAL2": 134, "STRING_LITERAL_LONG1": 135, "STRING_LITERAL_LONG2": 136, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 12: "KW_BASE", 13: "IRIREF", 14: "KW_IMPORTS", 15: "KW_PREFIX", 16: "PNAME_NS", 20: "KW_SHAPE", 25: "KW_SHAPE_CLASS", 28: ";", 38: "(", 40: ")", 42: ",", 44: "[", 46: "]", 48: "%", 53: ".", 56: "{", 58: "}", 61: "->", 67: "|", 75: "=", 85: "NODEKIND", 87: "PARAM", 90: "..", 92: "INTEGER", 93: "*", 95: "@", 96: "!", 102: "/", 109: "^", 110: "?", 111: "+", 115: "a", 117: "LANGTAG", 118: "^^", 119: "DECIMAL", 120: "DOUBLE", 126: "TARGET", 128: "ATPNAME_LN", 129: "ATPNAME_NS", 130: "PNAME_LN", 131: "KW_TRUE", 132: "KW_FALSE", 133: "STRING_LITERAL1", 134: "STRING_LITERAL2", 135: "STRING_LITERAL_LONG1", 136: "STRING_LITERAL_LONG2" },
        productions_: [0, [3, 4], [8, 1], [8, 1], [8, 1], [9, 2], [10, 2], [11, 3], [17, 1], [19, 5], [24, 4], [27, 2], [29, 2], [30, 2], [32, 2], [33, 1], [33, 1], [33, 1], [37, 3], [41, 2], [43, 1], [45, 1], [36, 3], [47, 1], [49, 1], [50, 3], [51, 1], [52, 3], [6, 1], [55, 1], [57, 1], [23, 3], [60, 2], [63, 3], [66, 2], [69, 1], [70, 1], [70, 2], [68, 1], [68, 2], [72, 3], [77, 2], [80, 2], [82, 1], [82, 2], [81, 1], [81, 2], [84, 1], [84, 1], [84, 1], [84, 3], [84, 1], [88, 5], [89, 1], [91, 1], [91, 1], [86, 1], [86, 2], [73, 1], [78, 1], [98, 2], [97, 1], [97, 2], [101, 2], [99, 1], [99, 2], [105, 1], [105, 2], [103, 1], [103, 2], [108, 1], [107, 1], [107, 1], [107, 1], [106, 1], [106, 3], [76, 1], [76, 3], [35, 1], [35, 1], [18, 1], [18, 1], [18, 1], [113, 1], [113, 2], [113, 3], [113, 1], [113, 1], [113, 1], [113, 1], [116, 1], [116, 1], [4, 0], [4, 2], [124, 1], [124, 1], [5, 0], [5, 2], [21, 0], [21, 1], [22, 0], [22, 1], [26, 0], [26, 1], [31, 0], [31, 1], [34, 0], [34, 2], [39, 0], [39, 2], [54, 0], [54, 2], [59, 0], [59, 2], [62, 1], [62, 2], [125, 1], [125, 2], [64, 1], [64, 1], [65, 0], [65, 1], [71, 1], [71, 2], [74, 1], [74, 1], [127, 1], [127, 1], [79, 0], [79, 2], [83, 1], [83, 2], [94, 1], [94, 1], [100, 1], [100, 2], [104, 1], [104, 2], [112, 0], [112, 2], [114, 1], [114, 1], [121, 1], [121, 1], [122, 1], [122, 1], [123, 1], [123, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              this.$ = emit(Parser2.factory.namedNode(resolveIRI("")), Parser2.factory.namedNode(RDF_TYPE), Parser2.factory.namedNode(OWL + "Ontology"));
              break;
            case 5:
              Parser2.base = Parser2.factory.namedNode($$[$0].slice(1, -1));
              Parser2.n3Parser._setBase(resolveIRI(Parser2.base.value));
              break;
            case 6:
              this.$ = emit(Parser2.base, Parser2.factory.namedNode(OWL + "imports"), Parser2.factory.namedNode($$[$0].slice(1, -1)));
              break;
            case 7:
              this.$ = Parser2.prefixes[$$[$0 - 1].substr(0, $$[$0 - 1].length - 1)] = resolveIRI($$[$0]);
              break;
            case 8:
              Parser2.nodeShapeStack = false;
              emit(Parser2.currentNodeShape = $$[$0], Parser2.factory.namedNode(RDF_TYPE), Parser2.factory.namedNode(SH + "NodeShape"));
              break;
            case 10:
              this.$ = emit(Parser2.currentNodeShape, Parser2.factory.namedNode(RDF_TYPE), Parser2.factory.namedNode(RDFS + "Class"));
              break;
            case 11:
              this.$ = ensureExtended();
              break;
            case 13:
              this.$ = $$[$0].forEach((e) => emit(Parser2.currentNodeShape, $$[$0 - 1], e));
              break;
            case 14:
              this.$ = [$$[$0 - 1], ...$$[$0]];
              break;
            case 18:
              this.$ = addList($$[$0 - 1], true);
              break;
            case 19:
            case 34:
            case 42:
            case 60:
            case 63:
              this.$ = $$[$0];
              break;
            case 20:
              Parser2.tempCurrentNodeShape = Parser2.currentNodeShape;
              this.$ = Parser2.currentNodeShape = blank();
              break;
            case 21:
              Parser2.currentNodeShape = Parser2.tempCurrentNodeShape;
              break;
            case 22:
            case 31:
              this.$ = $$[$0 - 2];
              break;
            case 23:
              Parser2.tempCurrentNodeShape = Parser2.currentNodeShape;
              Parser2.currentNodeShape = Parser2.currentPropertyNode;
              break;
            case 24:
              Parser2.currentNodeShape = Parser2.tempCurrentNodeShape;
              break;
            case 26:
              Parser2.currentNodeShape = $$[$0];
              break;
            case 29:
              if (!Parser2.nodeShapeStack) {
                Parser2.nodeShapeStack = [];
              } else {
                Parser2.nodeShapeStack.push(Parser2.currentNodeShape);
                emit(
                  // In the grammar a path signals the start of a new property declaration
                  Parser2.currentPropertyNode,
                  Parser2.factory.namedNode(SH + "node"),
                  Parser2.currentNodeShape = blank()
                );
              }
              this.$ = Parser2.currentNodeShape;
              break;
            case 30:
              if (Parser2.nodeShapeStack.length > 0) {
                Parser2.currentNodeShape = Parser2.nodeShapeStack.pop();
              }
              break;
            case 32:
              this.$ = $$[$0].forEach((node) => {
                emit(Parser2.currentNodeShape, Parser2.factory.namedNode(SH + "targetClass"), node);
              });
              break;
            case 35:
              this.$ = emit(Parser2.currentNodeShape, Parser2.factory.namedNode(SH + $$[$0][0]), $$[$0][1]);
              break;
            case 36:
              break;
            case 37:
              const o2 = addList([$$[$0 - 1], ...$$[$0]].map((elem) => {
                const x = blank();
                emit(x, Parser2.factory.namedNode(SH + elem[0]), elem[1]);
                return x;
              }));
              this.$ = ["or", o2];
              break;
            case 39:
            case 46:
              this.$ = chainProperty("not", ...$$[$0]);
              break;
            case 40:
            case 50:
              this.$ = [$$[$0 - 2], $$[$0]];
              break;
            case 43:
              this.$ = $$[$0] && emitProperty(...$$[$0]);
              break;
            case 44:
              this.$ = emitProperty(
                "or",
                addList([$$[$0 - 1], ...$$[$0]].map((elem) => {
                  const x = blank();
                  emit(x, Parser2.factory.namedNode(SH + elem[0]), elem[1]);
                  return x;
                }))
              );
              break;
            case 47:
              this.$ = [datatypes[$$[$0].value] ? "datatype" : "class", $$[$0]];
              break;
            case 48:
              this.$ = ["nodeKind", Parser2.factory.namedNode(SH + $$[$0])];
              break;
            case 49:
              this.$ = ["node", Parser2.factory.namedNode($$[$0])];
              break;
            case 51:
              this.$ = void 0;
              break;
            case 53:
              this.$ = $$[$0] > 0 && emitProperty("minCount", createTypedLiteral($$[$0], XSD_INTEGER));
              break;
            case 54:
              this.$ = emitProperty("maxCount", createTypedLiteral($$[$0], XSD_INTEGER));
              break;
            case 56:
              this.$ = expandPrefix($$[$0].slice(1));
              break;
            case 57:
              this.$ = resolveIRI($$[$0]);
              break;
            case 59:
              emit(
                // In the grammar a path signals the start of a new property declaration
                Parser2.currentNodeShape,
                Parser2.factory.namedNode(SH + "property"),
                Parser2.currentPropertyNode = blank()
              );
              emitProperty("path", $$[$0]);
              break;
            case 62:
              const n = blank();
              emit(
                n,
                Parser2.factory.namedNode(SH + "alternativePath"),
                addList([$$[$0 - 1], ...$$[$0]])
              );
              this.$ = n;
              break;
            case 65:
              this.$ = addList([$$[$0 - 1], ...$$[$0]]);
              break;
            case 67:
              emit(this.$ = blank(), Parser2.factory.namedNode(SH + $$[$0]), $$[$0 - 1]);
              break;
            case 69:
              emit(this.$ = blank(), Parser2.factory.namedNode(SH + "inversePath"), $$[$0]);
              break;
            case 71:
              this.$ = "zeroOrOnePath";
              break;
            case 72:
              this.$ = "zeroOrMorePath";
              break;
            case 73:
              this.$ = "oneOrMorePath";
              break;
            case 75:
              this.$ = $$[$0 - 1];
              break;
            case 77:
              this.$ = addList($$[$0 - 1]);
              break;
            case 80:
              this.$ = Parser2.factory.namedNode(resolveIRI($$[$0]));
              break;
            case 81:
              this.$ = Parser2.factory.namedNode(expandPrefix($$[$0]));
              break;
            case 82:
              this.$ = ensureExtended(Parser2.factory.namedNode(RDF_TYPE));
              break;
            case 83:
              this.$ = createTypedLiteral($$[$0]);
              break;
            case 84:
              this.$ = createLangLiteral($$[$0 - 1], $$[$0].substr(1).toLowerCase());
              break;
            case 85:
              this.$ = createTypedLiteral($$[$0 - 2], $$[$0]);
              break;
            case 86:
              this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
              break;
            case 87:
              this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
              break;
            case 88:
              this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_DOUBLE);
              break;
            case 89:
              this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_BOOLEAN);
              break;
            case 90:
              this.$ = unescapeString($$[$0], 1);
              break;
            case 91:
              this.$ = unescapeString($$[$0], 3);
              break;
            case 92:
            case 96:
            case 106:
            case 108:
            case 110:
            case 112:
            case 128:
            case 138:
              this.$ = [];
              break;
            case 93:
            case 97:
            case 107:
            case 109:
            case 111:
            case 113:
            case 115:
            case 117:
            case 123:
            case 129:
            case 131:
            case 135:
            case 137:
            case 139:
              $$[$0 - 1].push($$[$0]);
              break;
            case 114:
            case 116:
            case 122:
            case 130:
            case 134:
            case 136:
              this.$ = [$$[$0]];
              break;
          }
        },
        table: [o($V0, [2, 92], { 3: 1, 4: 2 }), { 1: [3] }, o($V1, [2, 96], { 5: 3, 8: 4, 9: 5, 10: 6, 11: 7, 12: [1, 8], 14: [1, 9], 15: [1, 10] }), o($V2, [2, 110], { 6: 11, 124: 12, 54: 13, 19: 14, 24: 15, 20: [1, 16], 25: [1, 17] }), o($V0, [2, 93]), o($V0, [2, 2]), o($V0, [2, 3]), o($V0, [2, 4]), { 13: [1, 18] }, { 13: [1, 19] }, { 16: [1, 20] }, { 7: [1, 21] }, o($V1, [2, 97]), { 7: [2, 28], 13: $V3, 16: $V4, 18: 24, 51: 23, 52: 22, 114: 26, 115: $V5, 130: $V6 }, o($V1, [2, 94]), o($V1, [2, 95]), { 13: $V3, 16: $V4, 17: 30, 18: 31, 114: 26, 115: $V5, 130: $V6 }, { 13: $V3, 16: $V4, 17: 32, 18: 31, 114: 26, 115: $V5, 130: $V6 }, o($V0, [2, 5]), o($V0, [2, 6]), { 13: [1, 33] }, { 1: [2, 1] }, o($V2, [2, 111]), { 13: $V3, 16: $V4, 18: 36, 29: 34, 30: 35, 114: 26, 115: $V5, 130: $V6 }, o($V7, [2, 26]), o($V8, [2, 80]), o($V8, [2, 81]), o($V8, [2, 82]), o($V8, [2, 140]), o($V8, [2, 141]), o($V9, [2, 98], { 21: 37, 60: 38, 61: [1, 39] }), o([28, 56, 61], [2, 8]), { 26: 40, 27: 41, 28: $Va, 56: [2, 102] }, o($V0, [2, 7]), { 53: [1, 43] }, o($Vb, [2, 104], { 31: 44, 27: 45, 28: $Va }), { 13: $V3, 16: $V4, 18: 51, 32: 46, 33: 47, 35: 48, 36: 49, 37: 50, 38: $Vc, 43: 53, 44: $Vd, 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, { 22: 69, 27: 70, 28: $Va, 56: [2, 100] }, o($V9, [2, 99]), { 13: $V3, 16: $V4, 18: 72, 62: 71, 114: 26, 115: $V5, 130: $V6 }, { 23: 73, 55: 74, 56: $Vn }, { 56: [2, 103] }, { 13: $V3, 16: $V4, 18: 36, 29: 76, 30: 35, 114: 26, 115: $V5, 130: $V6 }, o($V2, [2, 27]), o($Vb, [2, 12]), o($Vb, [2, 105]), o($Vo, [2, 13]), o($Vp, [2, 106], { 34: 77 }), o($Vq, [2, 15]), o($Vq, [2, 16]), o($Vq, [2, 17]), o($Vr, [2, 78]), o($Vr, [2, 79]), { 13: $V3, 16: $V4, 18: 36, 29: 78, 30: 35, 114: 26, 115: $V5, 130: $V6 }, o($Vs, [2, 108], { 39: 79 }), o($Vr, [2, 83], { 117: [1, 80], 118: [1, 81] }), o($Vr, [2, 86]), o($Vr, [2, 87]), o($Vr, [2, 88]), o($Vr, [2, 89]), o($V7, [2, 20]), o($Vt, [2, 90]), o($Vt, [2, 91]), o($Vr, [2, 142]), o($Vr, [2, 143]), o($Vt, [2, 144]), o($Vt, [2, 145]), o($Vt, [2, 146]), o($Vt, [2, 147]), { 23: 82, 55: 74, 56: $Vn }, { 56: [2, 101] }, o($V9, [2, 32], { 114: 26, 18: 83, 13: $V3, 16: $V4, 115: $V5, 130: $V6 }), o($Vu, [2, 114]), o($V1, [2, 10]), o($Vv, [2, 112], { 59: 84 }), o($Vv, [2, 29]), o($Vb, [2, 11]), o($Vo, [2, 14], { 41: 85, 42: [1, 86] }), { 45: 87, 46: [1, 88] }, { 13: $V3, 16: $V4, 18: 51, 33: 90, 35: 48, 36: 49, 37: 50, 38: $Vc, 40: [1, 89], 43: 53, 44: $Vd, 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, o($Vr, [2, 84]), { 13: $V3, 16: $V4, 18: 91, 114: 26, 115: $V5, 130: $V6 }, o($V1, [2, 9]), o($Vu, [2, 115]), { 13: $V3, 16: $V4, 18: 115, 38: $Vw, 57: 92, 58: [1, 94], 63: 93, 64: 95, 68: 102, 69: 98, 70: 100, 72: 104, 73: 105, 74: 107, 77: 97, 78: 99, 87: $Vx, 96: $Vy, 97: 101, 99: 103, 103: 106, 105: 109, 106: 113, 108: 110, 109: $Vz, 114: 26, 115: $V5, 125: 96, 126: $VA, 130: $V6 }, o($Vp, [2, 107]), { 13: $V3, 16: $V4, 18: 51, 33: 117, 35: 48, 36: 49, 37: 50, 38: $Vc, 43: 53, 44: $Vd, 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, o($Vq, [2, 22]), o($Vq, [2, 21]), o($Vq, [2, 18]), o($Vs, [2, 109]), o($Vr, [2, 85]), o($VB, [2, 31]), o($Vv, [2, 113]), o($VB, [2, 30]), { 47: 120, 48: [1, 121], 50: 119, 53: [2, 120], 65: 118 }, o($VC, [2, 118], { 70: 100, 68: 102, 72: 104, 73: 105, 74: 107, 69: 122, 87: $Vx, 96: $Vy, 126: $VA }), o($VC, [2, 119]), o($VD, [2, 116]), o($VE, [2, 128], { 79: 123 }), o($VD, [2, 35]), o($VE, [2, 59]), o($VD, [2, 36], { 71: 124, 66: 125, 67: $VF }), o($VG, [2, 61], { 100: 127, 98: 128, 67: $VH }), o($VI, [2, 38]), { 72: 130, 74: 107, 87: $Vx, 126: $VA }, o($VJ, [2, 64], { 104: 131, 101: 132, 102: $VK }), { 75: [1, 134] }, o([13, 16, 56, 85, 87, 95, 115, 126, 128, 129, 130], [2, 58]), o($VL, [2, 68]), { 13: $V3, 16: $V4, 18: 115, 38: $Vw, 105: 135, 106: 113, 114: 26, 115: $V5, 130: $V6 }, { 75: [2, 124] }, { 75: [2, 125] }, o($VL, [2, 66], { 107: 136, 93: [1, 138], 110: [1, 137], 111: [1, 139] }), o([13, 16, 38, 115, 130], [2, 70]), o($VM, [2, 74]), { 13: $V3, 16: $V4, 18: 115, 38: $Vw, 97: 140, 99: 103, 103: 106, 105: 109, 106: 113, 108: 110, 109: $Vz, 114: 26, 115: $V5, 130: $V6 }, o($Vp, [2, 19]), { 53: [1, 141] }, { 53: [2, 121] }, { 13: $V3, 16: $V4, 18: 36, 29: 142, 30: 35, 114: 26, 115: $V5, 130: $V6 }, o($V7, [2, 23]), o($VD, [2, 117]), o($VC, [2, 41], { 114: 26, 55: 74, 127: 143, 88: 144, 82: 145, 81: 147, 84: 148, 73: 149, 18: 150, 86: 152, 23: 154, 94: 155, 13: $V3, 16: $V4, 44: [1, 146], 56: $Vn, 85: $VN, 87: $VO, 95: $VP, 96: $Vy, 115: $V5, 128: $VQ, 129: $VR, 130: $V6 }), o($VD, [2, 37], { 66: 159, 67: $VF }), o($VI, [2, 122]), { 68: 160, 72: 104, 73: 105, 74: 107, 87: $Vx, 96: $Vy, 126: $VA }, o($VG, [2, 62], { 98: 161, 67: $VH }), o($VJ, [2, 134]), { 13: $V3, 16: $V4, 18: 115, 38: $Vw, 99: 162, 103: 106, 105: 109, 106: 113, 108: 110, 109: $Vz, 114: 26, 115: $V5, 130: $V6 }, o($VI, [2, 39]), o($VJ, [2, 65], { 101: 163, 102: $VK }), o($VL, [2, 136]), { 13: $V3, 16: $V4, 18: 115, 38: $Vw, 103: 164, 105: 109, 106: 113, 108: 110, 109: $Vz, 114: 26, 115: $V5, 130: $V6 }, { 13: $V3, 16: $V4, 18: 51, 35: 166, 44: $VS, 76: 165, 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, o($VL, [2, 69]), o($VL, [2, 67]), o($VL, [2, 71]), o($VL, [2, 72]), o($VL, [2, 73]), { 40: [1, 168] }, o($Vv, [2, 33]), { 48: [1, 170], 49: 169 }, o($VE, [2, 129]), o($VE, [2, 126]), o($VE, [2, 127]), { 89: 171, 92: [1, 172] }, o($VE, [2, 43], { 83: 173, 80: 174, 67: $VT }), o($VU, [2, 45]), { 13: $V3, 16: $V4, 18: 150, 23: 154, 55: 74, 56: $Vn, 84: 176, 85: $VN, 86: 152, 87: $VO, 94: 155, 95: $VP, 114: 26, 115: $V5, 128: $VQ, 129: $VR, 130: $V6 }, o($VU, [2, 47]), o($VU, [2, 48]), o($VU, [2, 49]), { 75: [1, 177] }, o($VU, [2, 51]), o($VU, [2, 56]), { 13: [1, 178] }, o($VU, [2, 132]), o($VU, [2, 133]), o($VI, [2, 123]), o($VI, [2, 34]), o($VJ, [2, 135]), o($VJ, [2, 60]), o($VL, [2, 137]), o($VL, [2, 63]), o($VI, [2, 40]), o($VV, [2, 76]), o($VW, [2, 138], { 112: 179 }), o($VM, [2, 75]), { 53: [2, 25] }, { 53: [2, 24] }, { 90: [1, 180] }, { 90: [2, 53] }, o($VE, [2, 44], { 80: 181, 67: $VT }), o($VU, [2, 130]), { 13: $V3, 16: $V4, 18: 150, 23: 154, 55: 74, 56: $Vn, 73: 149, 81: 182, 84: 148, 85: $VN, 86: 152, 87: $VO, 94: 155, 95: $VP, 96: $Vy, 114: 26, 115: $V5, 128: $VQ, 129: $VR, 130: $V6 }, o($VU, [2, 46]), { 13: $V3, 16: $V4, 18: 51, 35: 166, 44: $VS, 76: 183, 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, o($VU, [2, 57]), { 13: $V3, 16: $V4, 18: 51, 35: 185, 46: [1, 184], 92: $Ve, 113: 52, 114: 26, 115: $V5, 116: 55, 119: $Vf, 120: $Vg, 121: 59, 122: 61, 123: 62, 130: $V6, 131: $Vh, 132: $Vi, 133: $Vj, 134: $Vk, 135: $Vl, 136: $Vm }, { 91: 186, 92: [1, 187], 93: [1, 188] }, o($VU, [2, 131]), o($VU, [2, 42]), o($VU, [2, 50]), o($VV, [2, 77]), o($VW, [2, 139]), { 46: [1, 189] }, { 46: [2, 54] }, { 46: [2, 55] }, o($VE, [2, 52])],
        defaultActions: { 21: [2, 1], 41: [2, 103], 70: [2, 101], 111: [2, 124], 112: [2, 125], 119: [2, 121], 169: [2, 25], 170: [2, 24], 172: [2, 53], 187: [2, 54], 188: [2, 55] },
        parseError: function parseError(str, hash2) {
          if (hash2.recoverable) {
            this.trace(str);
          } else {
            var error = new Error(str);
            error.hash = hash2;
            throw error;
          }
        },
        parse: function parse2(input) {
          var self2 = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          var args = lstack.slice.call(arguments, 1);
          var lexer2 = Object.create(this.lexer);
          var sharedState = { yy: {} };
          for (var k in this.yy) {
            if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
              sharedState.yy[k] = this.yy[k];
            }
          }
          lexer2.setInput(input, sharedState.yy);
          sharedState.yy.lexer = lexer2;
          sharedState.yy.parser = this;
          if (typeof lexer2.yylloc == "undefined") {
            lexer2.yylloc = {};
          }
          var yyloc = lexer2.yylloc;
          lstack.push(yyloc);
          var ranges = lexer2.options && lexer2.options.ranges;
          if (typeof sharedState.yy.parseError === "function") {
            this.parseError = sharedState.yy.parseError;
          } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
          }
          function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
          }
          _token_stack:
            var lex = function() {
              var token;
              token = lexer2.lex() || EOF;
              if (typeof token !== "number") {
                token = self2.symbols_[token] || token;
              }
              return token;
            };
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
          while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
              }
              action = table[state] && table[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer2.showPosition) {
                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + lexer2.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
              }
              this.parseError(errStr, {
                text: lexer2.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer2.yylineno,
                loc: yyloc,
                expected
              });
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(lexer2.yytext);
                lstack.push(lexer2.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = lexer2.yyleng;
                  yytext = lexer2.yytext;
                  yylineno = lexer2.yylineno;
                  yyloc = lexer2.yylloc;
                  if (recovering > 0) {
                    recovering--;
                  }
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                  yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                  ];
                }
                r = this.performAction.apply(yyval, [
                  yytext,
                  yyleng,
                  yylineno,
                  sharedState.yy,
                  action[1],
                  vstack,
                  lstack
                ].concat(args));
                if (typeof r !== "undefined") {
                  return r;
                }
                if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      const RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#", RDF_TYPE = RDF + "type", RDF_FIRST = RDF + "first", RDF_REST = RDF + "rest", RDF_NIL = RDF + "nil", XSD = "http://www.w3.org/2001/XMLSchema#", XSD_INTEGER = XSD + "integer", XSD_DECIMAL = XSD + "decimal", XSD_DOUBLE = XSD + "double", XSD_BOOLEAN = XSD + "boolean", SH = "http://www.w3.org/ns/shacl#", OWL = "http://www.w3.org/2002/07/owl#", RDFS = "http://www.w3.org/2000/01/rdf-schema#";
      const datatypes = {
        [XSD_INTEGER]: true,
        [XSD_DECIMAL]: true,
        [XSD + "float"]: true,
        [XSD_DOUBLE]: true,
        [XSD + "string"]: true,
        [XSD_BOOLEAN]: true,
        [XSD + "dateTime"]: true,
        [XSD + "nonPositiveInteger"]: true,
        [XSD + "negativeInteger"]: true,
        [XSD + "long"]: true,
        [XSD + "int"]: true,
        [XSD + "short"]: true,
        [XSD + "byte"]: true,
        [XSD + "nonNegativeInteger"]: true,
        [XSD + "unsignedLong"]: true,
        [XSD + "unsignedShort"]: true,
        [XSD + "unsignedByte"]: true,
        [XSD + "positiveInteger"]: true,
        [RDF + "langString"]: true
      };
      function addList(elems, ttlList = false) {
        let i = 0, l = elems.length;
        if (ttlList && l === 0) {
          return Parser2.factory.namedNode(RDF_NIL);
        }
        const list = head = blank();
        if (l === 0) {
          emit(head, Parser2.factory.namedNode(RDF_REST), Parser2.factory.namedNode(RDF_NIL));
        }
        elems.forEach((elem) => {
          if (elem === void 0) {
            throw new Error("b");
          }
          emit(head, Parser2.factory.namedNode(RDF_FIRST), elem);
          emit(head, Parser2.factory.namedNode(RDF_REST), head = ++i < l ? blank() : Parser2.factory.namedNode(RDF_NIL));
        });
        return list;
      }
      function resolveIRI(iri) {
        return Parser2.n3Parser._resolveIRI(iri[0] === "<" ? iri.substring(1, iri.length - 1) : iri);
      }
      function expandPrefix(iri) {
        const namePos = iri.indexOf(":"), prefix = iri.substr(0, namePos), expansion = Parser2.prefixes[prefix];
        if (!expansion) throw new Error("Unknown prefix: " + prefix);
        return resolveIRI(expansion + iri.substr(namePos + 1));
      }
      function toInt(string) {
        return parseInt(string, 10);
      }
      function createTypedLiteral(value, type) {
        if (type && type.termType !== "NamedNode") {
          type = Parser2.factory.namedNode(type);
        }
        return Parser2.factory.literal(value, type);
      }
      function createLangLiteral(value, lang) {
        return Parser2.factory.literal(value, lang);
      }
      function blank(name) {
        if (typeof name === "string") {
          if (name.startsWith("e_")) return Parser2.factory.blankNode(name);
          return Parser2.factory.blankNode("e_" + name);
        }
        return Parser2.factory.blankNode("g_" + blankId++);
      }
      ;
      var blankId = 0;
      Parser2._resetBlanks = function() {
        blankId = 0;
      };
      var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g, escapeReplacements = {
        "\\": "\\",
        "'": "'",
        '"': '"',
        "t": "	",
        "b": "\b",
        "n": "\n",
        "r": "\r",
        "f": "\f"
      }, fromCharCode = String.fromCharCode;
      function unescapeString(string, trimLength) {
        return Parser2.n3Parser._lexer._unescape(string.substring(trimLength, string.length - trimLength));
      }
      function emit(s, p, o2) {
        if (!s.termType || !p.termType || p.value.includes(",") || !o2.termType) {
          throw new Error(`boo ${s.value} ${p.value} ${o2.value}`);
        }
        Parser2.onQuad(Parser2.factory.quad(s, p, o2));
      }
      function emitProperty(p, o2) {
        emit(Parser2.currentPropertyNode, Parser2.factory.namedNode(SH + p), o2);
      }
      function chainProperty(name, p, o2) {
        const b = blank();
        emit(b, Parser2.factory.namedNode(SH + p), o2);
        return [name, b];
      }
      function ensureExtended(input) {
        if (!Parser2.extended) {
          throw new Error("Encountered extended SHACLC syntax; but extended parsing is disabled");
        }
        return input;
      }
      var lexer = /* @__PURE__ */ function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str, hash2) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str, hash2);
            } else {
              throw new Error(str);
            }
          },
          // resets the lexer, sets new input
          setInput: function(input, yy) {
            this.yy = yy || this.yy || {};
            this._input = input;
            this._more = this._backtrack = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
            };
            if (this.options.ranges) {
              this.yylloc.range = [0, 0];
            }
            this.offset = 0;
            return this;
          },
          // consumes and returns one char from the input
          input: function() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges) {
              this.yylloc.range[1]++;
            }
            this._input = this._input.slice(1);
            return ch;
          },
          // unshifts one char (or a string) into the input
          unput: function(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            this.yyleng = this.yytext.length;
            return this;
          },
          // When called from action, caches matched text and appends it on next action
          more: function() {
            this._more = true;
            return this;
          },
          // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
          reject: function() {
            if (this.options.backtrack_lexer) {
              this._backtrack = true;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
            return this;
          },
          // retain first n characters of the match
          less: function(n) {
            this.unput(this.match.slice(n));
          },
          // displays already matched input, i.e. for error messages
          pastInput: function() {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          // displays upcoming input, i.e. for error messages
          upcomingInput: function() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          // displays the character position where the lexing error occurred, i.e. for error messages
          showPosition: function() {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
          },
          // test the lexed token: return FALSE when not a match, otherwise return token
          test_match: function(match, indexed_rule) {
            var token, lines, backup;
            if (this.options.backtrack_lexer) {
              backup = {
                yylineno: this.yylineno,
                yylloc: {
                  first_line: this.yylloc.first_line,
                  last_line: this.last_line,
                  first_column: this.yylloc.first_column,
                  last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
              };
              if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
              }
            }
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno += lines.length;
            }
            this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
            };
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input) {
              this.done = false;
            }
            if (token) {
              return token;
            } else if (this._backtrack) {
              for (var k in backup) {
                this[k] = backup[k];
              }
              return false;
            }
            return false;
          },
          // return next match in input
          next: function() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) {
              this.done = true;
            }
            var token, match, tempMatch, index;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                  token = this.test_match(tempMatch, rules[i]);
                  if (token !== false) {
                    return token;
                  } else if (this._backtrack) {
                    match = false;
                    continue;
                  } else {
                    return false;
                  }
                } else if (!this.options.flex) {
                  break;
                }
              }
            }
            if (match) {
              token = this.test_match(match, rules[index]);
              if (token !== false) {
                return token;
              }
              return false;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
          },
          // return next match that has a token
          lex: function lex() {
            var r = this.next();
            if (r) {
              return r;
            } else {
              return this.lex();
            }
          },
          // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          // pop the previously active lexer condition state off the condition stack
          popState: function popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
              return this.conditionStack.pop();
            } else {
              return this.conditionStack[0];
            }
          },
          // produce the lexer rule set which is active for the currently active lexer condition state
          _currentRules: function _currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            } else {
              return this.conditions["INITIAL"].rules;
            }
          },
          // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
          topState: function topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) {
              return this.conditionStack[n];
            } else {
              return "INITIAL";
            }
          },
          // alias for begin(condition)
          pushState: function pushState(condition) {
            this.begin(condition);
          },
          // return the number of states currently on the stack
          stateStackSize: function stateStackSize() {
            return this.conditionStack.length;
          },
          options: { "flex": true, "case-insensitive": true },
          performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
              case 0:
                break;
              case 1:
                return 12;
                break;
              case 2:
                return 14;
                break;
              case 3:
                return 15;
                break;
              case 4:
                return 25;
                break;
              case 5:
                return 20;
                break;
              case 6:
                return 131;
                break;
              case 7:
                return 132;
                break;
              case 8:
                return 85;
                break;
              case 9:
                return 126;
                break;
              case 10:
                return 87;
                break;
              case 11:
                return "PASS";
                break;
              case 12:
                return "COMMENT";
                break;
              case 13:
                return 13;
                break;
              case 14:
                return 16;
                break;
              case 15:
                return 130;
                break;
              case 16:
                return 129;
                break;
              case 17:
                return 128;
                break;
              case 18:
                return 117;
                break;
              case 19:
                return 92;
                break;
              case 20:
                return 119;
                break;
              case 21:
                return 120;
                break;
              case 22:
                return "EXPONENT";
                break;
              case 23:
                return 133;
                break;
              case 24:
                return 134;
                break;
              case 25:
                return 135;
                break;
              case 26:
                return 136;
                break;
              case 27:
                return 61;
                break;
              case 28:
                return 90;
                break;
              case 29:
                return 58;
                break;
              case 30:
                return 56;
                break;
              case 31:
                return 38;
                break;
              case 32:
                return 40;
                break;
              case 33:
                return 44;
                break;
              case 34:
                return 46;
                break;
              case 35:
                return 110;
                break;
              case 36:
                return 93;
                break;
              case 37:
                return 111;
                break;
              case 38:
                return 67;
                break;
              case 39:
                return 118;
                break;
              case 40:
                return 53;
                break;
              case 41:
                return 96;
                break;
              case 42:
                return 102;
                break;
              case 43:
                return 75;
                break;
              case 44:
                return 95;
                break;
              case 45:
                return 109;
                break;
              case 46:
                return 28;
                break;
              case 47:
                return 42;
                break;
              case 48:
                return 48;
                break;
              case 49:
                return 115;
                break;
              case 50:
                return 7;
                break;
              case 51:
                console.log(yy_.yytext);
                break;
            }
          },
          rules: [/^(?:\s+|#[^\n\r]*)/i, /^(?:BASE)/i, /^(?:IMPORTS)/i, /^(?:PREFIX)/i, /^(?:shapeClass)/i, /^(?:shape)/i, /^(?:true)/i, /^(?:false)/i, /^(?:(BlankNode|IRI|Literal|BlankNodeOrIRI|BlankNodeOrLiteral|IRIOrLiteral\b))/i, /^(?:(targetNode|targetObjectsOf|targetSubjectsOf\b))/i, /^(?:(deactivated|severity|message|class|datatype|nodeKind|minExclusive|minInclusive|maxExclusive|maxInclusive|minLength|maxLength|pattern|flags|languageIn|uniqueLang|equals|disjoint|lessThan|lessThanOrEquals|qualifiedValueShape|qualifiedMinCount|qualifiedMaxCount|qualifiedValueShapesDisjoint|closed|ignoredProperties|hasValue|in))/i, /^(?:([ \t\r\n]+))/i, /^(?:(#[\r\n]*))/i, /^(?:(<([^=<>\"\{\}\|\^`\\\u0000-\u0020]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/i, /^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.)*((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i, /^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.)*((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i, /^(?:(@(([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.)*((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i, /^(?:(@((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.)*((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD])|_\b)|-|[0-9]|[\u00B7]|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i, /^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i, /^(?:([+-]?[0-9]+))/i, /^(?:([+-]?[0-9]*\.[0-9]+))/i, /^(?:([+-]?([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.?[0-9]+([eE][+-]?[0-9]+))))/i, /^(?:([eE][+-]?[0-9]+))/i, /^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"\']))*'))/i, /^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"\']))*"))/i, /^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"\'])))*'''))/i, /^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"\'])))*"""))/i, /^(?:->)/i, /^(?:\.\.)/i, /^(?:\})/i, /^(?:\{)/i, /^(?:\()/i, /^(?:\))/i, /^(?:\[)/i, /^(?:\])/i, /^(?:\?)/i, /^(?:\*)/i, /^(?:\+)/i, /^(?:\|)/i, /^(?:\^\^)/i, /^(?:\.)/i, /^(?:!)/i, /^(?:\/)/i, /^(?:=)/i, /^(?:@)/i, /^(?:\^)/i, /^(?:;)/i, /^(?:,)/i, /^(?:%)/i, /^(?:a)/i, /^(?:$)/i, /^(?:.)/i],
          conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "inclusive": true } }
        };
        return lexer2;
      }();
      parser.lexer = lexer;
      function Parser2() {
        this.yy = {};
      }
      Parser2.prototype = parser;
      parser.Parser = Parser2;
      return new Parser2();
    }();
    module.exports = ShaclcParser;
  }
});

// ../../lipdjs/node_modules/shaclc-parse/lib/index.js
var require_lib76 = __commonJS({
  "../../lipdjs/node_modules/shaclc-parse/lib/index.js"(exports, module) {
    var ShaclcParser = require_ShaclcParser().Parser;
    var N3 = (init_src(), __toCommonJS(src_exports));
    var Parser2 = class {
      constructor() {
      }
      parse(str, { extendedSyntax, baseIRI } = {}) {
        this._parser = new ShaclcParser();
        this._parser.Parser.factory = N3.DataFactory;
        this._parser.Parser.base = N3.DataFactory.namedNode(baseIRI || "urn:x-base:default");
        this._parser.Parser.extended = extendedSyntax === true;
        this._parser.Parser.prefixes = {
          rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
          rdfs: "http://www.w3.org/2000/01/rdf-schema#",
          sh: "http://www.w3.org/ns/shacl#",
          xsd: "http://www.w3.org/2001/XMLSchema#",
          owl: "http://www.w3.org/2002/07/owl#"
        };
        this._parser.Parser.currentNodeShape = void 0;
        this._parser.Parser.currentPropertyNode = void 0;
        this._parser.Parser.nodeShapeStack = [];
        this._parser.Parser.tempCurrentNodeShape = void 0;
        this._parser.Parser.n3Parser = new N3.Parser({ baseIRI: baseIRI || "urn:x-base:default" });
        const arr = [];
        this._parser.Parser.onQuad = (quad) => {
          arr.push(quad);
        };
        this._parser.parse(str);
        arr.prefixes = this._parser.Parser.prefixes;
        return arr;
      }
    };
    module.exports.Parser = Parser2;
    module.exports.parse = function parse2(str, options) {
      const parser = new Parser2();
      return parser.parse(str, options);
    };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/PrefixWrappingIterator.js
var require_PrefixWrappingIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/PrefixWrappingIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrefixWrappingIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var PrefixWrappingIterator = class extends asynciterator_1.WrappingIterator {
      constructor(source) {
        super(source == null ? void 0 : source.then((src) => {
          this.prefixes = src.prefixes;
          return src;
        }));
      }
      read() {
        if (this.prefixes) {
          for (const args of Object.entries(this.prefixes)) {
            this.emit("prefix", ...args);
          }
          delete this.prefixes;
        }
        return super.read();
      }
    };
    exports.PrefixWrappingIterator = PrefixWrappingIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/ActorRdfParseShaclc.js
var require_ActorRdfParseShaclc = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/ActorRdfParseShaclc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseShaclc = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var stream_to_string_1 = require_dist2();
    var readable_stream_1 = require_browser2();
    var shaclc_parse_1 = require_lib76();
    var PrefixWrappingIterator_1 = require_PrefixWrappingIterator();
    var ActorRdfParseShaclc = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/shaclc": 1.0,
       *       "text/shaclc-ext": 0.5
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/shaclc": "http://www.w3.org/ns/formats/Shaclc",
       *       "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, _context) {
        const prefixIterator = new PrefixWrappingIterator_1.PrefixWrappingIterator(
          // TODO: pass data factory
          (0, stream_to_string_1.stringify)(action.data).then((str) => {
            var _a;
            return (0, shaclc_parse_1.parse)(str, {
              extendedSyntax: mediaType === "text/shaclc-ext",
              baseIRI: (_a = action.metadata) == null ? void 0 : _a.baseIRI
            });
          })
        );
        const readable = new readable_stream_1.Readable({ objectMode: true });
        prefixIterator.on("prefix", (...args) => readable.emit("prefix", ...args));
        return {
          data: readable.wrap(prefixIterator),
          metadata: { triples: true }
        };
      }
    };
    exports.ActorRdfParseShaclc = ActorRdfParseShaclc;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/index.js
var require_lib77 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-shaclc/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseShaclc(), exports);
  }
});

// ../../lipdjs/node_modules/entities/dist/commonjs/generated/decode-data-html.js
var require_decode_data_html3 = __commonJS({
  "../../lipdjs/node_modules/entities/dist/commonjs/generated/decode-data-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.htmlDecodeTree = void 0;
    exports.htmlDecodeTree = new Uint16Array(
      // prettier-ignore
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((c) => c.charCodeAt(0))
    );
  }
});

// ../../lipdjs/node_modules/entities/dist/commonjs/generated/decode-data-xml.js
var require_decode_data_xml3 = __commonJS({
  "../../lipdjs/node_modules/entities/dist/commonjs/generated/decode-data-xml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.xmlDecodeTree = void 0;
    exports.xmlDecodeTree = new Uint16Array(
      // prettier-ignore
      "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((c) => c.charCodeAt(0))
    );
  }
});

// ../../lipdjs/node_modules/entities/dist/commonjs/decode-codepoint.js
var require_decode_codepoint3 = __commonJS({
  "../../lipdjs/node_modules/entities/dist/commonjs/decode-codepoint.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromCodePoint = void 0;
    exports.replaceCodePoint = replaceCodePoint;
    exports.decodeCodePoint = decodeCodePoint;
    var decodeMap = /* @__PURE__ */ new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins
    (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
      let output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function replaceCodePoint(codePoint) {
      var _a2;
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return 65533;
      }
      return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
    }
    function decodeCodePoint(codePoint) {
      return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
    }
  }
});

// ../../lipdjs/node_modules/entities/dist/commonjs/decode.js
var require_decode3 = __commonJS({
  "../../lipdjs/node_modules/entities/dist/commonjs/decode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = void 0;
    exports.determineBranch = determineBranch;
    exports.decodeHTML = decodeHTML;
    exports.decodeHTMLAttribute = decodeHTMLAttribute;
    exports.decodeHTMLStrict = decodeHTMLStrict;
    exports.decodeXML = decodeXML;
    var decode_data_html_js_1 = require_decode_data_html3();
    var decode_data_xml_js_1 = require_decode_data_xml3();
    var decode_codepoint_js_1 = require_decode_codepoint3();
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
      CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
      CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
      CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
      CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
      CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
      CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
      CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
      CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
      CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
      CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
    })(CharCodes || (CharCodes = {}));
    var TO_LOWER_BIT = 32;
    var BinTrieFlags;
    (function(BinTrieFlags2) {
      BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
    })(BinTrieFlags || (exports.BinTrieFlags = BinTrieFlags = {}));
    function isNumber(code) {
      return code >= CharCodes.ZERO && code <= CharCodes.NINE;
    }
    function isHexadecimalCharacter(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
    }
    function isAsciiAlphaNumeric(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
    }
    function isEntityInAttributeInvalidEnd(code) {
      return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
    }
    var EntityDecoderState;
    (function(EntityDecoderState2) {
      EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
    })(EntityDecoderState || (EntityDecoderState = {}));
    var DecodingMode;
    (function(DecodingMode2) {
      DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
      DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
      DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
    })(DecodingMode || (exports.DecodingMode = DecodingMode = {}));
    var EntityDecoder = class {
      constructor(decodeTree, emitCodePoint, errors) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        this.state = EntityDecoderState.EntityStart;
        this.consumed = 1;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.decodeMode = DecodingMode.Strict;
      }
      /** Resets the instance to make it reusable. */
      startEntity(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
      }
      /**
       * Write an entity to the decoder. This can be called multiple times with partial entities.
       * If the entity is incomplete, the decoder will return -1.
       *
       * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
       * entity is incomplete, and resume when the next string is written.
       *
       * @param input The string containing the entity (or a continuation of the entity).
       * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      write(input, offset) {
        switch (this.state) {
          case EntityDecoderState.EntityStart: {
            if (input.charCodeAt(offset) === CharCodes.NUM) {
              this.state = EntityDecoderState.NumericStart;
              this.consumed += 1;
              return this.stateNumericStart(input, offset + 1);
            }
            this.state = EntityDecoderState.NamedEntity;
            return this.stateNamedEntity(input, offset);
          }
          case EntityDecoderState.NumericStart: {
            return this.stateNumericStart(input, offset);
          }
          case EntityDecoderState.NumericDecimal: {
            return this.stateNumericDecimal(input, offset);
          }
          case EntityDecoderState.NumericHex: {
            return this.stateNumericHex(input, offset);
          }
          case EntityDecoderState.NamedEntity: {
            return this.stateNamedEntity(input, offset);
          }
        }
      }
      /**
       * Switches between the numeric decimal and hexadecimal states.
       *
       * Equivalent to the `Numeric character reference state` in the HTML spec.
       *
       * @param input The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericStart(input, offset) {
        if (offset >= input.length) {
          return -1;
        }
        if ((input.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
          this.state = EntityDecoderState.NumericHex;
          this.consumed += 1;
          return this.stateNumericHex(input, offset + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(input, offset);
      }
      addToNumericResult(input, start, end, base) {
        if (start !== end) {
          const digitCount = end - start;
          this.result = this.result * Math.pow(base, digitCount) + Number.parseInt(input.substr(start, digitCount), base);
          this.consumed += digitCount;
        }
      }
      /**
       * Parses a hexadecimal numeric entity.
       *
       * Equivalent to the `Hexademical character reference state` in the HTML spec.
       *
       * @param input The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericHex(input, offset) {
        const startIndex = offset;
        while (offset < input.length) {
          const char = input.charCodeAt(offset);
          if (isNumber(char) || isHexadecimalCharacter(char)) {
            offset += 1;
          } else {
            this.addToNumericResult(input, startIndex, offset, 16);
            return this.emitNumericEntity(char, 3);
          }
        }
        this.addToNumericResult(input, startIndex, offset, 16);
        return -1;
      }
      /**
       * Parses a decimal numeric entity.
       *
       * Equivalent to the `Decimal character reference state` in the HTML spec.
       *
       * @param input The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericDecimal(input, offset) {
        const startIndex = offset;
        while (offset < input.length) {
          const char = input.charCodeAt(offset);
          if (isNumber(char)) {
            offset += 1;
          } else {
            this.addToNumericResult(input, startIndex, offset, 10);
            return this.emitNumericEntity(char, 2);
          }
        }
        this.addToNumericResult(input, startIndex, offset, 10);
        return -1;
      }
      /**
       * Validate and emit a numeric entity.
       *
       * Implements the logic from the `Hexademical character reference start
       * state` and `Numeric character reference end state` in the HTML spec.
       *
       * @param lastCp The last code point of the entity. Used to see if the
       *               entity was terminated with a semicolon.
       * @param expectedLength The minimum number of characters that should be
       *                       consumed. Used to validate that at least one digit
       *                       was consumed.
       * @returns The number of characters that were consumed.
       */
      emitNumericEntity(lastCp, expectedLength) {
        var _a;
        if (this.consumed <= expectedLength) {
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
          return 0;
        }
        if (lastCp === CharCodes.SEMI) {
          this.consumed += 1;
        } else if (this.decodeMode === DecodingMode.Strict) {
          return 0;
        }
        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
        if (this.errors) {
          if (lastCp !== CharCodes.SEMI) {
            this.errors.missingSemicolonAfterCharacterReference();
          }
          this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
      }
      /**
       * Parses a named entity.
       *
       * Equivalent to the `Named character reference state` in the HTML spec.
       *
       * @param input The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNamedEntity(input, offset) {
        const { decodeTree } = this;
        let current = decodeTree[this.treeIndex];
        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for (; offset < input.length; offset++, this.excess++) {
          const char = input.charCodeAt(offset);
          this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
          if (this.treeIndex < 0) {
            return this.result === 0 || // If we are parsing an attribute
            this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
            (valueLength === 0 || // And there should be no invalid characters.
            isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
          }
          current = decodeTree[this.treeIndex];
          valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          if (valueLength !== 0) {
            if (char === CharCodes.SEMI) {
              return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
            }
            if (this.decodeMode !== DecodingMode.Strict) {
              this.result = this.treeIndex;
              this.consumed += this.excess;
              this.excess = 0;
            }
          }
        }
        return -1;
      }
      /**
       * Emit a named entity that was not terminated with a semicolon.
       *
       * @returns The number of characters consumed.
       */
      emitNotTerminatedNamedEntity() {
        var _a;
        const { result, decodeTree } = this;
        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
        return this.consumed;
      }
      /**
       * Emit a named entity.
       *
       * @param result The index of the entity in the decode tree.
       * @param valueLength The number of bytes in the entity.
       * @param consumed The number of characters consumed.
       *
       * @returns The number of characters consumed.
       */
      emitNamedEntityData(result, valueLength, consumed) {
        const { decodeTree } = this;
        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
        if (valueLength === 3) {
          this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
      }
      /**
       * Signal to the parser that the end of the input was reached.
       *
       * Remaining data will be emitted and relevant errors will be produced.
       *
       * @returns The number of characters consumed.
       */
      end() {
        var _a;
        switch (this.state) {
          case EntityDecoderState.NamedEntity: {
            return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
          }
          case EntityDecoderState.NumericDecimal: {
            return this.emitNumericEntity(0, 2);
          }
          case EntityDecoderState.NumericHex: {
            return this.emitNumericEntity(0, 3);
          }
          case EntityDecoderState.NumericStart: {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          case EntityDecoderState.EntityStart: {
            return 0;
          }
        }
      }
    };
    exports.EntityDecoder = EntityDecoder;
    function getDecoder(decodeTree) {
      let returnValue = "";
      const decoder = new EntityDecoder(decodeTree, (data) => returnValue += (0, decode_codepoint_js_1.fromCodePoint)(data));
      return function decodeWithTrie(input, decodeMode) {
        let lastIndex = 0;
        let offset = 0;
        while ((offset = input.indexOf("&", offset)) >= 0) {
          returnValue += input.slice(lastIndex, offset);
          decoder.startEntity(decodeMode);
          const length = decoder.write(
            input,
            // Skip the "&"
            offset + 1
          );
          if (length < 0) {
            lastIndex = offset + decoder.end();
            break;
          }
          lastIndex = offset + length;
          offset = length === 0 ? lastIndex + 1 : lastIndex;
        }
        const result = returnValue + input.slice(lastIndex);
        returnValue = "";
        return result;
      };
    }
    function determineBranch(decodeTree, current, nodeIndex, char) {
      const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;
      }
      if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIndex + value] - 1;
      }
      let lo = nodeIndex;
      let hi = lo + branchCount - 1;
      while (lo <= hi) {
        const mid = lo + hi >>> 1;
        const midValue = decodeTree[mid];
        if (midValue < char) {
          lo = mid + 1;
        } else if (midValue > char) {
          hi = mid - 1;
        } else {
          return decodeTree[mid + branchCount];
        }
      }
      return -1;
    }
    var htmlDecoder = getDecoder(decode_data_html_js_1.htmlDecodeTree);
    var xmlDecoder = getDecoder(decode_data_xml_js_1.xmlDecodeTree);
    function decodeHTML(htmlString, mode = DecodingMode.Legacy) {
      return htmlDecoder(htmlString, mode);
    }
    function decodeHTMLAttribute(htmlAttribute) {
      return htmlDecoder(htmlAttribute, DecodingMode.Attribute);
    }
    function decodeHTMLStrict(htmlString) {
      return htmlDecoder(htmlString, DecodingMode.Strict);
    }
    function decodeXML(xmlString) {
      return xmlDecoder(xmlString, DecodingMode.Strict);
    }
    var decode_data_html_js_2 = require_decode_data_html3();
    Object.defineProperty(exports, "htmlDecodeTree", { enumerable: true, get: function() {
      return decode_data_html_js_2.htmlDecodeTree;
    } });
    var decode_data_xml_js_2 = require_decode_data_xml3();
    Object.defineProperty(exports, "xmlDecodeTree", { enumerable: true, get: function() {
      return decode_data_xml_js_2.xmlDecodeTree;
    } });
    var decode_codepoint_js_2 = require_decode_codepoint3();
    Object.defineProperty(exports, "decodeCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.decodeCodePoint;
    } });
    Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.replaceCodePoint;
    } });
    Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.fromCodePoint;
    } });
  }
});

// ../../lipdjs/node_modules/htmlparser2/dist/commonjs/Tokenizer.js
var require_Tokenizer2 = __commonJS({
  "../../lipdjs/node_modules/htmlparser2/dist/commonjs/Tokenizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoteType = void 0;
    var decode_1 = require_decode3();
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["Tab"] = 9] = "Tab";
      CharCodes2[CharCodes2["NewLine"] = 10] = "NewLine";
      CharCodes2[CharCodes2["FormFeed"] = 12] = "FormFeed";
      CharCodes2[CharCodes2["CarriageReturn"] = 13] = "CarriageReturn";
      CharCodes2[CharCodes2["Space"] = 32] = "Space";
      CharCodes2[CharCodes2["ExclamationMark"] = 33] = "ExclamationMark";
      CharCodes2[CharCodes2["Number"] = 35] = "Number";
      CharCodes2[CharCodes2["Amp"] = 38] = "Amp";
      CharCodes2[CharCodes2["SingleQuote"] = 39] = "SingleQuote";
      CharCodes2[CharCodes2["DoubleQuote"] = 34] = "DoubleQuote";
      CharCodes2[CharCodes2["Dash"] = 45] = "Dash";
      CharCodes2[CharCodes2["Slash"] = 47] = "Slash";
      CharCodes2[CharCodes2["Zero"] = 48] = "Zero";
      CharCodes2[CharCodes2["Nine"] = 57] = "Nine";
      CharCodes2[CharCodes2["Semi"] = 59] = "Semi";
      CharCodes2[CharCodes2["Lt"] = 60] = "Lt";
      CharCodes2[CharCodes2["Eq"] = 61] = "Eq";
      CharCodes2[CharCodes2["Gt"] = 62] = "Gt";
      CharCodes2[CharCodes2["Questionmark"] = 63] = "Questionmark";
      CharCodes2[CharCodes2["UpperA"] = 65] = "UpperA";
      CharCodes2[CharCodes2["LowerA"] = 97] = "LowerA";
      CharCodes2[CharCodes2["UpperF"] = 70] = "UpperF";
      CharCodes2[CharCodes2["LowerF"] = 102] = "LowerF";
      CharCodes2[CharCodes2["UpperZ"] = 90] = "UpperZ";
      CharCodes2[CharCodes2["LowerZ"] = 122] = "LowerZ";
      CharCodes2[CharCodes2["LowerX"] = 120] = "LowerX";
      CharCodes2[CharCodes2["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
    })(CharCodes || (CharCodes = {}));
    var State;
    (function(State2) {
      State2[State2["Text"] = 1] = "Text";
      State2[State2["BeforeTagName"] = 2] = "BeforeTagName";
      State2[State2["InTagName"] = 3] = "InTagName";
      State2[State2["InSelfClosingTag"] = 4] = "InSelfClosingTag";
      State2[State2["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
      State2[State2["InClosingTagName"] = 6] = "InClosingTagName";
      State2[State2["AfterClosingTagName"] = 7] = "AfterClosingTagName";
      State2[State2["BeforeAttributeName"] = 8] = "BeforeAttributeName";
      State2[State2["InAttributeName"] = 9] = "InAttributeName";
      State2[State2["AfterAttributeName"] = 10] = "AfterAttributeName";
      State2[State2["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
      State2[State2["InAttributeValueDq"] = 12] = "InAttributeValueDq";
      State2[State2["InAttributeValueSq"] = 13] = "InAttributeValueSq";
      State2[State2["InAttributeValueNq"] = 14] = "InAttributeValueNq";
      State2[State2["BeforeDeclaration"] = 15] = "BeforeDeclaration";
      State2[State2["InDeclaration"] = 16] = "InDeclaration";
      State2[State2["InProcessingInstruction"] = 17] = "InProcessingInstruction";
      State2[State2["BeforeComment"] = 18] = "BeforeComment";
      State2[State2["CDATASequence"] = 19] = "CDATASequence";
      State2[State2["InSpecialComment"] = 20] = "InSpecialComment";
      State2[State2["InCommentLike"] = 21] = "InCommentLike";
      State2[State2["BeforeSpecialS"] = 22] = "BeforeSpecialS";
      State2[State2["BeforeSpecialT"] = 23] = "BeforeSpecialT";
      State2[State2["SpecialStartSequence"] = 24] = "SpecialStartSequence";
      State2[State2["InSpecialTag"] = 25] = "InSpecialTag";
      State2[State2["InEntity"] = 26] = "InEntity";
    })(State || (State = {}));
    function isWhitespace(c) {
      return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;
    }
    function isEndOfTagSection(c) {
      return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);
    }
    function isASCIIAlpha(c) {
      return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;
    }
    var QuoteType;
    (function(QuoteType2) {
      QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
      QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
      QuoteType2[QuoteType2["Single"] = 2] = "Single";
      QuoteType2[QuoteType2["Double"] = 3] = "Double";
    })(QuoteType || (exports.QuoteType = QuoteType = {}));
    var Sequences = {
      Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
      // CDATA[
      CdataEnd: new Uint8Array([93, 93, 62]),
      // ]]>
      CommentEnd: new Uint8Array([45, 45, 62]),
      // `-->`
      ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
      // `<\/script`
      StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
      // `</style`
      TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
      // `</title`
      TextareaEnd: new Uint8Array([
        60,
        47,
        116,
        101,
        120,
        116,
        97,
        114,
        101,
        97
      ]),
      // `</textarea`
      XmpEnd: new Uint8Array([60, 47, 120, 109, 112])
      // `</xmp`
    };
    var Tokenizer = class {
      constructor({ xmlMode = false, decodeEntities = true }, cbs) {
        this.cbs = cbs;
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.entityStart = 0;
        this.baseState = State.Text;
        this.isSpecial = false;
        this.running = true;
        this.offset = 0;
        this.currentSequence = void 0;
        this.sequenceIndex = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityDecoder = new decode_1.EntityDecoder(xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree, (cp, consumed) => this.emitCodePoint(cp, consumed));
      }
      reset() {
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State.Text;
        this.currentSequence = void 0;
        this.running = true;
        this.offset = 0;
      }
      write(chunk) {
        this.offset += this.buffer.length;
        this.buffer = chunk;
        this.parse();
      }
      end() {
        if (this.running)
          this.finish();
      }
      pause() {
        this.running = false;
      }
      resume() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
          this.parse();
        }
      }
      stateText(c) {
        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
          if (this.index > this.sectionStart) {
            this.cbs.ontext(this.sectionStart, this.index);
          }
          this.state = State.BeforeTagName;
          this.sectionStart = this.index;
        } else if (this.decodeEntities && c === CharCodes.Amp) {
          this.startEntity();
        }
      }
      stateSpecialStartSequence(c) {
        const isEnd = this.sequenceIndex === this.currentSequence.length;
        const isMatch = isEnd ? (
          // If we are at the end of the sequence, make sure the tag name has ended
          isEndOfTagSection(c)
        ) : (
          // Otherwise, do a case-insensitive comparison
          (c | 32) === this.currentSequence[this.sequenceIndex]
        );
        if (!isMatch) {
          this.isSpecial = false;
        } else if (!isEnd) {
          this.sequenceIndex++;
          return;
        }
        this.sequenceIndex = 0;
        this.state = State.InTagName;
        this.stateInTagName(c);
      }
      /** Look for an end tag. For <title> tags, also decode entities. */
      stateInSpecialTag(c) {
        if (this.sequenceIndex === this.currentSequence.length) {
          if (c === CharCodes.Gt || isWhitespace(c)) {
            const endOfText = this.index - this.currentSequence.length;
            if (this.sectionStart < endOfText) {
              const actualIndex = this.index;
              this.index = endOfText;
              this.cbs.ontext(this.sectionStart, endOfText);
              this.index = actualIndex;
            }
            this.isSpecial = false;
            this.sectionStart = endOfText + 2;
            this.stateInClosingTagName(c);
            return;
          }
          this.sequenceIndex = 0;
        }
        if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
          this.sequenceIndex += 1;
        } else if (this.sequenceIndex === 0) {
          if (this.currentSequence === Sequences.TitleEnd) {
            if (this.decodeEntities && c === CharCodes.Amp) {
              this.startEntity();
            }
          } else if (this.fastForwardTo(CharCodes.Lt)) {
            this.sequenceIndex = 1;
          }
        } else {
          this.sequenceIndex = Number(c === CharCodes.Lt);
        }
      }
      stateCDATASequence(c) {
        if (c === Sequences.Cdata[this.sequenceIndex]) {
          if (++this.sequenceIndex === Sequences.Cdata.length) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CdataEnd;
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
          }
        } else {
          this.sequenceIndex = 0;
          this.state = State.InDeclaration;
          this.stateInDeclaration(c);
        }
      }
      /**
       * When we wait for one specific character, we can speed things up
       * by skipping through the buffer until we find it.
       *
       * @returns Whether the character was found.
       */
      fastForwardTo(c) {
        while (++this.index < this.buffer.length + this.offset) {
          if (this.buffer.charCodeAt(this.index - this.offset) === c) {
            return true;
          }
        }
        this.index = this.buffer.length + this.offset - 1;
        return false;
      }
      /**
       * Comments and CDATA end with `-->` and `]]>`.
       *
       * Their common qualities are:
       * - Their end sequences have a distinct character they start with.
       * - That character is then repeated, so we have to check multiple repeats.
       * - All characters but the start character of the sequence can be skipped.
       */
      stateInCommentLike(c) {
        if (c === this.currentSequence[this.sequenceIndex]) {
          if (++this.sequenceIndex === this.currentSequence.length) {
            if (this.currentSequence === Sequences.CdataEnd) {
              this.cbs.oncdata(this.sectionStart, this.index, 2);
            } else {
              this.cbs.oncomment(this.sectionStart, this.index, 2);
            }
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
            this.state = State.Text;
          }
        } else if (this.sequenceIndex === 0) {
          if (this.fastForwardTo(this.currentSequence[0])) {
            this.sequenceIndex = 1;
          }
        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
          this.sequenceIndex = 0;
        }
      }
      /**
       * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
       *
       * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
       * We allow anything that wouldn't end the tag.
       */
      isTagStartChar(c) {
        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
      }
      startSpecial(sequence, offset) {
        this.isSpecial = true;
        this.currentSequence = sequence;
        this.sequenceIndex = offset;
        this.state = State.SpecialStartSequence;
      }
      stateBeforeTagName(c) {
        if (c === CharCodes.ExclamationMark) {
          this.state = State.BeforeDeclaration;
          this.sectionStart = this.index + 1;
        } else if (c === CharCodes.Questionmark) {
          this.state = State.InProcessingInstruction;
          this.sectionStart = this.index + 1;
        } else if (this.isTagStartChar(c)) {
          const lower = c | 32;
          this.sectionStart = this.index;
          if (this.xmlMode) {
            this.state = State.InTagName;
          } else if (lower === Sequences.ScriptEnd[2]) {
            this.state = State.BeforeSpecialS;
          } else if (lower === Sequences.TitleEnd[2] || lower === Sequences.XmpEnd[2]) {
            this.state = State.BeforeSpecialT;
          } else {
            this.state = State.InTagName;
          }
        } else if (c === CharCodes.Slash) {
          this.state = State.BeforeClosingTagName;
        } else {
          this.state = State.Text;
          this.stateText(c);
        }
      }
      stateInTagName(c) {
        if (isEndOfTagSection(c)) {
          this.cbs.onopentagname(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c);
        }
      }
      stateBeforeClosingTagName(c) {
        if (isWhitespace(c)) {
        } else if (c === CharCodes.Gt) {
          this.state = State.Text;
        } else {
          this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;
          this.sectionStart = this.index;
        }
      }
      stateInClosingTagName(c) {
        if (c === CharCodes.Gt || isWhitespace(c)) {
          this.cbs.onclosetag(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = State.AfterClosingTagName;
          this.stateAfterClosingTagName(c);
        }
      }
      stateAfterClosingTagName(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeAttributeName(c) {
        if (c === CharCodes.Gt) {
          this.cbs.onopentagend(this.index);
          if (this.isSpecial) {
            this.state = State.InSpecialTag;
            this.sequenceIndex = 0;
          } else {
            this.state = State.Text;
          }
          this.sectionStart = this.index + 1;
        } else if (c === CharCodes.Slash) {
          this.state = State.InSelfClosingTag;
        } else if (!isWhitespace(c)) {
          this.state = State.InAttributeName;
          this.sectionStart = this.index;
        }
      }
      stateInSelfClosingTag(c) {
        if (c === CharCodes.Gt) {
          this.cbs.onselfclosingtag(this.index);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
          this.isSpecial = false;
        } else if (!isWhitespace(c)) {
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c);
        }
      }
      stateInAttributeName(c) {
        if (c === CharCodes.Eq || isEndOfTagSection(c)) {
          this.cbs.onattribname(this.sectionStart, this.index);
          this.sectionStart = this.index;
          this.state = State.AfterAttributeName;
          this.stateAfterAttributeName(c);
        }
      }
      stateAfterAttributeName(c) {
        if (c === CharCodes.Eq) {
          this.state = State.BeforeAttributeValue;
        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {
          this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
          this.sectionStart = -1;
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c);
        } else if (!isWhitespace(c)) {
          this.cbs.onattribend(QuoteType.NoValue, this.sectionStart);
          this.state = State.InAttributeName;
          this.sectionStart = this.index;
        }
      }
      stateBeforeAttributeValue(c) {
        if (c === CharCodes.DoubleQuote) {
          this.state = State.InAttributeValueDq;
          this.sectionStart = this.index + 1;
        } else if (c === CharCodes.SingleQuote) {
          this.state = State.InAttributeValueSq;
          this.sectionStart = this.index + 1;
        } else if (!isWhitespace(c)) {
          this.sectionStart = this.index;
          this.state = State.InAttributeValueNq;
          this.stateInAttributeValueNoQuotes(c);
        }
      }
      handleInAttributeValue(c, quote) {
        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index + 1);
          this.state = State.BeforeAttributeName;
        } else if (this.decodeEntities && c === CharCodes.Amp) {
          this.startEntity();
        }
      }
      stateInAttributeValueDoubleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes.DoubleQuote);
      }
      stateInAttributeValueSingleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes.SingleQuote);
      }
      stateInAttributeValueNoQuotes(c) {
        if (isWhitespace(c) || c === CharCodes.Gt) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(QuoteType.Unquoted, this.index);
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c);
        } else if (this.decodeEntities && c === CharCodes.Amp) {
          this.startEntity();
        }
      }
      stateBeforeDeclaration(c) {
        if (c === CharCodes.OpeningSquareBracket) {
          this.state = State.CDATASequence;
          this.sequenceIndex = 0;
        } else {
          this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
        }
      }
      stateInDeclaration(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.ondeclaration(this.sectionStart, this.index);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateInProcessingInstruction(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.onprocessinginstruction(this.sectionStart, this.index);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeComment(c) {
        if (c === CharCodes.Dash) {
          this.state = State.InCommentLike;
          this.currentSequence = Sequences.CommentEnd;
          this.sequenceIndex = 2;
          this.sectionStart = this.index + 1;
        } else {
          this.state = State.InDeclaration;
        }
      }
      stateInSpecialComment(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.oncomment(this.sectionStart, this.index, 0);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeSpecialS(c) {
        const lower = c | 32;
        if (lower === Sequences.ScriptEnd[3]) {
          this.startSpecial(Sequences.ScriptEnd, 4);
        } else if (lower === Sequences.StyleEnd[3]) {
          this.startSpecial(Sequences.StyleEnd, 4);
        } else {
          this.state = State.InTagName;
          this.stateInTagName(c);
        }
      }
      stateBeforeSpecialT(c) {
        const lower = c | 32;
        switch (lower) {
          case Sequences.TitleEnd[3]: {
            this.startSpecial(Sequences.TitleEnd, 4);
            break;
          }
          case Sequences.TextareaEnd[3]: {
            this.startSpecial(Sequences.TextareaEnd, 4);
            break;
          }
          case Sequences.XmpEnd[3]: {
            this.startSpecial(Sequences.XmpEnd, 4);
            break;
          }
          default: {
            this.state = State.InTagName;
            this.stateInTagName(c);
          }
        }
      }
      startEntity() {
        this.baseState = this.state;
        this.state = State.InEntity;
        this.entityStart = this.index;
        this.entityDecoder.startEntity(this.xmlMode ? decode_1.DecodingMode.Strict : this.baseState === State.Text || this.baseState === State.InSpecialTag ? decode_1.DecodingMode.Legacy : decode_1.DecodingMode.Attribute);
      }
      stateInEntity() {
        const length = this.entityDecoder.write(this.buffer, this.index - this.offset);
        if (length >= 0) {
          this.state = this.baseState;
          if (length === 0) {
            this.index = this.entityStart;
          }
        } else {
          this.index = this.offset + this.buffer.length - 1;
        }
      }
      /**
       * Remove data that has already been consumed from the buffer.
       */
      cleanup() {
        if (this.running && this.sectionStart !== this.index) {
          if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
            this.cbs.ontext(this.sectionStart, this.index);
            this.sectionStart = this.index;
          } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = this.index;
          }
        }
      }
      shouldContinue() {
        return this.index < this.buffer.length + this.offset && this.running;
      }
      /**
       * Iterates through the buffer, calling the function corresponding to the current state.
       *
       * States that are more likely to be hit are higher up, as a performance improvement.
       */
      parse() {
        while (this.shouldContinue()) {
          const c = this.buffer.charCodeAt(this.index - this.offset);
          switch (this.state) {
            case State.Text: {
              this.stateText(c);
              break;
            }
            case State.SpecialStartSequence: {
              this.stateSpecialStartSequence(c);
              break;
            }
            case State.InSpecialTag: {
              this.stateInSpecialTag(c);
              break;
            }
            case State.CDATASequence: {
              this.stateCDATASequence(c);
              break;
            }
            case State.InAttributeValueDq: {
              this.stateInAttributeValueDoubleQuotes(c);
              break;
            }
            case State.InAttributeName: {
              this.stateInAttributeName(c);
              break;
            }
            case State.InCommentLike: {
              this.stateInCommentLike(c);
              break;
            }
            case State.InSpecialComment: {
              this.stateInSpecialComment(c);
              break;
            }
            case State.BeforeAttributeName: {
              this.stateBeforeAttributeName(c);
              break;
            }
            case State.InTagName: {
              this.stateInTagName(c);
              break;
            }
            case State.InClosingTagName: {
              this.stateInClosingTagName(c);
              break;
            }
            case State.BeforeTagName: {
              this.stateBeforeTagName(c);
              break;
            }
            case State.AfterAttributeName: {
              this.stateAfterAttributeName(c);
              break;
            }
            case State.InAttributeValueSq: {
              this.stateInAttributeValueSingleQuotes(c);
              break;
            }
            case State.BeforeAttributeValue: {
              this.stateBeforeAttributeValue(c);
              break;
            }
            case State.BeforeClosingTagName: {
              this.stateBeforeClosingTagName(c);
              break;
            }
            case State.AfterClosingTagName: {
              this.stateAfterClosingTagName(c);
              break;
            }
            case State.BeforeSpecialS: {
              this.stateBeforeSpecialS(c);
              break;
            }
            case State.BeforeSpecialT: {
              this.stateBeforeSpecialT(c);
              break;
            }
            case State.InAttributeValueNq: {
              this.stateInAttributeValueNoQuotes(c);
              break;
            }
            case State.InSelfClosingTag: {
              this.stateInSelfClosingTag(c);
              break;
            }
            case State.InDeclaration: {
              this.stateInDeclaration(c);
              break;
            }
            case State.BeforeDeclaration: {
              this.stateBeforeDeclaration(c);
              break;
            }
            case State.BeforeComment: {
              this.stateBeforeComment(c);
              break;
            }
            case State.InProcessingInstruction: {
              this.stateInProcessingInstruction(c);
              break;
            }
            case State.InEntity: {
              this.stateInEntity();
              break;
            }
          }
          this.index++;
        }
        this.cleanup();
      }
      finish() {
        if (this.state === State.InEntity) {
          this.entityDecoder.end();
          this.state = this.baseState;
        }
        this.handleTrailingData();
        this.cbs.onend();
      }
      /** Handle any trailing data. */
      handleTrailingData() {
        const endIndex = this.buffer.length + this.offset;
        if (this.sectionStart >= endIndex) {
          return;
        }
        if (this.state === State.InCommentLike) {
          if (this.currentSequence === Sequences.CdataEnd) {
            this.cbs.oncdata(this.sectionStart, endIndex, 0);
          } else {
            this.cbs.oncomment(this.sectionStart, endIndex, 0);
          }
        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
        } else {
          this.cbs.ontext(this.sectionStart, endIndex);
        }
      }
      emitCodePoint(cp, consumed) {
        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
          if (this.sectionStart < this.entityStart) {
            this.cbs.onattribdata(this.sectionStart, this.entityStart);
          }
          this.sectionStart = this.entityStart + consumed;
          this.index = this.sectionStart - 1;
          this.cbs.onattribentity(cp);
        } else {
          if (this.sectionStart < this.entityStart) {
            this.cbs.ontext(this.sectionStart, this.entityStart);
          }
          this.sectionStart = this.entityStart + consumed;
          this.index = this.sectionStart - 1;
          this.cbs.ontextentity(cp, this.sectionStart);
        }
      }
    };
    exports.default = Tokenizer;
  }
});

// ../../lipdjs/node_modules/htmlparser2/dist/commonjs/Parser.js
var require_Parser2 = __commonJS({
  "../../lipdjs/node_modules/htmlparser2/dist/commonjs/Parser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var Tokenizer_js_1 = __importStar(require_Tokenizer2());
    var decode_1 = require_decode3();
    var formTags = /* @__PURE__ */ new Set([
      "input",
      "option",
      "optgroup",
      "select",
      "button",
      "datalist",
      "textarea"
    ]);
    var pTag = /* @__PURE__ */ new Set(["p"]);
    var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
    var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
    var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
    var openImpliesClose = /* @__PURE__ */ new Map([
      ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
      ["th", /* @__PURE__ */ new Set(["th"])],
      ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
      ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
      ["li", /* @__PURE__ */ new Set(["li"])],
      ["p", pTag],
      ["h1", pTag],
      ["h2", pTag],
      ["h3", pTag],
      ["h4", pTag],
      ["h5", pTag],
      ["h6", pTag],
      ["select", formTags],
      ["input", formTags],
      ["output", formTags],
      ["button", formTags],
      ["datalist", formTags],
      ["textarea", formTags],
      ["option", /* @__PURE__ */ new Set(["option"])],
      ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
      ["dd", ddtTags],
      ["dt", ddtTags],
      ["address", pTag],
      ["article", pTag],
      ["aside", pTag],
      ["blockquote", pTag],
      ["details", pTag],
      ["div", pTag],
      ["dl", pTag],
      ["fieldset", pTag],
      ["figcaption", pTag],
      ["figure", pTag],
      ["footer", pTag],
      ["form", pTag],
      ["header", pTag],
      ["hr", pTag],
      ["main", pTag],
      ["nav", pTag],
      ["ol", pTag],
      ["pre", pTag],
      ["section", pTag],
      ["table", pTag],
      ["ul", pTag],
      ["rt", rtpTags],
      ["rp", rtpTags],
      ["tbody", tableSectionTags],
      ["tfoot", tableSectionTags]
    ]);
    var voidElements = /* @__PURE__ */ new Set([
      "area",
      "base",
      "basefont",
      "br",
      "col",
      "command",
      "embed",
      "frame",
      "hr",
      "img",
      "input",
      "isindex",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
    var htmlIntegrationElements = /* @__PURE__ */ new Set([
      "mi",
      "mo",
      "mn",
      "ms",
      "mtext",
      "annotation-xml",
      "foreignobject",
      "desc",
      "title"
    ]);
    var reNameEnd = /\s|\//;
    var Parser2 = class {
      constructor(cbs, options = {}) {
        var _a, _b, _c, _d, _e, _f;
        this.options = options;
        this.startIndex = 0;
        this.endIndex = 0;
        this.openTagStart = 0;
        this.tagname = "";
        this.attribname = "";
        this.attribvalue = "";
        this.attribs = null;
        this.stack = [];
        this.buffers = [];
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.htmlMode = !this.options.xmlMode;
        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : this.htmlMode;
        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : this.htmlMode;
        this.recognizeSelfClosing = (_c = options.recognizeSelfClosing) !== null && _c !== void 0 ? _c : !this.htmlMode;
        this.tokenizer = new ((_d = options.Tokenizer) !== null && _d !== void 0 ? _d : Tokenizer_js_1.default)(this.options, this);
        this.foreignContext = [!this.htmlMode];
        (_f = (_e = this.cbs).onparserinit) === null || _f === void 0 ? void 0 : _f.call(_e, this);
      }
      // Tokenizer event handlers
      /** @internal */
      ontext(start, endIndex) {
        var _a, _b;
        const data = this.getSlice(start, endIndex);
        this.endIndex = endIndex - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
        this.startIndex = endIndex;
      }
      /** @internal */
      ontextentity(cp, endIndex) {
        var _a, _b;
        this.endIndex = endIndex - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_1.fromCodePoint)(cp));
        this.startIndex = endIndex;
      }
      /**
       * Checks if the current tag is a void element. Override this if you want
       * to specify your own additional void elements.
       */
      isVoidElement(name) {
        return this.htmlMode && voidElements.has(name);
      }
      /** @internal */
      onopentagname(start, endIndex) {
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
          name = name.toLowerCase();
        }
        this.emitOpenTag(name);
      }
      emitOpenTag(name) {
        var _a, _b, _c, _d;
        this.openTagStart = this.startIndex;
        this.tagname = name;
        const impliesClose = this.htmlMode && openImpliesClose.get(name);
        if (impliesClose) {
          while (this.stack.length > 0 && impliesClose.has(this.stack[0])) {
            const element = this.stack.shift();
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
          }
        }
        if (!this.isVoidElement(name)) {
          this.stack.unshift(name);
          if (this.htmlMode) {
            if (foreignContextElements.has(name)) {
              this.foreignContext.unshift(true);
            } else if (htmlIntegrationElements.has(name)) {
              this.foreignContext.unshift(false);
            }
          }
        }
        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
        if (this.cbs.onopentag)
          this.attribs = {};
      }
      endOpenTag(isImplied) {
        var _a, _b;
        this.startIndex = this.openTagStart;
        if (this.attribs) {
          (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
          this.attribs = null;
        }
        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
          this.cbs.onclosetag(this.tagname, true);
        }
        this.tagname = "";
      }
      /** @internal */
      onopentagend(endIndex) {
        this.endIndex = endIndex;
        this.endOpenTag(false);
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      onclosetag(start, endIndex) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
          name = name.toLowerCase();
        }
        if (this.htmlMode && (foreignContextElements.has(name) || htmlIntegrationElements.has(name))) {
          this.foreignContext.shift();
        }
        if (!this.isVoidElement(name)) {
          const pos = this.stack.indexOf(name);
          if (pos !== -1) {
            for (let index = 0; index <= pos; index++) {
              const element = this.stack.shift();
              (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, index !== pos);
            }
          } else if (this.htmlMode && name === "p") {
            this.emitOpenTag("p");
            this.closeCurrentTag(true);
          }
        } else if (this.htmlMode && name === "br") {
          (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, "br");
          (_f = (_e = this.cbs).onopentag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", {}, true);
          (_h = (_g = this.cbs).onclosetag) === null || _h === void 0 ? void 0 : _h.call(_g, "br", false);
        }
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      onselfclosingtag(endIndex) {
        this.endIndex = endIndex;
        if (this.recognizeSelfClosing || this.foreignContext[0]) {
          this.closeCurrentTag(false);
          this.startIndex = endIndex + 1;
        } else {
          this.onopentagend(endIndex);
        }
      }
      closeCurrentTag(isOpenImplied) {
        var _a, _b;
        const name = this.tagname;
        this.endOpenTag(isOpenImplied);
        if (this.stack[0] === name) {
          (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
          this.stack.shift();
        }
      }
      /** @internal */
      onattribname(start, endIndex) {
        this.startIndex = start;
        const name = this.getSlice(start, endIndex);
        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
      }
      /** @internal */
      onattribdata(start, endIndex) {
        this.attribvalue += this.getSlice(start, endIndex);
      }
      /** @internal */
      onattribentity(cp) {
        this.attribvalue += (0, decode_1.fromCodePoint)(cp);
      }
      /** @internal */
      onattribend(quote, endIndex) {
        var _a, _b;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? void 0 : null);
        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
          this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribvalue = "";
      }
      getInstructionName(value) {
        const index = value.search(reNameEnd);
        let name = index < 0 ? value : value.substr(0, index);
        if (this.lowerCaseTagNames) {
          name = name.toLowerCase();
        }
        return name;
      }
      /** @internal */
      ondeclaration(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
          const name = this.getInstructionName(value);
          this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);
        }
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      onprocessinginstruction(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
          const name = this.getInstructionName(value);
          this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);
        }
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      oncomment(start, endIndex, offset) {
        var _a, _b, _c, _d;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      oncdata(start, endIndex, offset) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex - offset);
        if (!this.htmlMode || this.options.recognizeCDATA) {
          (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
          (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
          (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
        } else {
          (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);
          (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
        }
        this.startIndex = endIndex + 1;
      }
      /** @internal */
      onend() {
        var _a, _b;
        if (this.cbs.onclosetag) {
          this.endIndex = this.startIndex;
          for (let index = 0; index < this.stack.length; index++) {
            this.cbs.onclosetag(this.stack[index], true);
          }
        }
        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      /**
       * Resets the parser to a blank state, ready to parse a new HTML document
       */
      reset() {
        var _a, _b, _c, _d;
        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.tokenizer.reset();
        this.tagname = "";
        this.attribname = "";
        this.attribs = null;
        this.stack.length = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        this.buffers.length = 0;
        this.foreignContext.length = 0;
        this.foreignContext.unshift(!this.htmlMode);
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
      }
      /**
       * Resets the parser, then parses a complete document and
       * pushes it to the handler.
       *
       * @param data Document to parse.
       */
      parseComplete(data) {
        this.reset();
        this.end(data);
      }
      getSlice(start, end) {
        while (start - this.bufferOffset >= this.buffers[0].length) {
          this.shiftBuffer();
        }
        let slice3 = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
        while (end - this.bufferOffset > this.buffers[0].length) {
          this.shiftBuffer();
          slice3 += this.buffers[0].slice(0, end - this.bufferOffset);
        }
        return slice3;
      }
      shiftBuffer() {
        this.bufferOffset += this.buffers[0].length;
        this.writeIndex--;
        this.buffers.shift();
      }
      /**
       * Parses a chunk of data and calls the corresponding callbacks.
       *
       * @param chunk Chunk to parse.
       */
      write(chunk) {
        var _a, _b;
        if (this.ended) {
          (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
          return;
        }
        this.buffers.push(chunk);
        if (this.tokenizer.running) {
          this.tokenizer.write(chunk);
          this.writeIndex++;
        }
      }
      /**
       * Parses the end of the buffer and clears the stack, calls onend.
       *
       * @param chunk Optional final chunk to parse.
       */
      end(chunk) {
        var _a, _b;
        if (this.ended) {
          (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
          return;
        }
        if (chunk)
          this.write(chunk);
        this.ended = true;
        this.tokenizer.end();
      }
      /**
       * Pauses parsing. The parser won't emit events until `resume` is called.
       */
      pause() {
        this.tokenizer.pause();
      }
      /**
       * Resumes parsing after `pause` was called.
       */
      resume() {
        this.tokenizer.resume();
        while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
          this.tokenizer.write(this.buffers[this.writeIndex++]);
        }
        if (this.ended)
          this.tokenizer.end();
      }
      /**
       * Alias of `write`, for backwards compatibility.
       *
       * @param chunk Chunk to parse.
       * @deprecated
       */
      parseChunk(chunk) {
        this.write(chunk);
      }
      /**
       * Alias of `end`, for backwards compatibility.
       *
       * @param chunk Optional final chunk to parse.
       * @deprecated
       */
      done(chunk) {
        this.end(chunk);
      }
    };
    exports.Parser = Parser2;
  }
});

// ../../lipdjs/node_modules/htmlparser2/dist/commonjs/index.js
var require_commonjs2 = __commonJS({
  "../../lipdjs/node_modules/htmlparser2/dist/commonjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomUtils = exports.getFeed = exports.ElementType = exports.QuoteType = exports.Tokenizer = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;
    exports.parseDocument = parseDocument;
    exports.parseDOM = parseDOM;
    exports.createDocumentStream = createDocumentStream;
    exports.createDomStream = createDomStream;
    exports.parseFeed = parseFeed;
    var Parser_js_1 = require_Parser2();
    var Parser_js_2 = require_Parser2();
    Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
      return Parser_js_2.Parser;
    } });
    var domhandler_1 = require_lib70();
    var domhandler_2 = require_lib70();
    Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    function parseDocument(data, options) {
      const handler = new domhandler_1.DomHandler(void 0, options);
      new Parser_js_1.Parser(handler, options).end(data);
      return handler.root;
    }
    function parseDOM(data, options) {
      return parseDocument(data, options).children;
    }
    function createDocumentStream(callback, options, elementCallback) {
      const handler = new domhandler_1.DomHandler((error) => callback(error, handler.root), options, elementCallback);
      return new Parser_js_1.Parser(handler, options);
    }
    function createDomStream(callback, options, elementCallback) {
      const handler = new domhandler_1.DomHandler(callback, options, elementCallback);
      return new Parser_js_1.Parser(handler, options);
    }
    var Tokenizer_js_1 = require_Tokenizer2();
    Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
      return __importDefault(Tokenizer_js_1).default;
    } });
    Object.defineProperty(exports, "QuoteType", { enumerable: true, get: function() {
      return Tokenizer_js_1.QuoteType;
    } });
    exports.ElementType = __importStar(require_lib69());
    var domutils_1 = require_lib73();
    var domutils_2 = require_lib73();
    Object.defineProperty(exports, "getFeed", { enumerable: true, get: function() {
      return domutils_2.getFeed;
    } });
    var parseFeedDefaultOptions = { xmlMode: true };
    function parseFeed(feed, options = parseFeedDefaultOptions) {
      return (0, domutils_1.getFeed)(parseDOM(feed, options));
    }
    exports.DomUtils = __importStar(require_lib73());
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html/lib/ActorRdfParseHtml.js
var require_ActorRdfParseHtml = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html/lib/ActorRdfParseHtml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseHtml = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var htmlparser2_1 = require_commonjs2();
    var readable_stream_1 = require_browser2();
    var ActorRdfParseHtml = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/html": 1.0,
       *       "application/xhtml+xml": 0.9
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/html": "http://www.w3.org/ns/formats/HTML",
       *       "application/xhtml+xml": "http://www.w3.org/ns/formats/HTML"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, context) {
        var _a;
        const data = new readable_stream_1.Readable({ objectMode: true });
        data._read = () => {
        };
        let maxSize = 0;
        let endBarrier = 1;
        function error(subError) {
          data.emit("error", subError);
        }
        function end() {
          if (--endBarrier === 0) {
            data.push(null);
          }
        }
        const htmlAction = {
          baseIRI: ((_a = action.metadata) == null ? void 0 : _a.baseIRI) ?? "",
          context,
          emit: (quad) => {
            maxSize--;
            data.push(quad);
          },
          end,
          error,
          headers: action.headers
        };
        try {
          const outputs = await Promise.all(this.busRdfParseHtml.publish(htmlAction));
          endBarrier += outputs.length;
          const htmlParseListeners = [];
          for (const output of outputs) {
            const { htmlParseListener } = await output.actor.run(htmlAction, void 0);
            htmlParseListeners.push(htmlParseListener);
          }
          const parser = new htmlparser2_1.Parser({
            onclosetag() {
              try {
                for (const htmlParseListener of htmlParseListeners) {
                  htmlParseListener.onTagClose();
                }
              } catch (error_) {
                error(error_);
              }
            },
            onend() {
              try {
                for (const htmlParseListener of htmlParseListeners) {
                  htmlParseListener.onEnd();
                }
              } catch (error_) {
                error(error_);
              }
              end();
            },
            onopentag(name, attributes) {
              try {
                for (const htmlParseListener of htmlParseListeners) {
                  htmlParseListener.onTagOpen(name, attributes);
                }
              } catch (error_) {
                error(error_);
              }
            },
            ontext(text) {
              try {
                for (const htmlParseListener of htmlParseListeners) {
                  htmlParseListener.onText(text);
                }
              } catch (error_) {
                error(error_);
              }
            }
          }, {
            decodeEntities: true,
            recognizeSelfClosing: true,
            xmlMode: false
          });
          const read = data._read = (size) => {
            maxSize = Math.max(size, maxSize);
            while (maxSize > 0) {
              const item = action.data.read();
              if (item === null) {
                action.data.once("readable", () => read(0));
                return;
              }
              parser.write(item.toString());
            }
          };
          action.data.on("error", error).on("end", () => parser.end());
        } catch (e) {
          setTimeout(() => {
            data.emit("error", e);
          });
        }
        return { data };
      }
    };
    exports.ActorRdfParseHtml = ActorRdfParseHtml;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html/lib/index.js
var require_lib78 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseHtml(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-parse-html/lib/ActorRdfParseHtml.js
var require_ActorRdfParseHtml2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-parse-html/lib/ActorRdfParseHtml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseHtml = void 0;
    var core_1 = require_lib();
    var ActorRdfParseHtml = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF HTML parsing failed: none of the configured parsers were able to parse RDF in HTML} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfParseHtml = ActorRdfParseHtml;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-parse-html/lib/index.js
var require_lib79 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-parse-html/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseHtml2(), exports);
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/IItemPropertyHandler.js
var require_IItemPropertyHandler = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/IItemPropertyHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerContent.js
var require_ItemPropertyHandlerContent = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerContent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemPropertyHandlerContent = void 0;
    var ItemPropertyHandlerContent = class {
      canHandle(tagName, attributes) {
        return "content" in attributes;
      }
      getObject(attributes, util, itemScope) {
        return util.createLiteral(attributes.content, itemScope);
      }
    };
    exports.ItemPropertyHandlerContent = ItemPropertyHandlerContent;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/Util.js
var require_Util4 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var Util = class _Util {
      constructor(dataFactory, baseIRI) {
        this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
        this.baseIRI = baseIRI || "";
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return _Util.IRI_REGEX.test(iri);
      }
      /**
       * Create vocab terms for the given terms attribute.
       *
       * Relative IRIs will be based on the active vocab or baseIRI if `allowRelativeIris` is true.
       *
       * @param {string} terms An attribute value.
       * @param {IItemScope} itemScope The active item scope.
       * @param {boolean} allowRelativeIris If relative IRIs are allowed.
       * @return {Term[]} The IRI terms.
       */
      createVocabIris(terms, itemScope, allowRelativeIris) {
        return terms.split(/\s+/u).filter((term) => !!term).map((property) => {
          if (!_Util.isValidIri(property)) {
            if (!allowRelativeIris) {
              return;
            }
            property = `${itemScope.vocab || `${this.baseIRI}#`}${property}`;
          }
          return this.dataFactory.namedNode(property);
        }).filter((term) => !!term);
      }
      /**
       * Get the predicates for which the given itemprop value should cause vocabulary expansion.
       * @param terms An attribute value.
       * @param itemScope The active item scope.
       * @param vocabRegistry The active vocabulary registry.
       */
      getVocabularyExpansionType(terms, itemScope, vocabRegistry) {
        const parts = terms.split(/\s+/u);
        if (parts.includes("subPropertyOf") || parts.includes("equivalentProperty")) {
          return [this.dataFactory.namedNode(`${_Util.RDF}type`)];
        }
        if (itemScope.vocab && itemScope.vocab in vocabRegistry && vocabRegistry[itemScope.vocab].properties) {
          let predicates = [];
          for (const [property, expansions] of Object.entries(vocabRegistry[itemScope.vocab].properties)) {
            if (parts.includes(property)) {
              predicates = [...Object.values(expansions).map((iri) => this.dataFactory.namedNode(iri))];
            }
          }
          return predicates;
        }
        return [];
      }
      /**
       * Create a named node for the given term, which can be relative to the document base.
       * @param {string} iri A term string.
       * @return {Term} An RDF term, or undefined if invalid.
       */
      createSubject(iri) {
        if (!_Util.isValidIri(iri)) {
          try {
            iri = (0, relative_to_absolute_iri_1.resolve)(iri, this.baseIRI);
          } catch (_a) {
            return;
          }
        }
        return this.dataFactory.namedNode(iri);
      }
      /**
       * Create a new literal node.
       * @param {string} literal The literal value.
       * @param {IActiveTag} activeTag The current active tag.
       * @return {Literal} A new literal node.
       */
      createLiteral(literal, activeTag) {
        return this.dataFactory.literal(literal, activeTag.language);
      }
      /**
       * Determine the vocab IRI from a given type IRI.
       * @link https://w3c.github.io/microdata-rdf/#property-uri-generation
       * @param typeIri A type IRI.
       * @param vocabRegistry The active vocabulary registry.
       */
      deriveVocab(typeIri, vocabRegistry) {
        let vocab;
        for (const uriPrefix in vocabRegistry) {
          if (typeIri.startsWith(uriPrefix)) {
            vocab = uriPrefix;
            if (!vocab.endsWith("/")) {
              vocab += "#";
            }
            break;
          }
        }
        if (!vocab) {
          const hashPos = typeIri.indexOf("#");
          if (hashPos > 0) {
            vocab = typeIri.slice(0, hashPos + 1);
          } else {
            vocab = (0, relative_to_absolute_iri_1.resolve)(".", typeIri);
          }
        }
        return vocab;
      }
    };
    exports.Util = Util;
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.RDFA = "http://www.w3.org/ns/rdfa#";
    Util.IRI_REGEX = /^([A-Za-z][\d+-.A-Za-z]*|_):[^ "<>[\\\]`{|}]*$/u;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerNumber.js
var require_ItemPropertyHandlerNumber = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemPropertyHandlerNumber = void 0;
    var Util_1 = require_Util4();
    var ItemPropertyHandlerNumber = class {
      constructor(tagName, attributeName) {
        this.tagName = tagName;
        this.attributeName = attributeName;
      }
      canHandle(tagName, attributes) {
        return this.tagName === tagName && this.attributeName in attributes;
      }
      getObject(attributes, util, itemScope) {
        const value = attributes[this.attributeName];
        let datatype;
        if (!Number.isNaN(Number.parseInt(value, 10)) && !value.includes(".")) {
          datatype = `${Util_1.Util.XSD}integer`;
        } else if (!Number.isNaN(Number.parseFloat(value))) {
          datatype = `${Util_1.Util.XSD}double`;
        }
        return util.dataFactory.literal(value, datatype && util.dataFactory.namedNode(datatype));
      }
    };
    exports.ItemPropertyHandlerNumber = ItemPropertyHandlerNumber;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerTime.js
var require_ItemPropertyHandlerTime = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemPropertyHandlerTime = void 0;
    var Util_1 = require_Util4();
    var ItemPropertyHandlerTime = class _ItemPropertyHandlerTime {
      canHandle(tagName, attributes) {
        return tagName === "time" && "datetime" in attributes;
      }
      getObject(attributes, util, itemScope) {
        const value = attributes.datetime;
        let datatype;
        for (const entry of _ItemPropertyHandlerTime.TIME_REGEXES) {
          if (entry.regex.test(value)) {
            datatype = util.dataFactory.namedNode(Util_1.Util.XSD + entry.type);
            break;
          }
        }
        return util.dataFactory.literal(value, datatype);
      }
    };
    exports.ItemPropertyHandlerTime = ItemPropertyHandlerTime;
    ItemPropertyHandlerTime.TIME_REGEXES = [
      {
        regex: /^-?P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d)?S)?)?$/u,
        type: "duration"
      },
      {
        regex: /^\d+-\d\d-\d\dT\d\d:\d\d:\d\d((Z?)|([+-]\d\d:\d\d))$/u,
        type: "dateTime"
      },
      { regex: /^\d+-\d\d-\d\dZ?$/u, type: "date" },
      { regex: /^\d\d:\d\d:\d\d((Z?)|([+-]\d\d:\d\d))$/u, type: "time" },
      { regex: /^\d+-\d\d$/u, type: "gYearMonth" },
      { regex: /^\d+$/u, type: "gYear" }
    ];
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerUrl.js
var require_ItemPropertyHandlerUrl = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/propertyhandler/ItemPropertyHandlerUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemPropertyHandlerUrl = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ItemPropertyHandlerUrl = class {
      constructor(tagName, attributeName) {
        this.tagName = tagName;
        this.attributeName = attributeName;
      }
      canHandle(tagName, attributes) {
        return this.tagName === tagName && this.attributeName in attributes;
      }
      getObject(attributes, util, itemScope) {
        return util.dataFactory.namedNode((0, relative_to_absolute_iri_1.resolve)(attributes[this.attributeName], util.baseIRI));
      }
    };
    exports.ItemPropertyHandlerUrl = ItemPropertyHandlerUrl;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IHtmlParseListener.js
var require_IHtmlParseListener2 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IHtmlParseListener.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IItemScope.js
var require_IItemScope = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IItemScope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IVocabRegistry.js
var require_IVocabRegistry = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/IVocabRegistry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/generated/decode-data-html.js
var require_decode_data_html4 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/generated/decode-data-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/generated/decode-data-xml.js
var require_decode_data_xml4 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/generated/decode-data-xml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = new Uint16Array(
      // prettier-ignore
      "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c) {
        return c.charCodeAt(0);
      })
    );
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint4 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.replaceCodePoint = exports.fromCodePoint = void 0;
    var decodeMap = /* @__PURE__ */ new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
    (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function replaceCodePoint(codePoint) {
      var _a2;
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return 65533;
      }
      return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
    }
    exports.replaceCodePoint = replaceCodePoint;
    function decodeCodePoint(codePoint) {
      return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
    }
    exports.default = decodeCodePoint;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/decode.js
var require_decode4 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
    var decode_data_html_js_1 = __importDefault(require_decode_data_html4());
    exports.htmlDecodeTree = decode_data_html_js_1.default;
    var decode_data_xml_js_1 = __importDefault(require_decode_data_xml4());
    exports.xmlDecodeTree = decode_data_xml_js_1.default;
    var decode_codepoint_js_1 = __importStar(require_decode_codepoint4());
    exports.decodeCodePoint = decode_codepoint_js_1.default;
    var decode_codepoint_js_2 = require_decode_codepoint4();
    Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.replaceCodePoint;
    } });
    Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: function() {
      return decode_codepoint_js_2.fromCodePoint;
    } });
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
      CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
      CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
      CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
      CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
      CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
      CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
      CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
      CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
      CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
      CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
    })(CharCodes || (CharCodes = {}));
    var TO_LOWER_BIT = 32;
    var BinTrieFlags;
    (function(BinTrieFlags2) {
      BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
    })(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
    function isNumber(code) {
      return code >= CharCodes.ZERO && code <= CharCodes.NINE;
    }
    function isHexadecimalCharacter(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
    }
    function isAsciiAlphaNumeric(code) {
      return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
    }
    function isEntityInAttributeInvalidEnd(code) {
      return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
    }
    var EntityDecoderState;
    (function(EntityDecoderState2) {
      EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
    })(EntityDecoderState || (EntityDecoderState = {}));
    var DecodingMode;
    (function(DecodingMode2) {
      DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
      DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
      DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
    })(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
    var EntityDecoder = (
      /** @class */
      function() {
        function EntityDecoder2(decodeTree, emitCodePoint, errors) {
          this.decodeTree = decodeTree;
          this.emitCodePoint = emitCodePoint;
          this.errors = errors;
          this.state = EntityDecoderState.EntityStart;
          this.consumed = 1;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.decodeMode = DecodingMode.Strict;
        }
        EntityDecoder2.prototype.startEntity = function(decodeMode) {
          this.decodeMode = decodeMode;
          this.state = EntityDecoderState.EntityStart;
          this.result = 0;
          this.treeIndex = 0;
          this.excess = 1;
          this.consumed = 1;
        };
        EntityDecoder2.prototype.write = function(str, offset) {
          switch (this.state) {
            case EntityDecoderState.EntityStart: {
              if (str.charCodeAt(offset) === CharCodes.NUM) {
                this.state = EntityDecoderState.NumericStart;
                this.consumed += 1;
                return this.stateNumericStart(str, offset + 1);
              }
              this.state = EntityDecoderState.NamedEntity;
              return this.stateNamedEntity(str, offset);
            }
            case EntityDecoderState.NumericStart: {
              return this.stateNumericStart(str, offset);
            }
            case EntityDecoderState.NumericDecimal: {
              return this.stateNumericDecimal(str, offset);
            }
            case EntityDecoderState.NumericHex: {
              return this.stateNumericHex(str, offset);
            }
            case EntityDecoderState.NamedEntity: {
              return this.stateNamedEntity(str, offset);
            }
          }
        };
        EntityDecoder2.prototype.stateNumericStart = function(str, offset) {
          if (offset >= str.length) {
            return -1;
          }
          if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
          }
          this.state = EntityDecoderState.NumericDecimal;
          return this.stateNumericDecimal(str, offset);
        };
        EntityDecoder2.prototype.addToNumericResult = function(str, start, end, base) {
          if (start !== end) {
            var digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
          }
        };
        EntityDecoder2.prototype.stateNumericHex = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 16);
              return this.emitNumericEntity(char, 3);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 16);
          return -1;
        };
        EntityDecoder2.prototype.stateNumericDecimal = function(str, offset) {
          var startIdx = offset;
          while (offset < str.length) {
            var char = str.charCodeAt(offset);
            if (isNumber(char)) {
              offset += 1;
            } else {
              this.addToNumericResult(str, startIdx, offset, 10);
              return this.emitNumericEntity(char, 2);
            }
          }
          this.addToNumericResult(str, startIdx, offset, 10);
          return -1;
        };
        EntityDecoder2.prototype.emitNumericEntity = function(lastCp, expectedLength) {
          var _a;
          if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
          } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
          }
          this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
          if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
              this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
          }
          return this.consumed;
        };
        EntityDecoder2.prototype.stateNamedEntity = function(str, offset) {
          var decodeTree = this.decodeTree;
          var current = decodeTree[this.treeIndex];
          var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          for (; offset < str.length; offset++, this.excess++) {
            var char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
              return this.result === 0 || // If we are parsing an attribute
              this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
              (valueLength === 0 || // And there should be no invalid characters.
              isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            if (valueLength !== 0) {
              if (char === CharCodes.SEMI) {
                return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
              }
              if (this.decodeMode !== DecodingMode.Strict) {
                this.result = this.treeIndex;
                this.consumed += this.excess;
                this.excess = 0;
              }
            }
          }
          return -1;
        };
        EntityDecoder2.prototype.emitNotTerminatedNamedEntity = function() {
          var _a;
          var _b = this, result = _b.result, decodeTree = _b.decodeTree;
          var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
          this.emitNamedEntityData(result, valueLength, this.consumed);
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
          return this.consumed;
        };
        EntityDecoder2.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
          var decodeTree = this.decodeTree;
          this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
          if (valueLength === 3) {
            this.emitCodePoint(decodeTree[result + 2], consumed);
          }
          return consumed;
        };
        EntityDecoder2.prototype.end = function() {
          var _a;
          switch (this.state) {
            case EntityDecoderState.NamedEntity: {
              return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
            }
            case EntityDecoderState.NumericDecimal: {
              return this.emitNumericEntity(0, 2);
            }
            case EntityDecoderState.NumericHex: {
              return this.emitNumericEntity(0, 3);
            }
            case EntityDecoderState.NumericStart: {
              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
              return 0;
            }
            case EntityDecoderState.EntityStart: {
              return 0;
            }
          }
        };
        return EntityDecoder2;
      }()
    );
    exports.EntityDecoder = EntityDecoder;
    function getDecoder(decodeTree) {
      var ret = "";
      var decoder = new EntityDecoder(decodeTree, function(str) {
        return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);
      });
      return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while ((offset = str.indexOf("&", offset)) >= 0) {
          ret += str.slice(lastIndex, offset);
          decoder.startEntity(decodeMode);
          var len = decoder.write(
            str,
            // Skip the "&"
            offset + 1
          );
          if (len < 0) {
            lastIndex = offset + decoder.end();
            break;
          }
          lastIndex = offset + len;
          offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        ret = "";
        return result;
      };
    }
    function determineBranch(decodeTree, current, nodeIdx, char) {
      var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
      }
      if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
      }
      var lo = nodeIdx;
      var hi = lo + branchCount - 1;
      while (lo <= hi) {
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) {
          lo = mid + 1;
        } else if (midVal > char) {
          hi = mid - 1;
        } else {
          return decodeTree[mid + branchCount];
        }
      }
      return -1;
    }
    exports.determineBranch = determineBranch;
    var htmlDecoder = getDecoder(decode_data_html_js_1.default);
    var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
    function decodeHTML(str, mode) {
      if (mode === void 0) {
        mode = DecodingMode.Legacy;
      }
      return htmlDecoder(str, mode);
    }
    exports.decodeHTML = decodeHTML;
    function decodeHTMLAttribute(str) {
      return htmlDecoder(str, DecodingMode.Attribute);
    }
    exports.decodeHTMLAttribute = decodeHTMLAttribute;
    function decodeHTMLStrict(str) {
      return htmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeHTMLStrict = decodeHTMLStrict;
    function decodeXML(str) {
      return xmlDecoder(str, DecodingMode.Strict);
    }
    exports.decodeXML = decodeXML;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer3 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoteType = void 0;
    var decode_js_1 = require_decode4();
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["Tab"] = 9] = "Tab";
      CharCodes2[CharCodes2["NewLine"] = 10] = "NewLine";
      CharCodes2[CharCodes2["FormFeed"] = 12] = "FormFeed";
      CharCodes2[CharCodes2["CarriageReturn"] = 13] = "CarriageReturn";
      CharCodes2[CharCodes2["Space"] = 32] = "Space";
      CharCodes2[CharCodes2["ExclamationMark"] = 33] = "ExclamationMark";
      CharCodes2[CharCodes2["Number"] = 35] = "Number";
      CharCodes2[CharCodes2["Amp"] = 38] = "Amp";
      CharCodes2[CharCodes2["SingleQuote"] = 39] = "SingleQuote";
      CharCodes2[CharCodes2["DoubleQuote"] = 34] = "DoubleQuote";
      CharCodes2[CharCodes2["Dash"] = 45] = "Dash";
      CharCodes2[CharCodes2["Slash"] = 47] = "Slash";
      CharCodes2[CharCodes2["Zero"] = 48] = "Zero";
      CharCodes2[CharCodes2["Nine"] = 57] = "Nine";
      CharCodes2[CharCodes2["Semi"] = 59] = "Semi";
      CharCodes2[CharCodes2["Lt"] = 60] = "Lt";
      CharCodes2[CharCodes2["Eq"] = 61] = "Eq";
      CharCodes2[CharCodes2["Gt"] = 62] = "Gt";
      CharCodes2[CharCodes2["Questionmark"] = 63] = "Questionmark";
      CharCodes2[CharCodes2["UpperA"] = 65] = "UpperA";
      CharCodes2[CharCodes2["LowerA"] = 97] = "LowerA";
      CharCodes2[CharCodes2["UpperF"] = 70] = "UpperF";
      CharCodes2[CharCodes2["LowerF"] = 102] = "LowerF";
      CharCodes2[CharCodes2["UpperZ"] = 90] = "UpperZ";
      CharCodes2[CharCodes2["LowerZ"] = 122] = "LowerZ";
      CharCodes2[CharCodes2["LowerX"] = 120] = "LowerX";
      CharCodes2[CharCodes2["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
    })(CharCodes || (CharCodes = {}));
    var State;
    (function(State2) {
      State2[State2["Text"] = 1] = "Text";
      State2[State2["BeforeTagName"] = 2] = "BeforeTagName";
      State2[State2["InTagName"] = 3] = "InTagName";
      State2[State2["InSelfClosingTag"] = 4] = "InSelfClosingTag";
      State2[State2["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
      State2[State2["InClosingTagName"] = 6] = "InClosingTagName";
      State2[State2["AfterClosingTagName"] = 7] = "AfterClosingTagName";
      State2[State2["BeforeAttributeName"] = 8] = "BeforeAttributeName";
      State2[State2["InAttributeName"] = 9] = "InAttributeName";
      State2[State2["AfterAttributeName"] = 10] = "AfterAttributeName";
      State2[State2["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
      State2[State2["InAttributeValueDq"] = 12] = "InAttributeValueDq";
      State2[State2["InAttributeValueSq"] = 13] = "InAttributeValueSq";
      State2[State2["InAttributeValueNq"] = 14] = "InAttributeValueNq";
      State2[State2["BeforeDeclaration"] = 15] = "BeforeDeclaration";
      State2[State2["InDeclaration"] = 16] = "InDeclaration";
      State2[State2["InProcessingInstruction"] = 17] = "InProcessingInstruction";
      State2[State2["BeforeComment"] = 18] = "BeforeComment";
      State2[State2["CDATASequence"] = 19] = "CDATASequence";
      State2[State2["InSpecialComment"] = 20] = "InSpecialComment";
      State2[State2["InCommentLike"] = 21] = "InCommentLike";
      State2[State2["BeforeSpecialS"] = 22] = "BeforeSpecialS";
      State2[State2["SpecialStartSequence"] = 23] = "SpecialStartSequence";
      State2[State2["InSpecialTag"] = 24] = "InSpecialTag";
      State2[State2["BeforeEntity"] = 25] = "BeforeEntity";
      State2[State2["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
      State2[State2["InNamedEntity"] = 27] = "InNamedEntity";
      State2[State2["InNumericEntity"] = 28] = "InNumericEntity";
      State2[State2["InHexEntity"] = 29] = "InHexEntity";
    })(State || (State = {}));
    function isWhitespace(c) {
      return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;
    }
    function isEndOfTagSection(c) {
      return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);
    }
    function isNumber(c) {
      return c >= CharCodes.Zero && c <= CharCodes.Nine;
    }
    function isASCIIAlpha(c) {
      return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;
    }
    function isHexDigit(c) {
      return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;
    }
    var QuoteType;
    (function(QuoteType2) {
      QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
      QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
      QuoteType2[QuoteType2["Single"] = 2] = "Single";
      QuoteType2[QuoteType2["Double"] = 3] = "Double";
    })(QuoteType = exports.QuoteType || (exports.QuoteType = {}));
    var Sequences = {
      Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
      CdataEnd: new Uint8Array([93, 93, 62]),
      CommentEnd: new Uint8Array([45, 45, 62]),
      ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
      StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
      TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101])
      // `</title`
    };
    var Tokenizer = (
      /** @class */
      function() {
        function Tokenizer2(_a, cbs) {
          var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;
          this.cbs = cbs;
          this.state = State.Text;
          this.buffer = "";
          this.sectionStart = 0;
          this.index = 0;
          this.baseState = State.Text;
          this.isSpecial = false;
          this.running = true;
          this.offset = 0;
          this.currentSequence = void 0;
          this.sequenceIndex = 0;
          this.trieIndex = 0;
          this.trieCurrent = 0;
          this.entityResult = 0;
          this.entityExcess = 0;
          this.xmlMode = xmlMode;
          this.decodeEntities = decodeEntities;
          this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;
        }
        Tokenizer2.prototype.reset = function() {
          this.state = State.Text;
          this.buffer = "";
          this.sectionStart = 0;
          this.index = 0;
          this.baseState = State.Text;
          this.currentSequence = void 0;
          this.running = true;
          this.offset = 0;
        };
        Tokenizer2.prototype.write = function(chunk) {
          this.offset += this.buffer.length;
          this.buffer = chunk;
          this.parse();
        };
        Tokenizer2.prototype.end = function() {
          if (this.running)
            this.finish();
        };
        Tokenizer2.prototype.pause = function() {
          this.running = false;
        };
        Tokenizer2.prototype.resume = function() {
          this.running = true;
          if (this.index < this.buffer.length + this.offset) {
            this.parse();
          }
        };
        Tokenizer2.prototype.getIndex = function() {
          return this.index;
        };
        Tokenizer2.prototype.getSectionStart = function() {
          return this.sectionStart;
        };
        Tokenizer2.prototype.stateText = function(c) {
          if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
            if (this.index > this.sectionStart) {
              this.cbs.ontext(this.sectionStart, this.index);
            }
            this.state = State.BeforeTagName;
            this.sectionStart = this.index;
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateSpecialStartSequence = function(c) {
          var isEnd = this.sequenceIndex === this.currentSequence.length;
          var isMatch = isEnd ? (
            // If we are at the end of the sequence, make sure the tag name has ended
            isEndOfTagSection(c)
          ) : (
            // Otherwise, do a case-insensitive comparison
            (c | 32) === this.currentSequence[this.sequenceIndex]
          );
          if (!isMatch) {
            this.isSpecial = false;
          } else if (!isEnd) {
            this.sequenceIndex++;
            return;
          }
          this.sequenceIndex = 0;
          this.state = State.InTagName;
          this.stateInTagName(c);
        };
        Tokenizer2.prototype.stateInSpecialTag = function(c) {
          if (this.sequenceIndex === this.currentSequence.length) {
            if (c === CharCodes.Gt || isWhitespace(c)) {
              var endOfText = this.index - this.currentSequence.length;
              if (this.sectionStart < endOfText) {
                var actualIndex = this.index;
                this.index = endOfText;
                this.cbs.ontext(this.sectionStart, endOfText);
                this.index = actualIndex;
              }
              this.isSpecial = false;
              this.sectionStart = endOfText + 2;
              this.stateInClosingTagName(c);
              return;
            }
            this.sequenceIndex = 0;
          }
          if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
          } else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
              if (this.decodeEntities && c === CharCodes.Amp) {
                this.state = State.BeforeEntity;
              }
            } else if (this.fastForwardTo(CharCodes.Lt)) {
              this.sequenceIndex = 1;
            }
          } else {
            this.sequenceIndex = Number(c === CharCodes.Lt);
          }
        };
        Tokenizer2.prototype.stateCDATASequence = function(c) {
          if (c === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
              this.state = State.InCommentLike;
              this.currentSequence = Sequences.CdataEnd;
              this.sequenceIndex = 0;
              this.sectionStart = this.index + 1;
            }
          } else {
            this.sequenceIndex = 0;
            this.state = State.InDeclaration;
            this.stateInDeclaration(c);
          }
        };
        Tokenizer2.prototype.fastForwardTo = function(c) {
          while (++this.index < this.buffer.length + this.offset) {
            if (this.buffer.charCodeAt(this.index - this.offset) === c) {
              return true;
            }
          }
          this.index = this.buffer.length + this.offset - 1;
          return false;
        };
        Tokenizer2.prototype.stateInCommentLike = function(c) {
          if (c === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
              if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, this.index, 2);
              } else {
                this.cbs.oncomment(this.sectionStart, this.index, 2);
              }
              this.sequenceIndex = 0;
              this.sectionStart = this.index + 1;
              this.state = State.Text;
            }
          } else if (this.sequenceIndex === 0) {
            if (this.fastForwardTo(this.currentSequence[0])) {
              this.sequenceIndex = 1;
            }
          } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
            this.sequenceIndex = 0;
          }
        };
        Tokenizer2.prototype.isTagStartChar = function(c) {
          return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
        };
        Tokenizer2.prototype.startSpecial = function(sequence, offset) {
          this.isSpecial = true;
          this.currentSequence = sequence;
          this.sequenceIndex = offset;
          this.state = State.SpecialStartSequence;
        };
        Tokenizer2.prototype.stateBeforeTagName = function(c) {
          if (c === CharCodes.ExclamationMark) {
            this.state = State.BeforeDeclaration;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.Questionmark) {
            this.state = State.InProcessingInstruction;
            this.sectionStart = this.index + 1;
          } else if (this.isTagStartChar(c)) {
            var lower = c | 32;
            this.sectionStart = this.index;
            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
              this.startSpecial(Sequences.TitleEnd, 3);
            } else {
              this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;
            }
          } else if (c === CharCodes.Slash) {
            this.state = State.BeforeClosingTagName;
          } else {
            this.state = State.Text;
            this.stateText(c);
          }
        };
        Tokenizer2.prototype.stateInTagName = function(c) {
          if (isEndOfTagSection(c)) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
          if (isWhitespace(c)) {
          } else if (c === CharCodes.Gt) {
            this.state = State.Text;
          } else {
            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateInClosingTagName = function(c) {
          if (c === CharCodes.Gt || isWhitespace(c)) {
            this.cbs.onclosetag(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterClosingTagName;
            this.stateAfterClosingTagName(c);
          }
        };
        Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
          if (c === CharCodes.Gt) {
            this.cbs.onopentagend(this.index);
            if (this.isSpecial) {
              this.state = State.InSpecialTag;
              this.sequenceIndex = 0;
            } else {
              this.state = State.Text;
            }
            this.baseState = this.state;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.Slash) {
            this.state = State.InSelfClosingTag;
          } else if (!isWhitespace(c)) {
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
          if (c === CharCodes.Gt) {
            this.cbs.onselfclosingtag(this.index);
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
            this.isSpecial = false;
          } else if (!isWhitespace(c)) {
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateInAttributeName = function(c) {
          if (c === CharCodes.Eq || isEndOfTagSection(c)) {
            this.cbs.onattribname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterAttributeName;
            this.stateAfterAttributeName(c);
          }
        };
        Tokenizer2.prototype.stateAfterAttributeName = function(c) {
          if (c === CharCodes.Eq) {
            this.state = State.BeforeAttributeValue;
          } else if (c === CharCodes.Slash || c === CharCodes.Gt) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          } else if (!isWhitespace(c)) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
          if (c === CharCodes.DoubleQuote) {
            this.state = State.InAttributeValueDq;
            this.sectionStart = this.index + 1;
          } else if (c === CharCodes.SingleQuote) {
            this.state = State.InAttributeValueSq;
            this.sectionStart = this.index + 1;
          } else if (!isWhitespace(c)) {
            this.sectionStart = this.index;
            this.state = State.InAttributeValueNq;
            this.stateInAttributeValueNoQuotes(c);
          }
        };
        Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
          if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
            this.state = State.BeforeAttributeName;
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
          this.handleInAttributeValue(c, CharCodes.DoubleQuote);
        };
        Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
          this.handleInAttributeValue(c, CharCodes.SingleQuote);
        };
        Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
          if (isWhitespace(c) || c === CharCodes.Gt) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(QuoteType.Unquoted, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
          } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
          }
        };
        Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
          if (c === CharCodes.OpeningSquareBracket) {
            this.state = State.CDATASequence;
            this.sequenceIndex = 0;
          } else {
            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
          }
        };
        Tokenizer2.prototype.stateInDeclaration = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.ondeclaration(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.onprocessinginstruction(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeComment = function(c) {
          if (c === CharCodes.Dash) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CommentEnd;
            this.sequenceIndex = 2;
            this.sectionStart = this.index + 1;
          } else {
            this.state = State.InDeclaration;
          }
        };
        Tokenizer2.prototype.stateInSpecialComment = function(c) {
          if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.oncomment(this.sectionStart, this.index, 0);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
          var lower = c | 32;
          if (lower === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
          } else if (lower === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
          } else {
            this.state = State.InTagName;
            this.stateInTagName(c);
          }
        };
        Tokenizer2.prototype.stateBeforeEntity = function(c) {
          this.entityExcess = 1;
          this.entityResult = 0;
          if (c === CharCodes.Number) {
            this.state = State.BeforeNumericEntity;
          } else if (c === CharCodes.Amp) {
          } else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.state = State.InNamedEntity;
            this.stateInNamedEntity(c);
          }
        };
        Tokenizer2.prototype.stateInNamedEntity = function(c) {
          this.entityExcess += 1;
          this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
          if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this.index--;
            return;
          }
          this.trieCurrent = this.entityTrie[this.trieIndex];
          var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;
          if (masked) {
            var valueLength = (masked >> 14) - 1;
            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {
              this.trieIndex += valueLength;
            } else {
              var entityStart = this.index - this.entityExcess + 1;
              if (entityStart > this.sectionStart) {
                this.emitPartial(this.sectionStart, entityStart);
              }
              this.entityResult = this.trieIndex;
              this.trieIndex += valueLength;
              this.entityExcess = 0;
              this.sectionStart = this.index + 1;
              if (valueLength === 0) {
                this.emitNamedEntity();
              }
            }
          }
        };
        Tokenizer2.prototype.emitNamedEntity = function() {
          this.state = this.baseState;
          if (this.entityResult === 0) {
            return;
          }
          var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;
          switch (valueLength) {
            case 1: {
              this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);
              break;
            }
            case 2: {
              this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
              break;
            }
            case 3: {
              this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
              this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
            }
          }
        };
        Tokenizer2.prototype.stateBeforeNumericEntity = function(c) {
          if ((c | 32) === CharCodes.LowerX) {
            this.entityExcess++;
            this.state = State.InHexEntity;
          } else {
            this.state = State.InNumericEntity;
            this.stateInNumericEntity(c);
          }
        };
        Tokenizer2.prototype.emitNumericEntity = function(strict) {
          var entityStart = this.index - this.entityExcess - 1;
          var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);
          if (numberStart !== this.index) {
            if (entityStart > this.sectionStart) {
              this.emitPartial(this.sectionStart, entityStart);
            }
            this.sectionStart = this.index + Number(strict);
            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));
          }
          this.state = this.baseState;
        };
        Tokenizer2.prototype.stateInNumericEntity = function(c) {
          if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
          } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);
            this.entityExcess++;
          } else {
            if (this.allowLegacyEntity()) {
              this.emitNumericEntity(false);
            } else {
              this.state = this.baseState;
            }
            this.index--;
          }
        };
        Tokenizer2.prototype.stateInHexEntity = function(c) {
          if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
          } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);
            this.entityExcess++;
          } else if (isHexDigit(c)) {
            this.entityResult = this.entityResult * 16 + ((c | 32) - CharCodes.LowerA + 10);
            this.entityExcess++;
          } else {
            if (this.allowLegacyEntity()) {
              this.emitNumericEntity(false);
            } else {
              this.state = this.baseState;
            }
            this.index--;
          }
        };
        Tokenizer2.prototype.allowLegacyEntity = function() {
          return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);
        };
        Tokenizer2.prototype.cleanup = function() {
          if (this.running && this.sectionStart !== this.index) {
            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
              this.cbs.ontext(this.sectionStart, this.index);
              this.sectionStart = this.index;
            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = this.index;
            }
          }
        };
        Tokenizer2.prototype.shouldContinue = function() {
          return this.index < this.buffer.length + this.offset && this.running;
        };
        Tokenizer2.prototype.parse = function() {
          while (this.shouldContinue()) {
            var c = this.buffer.charCodeAt(this.index - this.offset);
            switch (this.state) {
              case State.Text: {
                this.stateText(c);
                break;
              }
              case State.SpecialStartSequence: {
                this.stateSpecialStartSequence(c);
                break;
              }
              case State.InSpecialTag: {
                this.stateInSpecialTag(c);
                break;
              }
              case State.CDATASequence: {
                this.stateCDATASequence(c);
                break;
              }
              case State.InAttributeValueDq: {
                this.stateInAttributeValueDoubleQuotes(c);
                break;
              }
              case State.InAttributeName: {
                this.stateInAttributeName(c);
                break;
              }
              case State.InCommentLike: {
                this.stateInCommentLike(c);
                break;
              }
              case State.InSpecialComment: {
                this.stateInSpecialComment(c);
                break;
              }
              case State.BeforeAttributeName: {
                this.stateBeforeAttributeName(c);
                break;
              }
              case State.InTagName: {
                this.stateInTagName(c);
                break;
              }
              case State.InClosingTagName: {
                this.stateInClosingTagName(c);
                break;
              }
              case State.BeforeTagName: {
                this.stateBeforeTagName(c);
                break;
              }
              case State.AfterAttributeName: {
                this.stateAfterAttributeName(c);
                break;
              }
              case State.InAttributeValueSq: {
                this.stateInAttributeValueSingleQuotes(c);
                break;
              }
              case State.BeforeAttributeValue: {
                this.stateBeforeAttributeValue(c);
                break;
              }
              case State.BeforeClosingTagName: {
                this.stateBeforeClosingTagName(c);
                break;
              }
              case State.AfterClosingTagName: {
                this.stateAfterClosingTagName(c);
                break;
              }
              case State.BeforeSpecialS: {
                this.stateBeforeSpecialS(c);
                break;
              }
              case State.InAttributeValueNq: {
                this.stateInAttributeValueNoQuotes(c);
                break;
              }
              case State.InSelfClosingTag: {
                this.stateInSelfClosingTag(c);
                break;
              }
              case State.InDeclaration: {
                this.stateInDeclaration(c);
                break;
              }
              case State.BeforeDeclaration: {
                this.stateBeforeDeclaration(c);
                break;
              }
              case State.BeforeComment: {
                this.stateBeforeComment(c);
                break;
              }
              case State.InProcessingInstruction: {
                this.stateInProcessingInstruction(c);
                break;
              }
              case State.InNamedEntity: {
                this.stateInNamedEntity(c);
                break;
              }
              case State.BeforeEntity: {
                this.stateBeforeEntity(c);
                break;
              }
              case State.InHexEntity: {
                this.stateInHexEntity(c);
                break;
              }
              case State.InNumericEntity: {
                this.stateInNumericEntity(c);
                break;
              }
              default: {
                this.stateBeforeNumericEntity(c);
              }
            }
            this.index++;
          }
          this.cleanup();
        };
        Tokenizer2.prototype.finish = function() {
          if (this.state === State.InNamedEntity) {
            this.emitNamedEntity();
          }
          if (this.sectionStart < this.index) {
            this.handleTrailingData();
          }
          this.cbs.onend();
        };
        Tokenizer2.prototype.handleTrailingData = function() {
          var endIndex = this.buffer.length + this.offset;
          if (this.state === State.InCommentLike) {
            if (this.currentSequence === Sequences.CdataEnd) {
              this.cbs.oncdata(this.sectionStart, endIndex, 0);
            } else {
              this.cbs.oncomment(this.sectionStart, endIndex, 0);
            }
          } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
          } else {
            this.cbs.ontext(this.sectionStart, endIndex);
          }
        };
        Tokenizer2.prototype.emitPartial = function(start, endIndex) {
          if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribdata(start, endIndex);
          } else {
            this.cbs.ontext(start, endIndex);
          }
        };
        Tokenizer2.prototype.emitCodePoint = function(cp) {
          if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribentity(cp);
          } else {
            this.cbs.ontextentity(cp);
          }
        };
        return Tokenizer2;
      }()
    );
    exports.default = Tokenizer;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/Parser.js
var require_Parser3 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/Parser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var Tokenizer_js_1 = __importStar(require_Tokenizer3());
    var decode_js_1 = require_decode4();
    var formTags = /* @__PURE__ */ new Set([
      "input",
      "option",
      "optgroup",
      "select",
      "button",
      "datalist",
      "textarea"
    ]);
    var pTag = /* @__PURE__ */ new Set(["p"]);
    var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
    var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
    var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
    var openImpliesClose = /* @__PURE__ */ new Map([
      ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
      ["th", /* @__PURE__ */ new Set(["th"])],
      ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
      ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
      ["li", /* @__PURE__ */ new Set(["li"])],
      ["p", pTag],
      ["h1", pTag],
      ["h2", pTag],
      ["h3", pTag],
      ["h4", pTag],
      ["h5", pTag],
      ["h6", pTag],
      ["select", formTags],
      ["input", formTags],
      ["output", formTags],
      ["button", formTags],
      ["datalist", formTags],
      ["textarea", formTags],
      ["option", /* @__PURE__ */ new Set(["option"])],
      ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
      ["dd", ddtTags],
      ["dt", ddtTags],
      ["address", pTag],
      ["article", pTag],
      ["aside", pTag],
      ["blockquote", pTag],
      ["details", pTag],
      ["div", pTag],
      ["dl", pTag],
      ["fieldset", pTag],
      ["figcaption", pTag],
      ["figure", pTag],
      ["footer", pTag],
      ["form", pTag],
      ["header", pTag],
      ["hr", pTag],
      ["main", pTag],
      ["nav", pTag],
      ["ol", pTag],
      ["pre", pTag],
      ["section", pTag],
      ["table", pTag],
      ["ul", pTag],
      ["rt", rtpTags],
      ["rp", rtpTags],
      ["tbody", tableSectionTags],
      ["tfoot", tableSectionTags]
    ]);
    var voidElements = /* @__PURE__ */ new Set([
      "area",
      "base",
      "basefont",
      "br",
      "col",
      "command",
      "embed",
      "frame",
      "hr",
      "img",
      "input",
      "isindex",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
    var htmlIntegrationElements = /* @__PURE__ */ new Set([
      "mi",
      "mo",
      "mn",
      "ms",
      "mtext",
      "annotation-xml",
      "foreignobject",
      "desc",
      "title"
    ]);
    var reNameEnd = /\s|\//;
    var Parser2 = (
      /** @class */
      function() {
        function Parser3(cbs, options) {
          if (options === void 0) {
            options = {};
          }
          var _a, _b, _c, _d, _e;
          this.options = options;
          this.startIndex = 0;
          this.endIndex = 0;
          this.openTagStart = 0;
          this.tagname = "";
          this.attribname = "";
          this.attribvalue = "";
          this.attribs = null;
          this.stack = [];
          this.foreignContext = [];
          this.buffers = [];
          this.bufferOffset = 0;
          this.writeIndex = 0;
          this.ended = false;
          this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
          this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
          this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
          this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);
          (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
        }
        Parser3.prototype.ontext = function(start, endIndex) {
          var _a, _b;
          var data = this.getSlice(start, endIndex);
          this.endIndex = endIndex - 1;
          (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
          this.startIndex = endIndex;
        };
        Parser3.prototype.ontextentity = function(cp) {
          var _a, _b;
          var index = this.tokenizer.getSectionStart();
          this.endIndex = index - 1;
          (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));
          this.startIndex = index;
        };
        Parser3.prototype.isVoidElement = function(name) {
          return !this.options.xmlMode && voidElements.has(name);
        };
        Parser3.prototype.onopentagname = function(start, endIndex) {
          this.endIndex = endIndex;
          var name = this.getSlice(start, endIndex);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          this.emitOpenTag(name);
        };
        Parser3.prototype.emitOpenTag = function(name) {
          var _a, _b, _c, _d;
          this.openTagStart = this.startIndex;
          this.tagname = name;
          var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
          if (impliesClose) {
            while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
              var element = this.stack.pop();
              (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
            }
          }
          if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
              this.foreignContext.push(true);
            } else if (htmlIntegrationElements.has(name)) {
              this.foreignContext.push(false);
            }
          }
          (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
          if (this.cbs.onopentag)
            this.attribs = {};
        };
        Parser3.prototype.endOpenTag = function(isImplied) {
          var _a, _b;
          this.startIndex = this.openTagStart;
          if (this.attribs) {
            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
            this.attribs = null;
          }
          if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
          }
          this.tagname = "";
        };
        Parser3.prototype.onopentagend = function(endIndex) {
          this.endIndex = endIndex;
          this.endOpenTag(false);
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onclosetag = function(start, endIndex) {
          var _a, _b, _c, _d, _e, _f;
          this.endIndex = endIndex;
          var name = this.getSlice(start, endIndex);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
          }
          if (!this.isVoidElement(name)) {
            var pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
              if (this.cbs.onclosetag) {
                var count2 = this.stack.length - pos;
                while (count2--) {
                  this.cbs.onclosetag(this.stack.pop(), count2 !== 0);
                }
              } else
                this.stack.length = pos;
            } else if (!this.options.xmlMode && name === "p") {
              this.emitOpenTag("p");
              this.closeCurrentTag(true);
            }
          } else if (!this.options.xmlMode && name === "br") {
            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, "br");
            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", false);
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onselfclosingtag = function(endIndex) {
          this.endIndex = endIndex;
          if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag(false);
            this.startIndex = endIndex + 1;
          } else {
            this.onopentagend(endIndex);
          }
        };
        Parser3.prototype.closeCurrentTag = function(isOpenImplied) {
          var _a, _b;
          var name = this.tagname;
          this.endOpenTag(isOpenImplied);
          if (this.stack[this.stack.length - 1] === name) {
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
            this.stack.pop();
          }
        };
        Parser3.prototype.onattribname = function(start, endIndex) {
          this.startIndex = start;
          var name = this.getSlice(start, endIndex);
          this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
        };
        Parser3.prototype.onattribdata = function(start, endIndex) {
          this.attribvalue += this.getSlice(start, endIndex);
        };
        Parser3.prototype.onattribentity = function(cp) {
          this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
        };
        Parser3.prototype.onattribend = function(quote, endIndex) {
          var _a, _b;
          this.endIndex = endIndex;
          (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? void 0 : null);
          if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
          }
          this.attribvalue = "";
        };
        Parser3.prototype.getInstructionName = function(value) {
          var index = value.search(reNameEnd);
          var name = index < 0 ? value : value.substr(0, index);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          return name;
        };
        Parser3.prototype.ondeclaration = function(start, endIndex) {
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex);
          if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onprocessinginstruction = function(start, endIndex) {
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex);
          if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.oncomment = function(start, endIndex, offset) {
          var _a, _b, _c, _d;
          this.endIndex = endIndex;
          (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
          (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.oncdata = function(start, endIndex, offset) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          this.endIndex = endIndex;
          var value = this.getSlice(start, endIndex - offset);
          if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
          } else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value, "]]"));
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
          }
          this.startIndex = endIndex + 1;
        };
        Parser3.prototype.onend = function() {
          var _a, _b;
          if (this.cbs.onclosetag) {
            this.endIndex = this.startIndex;
            for (var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true))
              ;
          }
          (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        Parser3.prototype.reset = function() {
          var _a, _b, _c, _d;
          (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
          this.tokenizer.reset();
          this.tagname = "";
          this.attribname = "";
          this.attribs = null;
          this.stack.length = 0;
          this.startIndex = 0;
          this.endIndex = 0;
          (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
          this.buffers.length = 0;
          this.bufferOffset = 0;
          this.writeIndex = 0;
          this.ended = false;
        };
        Parser3.prototype.parseComplete = function(data) {
          this.reset();
          this.end(data);
        };
        Parser3.prototype.getSlice = function(start, end) {
          while (start - this.bufferOffset >= this.buffers[0].length) {
            this.shiftBuffer();
          }
          var slice3 = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
          while (end - this.bufferOffset > this.buffers[0].length) {
            this.shiftBuffer();
            slice3 += this.buffers[0].slice(0, end - this.bufferOffset);
          }
          return slice3;
        };
        Parser3.prototype.shiftBuffer = function() {
          this.bufferOffset += this.buffers[0].length;
          this.writeIndex--;
          this.buffers.shift();
        };
        Parser3.prototype.write = function(chunk) {
          var _a, _b;
          if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
            return;
          }
          this.buffers.push(chunk);
          if (this.tokenizer.running) {
            this.tokenizer.write(chunk);
            this.writeIndex++;
          }
        };
        Parser3.prototype.end = function(chunk) {
          var _a, _b;
          if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
            return;
          }
          if (chunk)
            this.write(chunk);
          this.ended = true;
          this.tokenizer.end();
        };
        Parser3.prototype.pause = function() {
          this.tokenizer.pause();
        };
        Parser3.prototype.resume = function() {
          this.tokenizer.resume();
          while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
            this.tokenizer.write(this.buffers[this.writeIndex++]);
          }
          if (this.ended)
            this.tokenizer.end();
        };
        Parser3.prototype.parseChunk = function(chunk) {
          this.write(chunk);
        };
        Parser3.prototype.done = function(chunk) {
          this.end(chunk);
        };
        return Parser3;
      }()
    );
    exports.Parser = Parser2;
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/index.js
var require_lib80 = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/node_modules/htmlparser2/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;
    var Parser_js_1 = require_Parser3();
    var Parser_js_2 = require_Parser3();
    Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
      return Parser_js_2.Parser;
    } });
    var domhandler_1 = require_lib70();
    var domhandler_2 = require_lib70();
    Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
      return domhandler_2.DomHandler;
    } });
    function parseDocument(data, options) {
      var handler = new domhandler_1.DomHandler(void 0, options);
      new Parser_js_1.Parser(handler, options).end(data);
      return handler.root;
    }
    exports.parseDocument = parseDocument;
    function parseDOM(data, options) {
      return parseDocument(data, options).children;
    }
    exports.parseDOM = parseDOM;
    function createDomStream(callback, options, elementCallback) {
      var handler = new domhandler_1.DomHandler(callback, options, elementCallback);
      return new Parser_js_1.Parser(handler, options);
    }
    exports.createDomStream = createDomStream;
    var Tokenizer_js_1 = require_Tokenizer3();
    Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
      return __importDefault(Tokenizer_js_1).default;
    } });
    exports.ElementType = __importStar(require_lib69());
    var domutils_1 = require_lib73();
    var domutils_2 = require_lib73();
    Object.defineProperty(exports, "getFeed", { enumerable: true, get: function() {
      return domutils_2.getFeed;
    } });
    var parseFeedDefaultOptions = { xmlMode: true };
    function parseFeed(feed, options) {
      if (options === void 0) {
        options = parseFeedDefaultOptions;
      }
      return (0, domutils_1.getFeed)(parseDOM(feed, options));
    }
    exports.parseFeed = parseFeed;
    exports.DomUtils = __importStar(require_lib73());
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/vocab-registry-default.json
var require_vocab_registry_default = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/vocab-registry-default.json"(exports, module) {
    module.exports = {
      "http://schema.org/": {
        properties: {
          additionalType: { subPropertyOf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" }
        }
      },
      "http://microformats.org/profile/hcard": {}
    };
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/MicrodataRdfParser.js
var require_MicrodataRdfParser = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/lib/MicrodataRdfParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MicrodataRdfParser = void 0;
    var htmlparser2_1 = require_lib80();
    var readable_stream_1 = require_browser2();
    var ItemPropertyHandlerContent_1 = require_ItemPropertyHandlerContent();
    var ItemPropertyHandlerNumber_1 = require_ItemPropertyHandlerNumber();
    var ItemPropertyHandlerTime_1 = require_ItemPropertyHandlerTime();
    var ItemPropertyHandlerUrl_1 = require_ItemPropertyHandlerUrl();
    var Util_1 = require_Util4();
    var VOCAB_REGISTRY_DEFAULT = require_vocab_registry_default();
    var MicrodataRdfParser = class _MicrodataRdfParser extends readable_stream_1.Transform {
      constructor(options) {
        super({ readableObjectMode: true });
        this.itemScopeStack = [];
        this.textBufferStack = [];
        this.isEmittingReferences = false;
        this.pendingItemRefsDomain = {};
        this.pendingItemRefsRangeFinalized = {};
        this.pendingItemRefsRangeCollecting = {};
        options = options || {};
        this.options = options;
        this.util = new Util_1.Util(options.dataFactory, options.baseIRI);
        this.defaultGraph = options.defaultGraph || this.util.dataFactory.defaultGraph();
        this.htmlParseListener = options.htmlParseListener;
        this.vocabRegistry = options.vocabRegistry || VOCAB_REGISTRY_DEFAULT;
        this.parser = this.initializeParser(!!options.xmlMode);
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
        stream.on("error", (error) => parsed.emit("error", error));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _MicrodataRdfParser(this.options));
        return parsed;
      }
      _transform(chunk, encoding, callback) {
        this.parser.write(chunk.toString());
        callback();
      }
      _flush(callback) {
        this.parser.end();
        callback();
      }
      /**
       * Get the current item scope for the current depth.
       * This will skip all undefined item scopes.
       * @param parent If we should start looking one level higher in the stack.
       */
      getItemScope(parent) {
        let parentTagI = this.itemScopeStack.length - (parent ? 2 : 1);
        while (parentTagI > 0 && !this.itemScopeStack[parentTagI]) {
          parentTagI--;
        }
        return this.itemScopeStack[parentTagI];
      }
      /**
       * Get the current stack depth.
       */
      getDepth() {
        return this.itemScopeStack.length;
      }
      onTagOpen(name, attributes) {
        if (!this.isEmittingReferences) {
          if ("id" in attributes) {
            const id = attributes.id;
            this.pendingItemRefsRangeCollecting[id] = {
              events: [],
              counter: 0,
              ids: []
            };
          }
          for (const buffer of Object.values(this.pendingItemRefsRangeCollecting)) {
            buffer.counter++;
            buffer.events.push({ type: "open", name, attributes });
          }
        }
        this.textBufferStack.push(void 0);
        let itemScope;
        if ("itemscope" in attributes) {
          let subject;
          if (this.emittingReferencesItemScopeIdGenerator) {
            subject = this.emittingReferencesItemScopeIdGenerator();
          } else {
            subject = "itemid" in attributes && this.util.createSubject(attributes.itemid) || this.util.dataFactory.blankNode();
            for (const buffer of Object.values(this.pendingItemRefsRangeCollecting)) {
              buffer.ids.push(subject);
            }
          }
          itemScope = { subject };
          if (this.isEmittingReferences) {
            itemScope.blockEmission = true;
          }
          const parentItemScope = this.getItemScope();
          if (parentItemScope && parentItemScope.vocab) {
            itemScope.vocab = parentItemScope.vocab;
          }
          this.itemScopeStack.push(itemScope);
        } else {
          itemScope = this.getItemScope();
          this.itemScopeStack.push(void 0);
        }
        if (itemScope) {
          if ("itemtype" in attributes) {
            for (const type of this.util.createVocabIris(attributes.itemtype, itemScope, false)) {
              if (!itemScope.vocab) {
                itemScope.vocab = this.util.deriveVocab(type.value, this.vocabRegistry);
              }
              if (!itemScope.blockEmission) {
                this.emitTriple(itemScope.subject, this.util.dataFactory.namedNode(`${Util_1.Util.RDF}type`), type);
              }
            }
          }
          if ("lang" in attributes) {
            itemScope.language = attributes.lang;
          }
          if ("xml:lang" in attributes) {
            itemScope.language = attributes["xml:lang"];
          }
          if ("itemscope" in attributes && !this.isEmittingReferences && "itemref" in attributes) {
            for (const reference of attributes.itemref.split(/\s+/u)) {
              if (!(reference in this.pendingItemRefsDomain)) {
                this.pendingItemRefsDomain[reference] = [];
              }
              this.pendingItemRefsDomain[reference].push(itemScope);
              this.tryToEmitReferences(reference, itemScope);
            }
          }
        }
        if ("itemprop" in attributes) {
          this.handleItemProperties(attributes.itemprop, false, itemScope, name, attributes);
        }
        if ("itemprop-reverse" in attributes) {
          this.handleItemProperties(attributes["itemprop-reverse"], true, itemScope, name, attributes);
        }
      }
      onText(data) {
        if (!this.isEmittingReferences) {
          for (const buffer of Object.values(this.pendingItemRefsRangeCollecting)) {
            buffer.events.push({ type: "text", data });
          }
        }
        for (const textBuffer of this.textBufferStack) {
          if (textBuffer) {
            textBuffer.push(data);
          }
        }
      }
      onTagClose() {
        if (!this.isEmittingReferences) {
          for (const [reference, buffer] of Object.entries(this.pendingItemRefsRangeCollecting)) {
            buffer.counter--;
            buffer.events.push({ type: "close" });
            if (buffer.counter === 0) {
              this.pendingItemRefsRangeFinalized[reference] = buffer;
              delete this.pendingItemRefsRangeCollecting[reference];
              this.tryToEmitReferences(reference);
            }
          }
        }
        const itemScope = this.getItemScope(true);
        if (itemScope) {
          const depth = this.getDepth();
          if (itemScope.predicates && depth in itemScope.predicates) {
            for (const [predicateKey, predicates] of Object.entries(itemScope.predicates[depth])) {
              const object = this.util.createLiteral(this.textBufferStack[depth].join(""), itemScope);
              this.emitPredicateTriples(itemScope, predicates, object, predicateKey === "reverse");
              delete itemScope.predicates[depth][predicateKey];
            }
          }
        }
        this.itemScopeStack.pop();
        this.textBufferStack.pop();
      }
      onEnd() {
      }
      /**
       * Initialize a new HtmlParser.
       * @param xmlMode If the parser should be setup in strict mode.
       */
      initializeParser(xmlMode) {
        return new htmlparser2_1.Parser({
          onclosetag: () => {
            try {
              this.onTagClose();
              if (this.htmlParseListener) {
                this.htmlParseListener.onTagClose();
              }
            } catch (error) {
              this.emit("error", error);
            }
          },
          onend: () => {
            try {
              this.onEnd();
              if (this.htmlParseListener) {
                this.htmlParseListener.onEnd();
              }
            } catch (error) {
              this.emit("error", error);
            }
          },
          onopentag: (name, attributes) => {
            try {
              this.onTagOpen(name, attributes);
              if (this.htmlParseListener) {
                this.htmlParseListener.onTagOpen(name, attributes);
              }
            } catch (error) {
              this.emit("error", error);
            }
          },
          ontext: (data) => {
            try {
              this.onText(data);
              if (this.htmlParseListener) {
                this.htmlParseListener.onText(data);
              }
            } catch (error) {
              this.emit("error", error);
            }
          }
        }, {
          decodeEntities: true,
          recognizeSelfClosing: true,
          xmlMode
        });
      }
      /**
       * Handle the given item properties.
       * @param itempropValue The value of itemprop or itemprop-reverse.
       * @param reverse If the item properties are reversed (itemprop-reverse).
       * @param itemScope The current item scope.
       * @param tagName The current tag name.
       * @param tagAttributes The current tag attributes.
       */
      handleItemProperties(itempropValue, reverse3, itemScope, tagName, tagAttributes) {
        const parentItemScope = this.getItemScope(true);
        if (parentItemScope) {
          const depth = this.getDepth();
          const predicates = this.util.createVocabIris(itempropValue, parentItemScope, true);
          if (!parentItemScope.predicates) {
            parentItemScope.predicates = {};
          }
          if (!parentItemScope.predicates[depth]) {
            parentItemScope.predicates[depth] = {};
          }
          const predicatesKey = reverse3 ? "reverse" : "forward";
          parentItemScope.predicates[depth][predicatesKey] = predicates;
          for (const vocabularyExpansionType of this.util.getVocabularyExpansionType(itempropValue, parentItemScope, this.vocabRegistry)) {
            predicates.push(vocabularyExpansionType);
          }
          if (itemScope && "itemscope" in tagAttributes) {
            this.emitPredicateTriples(parentItemScope, predicates, itemScope.subject, reverse3);
            delete parentItemScope.predicates[depth][predicatesKey];
          } else {
            for (const handler of _MicrodataRdfParser.ITEM_PROPERTY_HANDLERS) {
              if (handler.canHandle(tagName, tagAttributes)) {
                const object = handler.getObject(tagAttributes, this.util, parentItemScope);
                this.emitPredicateTriples(parentItemScope, predicates, object, reverse3);
                delete parentItemScope.predicates[depth][predicatesKey];
              }
            }
          }
          if (parentItemScope.predicates[depth][predicatesKey]) {
            this.textBufferStack[depth] = [];
          }
        }
      }
      /**
       * Emit the given object for the given predicates.
       * @param itemScope The current item scope.
       * @param predicates An array of predicates.
       * @param object An object.
       * @param reverse If the triples should be reversed.
       */
      emitPredicateTriples(itemScope, predicates, object, reverse3) {
        if (!itemScope.blockEmission) {
          for (const predicate of predicates) {
            if (reverse3) {
              if (object.termType !== "Literal") {
                this.emitTriple(object, predicate, itemScope.subject);
              }
            } else {
              this.emitTriple(itemScope.subject, predicate, object);
            }
          }
        }
      }
      /**
       * Emit the given triple to the stream.
       * @param {Quad_Subject} subject A subject term.
       * @param {Quad_Predicate} predicate A predicate term.
       * @param {Quad_Object} object An object term.
       */
      emitTriple(subject, predicate, object) {
        this.push(this.util.dataFactory.quad(subject, predicate, object, this.defaultGraph));
      }
      /**
       * Attempt to emit all pending itemrefs for the given reference.
       * @param reference An item reference id.
       * @param itemScopeDomain An optional item scope. If defined, only refs from this scope will be emitted.
       */
      tryToEmitReferences(reference, itemScopeDomain) {
        const range = this.pendingItemRefsRangeFinalized[reference];
        if (range) {
          let applicableItemScopes;
          if (itemScopeDomain) {
            applicableItemScopes = [itemScopeDomain];
            const itemScopeDomainIndex = this.pendingItemRefsDomain[reference].indexOf(itemScopeDomain);
            this.pendingItemRefsDomain[reference].splice(itemScopeDomainIndex, 1);
          } else {
            applicableItemScopes = this.pendingItemRefsDomain[reference];
            delete this.pendingItemRefsDomain[reference];
          }
          if (applicableItemScopes) {
            const itemScopeStackOld = this.itemScopeStack;
            const textBufferStackOld = this.textBufferStack;
            this.isEmittingReferences = true;
            for (const itemScope of applicableItemScopes) {
              this.itemScopeStack = [itemScope];
              this.textBufferStack = [void 0];
              const pendingIds = [...range.ids];
              this.emittingReferencesItemScopeIdGenerator = () => pendingIds.shift();
              for (const event of range.events) {
                switch (event.type) {
                  case "open":
                    this.onTagOpen(event.name, event.attributes);
                    break;
                  case "text":
                    this.onText(event.data);
                    break;
                  case "close":
                    this.onTagClose();
                    break;
                }
              }
            }
            this.emittingReferencesItemScopeIdGenerator = void 0;
            this.itemScopeStack = itemScopeStackOld;
            this.textBufferStack = textBufferStackOld;
            this.isEmittingReferences = false;
          }
        }
      }
    };
    exports.MicrodataRdfParser = MicrodataRdfParser;
    MicrodataRdfParser.ITEM_PROPERTY_HANDLERS = [
      new ItemPropertyHandlerContent_1.ItemPropertyHandlerContent(),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("a", "href"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("area", "href"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("audio", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("embed", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("iframe", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("img", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("link", "href"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("object", "data"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("source", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("track", "src"),
      new ItemPropertyHandlerUrl_1.ItemPropertyHandlerUrl("video", "src"),
      new ItemPropertyHandlerNumber_1.ItemPropertyHandlerNumber("data", "value"),
      new ItemPropertyHandlerNumber_1.ItemPropertyHandlerNumber("meter", "value"),
      new ItemPropertyHandlerTime_1.ItemPropertyHandlerTime()
    ];
  }
});

// ../../lipdjs/node_modules/microdata-rdf-streaming-parser/index.js
var require_microdata_rdf_streaming_parser = __commonJS({
  "../../lipdjs/node_modules/microdata-rdf-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IItemPropertyHandler(), exports);
    __exportStar(require_ItemPropertyHandlerContent(), exports);
    __exportStar(require_ItemPropertyHandlerNumber(), exports);
    __exportStar(require_ItemPropertyHandlerTime(), exports);
    __exportStar(require_ItemPropertyHandlerUrl(), exports);
    __exportStar(require_IHtmlParseListener2(), exports);
    __exportStar(require_IItemScope(), exports);
    __exportStar(require_IVocabRegistry(), exports);
    __exportStar(require_MicrodataRdfParser(), exports);
    __exportStar(require_Util4(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-microdata/lib/ActorRdfParseHtmlMicrodata.js
var require_ActorRdfParseHtmlMicrodata = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-microdata/lib/ActorRdfParseHtmlMicrodata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseHtmlMicrodata = void 0;
    var bus_rdf_parse_html_1 = require_lib79();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var microdata_rdf_streaming_parser_1 = require_microdata_rdf_streaming_parser();
    var ActorRdfParseHtmlMicrodata = class extends bus_rdf_parse_html_1.ActorRdfParseHtml {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const mediaType = action.headers ? action.headers.get("content-type") : null;
        const xmlMode = mediaType == null ? void 0 : mediaType.includes("xml");
        const htmlParseListener = new microdata_rdf_streaming_parser_1.MicrodataRdfParser({ dataFactory, baseIRI: action.baseIRI, xmlMode });
        htmlParseListener.on("error", action.error);
        htmlParseListener.on("data", action.emit);
        const onTagEndOld = htmlParseListener.onEnd;
        htmlParseListener.onEnd = () => {
          onTagEndOld.call(htmlParseListener);
          action.end();
        };
        return { htmlParseListener };
      }
    };
    exports.ActorRdfParseHtmlMicrodata = ActorRdfParseHtmlMicrodata;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-microdata/lib/index.js
var require_lib81 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-microdata/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseHtmlMicrodata(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-rdfa/lib/ActorRdfParseHtmlRdfa.js
var require_ActorRdfParseHtmlRdfa = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-rdfa/lib/ActorRdfParseHtmlRdfa.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseHtmlRdfa = void 0;
    var bus_rdf_parse_html_1 = require_lib79();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var rdfa_streaming_parser_1 = require_rdfa_streaming_parser();
    var ActorRdfParseHtmlRdfa = class extends bus_rdf_parse_html_1.ActorRdfParseHtml {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const mediaType = action.headers ? action.headers.get("content-type") : null;
        const language = (action.headers && action.headers.get("content-language")) ?? void 0;
        const profile = mediaType && mediaType.includes("xml") ? "xhtml" : "html";
        const htmlParseListener = new rdfa_streaming_parser_1.RdfaParser({ dataFactory, baseIRI: action.baseIRI, profile, language });
        htmlParseListener.on("error", action.error);
        htmlParseListener.on("data", action.emit);
        const onTagEndOld = htmlParseListener.onEnd;
        htmlParseListener.onEnd = () => {
          onTagEndOld.call(htmlParseListener);
          action.end();
        };
        return { htmlParseListener };
      }
    };
    exports.ActorRdfParseHtmlRdfa = ActorRdfParseHtmlRdfa;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-rdfa/lib/index.js
var require_lib82 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-rdfa/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseHtmlRdfa(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links/lib/ActorRdfResolveHypermediaLinks.js
var require_ActorRdfResolveHypermediaLinks = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links/lib/ActorRdfResolveHypermediaLinks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveHypermediaLinks = void 0;
    var core_1 = require_lib();
    var ActorRdfResolveHypermediaLinks = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Hypermedia link resolution failed: none of the configured actors were able to resolve links from metadata} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfResolveHypermediaLinks = ActorRdfResolveHypermediaLinks;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links/lib/index.js
var require_lib83 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveHypermediaLinks(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-next/lib/ActorRdfResolveHypermediaLinksNext.js
var require_ActorRdfResolveHypermediaLinksNext = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-next/lib/ActorRdfResolveHypermediaLinksNext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveHypermediaLinksNext = void 0;
    var bus_rdf_resolve_hypermedia_links_1 = require_lib83();
    var core_1 = require_lib();
    var ActorRdfResolveHypermediaLinksNext = class extends bus_rdf_resolve_hypermedia_links_1.ActorRdfResolveHypermediaLinks {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (!action.metadata.next || action.metadata.next.length === 0) {
          return (0, core_1.failTest)(`Actor ${this.name} requires a 'next' metadata entry.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return { links: action.metadata.next.map((url) => ({ url })) };
      }
    };
    exports.ActorRdfResolveHypermediaLinksNext = ActorRdfResolveHypermediaLinksNext;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-next/lib/index.js
var require_lib84 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-next/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveHypermediaLinksNext(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/ActorRdfResolveHypermediaLinksQueue.js
var require_ActorRdfResolveHypermediaLinksQueue = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/ActorRdfResolveHypermediaLinksQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveHypermediaLinksQueue = void 0;
    var core_1 = require_lib();
    var ActorRdfResolveHypermediaLinksQueue = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Link queue creation failed: none of the configured actors were able to create a link queue starting from ${action.firstUrl}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfResolveHypermediaLinksQueue = ActorRdfResolveHypermediaLinksQueue;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/ILinkQueue.js
var require_ILinkQueue = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/ILinkQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/LinkQueueWrapper.js
var require_LinkQueueWrapper = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/LinkQueueWrapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkQueueWrapper = void 0;
    var LinkQueueWrapper = class {
      constructor(linkQueue) {
        this.linkQueue = linkQueue;
      }
      push(link, parent) {
        return this.linkQueue.push(link, parent);
      }
      getSize() {
        return this.linkQueue.getSize();
      }
      isEmpty() {
        return this.linkQueue.isEmpty();
      }
      pop() {
        return this.linkQueue.pop();
      }
      peek() {
        return this.linkQueue.peek();
      }
    };
    exports.LinkQueueWrapper = LinkQueueWrapper;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/index.js
var require_lib85 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-resolve-hypermedia-links-queue/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveHypermediaLinksQueue(), exports);
    __exportStar(require_ILinkQueue(), exports);
    __exportStar(require_LinkQueueWrapper(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/LinkQueueFifo.js
var require_LinkQueueFifo = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/LinkQueueFifo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkQueueFifo = void 0;
    var LinkQueueFifo = class {
      constructor() {
        this.links = [];
      }
      push(link) {
        this.links.push(link);
        return true;
      }
      getSize() {
        return this.links.length;
      }
      isEmpty() {
        return this.links.length === 0;
      }
      pop() {
        return this.links.shift();
      }
      peek() {
        return this.links[0];
      }
    };
    exports.LinkQueueFifo = LinkQueueFifo;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/ActorRdfResolveHypermediaLinksQueueFifo.js
var require_ActorRdfResolveHypermediaLinksQueueFifo = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/ActorRdfResolveHypermediaLinksQueueFifo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveHypermediaLinksQueueFifo = void 0;
    var bus_rdf_resolve_hypermedia_links_queue_1 = require_lib85();
    var core_1 = require_lib();
    var LinkQueueFifo_1 = require_LinkQueueFifo();
    var ActorRdfResolveHypermediaLinksQueueFifo = class extends bus_rdf_resolve_hypermedia_links_queue_1.ActorRdfResolveHypermediaLinksQueue {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(_action) {
        return { linkQueue: new LinkQueueFifo_1.LinkQueueFifo() };
      }
    };
    exports.ActorRdfResolveHypermediaLinksQueueFifo = ActorRdfResolveHypermediaLinksQueueFifo;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/index.js
var require_lib86 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveHypermediaLinksQueueFifo(), exports);
    __exportStar(require_LinkQueueFifo(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerialize.js
var require_ActorRdfSerialize = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerialize = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var ActorRdfSerialize = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTyped {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfSerialize = ActorRdfSerialize;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerializeFixedMediaTypes.js
var require_ActorRdfSerializeFixedMediaTypes = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerializeFixedMediaTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeFixedMediaTypes = void 0;
    var actor_abstract_mediatyped_1 = require_lib32();
    var core_1 = require_lib();
    var ActorRdfSerializeFixedMediaTypes = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTypedFixed {
      /* eslint-disable max-len */
      /**
       * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor
       * @param args -
       *   \ @defaultNested {<cbrs:components/ActorRdfSerialize.jsonld#ActorRdfSerialize_default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF serialization failed: none of the configured serializers were able to handle media type ${action.handleMediaType}} busFailMessage
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked() {
        return (0, core_1.passTestVoid)();
      }
    };
    exports.ActorRdfSerializeFixedMediaTypes = ActorRdfSerializeFixedMediaTypes;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/index.js
var require_lib87 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-serialize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerialize(), exports);
    __exportStar(require_ActorRdfSerializeFixedMediaTypes(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-n3/lib/ActorRdfSerializeN3.js
var require_ActorRdfSerializeN3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-n3/lib/ActorRdfSerializeN3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeN3 = void 0;
    var bus_rdf_serialize_1 = require_lib87();
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var ActorRdfSerializeN3 = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/n-quads": 1.0,
       *       "application/trig": 0.95,
       *       "application/n-triples": 0.8,
       *       "text/turtle": 0.6,
       *       "text/n3": 0.35
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/n-quads": "http://www.w3.org/ns/formats/N-Quads",
       *       "application/trig": "http://www.w3.org/ns/formats/TriG",
       *       "application/n-triples": "http://www.w3.org/ns/formats/N-Triples",
       *       "text/turtle": "http://www.w3.org/ns/formats/Turtle",
       *       "text/n3": "http://www.w3.org/ns/formats/N3"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType) {
        const writer = new n3_1.StreamWriter({ format: mediaType });
        let data;
        if ("pipe" in action.quadStream) {
          action.quadStream.on("error", (error) => writer.emit("error", error));
          data = action.quadStream.pipe(writer);
        } else {
          data = writer.import(action.quadStream);
        }
        return { data, triples: mediaType === "text/turtle" || mediaType === "application/n-triples" || mediaType === "text/n3" };
      }
    };
    exports.ActorRdfSerializeN3 = ActorRdfSerializeN3;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-n3/lib/index.js
var require_lib88 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-n3/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeN3(), exports);
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/ErrorCoded.js
var require_ErrorCoded2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/ErrorCoded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_CODES = exports.ErrorCoded = void 0;
    var ErrorCoded = class extends Error {
      /* istanbul ignore next */
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports.ErrorCoded = ErrorCoded;
    var ERROR_CODES;
    (function(ERROR_CODES2) {
      ERROR_CODES2["COLLIDING_KEYWORDS"] = "colliding keywords";
      ERROR_CODES2["CONFLICTING_INDEXES"] = "conflicting indexes";
      ERROR_CODES2["CYCLIC_IRI_MAPPING"] = "cyclic IRI mapping";
      ERROR_CODES2["INVALID_ID_VALUE"] = "invalid @id value";
      ERROR_CODES2["INVALID_INDEX_VALUE"] = "invalid @index value";
      ERROR_CODES2["INVALID_NEST_VALUE"] = "invalid @nest value";
      ERROR_CODES2["INVALID_PREFIX_VALUE"] = "invalid @prefix value";
      ERROR_CODES2["INVALID_PROPAGATE_VALUE"] = "invalid @propagate value";
      ERROR_CODES2["INVALID_REVERSE_VALUE"] = "invalid @reverse value";
      ERROR_CODES2["INVALID_IMPORT_VALUE"] = "invalid @import value";
      ERROR_CODES2["INVALID_VERSION_VALUE"] = "invalid @version value";
      ERROR_CODES2["INVALID_BASE_IRI"] = "invalid base IRI";
      ERROR_CODES2["INVALID_CONTAINER_MAPPING"] = "invalid container mapping";
      ERROR_CODES2["INVALID_CONTEXT_ENTRY"] = "invalid context entry";
      ERROR_CODES2["INVALID_CONTEXT_NULLIFICATION"] = "invalid context nullification";
      ERROR_CODES2["INVALID_DEFAULT_LANGUAGE"] = "invalid default language";
      ERROR_CODES2["INVALID_INCLUDED_VALUE"] = "invalid @included value";
      ERROR_CODES2["INVALID_IRI_MAPPING"] = "invalid IRI mapping";
      ERROR_CODES2["INVALID_JSON_LITERAL"] = "invalid JSON literal";
      ERROR_CODES2["INVALID_KEYWORD_ALIAS"] = "invalid keyword alias";
      ERROR_CODES2["INVALID_LANGUAGE_MAP_VALUE"] = "invalid language map value";
      ERROR_CODES2["INVALID_LANGUAGE_MAPPING"] = "invalid language mapping";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_STRING"] = "invalid language-tagged string";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_VALUE"] = "invalid language-tagged value";
      ERROR_CODES2["INVALID_LOCAL_CONTEXT"] = "invalid local context";
      ERROR_CODES2["INVALID_REMOTE_CONTEXT"] = "invalid remote context";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY"] = "invalid reverse property";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_MAP"] = "invalid reverse property map";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_VALUE"] = "invalid reverse property value";
      ERROR_CODES2["INVALID_SCOPED_CONTEXT"] = "invalid scoped context";
      ERROR_CODES2["INVALID_SCRIPT_ELEMENT"] = "invalid script element";
      ERROR_CODES2["INVALID_SET_OR_LIST_OBJECT"] = "invalid set or list object";
      ERROR_CODES2["INVALID_TERM_DEFINITION"] = "invalid term definition";
      ERROR_CODES2["INVALID_TYPE_MAPPING"] = "invalid type mapping";
      ERROR_CODES2["INVALID_TYPE_VALUE"] = "invalid type value";
      ERROR_CODES2["INVALID_TYPED_VALUE"] = "invalid typed value";
      ERROR_CODES2["INVALID_VALUE_OBJECT"] = "invalid value object";
      ERROR_CODES2["INVALID_VALUE_OBJECT_VALUE"] = "invalid value object value";
      ERROR_CODES2["INVALID_VOCAB_MAPPING"] = "invalid vocab mapping";
      ERROR_CODES2["IRI_CONFUSED_WITH_PREFIX"] = "IRI confused with prefix";
      ERROR_CODES2["KEYWORD_REDEFINITION"] = "keyword redefinition";
      ERROR_CODES2["LOADING_DOCUMENT_FAILED"] = "loading document failed";
      ERROR_CODES2["LOADING_REMOTE_CONTEXT_FAILED"] = "loading remote context failed";
      ERROR_CODES2["MULTIPLE_CONTEXT_LINK_HEADERS"] = "multiple context link headers";
      ERROR_CODES2["PROCESSING_MODE_CONFLICT"] = "processing mode conflict";
      ERROR_CODES2["PROTECTED_TERM_REDEFINITION"] = "protected term redefinition";
      ERROR_CODES2["CONTEXT_OVERFLOW"] = "context overflow";
      ERROR_CODES2["INVALID_BASE_DIRECTION"] = "invalid base direction";
      ERROR_CODES2["RECURSIVE_CONTEXT_INCLUSION"] = "recursive context inclusion";
      ERROR_CODES2["INVALID_STREAMING_KEY_ORDER"] = "invalid streaming key order";
      ERROR_CODES2["INVALID_EMBEDDED_NODE"] = "invalid embedded node";
      ERROR_CODES2["INVALID_ANNOTATION"] = "invalid annotation";
    })(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js
var require_FetchDocumentLoader2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchDocumentLoader = void 0;
    var ErrorCoded_1 = require_ErrorCoded2();
    var http_link_header_1 = require_link();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var FetchDocumentLoader = class {
      constructor(fetcher) {
        this.fetcher = fetcher;
      }
      async load(url) {
        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: "application/ld+json" }) });
        if (response.ok && response.headers) {
          let mediaType = response.headers.get("Content-Type");
          if (mediaType) {
            const colonPos = mediaType.indexOf(";");
            if (colonPos > 0) {
              mediaType = mediaType.substr(0, colonPos);
            }
          }
          if (mediaType === "application/ld+json") {
            return await response.json();
          } else {
            if (response.headers.has("Link")) {
              let alternateUrl;
              response.headers.forEach((value, key) => {
                if (key === "link") {
                  const linkHeader = (0, http_link_header_1.parse)(value);
                  for (const link of linkHeader.get("type", "application/ld+json")) {
                    if (link.rel === "alternate") {
                      if (alternateUrl) {
                        throw new Error("Multiple JSON-LD alternate links were found on " + url);
                      }
                      alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                    }
                  }
                }
              });
              if (alternateUrl) {
                return this.load(alternateUrl);
              }
            }
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        } else {
          throw new Error(response.statusText || `Status code: ${response.status}`);
        }
      }
    };
    exports.FetchDocumentLoader = FetchDocumentLoader;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/Util.js
var require_Util5 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var Util = class _Util {
      /**
       * Check if the given term is a valid compact IRI.
       * Otherwise, it may be an IRI.
       * @param {string} term A term.
       * @return {boolean} If it is a compact IRI.
       */
      static isCompactIri(term) {
        return term.indexOf(":") > 0 && !(term && term[0] === "#");
      }
      /**
       * Get the prefix from the given term.
       * @see https://json-ld.org/spec/latest/json-ld/#compact-iris
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {string} The prefix or null.
       */
      static getPrefix(term, context) {
        if (term && term[0] === "#") {
          return null;
        }
        const separatorPos = term.indexOf(":");
        if (separatorPos >= 0) {
          if (term.length > separatorPos + 1 && term.charAt(separatorPos + 1) === "/" && term.charAt(separatorPos + 2) === "/") {
            return null;
          }
          const prefix = term.substr(0, separatorPos);
          if (prefix === "_") {
            return null;
          }
          if (context[prefix]) {
            return prefix;
          }
        }
        return null;
      }
      /**
       * From a given context entry value, get the string value, or the @id field.
       * @param contextValue A value for a term in a context.
       * @return {string} The id value, or null.
       */
      static getContextValueId(contextValue) {
        if (contextValue === null || typeof contextValue === "string") {
          return contextValue;
        }
        const id = contextValue["@id"];
        return id ? id : null;
      }
      /**
       * Check if the given simple term definition (string-based value of a context term)
       * should be considered a prefix.
       * @param value A simple term definition value.
       * @param options Options that define the way how expansion must be done.
       */
      static isSimpleTermDefinitionPrefix(value, options) {
        return !_Util.isPotentialKeyword(value) && (options.allowPrefixNonGenDelims || typeof value === "string" && (value[0] === "_" || _Util.isPrefixIriEndingWithGenDelim(value)));
      }
      /**
       * Check if the given keyword is of the keyword format "@"1*ALPHA.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is of the keyword format.
       */
      static isPotentialKeyword(keyword) {
        return typeof keyword === "string" && _Util.KEYWORD_REGEX.test(keyword);
      }
      /**
       * Check if the given prefix ends with a gen-delim character.
       * @param {string} prefixIri A prefix IRI.
       * @return {boolean} If the given prefix IRI is valid.
       */
      static isPrefixIriEndingWithGenDelim(prefixIri) {
        return _Util.ENDS_WITH_GEN_DELIM.test(prefixIri);
      }
      /**
       * Check if the given context value can be a prefix value.
       * @param value A context value.
       * @return {boolean} If it can be a prefix value.
       */
      static isPrefixValue(value) {
        return value && (typeof value === "string" || value && typeof value === "object");
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return Boolean(iri && _Util.IRI_REGEX.test(iri));
      }
      /**
       * Check if the given IRI is valid, this includes the possibility of being a relative IRI.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIriWeak(iri) {
        return !!iri && iri[0] !== ":" && _Util.IRI_REGEX_WEAK.test(iri);
      }
      /**
       * Check if the given keyword is a defined according to the JSON-LD specification.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is valid.
       */
      static isValidKeyword(keyword) {
        return _Util.VALID_KEYWORDS[keyword];
      }
      /**
       * Check if the given term is protected in the context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {string} key A context term.
       * @return {boolean} If the given term has an @protected flag.
       */
      static isTermProtected(context, key) {
        const value = context[key];
        return !(typeof value === "string") && value && value["@protected"];
      }
      /**
       * Check if the given context has at least one protected term.
       * @param context A context.
       * @return If the context has a protected term.
       */
      static hasProtectedTerms(context) {
        for (const key of Object.keys(context)) {
          if (_Util.isTermProtected(context, key)) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check if the given key is an internal reserved keyword.
       * @param key A context key.
       */
      static isReservedInternalKeyword(key) {
        return key.startsWith("@__");
      }
      /**
       * Check if two objects are deepEqual to on another.
       * @param object1 The first object to test.
       * @param object2 The second object to test.
       */
      static deepEqual(object1, object2) {
        const objKeys1 = Object.keys(object1);
        const objKeys2 = Object.keys(object2);
        if (objKeys1.length !== objKeys2.length)
          return false;
        return objKeys1.every((key) => {
          const value1 = object1[key];
          const value2 = object2[key];
          return value1 === value2 || value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object" && this.deepEqual(value1, value2);
        });
      }
    };
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/;
    Util.IRI_REGEX_WEAK = /(?::[^:])|\//;
    Util.KEYWORD_REGEX = /^@[a-z]+$/i;
    Util.ENDS_WITH_GEN_DELIM = /[:/?#\[\]@]$/;
    Util.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;
    Util.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;
    Util.VALID_KEYWORDS = {
      "@annotation": true,
      "@base": true,
      "@container": true,
      "@context": true,
      "@direction": true,
      "@graph": true,
      "@id": true,
      "@import": true,
      "@included": true,
      "@index": true,
      "@json": true,
      "@language": true,
      "@list": true,
      "@nest": true,
      "@none": true,
      "@prefix": true,
      "@propagate": true,
      "@protected": true,
      "@reverse": true,
      "@set": true,
      "@type": true,
      "@value": true,
      "@version": true,
      "@vocab": true
    };
    Util.EXPAND_KEYS_BLACKLIST = [
      "@base",
      "@vocab",
      "@language",
      "@version",
      "@direction"
    ];
    Util.ALIAS_DOMAIN_BLACKLIST = [
      "@container",
      "@graph",
      "@id",
      "@index",
      "@list",
      "@nest",
      "@none",
      "@prefix",
      "@reverse",
      "@set",
      "@type",
      "@value",
      "@version"
    ];
    Util.ALIAS_RANGE_BLACKLIST = [
      "@context",
      "@preserve"
    ];
    Util.CONTAINERS = [
      "@list",
      "@set",
      "@index",
      "@language",
      "@graph",
      "@id",
      "@type"
    ];
    Util.CONTAINERS_1_0 = [
      "@list",
      "@set",
      "@index"
    ];
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js
var require_JsonLdContextNormalized2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded2();
    var Util_1 = require_Util5();
    var JsonLdContextNormalized = class {
      constructor(contextRaw) {
        this.contextRaw = contextRaw;
      }
      /**
       * @return The raw inner context.
       */
      getContextRaw() {
        return this.contextRaw;
      }
      /**
       * Expand the term or prefix of the given term if it has one,
       * otherwise return the term as-is.
       *
       * This will try to expand the IRI as much as possible.
       *
       * Iff in vocab-mode, then other references to other terms in the context can be used,
       * such as to `myTerm`:
       * ```
       * {
       *   "myTerm": "http://example.org/myLongTerm"
       * }
       * ```
       *
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,
       *                              otherwise it is considered a regular term that is expanded based on @base.
       * @param {IExpandOptions} options Options that define the way how expansion must be done.
       * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.
       * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).
       */
      expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {
        const contextValue = this.contextRaw[term];
        if (contextValue === null || contextValue && contextValue["@id"] === null) {
          return null;
        }
        let validIriMapping = true;
        if (contextValue && expandVocab) {
          const value = Util_1.Util.getContextValueId(contextValue);
          if (value && value !== term) {
            if (typeof value !== "string" || !Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value)) {
              if (!Util_1.Util.isPotentialKeyword(value)) {
                validIriMapping = false;
              }
            } else {
              return value;
            }
          }
        }
        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);
        const vocab = this.contextRaw["@vocab"];
        const vocabRelative = (!!vocab || vocab === "") && vocab.indexOf(":") < 0;
        const base = this.contextRaw["@base"];
        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);
        if (prefix) {
          const contextPrefixValue = this.contextRaw[prefix];
          const value = Util_1.Util.getContextValueId(contextPrefixValue);
          if (value) {
            if (typeof contextPrefixValue === "string" || !options.allowPrefixForcing) {
              if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {
                return term;
              }
            } else {
              if (value[0] !== "_" && !potentialKeyword && !contextPrefixValue["@prefix"] && !(term in this.contextRaw)) {
                return term;
              }
            }
            return value + term.substr(prefix.length + 1);
          }
        } else if (expandVocab && (vocab || vocab === "" || options.allowVocabRelativeToBase && (base && vocabRelative)) && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          if (vocabRelative) {
            if (options.allowVocabRelativeToBase) {
              return (vocab || base ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : "") + term;
            } else {
              throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
            }
          } else {
            return vocab + term;
          }
        } else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          return (0, relative_to_absolute_iri_1.resolve)(term, base);
        }
        if (validIriMapping) {
          return term;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
        }
      }
      /**
       * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.
       *
       * This will try to compact the IRI as much as possible.
       *
       * @param {string} iri An IRI to compact.
       * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,
       *                        otherwise it is considered a regular term that is compacted based on @base.
       * @return {string} The compacted term or the IRI as-is.
       */
      compactIri(iri, vocab) {
        if (vocab && this.contextRaw["@vocab"] && iri.startsWith(this.contextRaw["@vocab"])) {
          return iri.substr(this.contextRaw["@vocab"].length);
        }
        if (!vocab && this.contextRaw["@base"] && iri.startsWith(this.contextRaw["@base"])) {
          return iri.substr(this.contextRaw["@base"].length);
        }
        const shortestPrefixing = { prefix: "", suffix: iri };
        for (const key in this.contextRaw) {
          const value = this.contextRaw[key];
          if (value && !Util_1.Util.isPotentialKeyword(key)) {
            const contextIri = Util_1.Util.getContextValueId(value);
            if (iri.startsWith(contextIri)) {
              const suffix = iri.substr(contextIri.length);
              if (!suffix) {
                if (vocab) {
                  return key;
                }
              } else if (suffix.length < shortestPrefixing.suffix.length) {
                shortestPrefixing.prefix = key;
                shortestPrefixing.suffix = suffix;
              }
            }
          }
        }
        if (shortestPrefixing.prefix) {
          return shortestPrefixing.prefix + ":" + shortestPrefixing.suffix;
        }
        return iri;
      }
    };
    exports.JsonLdContextNormalized = JsonLdContextNormalized;
    exports.defaultExpandOptions = {
      allowPrefixForcing: true,
      allowPrefixNonGenDelims: false,
      allowVocabRelativeToBase: true
    };
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/ContextParser.js
var require_ContextParser2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/ContextParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextParser = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded2();
    var FetchDocumentLoader_1 = require_FetchDocumentLoader2();
    var JsonLdContextNormalized_1 = require_JsonLdContextNormalized2();
    var Util_1 = require_Util5();
    var ContextParser = class _ContextParser {
      constructor(options) {
        options = options || {};
        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();
        this.documentCache = {};
        this.validateContext = !options.skipValidation;
        this.expandContentTypeToBase = !!options.expandContentTypeToBase;
        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;
        this.redirectSchemaOrgHttps = "redirectSchemaOrgHttps" in options ? !!options.redirectSchemaOrgHttps : true;
      }
      /**
       * Validate the given @language value.
       * An error will be thrown if it is invalid.
       * @param value An @language value.
       * @param {boolean} strictRange If the string value should be strictly checked against a regex.
       * @param {string} errorCode The error code to emit on errors.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateLanguage(value, strictRange, errorCode) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);
        }
        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {
          if (strictRange) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Validate the given @direction value.
       * An error will be thrown if it is invalid.
       * @param value An @direction value.
       * @param {boolean} strictValues If the string value should be strictly checked against a regex.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateDirection(value, strictValues) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
        }
        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {
          if (strictValues) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Add an @id term for all @reverse terms.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       */
      idifyReverseTerms(context) {
        for (const key of Object.keys(context)) {
          let value = context[key];
          if (value && typeof value === "object") {
            if (value["@reverse"] && !value["@id"]) {
              if (typeof value["@reverse"] !== "string" || Util_1.Util.isValidKeyword(value["@reverse"])) {
                throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value["@reverse"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
              }
              value = context[key] = Object.assign(Object.assign({}, value), { "@id": value["@reverse"] });
              value["@id"] = value["@reverse"];
              if (Util_1.Util.isPotentialKeyword(value["@reverse"])) {
                delete value["@reverse"];
              } else {
                value["@reverse"] = true;
              }
            }
          }
        }
        return context;
      }
      /**
       * Expand all prefixed terms in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded
       *                                          via @base if @vocab is set to null.
       * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all
       * keys in the context will be expanded.
       */
      expandPrefixedTerms(context, expandContentTypeToBase, keys2) {
        const contextRaw = context.getContextRaw();
        for (const key of keys2 || Object.keys(contextRaw)) {
          if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {
            const keyValue = contextRaw[key];
            if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {
              if (key !== "@type" || typeof contextRaw[key] === "object" && !(contextRaw[key]["@protected"] || contextRaw[key]["@container"] === "@set")) {
                throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
              }
            }
            if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {
              throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);
            }
            if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue)) && keyValue["@prefix"] === true) {
              throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            while (Util_1.Util.isPrefixValue(contextRaw[key])) {
              const value = contextRaw[key];
              let changed = false;
              if (typeof value === "string") {
                contextRaw[key] = context.expandTerm(value, true);
                changed = changed || value !== contextRaw[key];
              } else {
                const id = value["@id"];
                const type = value["@type"];
                const canAddIdEntry = !("@prefix" in value) || Util_1.Util.isValidIri(key);
                if ("@id" in value) {
                  if (id !== void 0 && id !== null && typeof id === "string") {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": context.expandTerm(id, true) });
                    changed = changed || id !== contextRaw[key]["@id"];
                  }
                } else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {
                  const newId = context.expandTerm(key, true);
                  if (newId !== key) {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": newId });
                    changed = true;
                  }
                }
                if (type && typeof type === "string" && type !== "@vocab" && (!value["@container"] || !value["@container"]["@type"]) && canAddIdEntry) {
                  let expandedType = context.expandTerm(type, true);
                  if (expandContentTypeToBase && type === expandedType) {
                    expandedType = context.expandTerm(type, false);
                  }
                  if (expandedType !== type) {
                    changed = true;
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@type": expandedType });
                  }
                }
              }
              if (!changed) {
                break;
              }
            }
          }
        }
      }
      /**
       * Normalize the @language entries in the given context to lowercase.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} parseOptions The parsing options.
       */
      normalize(context, { processingMode, normalizeLanguageTags }) {
        if (normalizeLanguageTags || processingMode === 1) {
          for (const key of Object.keys(context)) {
            if (key === "@language" && typeof context[key] === "string") {
              context[key] = context[key].toLowerCase();
            } else {
              const value = context[key];
              if (value && typeof value === "object") {
                if (typeof value["@language"] === "string") {
                  const lowercase = value["@language"].toLowerCase();
                  if (lowercase !== value["@language"]) {
                    context[key] = Object.assign(Object.assign({}, value), { "@language": lowercase });
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Convert all @container strings and array values to hash-based values.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       */
      containersToHash(context) {
        for (const key of Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if (typeof value["@container"] === "string") {
              context[key] = Object.assign(Object.assign({}, value), { "@container": { [value["@container"]]: true } });
            } else if (Array.isArray(value["@container"])) {
              const newValue = {};
              for (const containerValue of value["@container"]) {
                newValue[containerValue] = true;
              }
              context[key] = Object.assign(Object.assign({}, value), { "@container": newValue });
            }
          }
        }
      }
      /**
       * Normalize and apply context-level @protected terms onto each term separately.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {number} processingMode The processing mode.
       */
      applyScopedProtected(context, { processingMode }, expandOptions) {
        if (processingMode && processingMode >= 1.1) {
          if (context["@protected"]) {
            for (const key of Object.keys(context)) {
              if (Util_1.Util.isReservedInternalKeyword(key)) {
                continue;
              }
              if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {
                const value = context[key];
                if (value && typeof value === "object") {
                  if (!("@protected" in context[key])) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@protected": true });
                  }
                } else {
                  context[key] = {
                    "@id": value,
                    "@protected": true
                  };
                  if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@prefix": true });
                  }
                }
              }
            }
            delete context["@protected"];
          }
        }
      }
      /**
       * Check if the given context inheritance does not contain any overrides of protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.
       * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.
       * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all
       * keys defined in contextAfter will be checked.
       */
      validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(contextAfter)) {
          if (Util_1.Util.isTermProtected(contextBefore, key)) {
            if (typeof contextAfter[key] === "string") {
              contextAfter[key] = { "@id": contextAfter[key], "@protected": true };
            } else {
              contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { "@protected": true });
            }
            if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {
              throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);
            }
          }
        }
      }
      /**
       * Validate the entries of the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options The parse options.
       */
      validate(context, { processingMode }) {
        for (const key of Object.keys(context)) {
          if (Util_1.Util.isReservedInternalKeyword(key)) {
            continue;
          }
          if (key === "") {
            throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
          }
          const value = context[key];
          const valueType = typeof value;
          if (Util_1.Util.isPotentialKeyword(key)) {
            switch (key.substr(1)) {
              case "vocab":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
                }
                break;
              case "base":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);
                }
                break;
              case "language":
                if (value !== null) {
                  _ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);
                }
                break;
              case "version":
                if (value !== null && valueType !== "number") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
                }
                break;
              case "direction":
                if (value !== null) {
                  _ContextParser.validateDirection(value, true);
                }
                break;
              case "propagate":
                if (processingMode === 1) {
                  throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
                }
                if (value !== null && valueType !== "boolean") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);
                }
                break;
            }
            if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {
              throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util.getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
            }
            continue;
          }
          if (value !== null) {
            switch (valueType) {
              case "string":
                if (Util_1.Util.getPrefix(value, context) === key) {
                  throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                }
                if (Util_1.Util.isValidIriWeak(key)) {
                  if (value === "@type") {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  } else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  }
                }
                break;
              case "object":
                if (!Util_1.Util.isCompactIri(key) && !("@id" in value) && (value["@type"] === "@id" ? !context["@base"] : !context["@vocab"])) {
                  throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                }
                for (const objectKey of Object.keys(value)) {
                  const objectValue = value[objectKey];
                  if (!objectValue) {
                    continue;
                  }
                  switch (objectKey) {
                    case "@id":
                      if (Util_1.Util.isValidKeyword(objectValue) && objectValue !== "@type" && objectValue !== "@id" && objectValue !== "@graph" && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.isValidIriWeak(key)) {
                        if (objectValue === "@type") {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        } else if (Util_1.Util.isValidIri(objectValue) && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        }
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.getPrefix(objectValue, context) === key) {
                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                      }
                      break;
                    case "@type":
                      if (value["@container"] === "@type" && objectValue !== "@id" && objectValue !== "@vocab") {
                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (objectValue !== "@id" && objectValue !== "@vocab" && (processingMode === 1 || objectValue !== "@json") && (processingMode === 1 || objectValue !== "@none") && (objectValue[0] === "_" || !Util_1.Util.isValidIri(objectValue))) {
                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      break;
                    case "@reverse":
                      if (typeof objectValue === "string" && value["@id"] && value["@id"] !== objectValue) {
                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':'${objectValue}' and '${value["@id"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      if ("@nest" in value) {
                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      break;
                    case "@container":
                      if (processingMode === 1) {
                        if (Object.keys(objectValue).length > 1 || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, must be only one of ${Util_1.Util.CONTAINERS_1_0.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      for (const containerValue of Object.keys(objectValue)) {
                        if (containerValue === "@list" && value["@reverse"]) {
                          throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                        }
                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), must be one of ${Util_1.Util.CONTAINERS.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      break;
                    case "@language":
                      _ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);
                      break;
                    case "@direction":
                      _ContextParser.validateDirection(objectValue, true);
                      break;
                    case "@prefix":
                      if (objectValue !== null && typeof objectValue !== "boolean") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);
                      }
                      if (!("@id" in value) && !Util_1.Util.isValidIri(key)) {
                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@index":
                      if (processingMode === 1 || !value["@container"] || !value["@container"]["@index"]) {
                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@nest":
                      if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);
                      }
                  }
                }
                break;
              default:
                throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
          }
        }
      }
      /**
       * Apply the @base context entry to the given context under certain circumstances.
       * @param context A context.
       * @param options Parsing options.
       * @param inheritFromParent If the @base value from the parent context can be inherited.
       * @return The given context.
       */
      applyBaseEntry(context, options, inheritFromParent) {
        if (typeof context === "string") {
          return context;
        }
        if (inheritFromParent && !("@base" in context) && options.parentContext && typeof options.parentContext === "object" && "@base" in options.parentContext) {
          context["@base"] = options.parentContext["@base"];
          if (options.parentContext["@__baseDocument"]) {
            context["@__baseDocument"] = true;
          }
        }
        if (options.baseIRI && !options.external) {
          if (!("@base" in context)) {
            context["@base"] = options.baseIRI;
            context["@__baseDocument"] = true;
          } else if (context["@base"] !== null && typeof context["@base"] === "string" && !Util_1.Util.isValidIri(context["@base"])) {
            context["@base"] = (0, relative_to_absolute_iri_1.resolve)(context["@base"], options.parentContext && options.parentContext["@base"] || options.baseIRI);
          }
        }
        return context;
      }
      /**
       * Resolve relative context IRIs, or return full IRIs as-is.
       * @param {string} contextIri A context IRI.
       * @param {string} baseIRI A base IRI.
       * @return {string} The normalized context IRI.
       */
      normalizeContextIri(contextIri, baseIRI) {
        if (!Util_1.Util.isValidIri(contextIri)) {
          try {
            contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);
          } catch (_a) {
            throw new Error(`Invalid context IRI: ${contextIri}`);
          }
        }
        if (this.redirectSchemaOrgHttps && contextIri.startsWith("http://schema.org")) {
          contextIri = "https://schema.org/";
        }
        return contextIri;
      }
      /**
       * Parse scoped contexts in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options Parsing options.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all
       * keys in the context will be iterated over.
       */
      async parseInnerContexts(context, options, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if ("@context" in value && value["@context"] !== null && !options.ignoreScopedContexts) {
              if (this.validateContext) {
                try {
                  const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });
                  delete parentContext[key]["@context"];
                  await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));
                } catch (e) {
                  throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);
                }
              }
              context[key] = Object.assign(Object.assign({}, value), { "@context": (await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context }))).getContextRaw() });
            }
          }
        }
        return context;
      }
      async parse(context, options = {}, internalOptions = {}) {
        const { baseIRI, parentContext, external, processingMode = _ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing } = options;
        const remoteContexts = options.remoteContexts || {};
        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {
          throw new ErrorCoded_1.ErrorCoded("Detected an overflow in remote context inclusions: " + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);
        }
        if (context === null || context === void 0) {
          if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {
            throw new ErrorCoded_1.ErrorCoded("Illegal context nullification when terms are protected", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);
          }
          return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));
        } else if (typeof context === "string") {
          const contextIri = this.normalizeContextIri(context, baseIRI);
          const overriddenLoad = this.getOverriddenLoad(contextIri, options);
          if (overriddenLoad) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);
          }
          const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));
          this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);
          return parsedStringContext;
        } else if (Array.isArray(context)) {
          const contextIris = [];
          const contexts = await Promise.all(context.map((subContext, i) => {
            if (typeof subContext === "string") {
              const contextIri = this.normalizeContextIri(subContext, baseIRI);
              contextIris[i] = contextIri;
              const overriddenLoad = this.getOverriddenLoad(contextIri, options);
              if (overriddenLoad) {
                return overriddenLoad;
              }
              return this.load(contextIri);
            } else {
              return subContext;
            }
          }));
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);
          }
          const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise.then((accContext) => this.parse(
            contextEntry,
            Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }),
            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers
            {
              skipValidation: i < contexts.length - 1
            }
          )), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));
          this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);
          return reducedContexts;
        } else if (typeof context === "object") {
          if ("@context" in context) {
            return await this.parse(context["@context"], options);
          }
          context = Object.assign({}, context);
          if (external) {
            delete context["@base"];
          }
          this.applyBaseEntry(context, options, true);
          this.containersToHash(context);
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);
          }
          let importContext = {};
          if ("@import" in context) {
            if (processingMode >= 1.1) {
              if (typeof context["@import"] !== "string") {
                throw new ErrorCoded_1.ErrorCoded("An @import value must be a string, but got " + typeof context["@import"], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);
              }
              importContext = await this.loadImportContext(this.normalizeContextIri(context["@import"], baseIRI));
              delete context["@import"];
            } else {
              throw new ErrorCoded_1.ErrorCoded("Context importing is not supported in JSON-LD 1.0", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
            }
          }
          this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const newContext = Object.assign(importContext, context);
          this.idifyReverseTerms(newContext);
          this.normalize(newContext, { processingMode, normalizeLanguageTags });
          this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const keys2 = Object.keys(newContext);
          const overlappingKeys = [];
          if (typeof parentContext === "object") {
            for (const key in parentContext) {
              if (key in newContext) {
                overlappingKeys.push(key);
              } else {
                newContext[key] = parentContext[key];
              }
            }
          }
          await this.parseInnerContexts(newContext, options, keys2);
          const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);
          if ((newContext && newContext["@version"] || _ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1 && (context["@vocab"] && typeof context["@vocab"] === "string" || context["@vocab"] === "")) {
            if (parentContext && "@vocab" in parentContext && context["@vocab"].indexOf(":") < 0) {
              newContext["@vocab"] = parentContext["@vocab"] + context["@vocab"];
            } else if (Util_1.Util.isCompactIri(context["@vocab"]) || context["@vocab"] in newContext) {
              newContext["@vocab"] = newContextWrapped.expandTerm(context["@vocab"], true);
            }
          }
          this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys2);
          if (!ignoreProtection && parentContext && processingMode >= 1.1) {
            this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);
          }
          if (this.validateContext && !internalOptions.skipValidation) {
            this.validate(newContext, { processingMode });
          }
          return newContextWrapped;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);
        }
      }
      /**
       * Fetch the given URL as a raw JSON-LD context.
       * @param url An URL.
       * @return A promise resolving to a raw JSON-LD context.
       */
      async load(url) {
        const cached = this.documentCache[url];
        if (cached) {
          return cached;
        }
        let document;
        try {
          document = await this.documentLoader.load(url);
        } catch (e) {
          throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);
        }
        if (!("@context" in document)) {
          throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        return this.documentCache[url] = document["@context"];
      }
      /**
       * Override the given context that may be loaded.
       *
       * This will check whether or not the url is recursively being loaded.
       * @param url An URL.
       * @param options Parsing options.
       * @return An overridden context, or null.
       *         Optionally an error can be thrown if a cyclic context is detected.
       */
      getOverriddenLoad(url, options) {
        if (url in (options.remoteContexts || {})) {
          if (options.ignoreRemoteScopedContexts) {
            return url;
          } else {
            throw new ErrorCoded_1.ErrorCoded("Detected a cyclic context inclusion of " + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);
          }
        }
        return null;
      }
      /**
       * Load an @import'ed context.
       * @param importContextIri The full URI of an @import value.
       */
      async loadImportContext(importContextIri) {
        let importContext = await this.load(importContextIri);
        if (typeof importContext !== "object" || Array.isArray(importContext)) {
          throw new ErrorCoded_1.ErrorCoded("An imported context must be a single object: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        if ("@import" in importContext) {
          throw new ErrorCoded_1.ErrorCoded("An imported context can not import another context: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
        }
        importContext = Object.assign({}, importContext);
        this.containersToHash(importContext);
        return importContext;
      }
    };
    ContextParser.DEFAULT_PROCESSING_MODE = 1.1;
    exports.ContextParser = ContextParser;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/IDocumentLoader.js
var require_IDocumentLoader2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/IDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/JsonLdContext.js
var require_JsonLdContext2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/lib/JsonLdContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/index.js
var require_jsonld_context_parser2 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/node_modules/jsonld-context-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ContextParser2(), exports);
    __exportStar(require_ErrorCoded2(), exports);
    __exportStar(require_FetchDocumentLoader2(), exports);
    __exportStar(require_IDocumentLoader2(), exports);
    __exportStar(require_JsonLdContext2(), exports);
    __exportStar(require_JsonLdContextNormalized2(), exports);
    __exportStar(require_Util5(), exports);
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/lib/SeparatorType.js
var require_SeparatorType = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/lib/SeparatorType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SeparatorType = void 0;
    var SeparatorType = class {
      constructor(label) {
        this.label = label;
      }
    };
    exports.SeparatorType = SeparatorType;
    SeparatorType.COMMA = new SeparatorType(",");
    SeparatorType.OBJECT_START = new SeparatorType("{");
    SeparatorType.OBJECT_END = new SeparatorType("}");
    SeparatorType.OBJECT_END_COMMA = new SeparatorType("},");
    SeparatorType.ARRAY_START = new SeparatorType("[");
    SeparatorType.ARRAY_END = new SeparatorType("]");
    SeparatorType.ARRAY_END_COMMA = new SeparatorType("],");
    SeparatorType.GRAPH_FIELD_NONCOMPACT = new SeparatorType('"@graph": [');
    SeparatorType.GRAPH_FIELD_COMPACT = new SeparatorType('"@graph":[');
    SeparatorType.CONTEXT_FIELD = new SeparatorType('"@context":');
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/lib/Util.js
var require_Util6 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser2();
    var Util = class _Util {
      /**
       * Convert an RDF term to a JSON value.
       * @param {Term} term An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       * @param {ITermToValueOptions} options Conversion options.
       * @return {any} A JSON value.
       */
      static termToValue(term, context, options = {
        compactIds: false,
        useNativeTypes: false
      }) {
        switch (term.termType) {
          case "NamedNode":
            const compacted = context.compactIri(term.value, options.vocab);
            return options.compactIds ? compacted : { "@id": compacted };
          case "DefaultGraph":
            return options.compactIds ? term.value : { "@id": term.value };
          case "BlankNode":
            const id = `_:${term.value}`;
            return options.compactIds ? id : { "@id": id };
          case "Literal":
            if (term.datatype.value === _Util.RDF_JSON) {
              let parsedJson;
              try {
                parsedJson = JSON.parse(term.value);
              } catch (e) {
                throw new jsonld_context_parser_1.ErrorCoded("Invalid JSON literal: " + e.message, jsonld_context_parser_1.ERROR_CODES.INVALID_JSON_LITERAL);
              }
              return {
                "@value": parsedJson,
                "@type": "@json"
              };
            }
            if (options.rdfDirection === "i18n-datatype" && term.datatype.value.startsWith(_Util.I18N)) {
              const [language, direction] = term.datatype.value.substr(_Util.I18N.length, term.datatype.value.length).split("_");
              return Object.assign(Object.assign({ "@value": term.value }, language ? { "@language": language } : {}), direction ? { "@direction": direction } : {});
            }
            const stringType = term.datatype.value === _Util.XSD_STRING;
            const rawValue = {
              "@value": !stringType && options.useNativeTypes ? _Util.stringToNativeType(term.value, term.datatype.value) : term.value
            };
            if (term.language) {
              return Object.assign(Object.assign({}, rawValue), { "@language": term.language });
            } else if (!stringType && typeof rawValue["@value"] === "string") {
              return Object.assign(Object.assign({}, rawValue), { "@type": term.datatype.value });
            } else {
              return rawValue;
            }
        }
      }
      /**
       * Convert a string term to a native type.
       * If no conversion is possible, the original string will be returned.
       * @param {string} value An RDF term's string value.
       * @param {string} type
       * @return {any}
       */
      static stringToNativeType(value, type) {
        if (type.startsWith(_Util.XSD)) {
          const xsdType = type.substr(_Util.XSD.length);
          switch (xsdType) {
            case "boolean":
              if (value === "true") {
                return true;
              } else if (value === "false") {
                return false;
              }
              throw new Error(`Invalid xsd:boolean value '${value}'`);
            case "integer":
            case "number":
            case "int":
            case "byte":
            case "long":
              const parsedInt = parseInt(value, 10);
              if (isNaN(parsedInt)) {
                throw new Error(`Invalid xsd:integer value '${value}'`);
              }
              return parsedInt;
            case "float":
            case "double":
              const parsedFloat = parseFloat(value);
              if (isNaN(parsedFloat)) {
                throw new Error(`Invalid xsd:float value '${value}'`);
              }
              return parsedFloat;
          }
        }
        return value;
      }
    };
    exports.Util = Util;
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.XSD_STRING = Util.XSD + "string";
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    Util.RDF_TYPE = Util.RDF + "type";
    Util.RDF_JSON = Util.RDF + "JSON";
    Util.I18N = "https://www.w3.org/ns/i18n#";
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/lib/JsonLdSerializer.js
var require_JsonLdSerializer = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/lib/JsonLdSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonLdSerializer = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser2();
    var SeparatorType_1 = require_SeparatorType();
    var Util_1 = require_Util6();
    var readable_stream_1 = require_browser2();
    var JsonLdSerializer = class _JsonLdSerializer extends readable_stream_1.Transform {
      constructor(options = {}) {
        super({ objectMode: true });
        this.indentation = 0;
        this.options = options;
        if (this.options.baseIRI && !this.options.context) {
          this.options.context = { "@base": this.options.baseIRI };
        }
        if (this.options.context) {
          this.originalContext = this.options.context;
          this.context = new jsonld_context_parser_1.ContextParser().parse(this.options.context, { baseIRI: this.options.baseIRI });
        } else {
          this.context = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized({}));
        }
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {NodeJS.EventEmitter} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ objectMode: true });
        stream.on("error", (error) => parsed.emit("error", error));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _JsonLdSerializer(this.options));
        return parsed;
      }
      /**
       * Transforms a quad into the text stream.
       * @param {Quad} quad An RDF quad.
       * @param {string} encoding An (ignored) encoding.
       * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the transformation is done
       * @private
       */
      _transform(quad, encoding, callback) {
        this.context.then((context) => {
          this.transformQuad(quad, context);
          callback();
        }).catch(callback);
      }
      /**
       * Construct a list in an RDF.Term object that can be used
       * inside a quad's object to write into the serializer
       * as a list using the @list keyword.
       * @param {RDF.Quad_Object[]} values A list of values, can be empty.
       * @return {RDF.Quad_Object} A term that should be used in the object position of the quad that is written to the serializer.
       */
      async list(values2) {
        const context = await this.context;
        return {
          "@list": values2.map((value) => Util_1.Util.termToValue(value, context, this.options))
        };
      }
      /**
       * Called when the incoming stream is closed.
       * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the flushing is done.
       * @private
       */
      _flush(callback) {
        if (!this.opened) {
          this.pushDocumentStart();
        }
        if (this.lastPredicate) {
          this.endPredicate();
        }
        if (this.lastSubject) {
          this.endSubject();
        }
        if (this.lastGraph && this.lastGraph.termType !== "DefaultGraph") {
          this.endGraph();
        }
        this.endDocument();
        return callback(null, null);
      }
      /**
       * Transforms a quad into the text stream.
       * @param {Quad} quad An RDF quad.
       * @param {JsonLdContextNormalized} context A context for compacting.
       */
      transformQuad(quad, context) {
        if (!this.opened) {
          this.pushDocumentStart();
        }
        const lastGraphMatchesSubject = this.lastGraph && this.lastGraph.termType !== "DefaultGraph" && this.lastGraph.equals(quad.subject);
        if (!lastGraphMatchesSubject && (!this.lastGraph || !quad.graph.equals(this.lastGraph))) {
          let lastSubjectMatchesGraph = quad.graph.termType !== "DefaultGraph" && this.lastSubject && this.lastSubject.equals(quad.graph);
          if (this.lastGraph) {
            if (this.lastGraph.termType !== "DefaultGraph") {
              this.endPredicate();
              this.endSubject();
              this.endGraph(true);
              lastSubjectMatchesGraph = false;
            } else {
              if (!lastSubjectMatchesGraph) {
                this.endPredicate();
                this.endSubject(true);
              } else {
                this.endPredicate(true);
                this.lastSubject = null;
              }
            }
          }
          if (quad.graph.termType !== "DefaultGraph") {
            if (!lastSubjectMatchesGraph) {
              this.pushId(quad.graph, true, context);
            }
            this.pushSeparator(this.options.space ? SeparatorType_1.SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType_1.SeparatorType.GRAPH_FIELD_COMPACT);
            this.indentation++;
          }
          this.lastGraph = quad.graph;
        }
        if (!this.lastSubject || !quad.subject.equals(this.lastSubject)) {
          if (lastGraphMatchesSubject) {
            this.endPredicate();
            this.endSubject();
            this.indentation--;
            this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END_COMMA);
            this.lastGraph = quad.graph;
          } else {
            if (this.lastSubject) {
              this.endPredicate();
              this.endSubject(true);
            }
            this.pushId(quad.subject, true, context);
          }
          this.lastSubject = quad.subject;
        }
        if (!this.lastPredicate || !quad.predicate.equals(this.lastPredicate)) {
          if (this.lastPredicate) {
            this.endPredicate(true);
          }
          this.pushPredicate(quad.predicate, context);
        }
        this.pushObject(quad.object, context);
      }
      pushDocumentStart() {
        this.opened = true;
        if (this.originalContext && !this.options.excludeContext) {
          this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
          this.indentation++;
          this.pushSeparator(SeparatorType_1.SeparatorType.CONTEXT_FIELD);
          this.pushIndented(JSON.stringify(this.originalContext, null, this.options.space) + ",");
          this.pushSeparator(this.options.space ? SeparatorType_1.SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType_1.SeparatorType.GRAPH_FIELD_COMPACT);
          this.indentation++;
        } else {
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_START);
          this.indentation++;
        }
      }
      /**
       * Push the given term as an @id field.
       * @param {Term} term An RDF term.
       * @param startOnNewLine If `{` should start on a new line
       * @param {JsonLdContextNormalized} context The context.
       */
      pushId(term, startOnNewLine, context) {
        if (term.termType === "Quad") {
          this.pushNestedQuad(term, true, context);
        } else {
          const subjectValue = term.termType === "BlankNode" ? "_:" + term.value : context.compactIri(term.value, false);
          if (startOnNewLine) {
            this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
          } else {
            this.push(SeparatorType_1.SeparatorType.OBJECT_START.label);
            if (this.options.space) {
              this.push("\n");
            }
          }
          this.indentation++;
          this.pushIndented(this.options.space ? `"@id": "${subjectValue}",` : `"@id":"${subjectValue}",`);
        }
      }
      /**
       * Push the given predicate field.
       * @param {Term} predicate An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       */
      pushPredicate(predicate, context) {
        let property = predicate.value;
        if (!this.options.useRdfType && property === Util_1.Util.RDF_TYPE) {
          property = "@type";
          this.objectOptions = Object.assign(Object.assign({}, this.options), { compactIds: true, vocab: true });
        }
        const compactedProperty = context.compactIri(property, true);
        this.pushIndented(this.options.space ? `"${compactedProperty}": [` : `"${compactedProperty}":[`);
        this.indentation++;
        this.lastPredicate = predicate;
      }
      /**
       * Push the given object value.
       * @param {Term} object An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       */
      pushObject(object, context) {
        if (!this.hadObjectForPredicate) {
          this.hadObjectForPredicate = true;
        } else {
          this.pushSeparator(SeparatorType_1.SeparatorType.COMMA);
        }
        if (object.termType === "Quad") {
          const lastLastSubject = this.lastSubject;
          const lastLastPredicate = this.lastPredicate;
          this.hadObjectForPredicate = false;
          this.pushNestedQuad(object, false, context);
          this.endSubject(false);
          this.hadObjectForPredicate = true;
          this.lastPredicate = lastLastPredicate;
          this.lastSubject = lastLastSubject;
          return;
        }
        let value;
        try {
          if (object["@list"]) {
            value = object;
          } else {
            value = Util_1.Util.termToValue(object, context, this.objectOptions || this.options);
          }
        } catch (e) {
          return this.emit("error", e);
        }
        this.pushIndented(JSON.stringify(value, null, this.options.space));
      }
      pushNestedQuad(nestedQuad, commaAfterSubject, context) {
        this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
        this.indentation++;
        this.pushIndented(this.options.space ? `"@id": ` : `"@id":`, false);
        if (nestedQuad.graph.termType !== "DefaultGraph") {
          this.emit("error", new Error(`Found a nested quad with the non-default graph: ${nestedQuad.graph.value}`));
        }
        this.pushId(nestedQuad.subject, false, context);
        this.pushPredicate(nestedQuad.predicate, context);
        this.pushObject(nestedQuad.object, context);
        this.endPredicate(false);
        this.endSubject(commaAfterSubject);
      }
      endDocument() {
        this.opened = false;
        if (this.originalContext && !this.options.excludeContext) {
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_END);
        } else {
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
        }
      }
      /**
       * Push the end of a predicate and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endPredicate(comma) {
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.ARRAY_END_COMMA : SeparatorType_1.SeparatorType.ARRAY_END);
        this.hadObjectForPredicate = false;
        this.objectOptions = null;
        this.lastPredicate = null;
      }
      /**
       * Push the end of a subject and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endSubject(comma) {
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.OBJECT_END_COMMA : SeparatorType_1.SeparatorType.OBJECT_END);
        this.lastSubject = null;
      }
      /**
       * Push the end of a graph and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endGraph(comma) {
        this.indentation--;
        this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.OBJECT_END_COMMA : SeparatorType_1.SeparatorType.OBJECT_END);
        this.lastGraph = null;
      }
      /**
       * Puh the given separator.
       * @param {SeparatorType} type A type of separator.
       */
      pushSeparator(type) {
        this.pushIndented(type.label);
      }
      /**
       * An indentation-aware variant of {@link #push}.
       * All strings that are pushed here will be prefixed by {@link #indentation} amount of spaces.
       * @param {string} data A string.
       * @param pushNewLine If a newline should be pushed afterwards.
       */
      pushIndented(data, pushNewLine = true) {
        const prefix = this.getIndentPrefix();
        const lines = data.split("\n").map((line) => prefix + line).join("\n");
        this.push(lines);
        if (this.options.space && pushNewLine) {
          this.push("\n");
        }
      }
      /**
       * @return {string} Get the current indentation prefix based on {@link #indentation}.
       */
      getIndentPrefix() {
        return this.options.space ? this.options.space.repeat(this.indentation) : "";
      }
    };
    exports.JsonLdSerializer = JsonLdSerializer;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-serializer/index.js
var require_jsonld_streaming_serializer = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-serializer/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_JsonLdSerializer(), exports);
    __exportStar(require_Util6(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-jsonld/lib/ActorRdfSerializeJsonLd.js
var require_ActorRdfSerializeJsonLd = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-jsonld/lib/ActorRdfSerializeJsonLd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeJsonLd = void 0;
    var bus_rdf_serialize_1 = require_lib87();
    var jsonld_streaming_serializer_1 = require_jsonld_streaming_serializer();
    var ActorRdfSerializeJsonLd = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/ld+json": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, _mediaType, _context) {
        const writer = new jsonld_streaming_serializer_1.JsonLdSerializer({ space: " ".repeat(this.jsonStringifyIndentSpaces) });
        let data;
        if ("pipe" in action.quadStream) {
          action.quadStream.on("error", (error) => writer.emit("error", error));
          data = action.quadStream.pipe(writer);
        } else {
          data = writer.import(action.quadStream);
        }
        return { data };
      }
    };
    exports.ActorRdfSerializeJsonLd = ActorRdfSerializeJsonLd;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-jsonld/lib/index.js
var require_lib89 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-jsonld/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeJsonLd(), exports);
  }
});

// ../../lipdjs/node_modules/arrayify-stream/index.js
var require_arrayify_stream = __commonJS({
  "../../lipdjs/node_modules/arrayify-stream/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function promisifyEventEmitter(event, result) {
      return new Promise((resolve, reject) => {
        event.on("end", () => resolve(result));
        event.on("error", reject);
      });
    }
    function arrayifyStream(stream) {
      const array = [];
      return promisifyEventEmitter(stream.on("data", (data) => array.push(data)), array);
    }
    exports.default = arrayifyStream;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/fragment.js
var require_fragment = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/fragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fragment = void 0;
    function getFragment(inputStr) {
      let str = inputStr;
      if (str.endsWith("/") || str.endsWith("#")) {
        str = str.slice(0, str.length - 1);
      }
      const args = [];
      if (str.lastIndexOf("/") > 0) {
        args.push(str.lastIndexOf("/"));
      }
      if (str.lastIndexOf("#") > 0) {
        args.push(str.lastIndexOf("#"));
      }
      const i = Math.max(...args);
      return str.slice(i + 1);
    }
    function camelize(str) {
      var _a;
      const res = (_a = str.split(/[^a-z0-9]+/ig).filter((s) => s !== "").map((s) => s[0].toUpperCase() + s.slice(1)).join("").match(/[a-z][a-z0-9]+/ig)) === null || _a === void 0 ? void 0 : _a[0];
      return typeof res === "undefined" ? void 0 : res[0].toLowerCase() + res.slice(1);
    }
    function fragment(str) {
      let value = getFragment(str);
      value = value ? camelize(value) : void 0;
      return value || "v";
    }
    exports.fragment = fragment;
  }
});

// ../../lipdjs/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "../../lipdjs/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F.prototype = __global__;
      return new F();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g,
          iterable: "Symbol" in g && "iterator" in Symbol,
          blob: "FileReader" in g && "Blob" in g && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g,
          arrayBuffer: "ArrayBuffer" in g
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g.location.href ? g.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g.Headers && init.headers instanceof g.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g.fetch) {
          g.fetch = fetch2;
          g.Headers = Headers2;
          g.Request = Request2;
          g.Response = Response;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request2;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/fetchContext.js
var require_fetchContext = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/fetchContext.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchContext = exports.fetchJson = void 0;
    var cross_fetch_1 = require_browser_ponyfill();
    function fetchJson(url, options) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        const fetchFn = (_a = options === null || options === void 0 ? void 0 : options.fetch) !== null && _a !== void 0 ? _a : cross_fetch_1.fetch;
        return (yield fetchFn(url)).json();
      });
    }
    exports.fetchJson = fetchJson;
    function fetchContext(url, options) {
      return __awaiter(this, void 0, void 0, function* () {
        return (yield fetchJson(url, options))["@context"];
      });
    }
    exports.fetchContext = fetchContext;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupNamespace.js
var require_lookupNamespace = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupNamespace.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupUri = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupUri(prefix, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const uri = (yield (0, fetchContext_1.fetchContext)(`https://prefix.cc/${prefix}.file.jsonld`, options))[prefix];
        if (typeof uri !== "string") {
          throw new Error(`Expected uri to be a string, received: ${uri} of type ${typeof uri}`);
        }
        return uri;
      });
    }
    exports.lookupUri = lookupUri;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupPrefix.js
var require_lookupPrefix = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupPrefix.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupPrefix = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupPrefix(uri, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const url = new URL("https://prefix.cc/reverse");
        url.searchParams.append("uri", uri);
        url.searchParams.append("format", "jsonld");
        const prefixes = Object.keys(yield (0, fetchContext_1.fetchContext)(url, options));
        if (prefixes.length === 0) {
          throw new Error("No prefixes returned");
        }
        return prefixes[0];
      });
    }
    exports.lookupPrefix = lookupPrefix;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupAllPrefixes.js
var require_lookupAllPrefixes = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/lookupAllPrefixes.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupAllPrefixes = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupAllPrefixes(options) {
      return __awaiter(this, void 0, void 0, function* () {
        return (0, fetchContext_1.fetchContext)("https://prefix.cc/context", options);
      });
    }
    exports.lookupAllPrefixes = lookupAllPrefixes;
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/index.js
var require_lookup = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/lookup/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lookupNamespace(), exports);
    __exportStar(require_lookupPrefix(), exports);
    __exportStar(require_lookupAllPrefixes(), exports);
  }
});

// ../../lipdjs/node_modules/@jeswr/prefixcc/dist/index.js
var require_dist3 = __commonJS({
  "../../lipdjs/node_modules/@jeswr/prefixcc/dist/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupAllPrefixes = exports.prefixToUri = exports.uriToPrefix = void 0;
    var fragment_1 = require_fragment();
    var lookup_1 = require_lookup();
    function uriToPrefix(uri, options) {
      return __awaiter(this, void 0, void 0, function* () {
        let result;
        try {
          result = yield (0, lookup_1.lookupPrefix)(uri, options);
        } catch (_a) {
          if (options === null || options === void 0 ? void 0 : options.mintOnUnknown) {
            result = (0, fragment_1.fragment)(uri).slice(0, 4);
          }
        }
        if (typeof result !== "undefined" && typeof (options === null || options === void 0 ? void 0 : options.existingPrefixes) === "object" && result in options.existingPrefixes) {
          let i = 0;
          while (`${result}${i}` in options.existingPrefixes) {
            i += 1;
          }
          result = `${result}${i}`;
        }
        return result;
      });
    }
    exports.uriToPrefix = uriToPrefix;
    function prefixToUri(prefix, options) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          return yield (0, lookup_1.lookupUri)(prefix, options);
        } catch (_a) {
          return void 0;
        }
      });
    }
    exports.prefixToUri = prefixToUri;
    var lookup_2 = require_lookup();
    Object.defineProperty(exports, "lookupAllPrefixes", { enumerable: true, get: function() {
      return lookup_2.lookupAllPrefixes;
    } });
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/utils.js
var require_utils3 = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getShaclName = void 0;
    function getShaclName(term) {
      if (term.termType !== "NamedNode" || !term.value.startsWith(
        "http://www.w3.org/ns/shacl#"
        /* sh._ */
      )) {
        throw new Error(`Term ${term.value} is not part of the SHACL namespace`);
      }
      return term.value.slice(27);
    }
    exports.getShaclName = getShaclName;
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/property-param .js
var require_property_param = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/property-param .js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      deactivated: true,
      severity: true,
      message: true,
      class: true,
      datatype: true,
      nodeKind: true,
      minExclusive: true,
      minInclusive: true,
      maxExclusive: true,
      maxInclusive: true,
      minLength: true,
      maxLength: true,
      pattern: true,
      flags: true,
      languageIn: true,
      uniqueLang: true,
      equals: true,
      disjoint: true,
      lessThan: true,
      lessThanOrEquals: true,
      qualifiedValueShape: true,
      qualifiedMinCount: true,
      qualifiedMaxCount: true,
      qualifiedValueShapesDisjoint: true,
      closed: true,
      ignoredProperties: true,
      hasValue: true,
      in: true,
      // This is here so that we can exract it from alts
      node: true
    };
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/base-prefixes.js
var require_base_prefixes = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/base-prefixes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      owl: "http://www.w3.org/2002/07/owl#",
      rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      sh: "http://www.w3.org/ns/shacl#",
      xsd: "http://www.w3.org/2001/XMLSchema#"
    };
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/node-param.js
var require_node_param = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/node-param.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      targetNode: true,
      targetObjectsOf: true,
      targetSubjectsOf: true,
      deactivated: true,
      severity: true,
      message: true,
      class: true,
      datatype: true,
      nodeKind: true,
      minExclusive: true,
      minInclusive: true,
      maxExclusive: true,
      maxInclusive: true,
      minLength: true,
      maxLength: true,
      pattern: true,
      flags: true,
      languageIn: true,
      equals: true,
      disjoint: true,
      closed: true,
      ignoredProperties: true,
      hasValue: true,
      in: true
    };
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/ShaclcGenerator.js
var require_ShaclcGenerator = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/ShaclcGenerator.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var prefixcc_1 = require_dist3();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var utils_1 = require_utils3();
    var property_param_1 = __importDefault(require_property_param());
    var base_prefixes_1 = __importDefault(require_base_prefixes());
    var node_param_1 = __importDefault(require_node_param());
    function getNamespace(str) {
      var _a;
      return (_a = /^[^]*[#/]/.exec(str)) === null || _a === void 0 ? void 0 : _a[0];
    }
    var knownNamespaces = {
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
      "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
      "http://www.w3.org/ns/shacl#": "sh",
      "http://www.w3.org/2001/XMLSchema#": "xsd"
    };
    var knownPrefixes = {
      rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      sh: "http://www.w3.org/ns/shacl#",
      xsd: "http://www.w3.org/2001/XMLSchema#"
    };
    var SHACLCWriter = class {
      constructor(store, writer, prefixes = {}, base = void 0, errorOnExtraQuads = true, mintUnspecifiedPrefixes = false, fetch2, extendedSyntax = false) {
        this.store = store;
        this.base = base;
        this.errorOnExtraQuads = errorOnExtraQuads;
        this.mintUnspecifiedPrefixes = mintUnspecifiedPrefixes;
        this.fetch = fetch2;
        this.extendedSyntax = extendedSyntax;
        this.prefixes = {};
        this.prefixRev = {};
        for (const key of Object.keys(prefixes)) {
          const iri = prefixes[key];
          const value = typeof iri === "string" ? iri : iri.value;
          if (!(value in knownNamespaces) && !(key in knownPrefixes)) {
            this.prefixRev[value] = key;
            this.prefixes[key] = value;
          }
        }
        this.writer = writer;
      }
      /**
       * Used to initiate the flow of data through the writer.
       */
      // TODO: Make initialisation async
      write() {
        return __awaiter(this, void 0, void 0, function* () {
          const onotology = this.store.getQuads(null, "http://www.w3.org/1999/02/22-rdf-syntax-ns#type", "http://www.w3.org/2002/07/owl#Ontology", null);
          if (onotology.length === 1 && onotology[0].subject.termType === "NamedNode") {
            const base = onotology[0].subject;
            this.store.removeQuads(onotology);
            if (!base.equals(new n3_1.NamedNode("urn:x-base:default")))
              this.writer.add(`BASE ${(0, rdf_string_ttl_1.termToString)(base)}`);
            yield this.writeImports(base);
          } else {
            throw new Error("Base expected");
          }
          if (this.mintUnspecifiedPrefixes) {
            const namespaces = /* @__PURE__ */ new Set();
            for (const term of [
              ...this.store.getSubjects(null, null, null),
              ...this.store.getPredicates(null, null, null),
              ...this.store.getObjects(null, null, null)
            ]) {
              if (term.termType === "NamedNode") {
                const namespace = getNamespace(term.value);
                if (namespace && !(namespace in this.prefixRev) && !(namespace in knownNamespaces)) {
                  namespaces.add(namespace);
                }
              }
            }
            const existingPrefixes = Object.assign(Object.assign({}, this.prefixes), knownPrefixes);
            yield Promise.all([...namespaces].map((ns) => (0, prefixcc_1.uriToPrefix)(ns, {
              fetch: this.fetch,
              mintOnUnknown: true,
              existingPrefixes
            }).then((pref) => {
              this.prefixes[pref] = ns;
              existingPrefixes[pref] = ns;
              this.prefixRev[ns] = pref;
            })));
          }
          const allNamespaces = new Set([
            ...this.store.getSubjects(null, null, null),
            ...this.store.getPredicates(null, null, null),
            ...this.store.getObjects(null, null, null)
          ].filter((term) => term.termType === "NamedNode").map((term) => getNamespace(term.value)).filter((str) => typeof str === "string"));
          for (const key in this.prefixRev) {
            if (!allNamespaces.has(key)) {
              delete this.prefixes[this.prefixRev[key]];
              delete this.prefixRev[key];
            }
          }
          yield this.writePrefixes();
          this.prefixes = Object.assign(Object.assign({}, this.prefixes), knownPrefixes);
          this.prefixRev = Object.assign(Object.assign({}, this.prefixRev), knownNamespaces);
          this.writer.newLine();
          yield this.writeShapes();
          if (this.extendedSyntax) {
            const subjects = this.store.getSubjects(null, null, null);
            if (subjects.length > 0) {
              this.writer.newLine(1);
            }
            for (const subject of subjects) {
              this.writer.add(yield this.termToString(subject, true, true));
              this.writer.add(" ");
              this.writer.indent();
              yield this.writeTurtlePredicates(subject);
              this.writer.deindent();
            }
            if (subjects.length > 0) {
              this.writer.add(" .");
              this.writer.newLine();
            }
          }
          if (this.errorOnExtraQuads && this.store.size > 0) {
            throw new Error(`Dataset contains quads that cannot be written in SHACLC [
${new n3_1.Writer({ prefixes: this.prefixes }).quadsToString(this.store.getQuads(null, null, null, null))}]`);
          }
          this.writer.end();
        });
      }
      writeImports(base) {
        return __awaiter(this, void 0, void 0, function* () {
          const imports = this.store.getObjectsOnce(base, new n3_1.NamedNode(
            "http://www.w3.org/2002/07/owl#imports"
            /* owl.imports */
          ), null);
          if (imports.length > 0) {
            for (const imp of imports) {
              this.writer.add(`IMPORTS <${imp.value}>`, true);
            }
          }
        });
      }
      writePrefixes() {
        return __awaiter(this, void 0, void 0, function* () {
          const keys2 = Object.keys(this.prefixes).filter((key) => !(key in base_prefixes_1.default)).sort();
          if (keys2.length > 0) {
            for (const key of keys2) {
              this.writer.add(`PREFIX ${key}: <${this.prefixes[key]}>`, true);
            }
          }
        });
      }
      termToString(term, disableShaclName = false, allowBlankNodes = false) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            if (disableShaclName) {
              throw new Error("Shacl name disabled");
            }
            return (0, utils_1.getShaclName)(term);
          } catch (e) {
          }
          if (term.termType === "NamedNode") {
            const namespace = getNamespace(term.value);
            if (namespace && namespace in this.prefixRev) {
              if (namespace in this.prefixRev) {
                return `${this.prefixRev[namespace]}:${term.value.slice(namespace.length)}`;
              }
            }
            return (0, rdf_string_ttl_1.termToString)(term);
          }
          if (term.termType === "Literal") {
            if (term.datatypeString === "http://www.w3.org/2001/XMLSchema#integer" || term.datatypeString === "http://www.w3.org/2001/XMLSchema#boolean") {
              return term.value;
            }
            return (0, rdf_string_ttl_1.termToString)(term);
          }
          if (term.termType === "BlankNode" && allowBlankNodes) {
            (0, rdf_string_ttl_1.termToString)(term);
          }
          throw new Error(`Invalid term type for extra statement ${term.value} (${term.termType})`);
        });
      }
      writeShapes() {
        return __awaiter(this, void 0, void 0, function* () {
          for (const subject of this.store.getSubjectsOnce(new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
            /* rdf.type */
          ), new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#NodeShape"
            /* sh.NodeShape */
          ), null)) {
            if (this.store.getQuadsOnce(subject, new n3_1.NamedNode(
              "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
              /* rdf.type */
            ), new n3_1.NamedNode(
              "http://www.w3.org/2000/01/rdf-schema#Class"
              /* rdfs.Class */
            ), null).length > 0) {
              this.writer.add("shapeClass ");
            } else {
              this.writer.add("shape ");
            }
            this.writer.add(yield this.termToString(subject));
            this.writer.add(" ");
            const targetClasses = this.store.getObjectsOnce(subject, new n3_1.NamedNode(
              "http://www.w3.org/ns/shacl#targetClass"
              /* sh.targetClass */
            ), null);
            if (targetClasses.length > 0) {
              this.writer.add("-> ");
              for (const targetClass of targetClasses) {
                if (targetClass.termType === "NamedNode") {
                  this.writer.add(yield this.termToString(targetClass));
                } else {
                  this.writer.add("!");
                  this.writer.add(yield this.termToString(this.singleObject(targetClass, new n3_1.NamedNode(
                    "http://www.w3.org/ns/shacl#not"
                    /* sh.not */
                  ), true)));
                }
                this.writer.add(" ");
              }
            }
            const unusedPredicates = this.store.getPredicates(subject, null, null).filter((property) => [
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#targetClass"
                /* sh.targetClass */
              ),
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#property"
                /* sh.property */
              ),
              // TODO: See if "and" should be here as well
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#or"
                /* sh.or */
              ),
              ...Object.keys(node_param_1.default).map((key) => new n3_1.NamedNode("http://www.w3.org/ns/shacl#" + key))
            ].every((elem) => !property.equals(elem)));
            if (unusedPredicates.length > 0) {
              this.writer.add(";");
              this.writer.indent();
              this.writer.newLine(1);
            }
            if (this.extendedSyntax) {
              yield this.writeGivenTurtlePredicates(subject, unusedPredicates);
            }
            if (unusedPredicates.length > 0) {
              this.writer.add(" ");
              this.writer.deindent();
            }
            yield this.writeShapeBody(subject, false);
          }
        });
      }
      getSingleProperty(quad, allowedPredicates) {
        let examining = [quad];
        try {
          let name = (0, utils_1.getShaclName)(quad.predicate);
          let type = "pred";
          if (name === "not") {
            const quads = this.store.getQuadsOnce(quad.object, null, null, null);
            examining = examining.concat(quads);
            if (quads.length !== 1) {
              throw new Error("Can only handle having one predicate of 'not'");
            }
            [quad] = quads;
            name = (0, utils_1.getShaclName)(quad.predicate);
            type = "not";
          }
          if (!(name in allowedPredicates)) {
            throw new Error(`${name} is not allowed`);
          }
          return { name, type, object: quad.object };
        } catch (e) {
          this.store.addQuads(examining);
        }
        return void 0;
      }
      singleLayerPropertiesList(term, allowedPredicates) {
        const result = [];
        for (const quad of this.store.getQuadsOnce(term, null, null, null)) {
          const property = this.getSingleProperty(quad, allowedPredicates);
          if (property) {
            result.push(property);
          }
        }
        return result;
      }
      expectOneProperty(term, allowedPredicates) {
        const quads = this.store.getQuadsOnce(term, null, null, null);
        if (quads.length === 1) {
          const data = this.getSingleProperty(quads[0], allowedPredicates);
          if (data) {
            return data;
          }
        }
        this.store.addQuads(quads);
        return void 0;
      }
      orProperties(term, allowedPredicates) {
        const orProperties = [];
        for (const quad of this.store.getQuadsOnce(term, new n3_1.NamedNode(
          "http://www.w3.org/ns/shacl#or"
          /* sh.or */
        ), null, null)) {
          const statement = [];
          for (const item of this.getList(quad.object)) {
            const property = this.expectOneProperty(item, allowedPredicates);
            if (!property) {
              this.store.addQuad(quad);
              throw new Error("Each entry of the 'or' statement must declare exactly one property");
            }
            statement.push(property);
          }
          orProperties.push(statement);
        }
        return orProperties;
      }
      /**
       * Extract an rdf:list
       */
      getList(term) {
        let termTemp = term;
        const list = [];
        while (!termTemp.equals(new n3_1.NamedNode(
          "http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"
          /* rdf.nil */
        ))) {
          list.push(this.singleObject(termTemp, new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#first"
            /* rdf.first */
          ), true));
          termTemp = this.singleObject(termTemp, new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"
            /* rdf.rest */
          ), true);
        }
        return list;
      }
      writeIriLiteralOrArray(object) {
        return __awaiter(this, void 0, void 0, function* () {
          if (object.termType === "BlankNode") {
            this.writer.add("[");
            let first3 = true;
            for (const term of this.getList(object)) {
              if (first3) {
                first3 = false;
              } else {
                this.writer.add(" ");
              }
              this.writer.add(yield this.termToString(term));
            }
            this.writer.add("]");
          } else {
            this.writer.add(yield this.termToString(object));
          }
        });
      }
      singleObject(subject, predicate, strict) {
        var _a;
        return (_a = this.singleQuad(subject, predicate, strict)) === null || _a === void 0 ? void 0 : _a.object;
      }
      singleQuad(subject, predicate, strict = false) {
        const objects = this.store.getQuadsOnce(subject, predicate, null, null);
        if (strict && objects.length !== 1) {
          this.store.addQuads(objects);
          throw new Error(`The subject and predicate ${subject === null || subject === void 0 ? void 0 : subject.value} ${predicate === null || predicate === void 0 ? void 0 : predicate.value} must have exactly one object. Instead has ${objects.length}`);
        }
        if (objects.length > 1) {
          this.store.addQuads(objects);
          throw new Error(`The subject and predicate ${subject === null || subject === void 0 ? void 0 : subject.value} ${predicate === null || predicate === void 0 ? void 0 : predicate.value} can have at most one object. Instead has ${objects.length}`);
        }
        return objects.length === 1 ? objects[0] : void 0;
      }
      writeAssigment({ name, type, object }) {
        return __awaiter(this, void 0, void 0, function* () {
          if (type === "not") {
            this.writer.add("!");
          }
          this.writer.add(name);
          this.writer.add("=");
          yield this.writeIriLiteralOrArray(object);
        });
      }
      writeAtom({ name, type, object }) {
        return __awaiter(this, void 0, void 0, function* () {
          if (type === "not") {
            this.writer.add("!");
          }
          switch (name) {
            case "node": {
              if (object.termType === "NamedNode") {
                this.writer.add(`@${yield this.termToString(object)}`);
              } else if (object.termType === "BlankNode") {
                yield this.writeShapeBody(object);
              } else {
                throw new Error("Invalid nested shape, must be blank node or IRI");
              }
              return;
            }
            case "nodeKind": {
              this.writer.add((0, utils_1.getShaclName)(object));
              return;
            }
            case "class": {
              this.writer.add(yield this.termToString(object));
              return;
            }
            case "datatype": {
              this.writer.add(yield this.termToString(object));
              return;
            }
            default:
              this.writer.add(name);
              this.writer.add("=");
              yield this.writeIriLiteralOrArray(object);
          }
        });
      }
      writeAssigments(assignments, divider = " ", first3 = true, shortcuts) {
        return __awaiter(this, void 0, void 0, function* () {
          for (const assignment of assignments) {
            if (first3) {
              first3 = false;
            } else {
              this.writer.add(divider);
            }
            if (shortcuts) {
              yield this.writeAtom(assignment);
            } else {
              yield this.writeAssigment(assignment);
            }
          }
        });
      }
      writeParams(term, first3 = true, allowedParam, shortcuts = false, surroundings = false) {
        return __awaiter(this, void 0, void 0, function* () {
          const or = this.orProperties(term, allowedParam);
          const params = this.singleLayerPropertiesList(term, allowedParam);
          if (surroundings && (or.length > 0 || params.length > 0)) {
            this.writer.newLine(1);
          }
          for (const statement of or) {
            if (first3) {
              first3 = false;
            } else {
              this.writer.add(" ");
            }
            yield this.writeAssigments(statement, "|", true, shortcuts);
          }
          yield this.writeAssigments(params, " ", first3, shortcuts);
          if (surroundings && (or.length > 0 || params.length > 0)) {
            this.writer.add(" .");
          }
        });
      }
      writeShapeBody(term, nested = true) {
        return __awaiter(this, void 0, void 0, function* () {
          this.writer.add("{").indent();
          const properties = this.store.getObjectsOnce(term, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#property"
            /* sh.property */
          ), null);
          yield this.writeParams(term, true, node_param_1.default, false, true);
          for (const property of properties) {
            this.writer.newLine(1);
            yield this.writeProperty(property);
          }
          this.writer.deindent().newLine(1);
          if (nested) {
            this.writer.add("} .");
          } else {
            this.writer.add("}").newLine(1);
          }
        });
      }
      writeProperty(property) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.writePath(this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#path"
            /* sh.path */
          ), true));
          const min2 = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#minCount"
            /* sh.minCount */
          ));
          const max2 = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#maxCount"
            /* sh.maxCount */
          ));
          const nodeKind = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#nodeKind"
            /* sh.nodeKind */
          ));
          const propertyClass = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#class"
            /* sh._class */
          ));
          const datatype = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#datatype"
            /* sh.datatype */
          ));
          const nodeShapes = this.store.getObjectsOnce(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#node"
            /* sh.node */
          ), null);
          if (nodeKind) {
            this.writer.add(" ");
            this.writer.add((0, utils_1.getShaclName)(nodeKind));
          }
          if (propertyClass) {
            this.writer.add(" ");
            this.writer.add(yield this.termToString(propertyClass));
          }
          if (datatype) {
            this.writer.add(" ");
            this.writer.add(yield this.termToString(datatype));
          }
          if (min2 !== void 0 || max2 !== void 0) {
            this.writer.add(" [");
            if (min2) {
              if (min2.termType !== "Literal" || min2.datatypeString !== "http://www.w3.org/2001/XMLSchema#integer") {
                throw new Error("Invalid min value, must me an integer literal");
              }
              this.writer.add(min2.value);
            } else {
              this.writer.add("0");
            }
            this.writer.add("..");
            if (max2) {
              if (max2.termType !== "Literal" || max2.datatypeString !== "http://www.w3.org/2001/XMLSchema#integer") {
                throw new Error("Invalid max value, must me an integer literal");
              }
              this.store.removeMatches(property, new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#maxCount"
                /* sh.maxCount */
              ), void 0, void 0);
              this.writer.add(max2.value);
            } else {
              this.writer.add("*");
            }
            this.writer.add("]");
          }
          yield this.writeParams(property, false, property_param_1.default, true);
          const nestedShapes = [];
          for (const node of nodeShapes) {
            if (node.termType === "NamedNode") {
              this.writer.add(" ");
              this.writer.add(`@${yield this.termToString(node)}`);
            } else if (node.termType === "BlankNode") {
              nestedShapes.push(node);
            } else {
              throw new Error("Invalid nested shape, must be blank node or IRI");
            }
          }
          for (const shape of nestedShapes) {
            this.writer.add(" ");
            yield this.writeShapeBody(shape);
          }
          if (this.extendedSyntax && this.store.getQuads(property, null, null, null).length > 0) {
            this.writer.add(" %");
            this.writer.indent();
            this.writer.newLine(1);
            yield this.writeTurtlePredicates(property);
            this.writer.deindent();
            this.writer.newLine(1);
            this.writer.add("%");
          }
          if (nestedShapes.length === 0) {
            this.writer.add(" .");
          }
        });
      }
      writeTurtlePredicates(term) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.writeGivenTurtlePredicates(term, this.store.getPredicates(term, null, null));
        });
      }
      writeGivenTurtlePredicates(term, predicates) {
        return __awaiter(this, void 0, void 0, function* () {
          let semi = false;
          if (predicates.some((predicate) => predicate.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type")))) {
            const types = this.store.getObjectsOnce(term, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), null);
            if (types.length > 0) {
              semi = true;
              this.writer.add("a ");
              yield this.writeTurtleObjects(types);
            }
          }
          for (const predicate of predicates) {
            if (!predicate.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"))) {
              if (semi) {
                this.writer.add(" ;");
                this.writer.newLine(1);
              } else {
                semi = true;
              }
              this.writer.add(yield this.termToString(predicate, true));
              this.writer.add(" ");
              yield this.writeTurtleObjects(this.store.getObjectsOnce(term, predicate, null));
            }
          }
        });
      }
      writeTurtleObjects(objects) {
        return __awaiter(this, void 0, void 0, function* () {
          const blankObjects = [];
          const nonBlankObjects = [];
          for (const object of objects) {
            if (object.termType === "BlankNode" && [...this.store.match(null, null, object), ...this.store.match(null, object, null)].length === 0) {
              blankObjects.push(object);
            } else {
              nonBlankObjects.push(object);
            }
          }
          this.writer.add((yield Promise.all(nonBlankObjects.map((object) => this.termToString(object, true, true)))).join(", "));
          let comma = nonBlankObjects.length > 0;
          if (blankObjects.length > 0) {
            for (const blank of blankObjects) {
              if (comma) {
                this.writer.add(", ");
              } else {
                comma = true;
              }
              if (!(yield this.writeList(blank))) {
                this.writer.add("[");
                this.writer.indent();
                this.writer.newLine(1);
                yield this.writeTurtlePredicates(blank);
                this.writer.deindent();
                this.writer.newLine(1);
                this.writer.add("]");
              }
            }
          }
        });
      }
      writeList(object) {
        return __awaiter(this, void 0, void 0, function* () {
          let node = object;
          const elems = [];
          const quads = [];
          while (!node.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"))) {
            const first3 = this.store.getQuadsOnce(node, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#first"), null, null);
            const rest2 = this.store.getQuadsOnce(node, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"), null, null);
            quads.push(...first3, ...rest2);
            if (first3.length !== 1 || rest2.length !== 1 || this.store.getQuads(node, null, null, null).length !== 0) {
              this.store.addQuads(quads);
              return false;
            }
            elems.push(first3[0].object);
            node = rest2[0].object;
          }
          let space = false;
          this.writer.add("(");
          for (const elem of elems) {
            if (space) {
              this.writer.add(" ");
            } else {
              space = true;
            }
            yield this.writeTurtleObjects([elem]);
          }
          this.writer.add(")");
          return true;
        });
      }
      writePath(term, braces = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (term.termType === "NamedNode") {
            this.writer.add(yield this.termToString(term));
          } else if (term.termType === "BlankNode") {
            const quads = this.store.getQuadsOnce(term, null, null, null);
            if (quads.length === 1) {
              const { predicate, object } = quads[0];
              switch (predicate.value) {
                case "http://www.w3.org/ns/shacl#inversePath":
                  this.writer.add("^");
                  yield this.writePath(object, true);
                  return;
                case "http://www.w3.org/ns/shacl#alternativePath": {
                  const alternatives = this.getList(object);
                  if (alternatives.length === 0) {
                    throw new Error("Invalid Alternative Path - no options");
                  } else if (alternatives.length === 1) {
                    yield this.writePath(alternatives[0]);
                  } else {
                    if (braces) {
                      this.writer.add("(");
                    }
                    let first3 = true;
                    for (const alt of alternatives) {
                      if (first3) {
                        first3 = false;
                      } else {
                        this.writer.add("|");
                      }
                      yield this.writePath(alt, true);
                    }
                    if (braces) {
                      this.writer.add(")");
                    }
                  }
                  return;
                }
                case "http://www.w3.org/ns/shacl#zeroOrMorePath":
                  yield this.writePath(object, true);
                  this.writer.add("*");
                  return;
                case "http://www.w3.org/ns/shacl#oneOrMorePath":
                  yield this.writePath(object, true);
                  this.writer.add("+");
                  return;
                case "http://www.w3.org/ns/shacl#zeroOrOnePath":
                  yield this.writePath(object, true);
                  this.writer.add("?");
                  return;
                default:
                  throw new Error(`Invalid path type ${term.value}`);
              }
            } else {
              this.store.addQuads(quads);
              const sequence = this.getList(term);
              if (sequence.length === 0) {
                throw new Error("Invalid Path");
              } else {
                if (braces) {
                  this.writer.add("(");
                }
                let first3 = true;
                for (const alt of sequence) {
                  if (first3) {
                    first3 = false;
                  } else {
                    this.writer.add("/");
                  }
                  yield this.writePath(alt, true);
                }
                if (braces) {
                  this.writer.add(")");
                }
              }
            }
          } else {
            throw new Error("Path should be named node or blank node");
          }
        });
      }
    };
    exports.default = SHACLCWriter;
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/writer.js
var require_writer = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/writer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Writer = class {
      constructor(options) {
        this.indents = 0;
        this.write = options.write;
        this.end = options.end;
      }
      indent() {
        this.indents += 1;
        return this;
      }
      deindent() {
        if (this.indents < 1) {
          throw new Error(`Trying to deindent when indent is only ${this.indents}`);
        }
        this.indents -= 1;
        return this;
      }
      add(s, newLine = false) {
        this.write(newLine ? `
${"	".repeat(this.indents)}${s}` : s, "utf-8");
        return this;
      }
      newLine(no = 2) {
        this.write("\n".repeat(no) + "	".repeat(this.indents), "utf-8");
        return this;
      }
    };
    exports.default = Writer;
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/volatile-store.js
var require_volatile_store = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/volatile-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var VolitileStore = class extends n3_1.Store {
      getQuadsOnce(s, p, o, g) {
        const quads = this.getQuads(s, p, o, g);
        this.removeQuads(quads);
        return quads;
      }
      getSubjectsOnce(p, o, g) {
        return this.getQuadsOnce(null, p, o, g).map((term) => term.subject);
      }
      getObjectsOnce(s, p, g) {
        return this.getQuadsOnce(s, p, null, g).map((term) => term.object);
      }
    };
    exports.default = VolitileStore;
  }
});

// ../../lipdjs/node_modules/shaclc-write/dist/index.js
var require_dist4 = __commonJS({
  "../../lipdjs/node_modules/shaclc-write/dist/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.write = void 0;
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var ShaclcGenerator_1 = __importDefault(require_ShaclcGenerator());
    var writer_1 = __importDefault(require_writer());
    var volatile_store_1 = __importDefault(require_volatile_store());
    function write(quads, options) {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          try {
            let s = "";
            const volatileStore = new volatile_store_1.default(quads);
            const graphs = volatileStore.getGraphs(null, null, null);
            if (graphs.length > 1) {
              throw new Error("More than one graph found - can serialize in the default graph");
            }
            if (graphs.length === 1 && !graphs[0].equals(n3_1.DataFactory.defaultGraph())) {
              throw new Error(`Expected all triples to be in the default graph, instead triples were in ${graphs[0].value}`);
            }
            const w = new writer_1.default({
              write: (chunk) => {
                s += chunk;
              },
              end: () => {
                let extraQuads = volatileStore.getQuads(null, null, null, null);
                if (extraQuads.length === 0) {
                  extraQuads = void 0;
                }
                resolve({
                  text: s,
                  extraQuads
                });
              }
            });
            const writer = new ShaclcGenerator_1.default(volatileStore, w, options === null || options === void 0 ? void 0 : options.prefixes, void 0, (options === null || options === void 0 ? void 0 : options.errorOnUnused) !== false, options === null || options === void 0 ? void 0 : options.mintPrefixes, options === null || options === void 0 ? void 0 : options.fetch, options === null || options === void 0 ? void 0 : options.extendedSyntax);
            yield writer.write();
          } catch (e) {
            reject(e);
          }
        }));
      });
    }
    exports.write = write;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-shaclc/lib/ActorRdfSerializeShaclc.js
var require_ActorRdfSerializeShaclc = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-shaclc/lib/ActorRdfSerializeShaclc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeShaclc = void 0;
    var bus_rdf_serialize_1 = require_lib87();
    var arrayify_stream_1 = require_arrayify_stream();
    var readable_stream_1 = require_browser2();
    var shaclc_write_1 = require_dist4();
    var ActorRdfSerializeShaclc = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/shaclc": 1.0,
       *       "text/shaclc-ext": 0.5
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/shaclc": "http://www.w3.org/ns/formats/Shaclc",
       *       "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        try {
          const prefixes = {};
          action.quadStream.on("prefix", (prefix, iri) => {
            prefixes[prefix] = iri;
          });
          const { text } = await (0, shaclc_write_1.write)(await (0, arrayify_stream_1.default)(action.quadStream), { errorOnUnused: true, extendedSyntax: mediaType === "text/shaclc-ext", prefixes });
          data.push(text);
          data.push(null);
        } catch (error) {
          data._read = () => {
            data.emit("error", error);
          };
        }
        return {
          data,
          triples: true
        };
      }
    };
    exports.ActorRdfSerializeShaclc = ActorRdfSerializeShaclc;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-serialize-shaclc/lib/index.js
var require_lib90 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-serialize-shaclc/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeShaclc(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuads.js
var require_ActorRdfUpdateQuads = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuads.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuads = void 0;
    var core_1 = require_lib();
    var ActorRdfUpdateQuads = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF updating failed: none of the configured actors were able to handle an update} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfUpdateQuads = ActorRdfUpdateQuads;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuadsDestination.js
var require_ActorRdfUpdateQuadsDestination = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuadsDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuadsDestination = exports.deskolemize = exports.deskolemizeStream = void 0;
    var actor_context_preprocess_query_source_skolemize_1 = require_lib15();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorRdfUpdateQuads_1 = require_ActorRdfUpdateQuads();
    function deskolemizeStream(dataFactory, stream, id) {
      return stream == null ? void 0 : stream.map((quad) => (0, actor_context_preprocess_query_source_skolemize_1.deskolemizeQuad)(dataFactory, quad, id));
    }
    exports.deskolemizeStream = deskolemizeStream;
    function deskolemize(action) {
      var _a;
      const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
      const destination = action.context.get(context_entries_1.KeysRdfUpdateQuads.destination);
      const id = (_a = action.context.get(context_entries_1.KeysQuerySourceIdentify.sourceIds)) == null ? void 0 : _a.get(destination);
      if (!id) {
        return action;
      }
      return {
        ...action,
        quadStreamInsert: deskolemizeStream(dataFactory, action.quadStreamInsert, id),
        quadStreamDelete: deskolemizeStream(dataFactory, action.quadStreamDelete, id)
      };
    }
    exports.deskolemize = deskolemize;
    var ActorRdfUpdateQuadsDestination = class extends ActorRdfUpdateQuads_1.ActorRdfUpdateQuads {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const destination = await this.getDestination(action.context);
        return await this.getOutput(destination, deskolemize(action));
      }
      /**
       * Get the output of the given action on a destination.
       * @param {IQuadDestination} destination A quad destination, possibly lazy.
       * @param {IActionRdfUpdateQuads} action The action.
       */
      async getOutput(destination, action) {
        const execute = async () => {
          await destination.update({ insert: action.quadStreamInsert, delete: action.quadStreamDelete });
          await (action.deleteGraphs ? destination.deleteGraphs(action.deleteGraphs.graphs, action.deleteGraphs.requireExistence, action.deleteGraphs.dropGraphs) : Promise.resolve());
          await (action.createGraphs ? destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) : Promise.resolve());
        };
        return { execute };
      }
    };
    exports.ActorRdfUpdateQuadsDestination = ActorRdfUpdateQuadsDestination;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/IQuadDestination.js
var require_IQuadDestination = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/IQuadDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/utils.js
var require_utils4 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContextDestinationUrl = exports.getContextDestination = exports.getDataDestinationContext = exports.getDataDestinationValue = exports.getDataDestinationType = exports.isDataDestinationRawType = void 0;
    var context_entries_1 = require_lib3();
    function isDataDestinationRawType(dataDestination) {
      return typeof dataDestination === "string" || "remove" in dataDestination;
    }
    exports.isDataDestinationRawType = isDataDestinationRawType;
    function getDataDestinationType(dataDestination) {
      if (typeof dataDestination === "string") {
        return "";
      }
      return "remove" in dataDestination ? "rdfjsStore" : dataDestination.type;
    }
    exports.getDataDestinationType = getDataDestinationType;
    function getDataDestinationValue(dataDestination) {
      return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;
    }
    exports.getDataDestinationValue = getDataDestinationValue;
    function getDataDestinationContext(dataDestination, context) {
      if (typeof dataDestination === "string" || "remove" in dataDestination || !dataDestination.context) {
        return context;
      }
      return context.merge(dataDestination.context);
    }
    exports.getDataDestinationContext = getDataDestinationContext;
    function getContextDestination(context) {
      return context.get(context_entries_1.KeysRdfUpdateQuads.destination);
    }
    exports.getContextDestination = getContextDestination;
    function getContextDestinationUrl(destination) {
      if (destination) {
        let fileUrl = getDataDestinationValue(destination);
        if (typeof fileUrl === "string") {
          const hashPosition = fileUrl.indexOf("#");
          if (hashPosition >= 0) {
            fileUrl = fileUrl.slice(0, hashPosition);
          }
          return fileUrl;
        }
      }
    }
    exports.getContextDestinationUrl = getContextDestinationUrl;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/index.js
var require_lib91 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-quads/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateQuads(), exports);
    __exportStar(require_ActorRdfUpdateQuadsDestination(), exports);
    __exportStar(require_IQuadDestination(), exports);
    __exportStar(require_utils4(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/RdfJsQuadDestination.js
var require_RdfJsQuadDestination = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/RdfJsQuadDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfJsQuadDestination = void 0;
    var event_emitter_promisify_1 = require_dist();
    var rdf_string_1 = require_rdf_string();
    var RdfJsQuadDestination = class {
      constructor(dataFactory, store) {
        this.dataFactory = dataFactory;
        this.store = store;
      }
      async update(quadStreams) {
        if (quadStreams.delete) {
          await (0, event_emitter_promisify_1.promisifyEventEmitter)(this.store.remove(quadStreams.delete));
        }
        if (quadStreams.insert) {
          await (0, event_emitter_promisify_1.promisifyEventEmitter)(this.store.import(quadStreams.insert));
        }
      }
      async deleteGraphs(graphs, _requireExistence, _dropGraphs) {
        switch (graphs) {
          case "ALL":
            await (0, event_emitter_promisify_1.promisifyEventEmitter)(this.store.deleteGraph(this.dataFactory.defaultGraph()));
          case "NAMED":
            const allQuads = this.store.match();
            const namedGraphs = {};
            allQuads.on("data", (quad) => {
              if (quad.graph.termType !== "DefaultGraph") {
                namedGraphs[(0, rdf_string_1.termToString)(quad.graph)] = true;
              }
            });
            await (0, event_emitter_promisify_1.promisifyEventEmitter)(allQuads);
            await Promise.all(Object.keys(namedGraphs).map((namedGraph) => (0, event_emitter_promisify_1.promisifyEventEmitter)(this.store.deleteGraph((0, rdf_string_1.stringToTerm)(namedGraph, this.dataFactory)))));
            break;
          default:
            for (const graph of Array.isArray(graphs) ? graphs : [graphs]) {
              await (0, event_emitter_promisify_1.promisifyEventEmitter)(this.store.deleteGraph(graph));
            }
        }
      }
      async createGraphs(graphs, requireNonExistence) {
        if (requireNonExistence) {
          for (const graph of graphs) {
            const eventEmitter = this.store.match(void 0, void 0, void 0, graph);
            await new Promise((resolve, reject) => {
              eventEmitter.once("data", () => {
                reject(new Error(`Unable to create graph ${graph.value} as it already exists`));
              });
              eventEmitter.on("end", resolve);
              eventEmitter.on("error", reject);
            });
          }
        }
      }
    };
    exports.RdfJsQuadDestination = RdfJsQuadDestination;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/ActorRdfUpdateQuadsRdfJsStore.js
var require_ActorRdfUpdateQuadsRdfJsStore = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/ActorRdfUpdateQuadsRdfJsStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuadsRdfJsStore = void 0;
    var bus_rdf_update_quads_1 = require_lib91();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var RdfJsQuadDestination_1 = require_RdfJsQuadDestination();
    var ActorRdfUpdateQuadsRdfJsStore = class extends bus_rdf_update_quads_1.ActorRdfUpdateQuadsDestination {
      constructor(args) {
        super(args);
      }
      async test(action) {
        var _a;
        const destination = (0, bus_rdf_update_quads_1.getContextDestination)(action.context);
        if (!destination || typeof destination === "string" || !("remove" in destination) && "value" in destination && !((_a = destination.value) == null ? void 0 : _a.remove)) {
          return (0, core_1.failTest)(`${this.name} received an invalid rdfjsStore.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async getDestination(context) {
        const destination = (0, bus_rdf_update_quads_1.getContextDestination)(context);
        return new RdfJsQuadDestination_1.RdfJsQuadDestination(context.getSafe(context_entries_1.KeysInitQuery.dataFactory), "remove" in destination ? destination : destination.value);
      }
    };
    exports.ActorRdfUpdateQuadsRdfJsStore = ActorRdfUpdateQuadsRdfJsStore;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/index.js
var require_lib92 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateQuadsRdfJsStore(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/ExpressionFunctionBnode.js
var require_ExpressionFunctionBnode = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/ExpressionFunctionBnode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionBnode = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_data_factory_1 = require_lib14();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionBnode = class _ExpressionFunctionBnode extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator: utils_expression_evaluator_1.SparqlOperator.BNODE,
          apply: async (context) => {
            const { args, mapping, exprEval } = context;
            const input = args.length === 1 ? await exprEval.evaluatorExpressionEvaluation(args[0], mapping) : void 0;
            let strInput;
            if (input) {
              const operation = _ExpressionFunctionBnode.bnodeTree.search([input], exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider), exprEval.context.getSafe(context_entries_1.KeysInitQuery.functionArgumentsCache));
              if (!operation) {
                throw new utils_expression_evaluator_1.InvalidArgumentTypes(args, utils_expression_evaluator_1.SparqlOperator.BNODE);
              }
              strInput = operation(exprEval)([input]).str();
            }
            const bnode = new utils_data_factory_1.BlankNodeBindingsScoped(strInput ?? `BNODE_${_ExpressionFunctionBnode.bnodeCounter++}`);
            return new utils_expression_evaluator_1.BlankNode(bnode);
          }
        });
      }
      checkArity(args) {
        return args.length === 0 || args.length === 1;
      }
    };
    exports.ExpressionFunctionBnode = ExpressionFunctionBnode;
    ExpressionFunctionBnode.bnodeTree = (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.BNODE).onString1(() => (arg) => arg).collect();
    ExpressionFunctionBnode.bnodeCounter = 0;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/ActorFunctionFactoryExpressionBnode.js
var require_ActorFunctionFactoryExpressionBnode = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/ActorFunctionFactoryExpressionBnode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionBnode = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionBnode_1 = require_ExpressionFunctionBnode();
    var ActorFunctionFactoryExpressionBnode = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.BNODE],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionBnode_1.ExpressionFunctionBnode();
      }
    };
    exports.ActorFunctionFactoryExpressionBnode = ActorFunctionFactoryExpressionBnode;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/index.js
var require_lib93 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bnode/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionBnode(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/ExpressionFunctionBound.js
var require_ExpressionFunctionBound = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/ExpressionFunctionBound.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionBound = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var types_1 = require_lib4();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionBound = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.BOUND,
          apply: async ({ args, mapping, exprEval }) => {
            const variable = args[0];
            if (variable.expressionType !== types_1.ExpressionType.Variable) {
              throw new utils_expression_evaluator_1.InvalidArgumentTypes(args, utils_expression_evaluator_1.SparqlOperator.BOUND);
            }
            const val = mapping.has((0, utils_expression_evaluator_1.expressionToVar)(exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory), variable));
            return (0, utils_expression_evaluator_1.bool)(val);
          }
        });
      }
    };
    exports.ExpressionFunctionBound = ExpressionFunctionBound;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/ActorFunctionFactoryExpressionBound.js
var require_ActorFunctionFactoryExpressionBound = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/ActorFunctionFactoryExpressionBound.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionBound = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionBound_1 = require_ExpressionFunctionBound();
    var ActorFunctionFactoryExpressionBound = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.BOUND],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionBound_1.ExpressionFunctionBound();
      }
    };
    exports.ActorFunctionFactoryExpressionBound = ActorFunctionFactoryExpressionBound;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/index.js
var require_lib94 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-bound/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionBound(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/ExpressionFunctionCoalesce.js
var require_ExpressionFunctionCoalesce = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/ExpressionFunctionCoalesce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionCoalesce = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionCoalesce = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator: utils_expression_evaluator_1.SparqlOperator.COALESCE,
          apply: async ({ args, mapping, exprEval }) => {
            const errors = [];
            for (const expr of args) {
              try {
                return await exprEval.evaluatorExpressionEvaluation(expr, mapping);
              } catch (error) {
                errors.push(error);
              }
            }
            throw new utils_expression_evaluator_1.CoalesceError(errors);
          }
        });
      }
    };
    exports.ExpressionFunctionCoalesce = ExpressionFunctionCoalesce;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/ActorFunctionFactoryExpressionCoalesce.js
var require_ActorFunctionFactoryExpressionCoalesce = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/ActorFunctionFactoryExpressionCoalesce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionCoalesce = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionCoalesce_1 = require_ExpressionFunctionCoalesce();
    var ActorFunctionFactoryExpressionCoalesce = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.COALESCE],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionCoalesce_1.ExpressionFunctionCoalesce();
      }
    };
    exports.ActorFunctionFactoryExpressionCoalesce = ActorFunctionFactoryExpressionCoalesce;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/index.js
var require_lib95 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-coalesce/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionCoalesce(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/ExpressionFunctionConcat.js
var require_ExpressionFunctionConcat = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/ExpressionFunctionConcat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionConcat = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionConcat = class _ExpressionFunctionConcat extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator: utils_expression_evaluator_1.SparqlOperator.CONCAT,
          apply: async (context) => {
            const { args, mapping, exprEval } = context;
            const pLits = args.map(async (expr) => exprEval.evaluatorExpressionEvaluation(expr, mapping)).map(async (pTerm) => {
              const operation = _ExpressionFunctionConcat.concatTree.search([await pTerm], exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider), exprEval.context.getSafe(context_entries_1.KeysInitQuery.functionArgumentsCache));
              if (!operation) {
                throw new utils_expression_evaluator_1.InvalidArgumentTypes(args, utils_expression_evaluator_1.SparqlOperator.CONCAT);
              }
              return operation(exprEval)([await pTerm]);
            });
            const lits = await Promise.all(pLits);
            const strings = lits.map((lit) => lit.typedValue);
            const joined = strings.join("");
            const lang = _ExpressionFunctionConcat.langAllEqual(lits) ? lits[0].language : void 0;
            return lang ? (0, utils_expression_evaluator_1.langString)(joined, lang) : (0, utils_expression_evaluator_1.string)(joined);
          }
        });
      }
      static langAllEqual(lits) {
        return lits.length > 0 && lits.every((lit) => lit.language === lits[0].language);
      }
    };
    exports.ExpressionFunctionConcat = ExpressionFunctionConcat;
    ExpressionFunctionConcat.concatTree = (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.CONCAT).onStringly1(() => (expr) => expr).collect();
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/ActorFunctionFactoryExpressionConcat.js
var require_ActorFunctionFactoryExpressionConcat = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/ActorFunctionFactoryExpressionConcat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionConcat = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionConcat_1 = require_ExpressionFunctionConcat();
    var ActorFunctionFactoryExpressionConcat = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.CONCAT],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionConcat_1.ExpressionFunctionConcat();
      }
    };
    exports.ActorFunctionFactoryExpressionConcat = ActorFunctionFactoryExpressionConcat;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/index.js
var require_lib96 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-concat/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionConcat(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/NamedExtension.js
var require_NamedExtension = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/NamedExtension.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedExtension = void 0;
    var Core_1 = require_Core();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var NamedExtension = class extends Core_1.ExpressionFunctionBase {
      constructor({ operator, functionDefinition }) {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator,
          apply: async ({ args, exprEval, mapping }) => {
            const evaluatedArgs = await Promise.all(args.map((arg) => exprEval.evaluatorExpressionEvaluation(arg, mapping)));
            try {
              return new utils_expression_evaluator_1.TermTransformer(exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider)).transformRDFTermUnsafe(await functionDefinition(evaluatedArgs.map((term) => term.toRDF(exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory)))));
            } catch (error) {
              throw new utils_expression_evaluator_1.ExtensionFunctionError(this.operator, error);
            }
          }
        });
      }
    };
    exports.NamedExtension = NamedExtension;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/ActorFunctionFactoryExpressionExtensions.js
var require_ActorFunctionFactoryExpressionExtensions = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/ActorFunctionFactoryExpressionExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionExtensions = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var NamedExtension_1 = require_NamedExtension();
    var ActorFunctionFactoryExpressionExtensions = class extends bus_function_factory_1.ActorFunctionFactory {
      constructor(args) {
        super(args);
      }
      async test({ context, functionName }) {
        const extensionFinder = context.getSafe(context_entries_1.KeysExpressionEvaluator.extensionFunctionCreator);
        const definition = await extensionFinder(new rdf_data_factory_1.DataFactory().namedNode(functionName));
        if (definition) {
          return (0, core_1.passTestVoid)();
        }
        return (0, core_1.failTest)(`Actor ${this.name} can only provide non-termExpression implementations for functions that are provided through config entries like: ${context_entries_1.KeysInitQuery.extensionFunctionCreator.name} or ${context_entries_1.KeysInitQuery.extensionFunctions.name}`);
      }
      async run({ context, functionName }) {
        const extensionFinder = context.getSafe(context_entries_1.KeysExpressionEvaluator.extensionFunctionCreator);
        const definition = await extensionFinder(new rdf_data_factory_1.DataFactory().namedNode(functionName));
        return new NamedExtension_1.NamedExtension({
          operator: functionName,
          functionDefinition: definition
        });
      }
    };
    exports.ActorFunctionFactoryExpressionExtensions = ActorFunctionFactoryExpressionExtensions;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/index.js
var require_lib97 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-extensions/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionExtensions(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/ExpressionFunctionIf.js
var require_ExpressionFunctionIf = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/ExpressionFunctionIf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionIf = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionIf = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: 3,
          operator: utils_expression_evaluator_1.SparqlOperator.IF,
          apply: async ({ args, mapping, exprEval }) => {
            const valFirst = await exprEval.evaluatorExpressionEvaluation(args[0], mapping);
            const ebv = valFirst.coerceEBV();
            return ebv ? exprEval.evaluatorExpressionEvaluation(args[1], mapping) : exprEval.evaluatorExpressionEvaluation(args[2], mapping);
          }
        });
      }
    };
    exports.ExpressionFunctionIf = ExpressionFunctionIf;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/ActorFunctionFactoryExpressionIf.js
var require_ActorFunctionFactoryExpressionIf = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/ActorFunctionFactoryExpressionIf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionIf = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionIf_1 = require_ExpressionFunctionIf();
    var ActorFunctionFactoryExpressionIf = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IF],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionIf_1.ExpressionFunctionIf();
      }
    };
    exports.ActorFunctionFactoryExpressionIf = ActorFunctionFactoryExpressionIf;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/index.js
var require_lib98 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-if/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionIf(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/ExpressionFunctionLogicalAnd.js
var require_ExpressionFunctionLogicalAnd = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/ExpressionFunctionLogicalAnd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionLogicalAnd = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionLogicalAnd = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.LOGICAL_AND,
          apply: async ({ args, mapping, exprEval }) => {
            const [leftExpr, rightExpr] = args;
            try {
              const leftTerm = await exprEval.evaluatorExpressionEvaluation(leftExpr, mapping);
              const left = leftTerm.coerceEBV();
              if (!left) {
                return (0, utils_expression_evaluator_1.bool)(false);
              }
              const rightTerm = await exprEval.evaluatorExpressionEvaluation(rightExpr, mapping);
              const right = rightTerm.coerceEBV();
              return (0, utils_expression_evaluator_1.bool)(right);
            } catch (error) {
              const rightErrorTerm = await exprEval.evaluatorExpressionEvaluation(rightExpr, mapping);
              const rightError = rightErrorTerm.coerceEBV();
              if (rightError) {
                throw error;
              }
              return (0, utils_expression_evaluator_1.bool)(false);
            }
          }
        });
      }
    };
    exports.ExpressionFunctionLogicalAnd = ExpressionFunctionLogicalAnd;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/ActorFunctionFactoryExpressionLogicalAnd.js
var require_ActorFunctionFactoryExpressionLogicalAnd = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/ActorFunctionFactoryExpressionLogicalAnd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionLogicalAnd = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionLogicalAnd_1 = require_ExpressionFunctionLogicalAnd();
    var ActorFunctionFactoryExpressionLogicalAnd = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LOGICAL_AND],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionLogicalAnd_1.ExpressionFunctionLogicalAnd();
      }
    };
    exports.ActorFunctionFactoryExpressionLogicalAnd = ActorFunctionFactoryExpressionLogicalAnd;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/index.js
var require_lib99 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-and/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionLogicalAnd(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/ExpressionFunctionLogicalOr.js
var require_ExpressionFunctionLogicalOr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/ExpressionFunctionLogicalOr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionLogicalOr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionLogicalOr = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.LOGICAL_OR,
          apply: async ({ args, mapping, exprEval }) => {
            const [leftExpr, rightExpr] = args;
            try {
              const leftTerm = await exprEval.evaluatorExpressionEvaluation(leftExpr, mapping);
              const left = leftTerm.coerceEBV();
              if (left) {
                return (0, utils_expression_evaluator_1.bool)(true);
              }
              const rightTerm = await exprEval.evaluatorExpressionEvaluation(rightExpr, mapping);
              const right = rightTerm.coerceEBV();
              return (0, utils_expression_evaluator_1.bool)(right);
            } catch (error) {
              const rightErrorTerm = await exprEval.evaluatorExpressionEvaluation(rightExpr, mapping);
              const rightError = rightErrorTerm.coerceEBV();
              if (!rightError) {
                throw error;
              }
              return (0, utils_expression_evaluator_1.bool)(true);
            }
          }
        });
      }
    };
    exports.ExpressionFunctionLogicalOr = ExpressionFunctionLogicalOr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/ActorFunctionFactoryExpressionLogicalOr.js
var require_ActorFunctionFactoryExpressionLogicalOr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/ActorFunctionFactoryExpressionLogicalOr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionLogicalOr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionLogicalOr_1 = require_ExpressionFunctionLogicalOr();
    var ActorFunctionFactoryExpressionLogicalOr = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LOGICAL_OR],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionLogicalOr_1.ExpressionFunctionLogicalOr();
      }
    };
    exports.ActorFunctionFactoryExpressionLogicalOr = ActorFunctionFactoryExpressionLogicalOr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/index.js
var require_lib100 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-logical-or/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionLogicalOr(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/ExpressionFunctionSameTerm.js
var require_ExpressionFunctionSameTerm = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/ExpressionFunctionSameTerm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionSameTerm = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionSameTerm = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.SAME_TERM,
          apply: async ({ args, mapping, exprEval }) => {
            const dataFactory = exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
            const [leftExpr, rightExpr] = args.map((arg) => exprEval.evaluatorExpressionEvaluation(arg, mapping));
            const [left, right] = await Promise.all([leftExpr, rightExpr]);
            return (0, utils_expression_evaluator_1.bool)(left.toRDF(dataFactory).equals(right.toRDF(dataFactory)));
          }
        });
      }
    };
    exports.ExpressionFunctionSameTerm = ExpressionFunctionSameTerm;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/ActorFunctionFactoryExpressionSameTerm.js
var require_ActorFunctionFactoryExpressionSameTerm = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/ActorFunctionFactoryExpressionSameTerm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionSameTerm = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionSameTerm_1 = require_ExpressionFunctionSameTerm();
    var ActorFunctionFactoryExpressionSameTerm = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SAME_TERM],
          termFunction: false
        });
      }
      async run(_) {
        return new ExpressionFunctionSameTerm_1.ExpressionFunctionSameTerm();
      }
    };
    exports.ActorFunctionFactoryExpressionSameTerm = ActorFunctionFactoryExpressionSameTerm;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/index.js
var require_lib101 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-same-term/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionSameTerm(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/TermFunctionAbs.js
var require_TermFunctionAbs = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/TermFunctionAbs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionAbs = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionAbs = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.ABS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.ABS).numericConverter(() => (num) => Math.abs(num)).collect()
        });
      }
    };
    exports.TermFunctionAbs = TermFunctionAbs;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/ActorFunctionFactoryTermAbs.js
var require_ActorFunctionFactoryTermAbs = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/ActorFunctionFactoryTermAbs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermAbs = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionAbs_1 = require_TermFunctionAbs();
    var ActorFunctionFactoryTermAbs = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.ABS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionAbs_1.TermFunctionAbs();
      }
    };
    exports.ActorFunctionFactoryTermAbs = ActorFunctionFactoryTermAbs;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/index.js
var require_lib102 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-abs/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermAbs(), exports);
  }
});

// ../../lipdjs/node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "../../lipdjs/node_modules/bignumber.js/bignumber.js"(exports, module) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++) ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0") ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object") FORMAT = v;
                else throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber2.DEBUG) return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out: if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--) ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; ) sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; ) ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry) x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++) ;
            if (yc[i] > (xc[i] || 0)) e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++) ;
              str = toExponential(str, e);
            } else {
              i -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0) for (str += "."; i--; str += "0") ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += ".";
                  for (; i--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop()) ;
          for (j = c[0]; j >= 10; j /= 10, i++) ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s) return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++) ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++) ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop()) ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf2(n) {
          var str, e = n.e;
          if (e === null) return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0) x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf2(n));
          }
          if (m != null) m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf2(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf2(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp) x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1) k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf2(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf2(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0)) ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0) for (; b--; xc[i++] = 0) ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b) ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0)) ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--) ;
            for (v = c[0]; v >= 10; v /= 10, n++) ;
          }
          if (sd && x.e + 1 > n) n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf2(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg2 = x.s < 0, intDigits = isNeg2 ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg2) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf2(n));
            }
          }
          if (!xc) return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf2(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf2(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s) ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; ) ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b) return a ? b ? 0 : -j : i;
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min2, max2, name) {
        if (n < min2 || n > max2 || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min2 || n > max2 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z) ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z) ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module != "undefined" && module.exports) {
        module.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/TermFunctionAddition.js
var require_TermFunctionAddition = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/TermFunctionAddition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionAddition = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var bignumber_js_1 = require_bignumber();
    var TermFunctionAddition = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.ADDITION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.ADDITION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).plus(right).toNumber()).set([utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-dateTime
            new utils_expression_evaluator_1.DateTimeLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)(date.typedValue, (0, utils_expression_evaluator_1.defaultedDurationRepresentation)(dur.typedValue)))
          )).copy({
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION]
          }).set([utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-date
            new utils_expression_evaluator_1.DateLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(date.typedValue), (0, utils_expression_evaluator_1.defaultedDurationRepresentation)(dur.typedValue)))
          )).copy({
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION]
          }).set([utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([time, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-time
            new utils_expression_evaluator_1.TimeLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time.typedValue), (0, utils_expression_evaluator_1.defaultedDurationRepresentation)(dur.typedValue)))
          )).copy({
            from: [utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
            to: [utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION]
          }).collect()
        });
      }
    };
    exports.TermFunctionAddition = TermFunctionAddition;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/ActorFunctionFactoryTermAddition.js
var require_ActorFunctionFactoryTermAddition = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/ActorFunctionFactoryTermAddition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermAddition = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionAddition_1 = require_TermFunctionAddition();
    var ActorFunctionFactoryTermAddition = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.ADDITION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionAddition_1.TermFunctionAddition();
      }
    };
    exports.ActorFunctionFactoryTermAddition = ActorFunctionFactoryTermAddition;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/index.js
var require_lib103 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-addition/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermAddition(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/TermFunctionCeil.js
var require_TermFunctionCeil = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/TermFunctionCeil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionCeil = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionCeil = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.CEIL,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.CEIL).numericConverter(() => (num) => Math.ceil(num)).collect()
        });
      }
    };
    exports.TermFunctionCeil = TermFunctionCeil;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/ActorFunctionFactoryTermCeil.js
var require_ActorFunctionFactoryTermCeil = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/ActorFunctionFactoryTermCeil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermCeil = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionCeil_1 = require_TermFunctionCeil();
    var ActorFunctionFactoryTermCeil = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.CEIL],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionCeil_1.TermFunctionCeil();
      }
    };
    exports.ActorFunctionFactoryTermCeil = ActorFunctionFactoryTermCeil;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/index.js
var require_lib104 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ceil/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermCeil(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/TermFunctionContains.js
var require_TermFunctionContains = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/TermFunctionContains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionContains = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionContains = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.CONTAINS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.CONTAINS).onBinaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, utils_expression_evaluator_1.bool)(arg1.includes(arg2))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
            if (arg1.language !== arg2.language) {
              throw new utils_expression_evaluator_1.IncompatibleLanguageOperation(arg1, arg2);
            }
            return (0, utils_expression_evaluator_1.bool)(arg1.typedValue.includes(arg2.typedValue));
          }).collect()
        });
      }
    };
    exports.TermFunctionContains = TermFunctionContains;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/ActorFunctionFactoryTermContains.js
var require_ActorFunctionFactoryTermContains = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/ActorFunctionFactoryTermContains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermContains = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionContains_1 = require_TermFunctionContains();
    var ActorFunctionFactoryTermContains = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.CONTAINS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionContains_1.TermFunctionContains();
      }
    };
    exports.ActorFunctionFactoryTermContains = ActorFunctionFactoryTermContains;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/index.js
var require_lib105 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-contains/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermContains(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/TermFunctionDatatype.js
var require_TermFunctionDatatype = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/TermFunctionDatatype.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionDatatype = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionDatatype = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.DATATYPE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.DATATYPE).onLiteral1(() => (lit) => new utils_expression_evaluator_1.NamedNode(lit.dataType)).collect()
        });
      }
    };
    exports.TermFunctionDatatype = TermFunctionDatatype;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/ActorFunctionFactoryTermDatatype.js
var require_ActorFunctionFactoryTermDatatype = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/ActorFunctionFactoryTermDatatype.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermDatatype = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionDatatype_1 = require_TermFunctionDatatype();
    var ActorFunctionFactoryTermDatatype = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.DATATYPE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionDatatype_1.TermFunctionDatatype();
      }
    };
    exports.ActorFunctionFactoryTermDatatype = ActorFunctionFactoryTermDatatype;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/index.js
var require_lib106 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-datatype/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermDatatype(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/TermFunctionDay.js
var require_TermFunctionDay = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/TermFunctionDay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionDay = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionDay = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.DAY,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.DAY).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.integer)(date.typedValue.day)).set([utils_expression_evaluator_1.TypeURL.XSD_DATE], () => ([date]) => (0, utils_expression_evaluator_1.integer)(date.typedValue.day)).collect()
        });
      }
    };
    exports.TermFunctionDay = TermFunctionDay;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/ActorFunctionFactoryTermDay.js
var require_ActorFunctionFactoryTermDay = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/ActorFunctionFactoryTermDay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermDay = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionDay_1 = require_TermFunctionDay();
    var ActorFunctionFactoryTermDay = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.DAY],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionDay_1.TermFunctionDay();
      }
    };
    exports.ActorFunctionFactoryTermDay = ActorFunctionFactoryTermDay;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/index.js
var require_lib107 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-day/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermDay(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/TermFunctionDivision.js
var require_TermFunctionDivision = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/TermFunctionDivision.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionDivision = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var bignumber_js_1 = require_bignumber();
    var TermFunctionDivision = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.DIVISION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.DIVISION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).div(right).toNumber()).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_INTEGER, utils_expression_evaluator_1.TypeURL.XSD_INTEGER], () => (left, right) => {
            if (right === 0) {
              throw new utils_expression_evaluator_1.ExpressionError("Integer division by 0");
            }
            return (0, utils_expression_evaluator_1.decimal)(new bignumber_js_1.BigNumber(left).div(right).toNumber());
          }).collect()
        });
      }
    };
    exports.TermFunctionDivision = TermFunctionDivision;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/ActorFunctionFactoryTermDivision.js
var require_ActorFunctionFactoryTermDivision = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/ActorFunctionFactoryTermDivision.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermDivision = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionDivision_1 = require_TermFunctionDivision();
    var ActorFunctionFactoryTermDivision = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.DIVISION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionDivision_1.TermFunctionDivision();
      }
    };
    exports.ActorFunctionFactoryTermDivision = ActorFunctionFactoryTermDivision;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/index.js
var require_lib108 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-division/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermDivision(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/TermFunctionEncodeForUri.js
var require_TermFunctionEncodeForUri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/TermFunctionEncodeForUri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionEncodeForUri = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionEncodeForUri = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.ENCODE_FOR_URI,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.ENCODE_FOR_URI).onStringly1Typed(() => (val) => (0, utils_expression_evaluator_1.string)(encodeURI(val))).collect()
        });
      }
    };
    exports.TermFunctionEncodeForUri = TermFunctionEncodeForUri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/ActorFunctionFactoryTermEncodeForUri.js
var require_ActorFunctionFactoryTermEncodeForUri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/ActorFunctionFactoryTermEncodeForUri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermEncodeForUri = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionEncodeForUri_1 = require_TermFunctionEncodeForUri();
    var ActorFunctionFactoryTermEncodeForUri = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.ENCODE_FOR_URI],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionEncodeForUri_1.TermFunctionEncodeForUri();
      }
    };
    exports.ActorFunctionFactoryTermEncodeForUri = ActorFunctionFactoryTermEncodeForUri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/index.js
var require_lib109 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-encode-for-uri/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermEncodeForUri(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/TermFunctionEquality.js
var require_TermFunctionEquality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/TermFunctionEquality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionEquality = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionEquality = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.EQUAL,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.EQUAL).numberTest(() => (left, right) => left === right).stringTest(() => (left, right) => left.localeCompare(right) === 0).set([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => ([left, right]) => (0, utils_expression_evaluator_1.bool)(left.str() === right.str() && left.language === right.language)).set([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY], () => () => (0, utils_expression_evaluator_1.bool)(false)).booleanTest(() => (left, right) => left === right).dateTimeTest((exprEval) => (left, right) => (0, utils_expression_evaluator_1.toUTCDate)(left, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime() === (0, utils_expression_evaluator_1.toUTCDate)(right, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime()).copy({
            // https://www.w3.org/TR/xpath-functions/#func-date-equal
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DATE]
          }).set(["quad", "quad"], (exprEval) => ([left, right]) => (0, utils_expression_evaluator_1.bool)(this.applyOnTerms([left.subject, right.subject], exprEval).coerceEBV() && this.applyOnTerms([left.predicate, right.predicate], exprEval).coerceEBV() && this.applyOnTerms([left.object, right.object], exprEval).coerceEBV() && this.applyOnTerms([left.graph, right.graph], exprEval).coerceEBV()), false).set(["term", "term"], (exprEval) => ([_left, _right]) => {
            const left = _left.toRDF(exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory));
            const right = _right.toRDF(exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory));
            const val = left.equals(right);
            if (!val && left.termType === "Literal" && right.termType === "Literal") {
              throw new utils_expression_evaluator_1.RDFEqualTypeError([_left, _right]);
            }
            return (0, utils_expression_evaluator_1.bool)(val);
          }, false).set([utils_expression_evaluator_1.TypeURL.XSD_DURATION, utils_expression_evaluator_1.TypeURL.XSD_DURATION], () => ([dur1, dur2]) => (0, utils_expression_evaluator_1.bool)((0, utils_expression_evaluator_1.yearMonthDurationsToMonths)((0, utils_expression_evaluator_1.defaultedYearMonthDurationRepresentation)(dur1.typedValue)) === (0, utils_expression_evaluator_1.yearMonthDurationsToMonths)((0, utils_expression_evaluator_1.defaultedYearMonthDurationRepresentation)(dur2.typedValue)) && (0, utils_expression_evaluator_1.dayTimeDurationsToSeconds)((0, utils_expression_evaluator_1.defaultedDayTimeDurationRepresentation)(dur1.typedValue)) === (0, utils_expression_evaluator_1.dayTimeDurationsToSeconds)((0, utils_expression_evaluator_1.defaultedDayTimeDurationRepresentation)(dur2.typedValue)))).set([utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_TIME], (exprEval) => ([time1, time2]) => (
            // https://www.w3.org/TR/xpath-functions/#func-time-equal
            (0, utils_expression_evaluator_1.bool)((0, utils_expression_evaluator_1.toUTCDate)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time1.typedValue), exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime() === (0, utils_expression_evaluator_1.toUTCDate)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time2.typedValue), exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime())
          )).collect()
        });
      }
    };
    exports.TermFunctionEquality = TermFunctionEquality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/ActorFunctionFactoryTermEquality.js
var require_ActorFunctionFactoryTermEquality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/ActorFunctionFactoryTermEquality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermEquality = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionEquality_1 = require_TermFunctionEquality();
    var ActorFunctionFactoryTermEquality = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.EQUAL],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionEquality_1.TermFunctionEquality();
      }
    };
    exports.ActorFunctionFactoryTermEquality = ActorFunctionFactoryTermEquality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/index.js
var require_lib110 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-equality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermEquality(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/TermFunctionFloor.js
var require_TermFunctionFloor = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/TermFunctionFloor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionFloor = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionFloor = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.FLOOR,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.FLOOR).numericConverter(() => (num) => Math.floor(num)).collect()
        });
      }
    };
    exports.TermFunctionFloor = TermFunctionFloor;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/ActorFunctionFactoryTermFloor.js
var require_ActorFunctionFactoryTermFloor = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/ActorFunctionFactoryTermFloor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermFloor = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionFloor_1 = require_TermFunctionFloor();
    var ActorFunctionFactoryTermFloor = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.FLOOR],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionFloor_1.TermFunctionFloor();
      }
    };
    exports.ActorFunctionFactoryTermFloor = ActorFunctionFactoryTermFloor;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/index.js
var require_lib111 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-floor/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermFloor(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/TermFunctionHours.js
var require_TermFunctionHours = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/TermFunctionHours.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionHours = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionHours = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.HOURS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.HOURS).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.integer)(date.typedValue.hours)).set([utils_expression_evaluator_1.TypeURL.XSD_TIME], () => ([time]) => (0, utils_expression_evaluator_1.integer)(time.typedValue.hours)).collect()
        });
      }
    };
    exports.TermFunctionHours = TermFunctionHours;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/ActorFunctionFactoryTermHours.js
var require_ActorFunctionFactoryTermHours = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/ActorFunctionFactoryTermHours.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermHours = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionHours_1 = require_TermFunctionHours();
    var ActorFunctionFactoryTermHours = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.HOURS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionHours_1.TermFunctionHours();
      }
    };
    exports.ActorFunctionFactoryTermHours = ActorFunctionFactoryTermHours;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/index.js
var require_lib112 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-hours/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermHours(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/TermFunctionIri.js
var require_TermFunctionIri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/TermFunctionIri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIri = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var TermFunctionIri = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IRI,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IRI).set(["namedNode"], (exprEval) => (args) => {
            const lit = args[0];
            const iri = (0, relative_to_absolute_iri_1.resolve)(lit.str(), exprEval.context.get(context_entries_1.KeysInitQuery.baseIRI) ?? "");
            return new utils_expression_evaluator_1.NamedNode(iri);
          }).onString1((exprEval) => (lit) => {
            const iri = (0, relative_to_absolute_iri_1.resolve)(lit.str(), exprEval.context.get(context_entries_1.KeysInitQuery.baseIRI) ?? "");
            return new utils_expression_evaluator_1.NamedNode(iri);
          }).collect()
        });
      }
    };
    exports.TermFunctionIri = TermFunctionIri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/ActorFunctionFactoryTermIri.js
var require_ActorFunctionFactoryTermIri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/ActorFunctionFactoryTermIri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIri = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIri_1 = require_TermFunctionIri();
    var ActorFunctionFactoryTermIri = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IRI, utils_expression_evaluator_1.SparqlOperator.URI],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIri_1.TermFunctionIri();
      }
    };
    exports.ActorFunctionFactoryTermIri = ActorFunctionFactoryTermIri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/index.js
var require_lib113 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-iri/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIri(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/TermFunctionIsBlank.js
var require_TermFunctionIsBlank = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/TermFunctionIsBlank.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIsBlank = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsBlank = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IS_BLANK,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IS_BLANK).onTerm1(() => (term) => (0, utils_expression_evaluator_1.bool)(term.termType === "blankNode")).collect()
        });
      }
    };
    exports.TermFunctionIsBlank = TermFunctionIsBlank;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/ActorFunctionFactoryTermIsBlank.js
var require_ActorFunctionFactoryTermIsBlank = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/ActorFunctionFactoryTermIsBlank.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIsBlank = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsBlank_1 = require_TermFunctionIsBlank();
    var ActorFunctionFactoryTermIsBlank = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IS_BLANK],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIsBlank_1.TermFunctionIsBlank();
      }
    };
    exports.ActorFunctionFactoryTermIsBlank = ActorFunctionFactoryTermIsBlank;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/index.js
var require_lib114 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-blank/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIsBlank(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/TermFunctionIsIri.js
var require_TermFunctionIsIri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/TermFunctionIsIri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIsIri = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsIri = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IS_IRI,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IS_IRI).onTerm1(() => (term) => (0, utils_expression_evaluator_1.bool)(term.termType === "namedNode")).collect()
        });
      }
    };
    exports.TermFunctionIsIri = TermFunctionIsIri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/ActorFunctionFactoryTermIsIri.js
var require_ActorFunctionFactoryTermIsIri = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/ActorFunctionFactoryTermIsIri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIsIri = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsIri_1 = require_TermFunctionIsIri();
    var ActorFunctionFactoryTermIsIri = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IS_IRI, utils_expression_evaluator_1.SparqlOperator.IS_URI],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIsIri_1.TermFunctionIsIri();
      }
    };
    exports.ActorFunctionFactoryTermIsIri = ActorFunctionFactoryTermIsIri;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/index.js
var require_lib115 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-iri/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIsIri(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/TermFunctionIsLiteral.js
var require_TermFunctionIsLiteral = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/TermFunctionIsLiteral.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIsLiteral = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsLiteral = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IS_LITERAL,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IS_LITERAL).onTerm1(() => (term) => (0, utils_expression_evaluator_1.bool)(term.termType === "literal")).collect()
        });
      }
    };
    exports.TermFunctionIsLiteral = TermFunctionIsLiteral;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/ActorFunctionFactoryTermIsLiteral.js
var require_ActorFunctionFactoryTermIsLiteral = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/ActorFunctionFactoryTermIsLiteral.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIsLiteral = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsLiteral_1 = require_TermFunctionIsLiteral();
    var ActorFunctionFactoryTermIsLiteral = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IS_LITERAL],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIsLiteral_1.TermFunctionIsLiteral();
      }
    };
    exports.ActorFunctionFactoryTermIsLiteral = ActorFunctionFactoryTermIsLiteral;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/index.js
var require_lib116 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-literal/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIsLiteral(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/TermFunctionIsNumeric.js
var require_TermFunctionIsNumeric = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/TermFunctionIsNumeric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIsNumeric = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsNumeric = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IS_NUMERIC,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IS_NUMERIC).onNumeric1(() => () => (0, utils_expression_evaluator_1.bool)(true)).onTerm1(() => () => (0, utils_expression_evaluator_1.bool)(false)).collect()
        });
      }
    };
    exports.TermFunctionIsNumeric = TermFunctionIsNumeric;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/ActorFunctionFactoryTermIsNumeric.js
var require_ActorFunctionFactoryTermIsNumeric = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/ActorFunctionFactoryTermIsNumeric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIsNumeric = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsNumeric_1 = require_TermFunctionIsNumeric();
    var ActorFunctionFactoryTermIsNumeric = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IS_NUMERIC],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIsNumeric_1.TermFunctionIsNumeric();
      }
    };
    exports.ActorFunctionFactoryTermIsNumeric = ActorFunctionFactoryTermIsNumeric;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/index.js
var require_lib117 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-numeric/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIsNumeric(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/TermFunctionIsTriple.js
var require_TermFunctionIsTriple = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/TermFunctionIsTriple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionIsTriple = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsTriple = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.IS_TRIPLE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.IS_TRIPLE).onTerm1(() => (term) => (0, utils_expression_evaluator_1.bool)(term.termType === "quad")).collect()
        });
      }
    };
    exports.TermFunctionIsTriple = TermFunctionIsTriple;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/ActorFunctionFactoryTermIsTriple.js
var require_ActorFunctionFactoryTermIsTriple = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/ActorFunctionFactoryTermIsTriple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermIsTriple = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionIsTriple_1 = require_TermFunctionIsTriple();
    var ActorFunctionFactoryTermIsTriple = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IS_TRIPLE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionIsTriple_1.TermFunctionIsTriple();
      }
    };
    exports.ActorFunctionFactoryTermIsTriple = ActorFunctionFactoryTermIsTriple;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/index.js
var require_lib118 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-is-triple/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermIsTriple(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/TermFunctionLang.js
var require_TermFunctionLang = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/TermFunctionLang.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionLang = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLang = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.LANG,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.LANG).onLiteral1(() => (lit) => (0, utils_expression_evaluator_1.string)(lit.language ?? "")).collect()
        });
      }
    };
    exports.TermFunctionLang = TermFunctionLang;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/ActorFunctionFactoryTermLang.js
var require_ActorFunctionFactoryTermLang = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/ActorFunctionFactoryTermLang.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermLang = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLang_1 = require_TermFunctionLang();
    var ActorFunctionFactoryTermLang = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LANG],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionLang_1.TermFunctionLang();
      }
    };
    exports.ActorFunctionFactoryTermLang = ActorFunctionFactoryTermLang;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/index.js
var require_lib119 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lang/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermLang(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/TermFunctionLangmatches.js
var require_TermFunctionLangmatches = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/TermFunctionLangmatches.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionLangmatches = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLangmatches = class _TermFunctionLangmatches extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.LANG_MATCHES,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.LANG_MATCHES).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (tag, range) => (0, utils_expression_evaluator_1.bool)(_TermFunctionLangmatches.langMatches(tag, range))).collect()
        });
      }
      // TODO: Not an XPath function
      // TODO: Publish as package
      // https://www.ietf.org/rfc/rfc4647.txt
      // https://www.w3.org/TR/sparql11-query/#func-langMatches
      static langMatches(tag, range) {
        const langTags = tag.split("-");
        const rangeTags = range.split("-");
        if (!_TermFunctionLangmatches.matchLangTag(rangeTags[0], langTags[0]) && !_TermFunctionLangmatches.isWildCard(langTags[0])) {
          return false;
        }
        let lI = 1;
        let rI = 1;
        while (rI < rangeTags.length) {
          if (_TermFunctionLangmatches.isWildCard(rangeTags[rI])) {
            rI++;
            continue;
          }
          if (lI === langTags.length) {
            return false;
          }
          if (_TermFunctionLangmatches.matchLangTag(rangeTags[rI], langTags[lI])) {
            lI++;
            rI++;
            continue;
          }
          if (langTags[lI].length === 1) {
            return false;
          }
          lI++;
        }
        return true;
      }
      static isWildCard(tag) {
        return tag === "*";
      }
      static matchLangTag(left, right) {
        const matchInitial = new RegExp(`/${left}/`, "iu");
        return matchInitial.test(`/${right}/`);
      }
    };
    exports.TermFunctionLangmatches = TermFunctionLangmatches;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/ActorFunctionFactoryTermLangmatches.js
var require_ActorFunctionFactoryTermLangmatches = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/ActorFunctionFactoryTermLangmatches.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermLangmatches = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLangmatches_1 = require_TermFunctionLangmatches();
    var ActorFunctionFactoryTermLangmatches = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LANG_MATCHES],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionLangmatches_1.TermFunctionLangmatches();
      }
    };
    exports.ActorFunctionFactoryTermLangmatches = ActorFunctionFactoryTermLangmatches;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/index.js
var require_lib120 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-langmatches/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermLangmatches(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/TermFunctionLcase.js
var require_TermFunctionLcase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/TermFunctionLcase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionLcase = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLcase = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.LCASE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.LCASE).onString1Typed(() => (lit) => (0, utils_expression_evaluator_1.string)(lit.toLowerCase())).onLangString1(() => (lit) => (0, utils_expression_evaluator_1.langString)(lit.typedValue.toLowerCase(), lit.language)).collect()
        });
      }
    };
    exports.TermFunctionLcase = TermFunctionLcase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/ActorFunctionFactoryTermLcase.js
var require_ActorFunctionFactoryTermLcase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/ActorFunctionFactoryTermLcase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermLcase = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLcase_1 = require_TermFunctionLcase();
    var ActorFunctionFactoryTermLcase = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LCASE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionLcase_1.TermFunctionLcase();
      }
    };
    exports.ActorFunctionFactoryTermLcase = ActorFunctionFactoryTermLcase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/index.js
var require_lib121 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lcase/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermLcase(), exports);
  }
});

// ../../lipdjs/node_modules/spark-md5/spark-md5.js
var require_spark_md5 = __commonJS({
  "../../lipdjs/node_modules/spark-md5/spark-md5.js"(exports, module) {
    (function(factory) {
      if (typeof exports === "object") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        var glob;
        try {
          glob = window;
        } catch (e) {
          glob = self;
        }
        glob.SparkMD5 = factory();
      }
    })(function(undefined2) {
      "use strict";
      var add32 = function(a, b) {
        return a + b & 4294967295;
      }, hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32(a << s | a >>> 32 - s, b);
      }
      function md5cycle(x, k) {
        var a = x[0], b = x[1], c = x[2], d = x[3];
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }
      function md5blk(s) {
        var md5blks = [], i;
        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
      }
      function md5blk_array(a) {
        var md5blks = [], i;
        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
      }
      function md51(s) {
        var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
        }
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(state, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function md51_array(a) {
        var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }
        a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= a[i] << (i % 4 << 3);
        }
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(state, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function rhex(n) {
        var s = "", j;
        for (j = 0; j < 4; j += 1) {
          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
        }
        return s;
      }
      function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
          x[i] = rhex(x[i]);
        }
        return x.join("");
      }
      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592") {
        add32 = function(x, y) {
          var lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        };
      }
      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function() {
          function clamp(val, length) {
            val = val | 0 || 0;
            if (val < 0) {
              return Math.max(val + length, 0);
            }
            return Math.min(val, length);
          }
          ArrayBuffer.prototype.slice = function(from, to) {
            var length = this.byteLength, begin = clamp(from, length), end = length, num, target, targetArray, sourceArray;
            if (to !== undefined2) {
              end = clamp(to, length);
            }
            if (begin > end) {
              return new ArrayBuffer(0);
            }
            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }
      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }
        return str;
      }
      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i;
        for (i = 0; i < length; i += 1) {
          arr[i] = str.charCodeAt(i);
        }
        return returnUInt8Array ? arr : buff;
      }
      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }
      function concatenateArrayBuffers(first3, second, returnUInt8Array) {
        var result = new Uint8Array(first3.byteLength + second.byteLength);
        result.set(new Uint8Array(first3));
        result.set(new Uint8Array(second), first3.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }
      function hexToBinaryString(hex2) {
        var bytes = [], length = hex2.length, x;
        for (x = 0; x < length - 1; x += 2) {
          bytes.push(parseInt(hex2.substr(x, 2), 16));
        }
        return String.fromCharCode.apply(String, bytes);
      }
      function SparkMD5() {
        this.reset();
      }
      SparkMD5.prototype.append = function(str) {
        this.appendBinary(toUtf8(str));
        return this;
      };
      SparkMD5.prototype.appendBinary = function(contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length, i;
        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }
        this._buff = this._buff.substring(i - 64);
        return this;
      };
      SparkMD5.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, i, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.prototype.reset = function() {
        this._buff = "";
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD5.prototype.getState = function() {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash.slice()
        };
      };
      SparkMD5.prototype.setState = function(state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };
      SparkMD5.prototype.destroy = function() {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };
      SparkMD5.prototype._finish = function(tail, length) {
        var i = length, tmp, lo, hi;
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(this._hash, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
      };
      SparkMD5.hash = function(str, raw) {
        return SparkMD5.hashBinary(toUtf8(str), raw);
      };
      SparkMD5.hashBinary = function(content, raw) {
        var hash2 = md51(content), ret = hex(hash2);
        return raw ? hexToBinaryString(ret) : ret;
      };
      SparkMD5.ArrayBuffer = function() {
        this.reset();
      };
      SparkMD5.ArrayBuffer.prototype.append = function(arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i;
        this._length += arr.byteLength;
        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }
        this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i, ret;
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff[i] << (i % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.ArrayBuffer.prototype.reset = function() {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.getState = function() {
        var state = SparkMD5.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };
      SparkMD5.ArrayBuffer.prototype.setState = function(state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD5.prototype.setState.call(this, state);
      };
      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;
      SparkMD5.ArrayBuffer.hash = function(arr, raw) {
        var hash2 = md51_array(new Uint8Array(arr)), ret = hex(hash2);
        return raw ? hexToBinaryString(ret) : ret;
      };
      return SparkMD5;
    });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/TermFunctionMd5.js
var require_TermFunctionMd5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/TermFunctionMd5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionMd5 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var spark_md5_1 = require_spark_md5();
    var TermFunctionMd5 = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.MD5,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.MD5).onString1Typed(() => (str) => (0, utils_expression_evaluator_1.string)((0, spark_md5_1.hash)(str))).collect()
        });
      }
    };
    exports.TermFunctionMd5 = TermFunctionMd5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/ActorFunctionFactoryTermMd5.js
var require_ActorFunctionFactoryTermMd5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/ActorFunctionFactoryTermMd5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermMd5 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMd5_1 = require_TermFunctionMd5();
    var ActorFunctionFactoryTermMd5 = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.MD5],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionMd5_1.TermFunctionMd5();
      }
    };
    exports.ActorFunctionFactoryTermMd5 = ActorFunctionFactoryTermMd5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/index.js
var require_lib122 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-md5/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermMd5(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/TermFunctionMinutes.js
var require_TermFunctionMinutes = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/TermFunctionMinutes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionMinutes = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMinutes = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.MINUTES,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.MINUTES).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.integer)(date.typedValue.minutes)).set([utils_expression_evaluator_1.TypeURL.XSD_TIME], () => ([time]) => (0, utils_expression_evaluator_1.integer)(time.typedValue.minutes)).collect()
        });
      }
    };
    exports.TermFunctionMinutes = TermFunctionMinutes;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/ActorFunctionFactoryTermMinutes.js
var require_ActorFunctionFactoryTermMinutes = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/ActorFunctionFactoryTermMinutes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermMinutes = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMinutes_1 = require_TermFunctionMinutes();
    var ActorFunctionFactoryTermMinutes = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.MINUTES],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionMinutes_1.TermFunctionMinutes();
      }
    };
    exports.ActorFunctionFactoryTermMinutes = ActorFunctionFactoryTermMinutes;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/index.js
var require_lib123 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-minutes/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermMinutes(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/TermFunctionMonth.js
var require_TermFunctionMonth = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/TermFunctionMonth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionMonth = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMonth = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.MONTH,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.MONTH).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.integer)(date.typedValue.month)).set([utils_expression_evaluator_1.TypeURL.XSD_DATE], () => ([date]) => (0, utils_expression_evaluator_1.integer)(date.typedValue.month)).collect()
        });
      }
    };
    exports.TermFunctionMonth = TermFunctionMonth;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/ActorFunctionFactoryTermMonth.js
var require_ActorFunctionFactoryTermMonth = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/ActorFunctionFactoryTermMonth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermMonth = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMonth_1 = require_TermFunctionMonth();
    var ActorFunctionFactoryTermMonth = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.MONTH],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionMonth_1.TermFunctionMonth();
      }
    };
    exports.ActorFunctionFactoryTermMonth = ActorFunctionFactoryTermMonth;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/index.js
var require_lib124 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-month/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermMonth(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/TermFunctionMultiplication.js
var require_TermFunctionMultiplication = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/TermFunctionMultiplication.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionMultiplication = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var bignumber_js_1 = require_bignumber();
    var TermFunctionMultiplication = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.MULTIPLICATION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.MULTIPLICATION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).times(right).toNumber()).collect()
        });
      }
    };
    exports.TermFunctionMultiplication = TermFunctionMultiplication;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/ActorFunctionFactoryTermMultiplication.js
var require_ActorFunctionFactoryTermMultiplication = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/ActorFunctionFactoryTermMultiplication.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermMultiplication = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionMultiplication_1 = require_TermFunctionMultiplication();
    var ActorFunctionFactoryTermMultiplication = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.MULTIPLICATION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionMultiplication_1.TermFunctionMultiplication();
      }
    };
    exports.ActorFunctionFactoryTermMultiplication = ActorFunctionFactoryTermMultiplication;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/index.js
var require_lib125 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-multiplication/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermMultiplication(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/TermFunctionNot.js
var require_TermFunctionNot = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/TermFunctionNot.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionNot = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionNot = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.NOT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.NOT).onTerm1(() => (val) => (0, utils_expression_evaluator_1.bool)(!val.coerceEBV())).collect()
        });
      }
    };
    exports.TermFunctionNot = TermFunctionNot;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/ActorFunctionFactoryTermNot.js
var require_ActorFunctionFactoryTermNot = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/ActorFunctionFactoryTermNot.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermNot = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionNot_1 = require_TermFunctionNot();
    var ActorFunctionFactoryTermNot = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.NOT],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionNot_1.TermFunctionNot();
      }
    };
    exports.ActorFunctionFactoryTermNot = ActorFunctionFactoryTermNot;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/index.js
var require_lib126 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-not/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermNot(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/TermFunctionNow.js
var require_TermFunctionNow = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/TermFunctionNow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionNow = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionNow = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 0,
          operator: utils_expression_evaluator_1.SparqlOperator.NOW,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.NOW).set([], (exprEval) => () => new utils_expression_evaluator_1.DateTimeLiteral((0, utils_expression_evaluator_1.toDateTimeRepresentation)({
            date: exprEval.context.getSafe(context_entries_1.KeysInitQuery.queryTimestamp),
            timeZone: exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)
          }))).collect()
        });
      }
    };
    exports.TermFunctionNow = TermFunctionNow;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/ActorFunctionFactoryTermNow.js
var require_ActorFunctionFactoryTermNow = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/ActorFunctionFactoryTermNow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermNow = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionNow_1 = require_TermFunctionNow();
    var ActorFunctionFactoryTermNow = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.NOW],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionNow_1.TermFunctionNow();
      }
    };
    exports.ActorFunctionFactoryTermNow = ActorFunctionFactoryTermNow;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/index.js
var require_lib127 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-now/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermNow(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/TermFunctionObject.js
var require_TermFunctionObject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/TermFunctionObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionObject = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionObject = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.OBJECT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.OBJECT).onQuad1(() => (quad) => quad.object).collect()
        });
      }
    };
    exports.TermFunctionObject = TermFunctionObject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/ActorFunctionFactoryTermObject.js
var require_ActorFunctionFactoryTermObject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/ActorFunctionFactoryTermObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermObject = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionObject_1 = require_TermFunctionObject();
    var ActorFunctionFactoryTermObject = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.OBJECT],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionObject_1.TermFunctionObject();
      }
    };
    exports.ActorFunctionFactoryTermObject = ActorFunctionFactoryTermObject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/index.js
var require_lib128 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-object/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermObject(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/TermFunctionPredicate.js
var require_TermFunctionPredicate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/TermFunctionPredicate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionPredicate = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionPredicate = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.PREDICATE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.PREDICATE).onQuad1(() => (quad) => quad.predicate).collect()
        });
      }
    };
    exports.TermFunctionPredicate = TermFunctionPredicate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/ActorFunctionFactoryTermPredicate.js
var require_ActorFunctionFactoryTermPredicate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/ActorFunctionFactoryTermPredicate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermPredicate = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionPredicate_1 = require_TermFunctionPredicate();
    var ActorFunctionFactoryTermPredicate = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.PREDICATE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionPredicate_1.TermFunctionPredicate();
      }
    };
    exports.ActorFunctionFactoryTermPredicate = ActorFunctionFactoryTermPredicate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/index.js
var require_lib129 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-predicate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermPredicate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/TermFunctionRand.js
var require_TermFunctionRand = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/TermFunctionRand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionRand = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRand = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 0,
          operator: utils_expression_evaluator_1.SparqlOperator.RAND,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.RAND).set([], () => () => (0, utils_expression_evaluator_1.double)(Math.random())).collect()
        });
      }
    };
    exports.TermFunctionRand = TermFunctionRand;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/ActorFunctionFactoryTermRand.js
var require_ActorFunctionFactoryTermRand = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/ActorFunctionFactoryTermRand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermRand = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRand_1 = require_TermFunctionRand();
    var ActorFunctionFactoryTermRand = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.RAND],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionRand_1.TermFunctionRand();
      }
    };
    exports.ActorFunctionFactoryTermRand = ActorFunctionFactoryTermRand;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/index.js
var require_lib130 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-rand/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermRand(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/TermFunctionRegex.js
var require_TermFunctionRegex = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/TermFunctionRegex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionRegex = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRegex = class _TermFunctionRegex extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: [2, 3],
          operator: utils_expression_evaluator_1.SparqlOperator.REGEX,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.REGEX).onBinaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING], _TermFunctionRegex.regex2).onTernaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], _TermFunctionRegex.regex3).collect()
        });
      }
      static regex2() {
        return (text, pattern) => (0, utils_expression_evaluator_1.bool)(_TermFunctionRegex.matches(text, pattern));
      }
      static regex3() {
        return (text, pattern, flags) => (0, utils_expression_evaluator_1.bool)(_TermFunctionRegex.matches(text, pattern, flags));
      }
      // https://www.w3.org/TR/xpath-functions/#func-matches
      // https://www.w3.org/TR/xpath-functions/#flags
      static matches(text, pattern, flags = "") {
        flags = _TermFunctionRegex.cleanFlags(flags);
        if (flags.includes("x")) {
          pattern = _TermFunctionRegex.flagX(pattern);
        }
        if (flags.includes("q")) {
          pattern = _TermFunctionRegex.flagQ(pattern);
        }
        const reg = new RegExp(pattern, flags.replaceAll(/[qx]/gu, ""));
        return reg.test(text);
      }
      static cleanFlags(flags) {
        if (!/^[imsxq]*$/u.test(flags)) {
          throw new Error("Invalid flags");
        }
        const duplicateFlag = [...flags].find((value, index, self2) => self2.indexOf(value) !== index);
        if (duplicateFlag) {
          throw new Error(`Duplicate flag: ${duplicateFlag}`);
        }
        if (flags == null ? void 0 : flags.includes("q")) {
          flags = flags.replaceAll(/[msx]/gu, "");
        }
        return `${flags}u`;
      }
      static flagX(pattern) {
        if (!pattern) {
          return pattern;
        }
        let prev = pattern[0];
        while (["	", "\n", "\r", " "].includes(prev)) {
          pattern = pattern.slice(1);
          prev = pattern[0];
        }
        let inClass = prev === "[";
        for (let i = 1; i < pattern.length; i++) {
          const c = pattern[i];
          if (["	", "\n", "\r", " "].includes(c) && !inClass) {
            pattern = pattern.slice(0, i) + pattern.slice(i + 1);
            i--;
          } else if (c === "[" && prev !== "\\") {
            inClass = true;
          } else if (c === "]" && prev !== "\\") {
            inClass = false;
          }
          prev = c;
        }
        return pattern;
      }
      static flagQ(pattern) {
        return pattern.replaceAll(/([?+*.{}()[\]\\|])/gu, "\\$1").replaceAll(/^\^/gu, "\\^").replaceAll(/\$$/gu, "\\$");
      }
    };
    exports.TermFunctionRegex = TermFunctionRegex;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/ActorFunctionFactoryTermRegex.js
var require_ActorFunctionFactoryTermRegex = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/ActorFunctionFactoryTermRegex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermRegex = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRegex_1 = require_TermFunctionRegex();
    var ActorFunctionFactoryTermRegex = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.REGEX],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionRegex_1.TermFunctionRegex();
      }
    };
    exports.ActorFunctionFactoryTermRegex = ActorFunctionFactoryTermRegex;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/index.js
var require_lib131 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-regex/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermRegex(), exports);
    __exportStar(require_TermFunctionRegex(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/TermFunctionReplace.js
var require_TermFunctionReplace = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/TermFunctionReplace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionReplace = void 0;
    var actor_function_factory_term_regex_1 = require_lib131();
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionReplace = class _TermFunctionReplace extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: [3, 4],
          operator: utils_expression_evaluator_1.SparqlOperator.REPLACE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.REPLACE).onTernaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg, pattern, replacement) => (0, utils_expression_evaluator_1.string)(_TermFunctionReplace.replace(arg, pattern, replacement))).set([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => ([arg, pattern, replacement]) => {
            const result = _TermFunctionReplace.replace(arg.typedValue, pattern.typedValue, replacement.typedValue);
            return (0, utils_expression_evaluator_1.langString)(result, arg.language);
          }).onQuaternaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg, pattern, replacement, flags) => (0, utils_expression_evaluator_1.string)(_TermFunctionReplace.replace(arg, pattern, replacement, flags))).set([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => ([arg, pattern, replacement, flags]) => {
            const result = _TermFunctionReplace.replace(arg.typedValue, pattern.typedValue, replacement.typedValue, flags.typedValue);
            return (0, utils_expression_evaluator_1.langString)(result, arg.language);
          }).collect()
        });
      }
      // https://www.w3.org/TR/xpath-functions/#func-replace
      static replace(arg, pattern, replacement, flags = "") {
        flags = actor_function_factory_term_regex_1.TermFunctionRegex.cleanFlags(flags);
        if (flags.includes("x")) {
          pattern = actor_function_factory_term_regex_1.TermFunctionRegex.flagX(pattern);
        }
        if (flags.includes("q")) {
          pattern = actor_function_factory_term_regex_1.TermFunctionRegex.flagQ(pattern);
        } else {
          replacement = replacement.replaceAll("$0", () => "$&");
        }
        flags = `${flags.replaceAll(/[qx]/gu, "")}g`;
        return arg.replaceAll(new RegExp(pattern, flags), replacement);
      }
    };
    exports.TermFunctionReplace = TermFunctionReplace;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/ActorFunctionFactoryTermReplace.js
var require_ActorFunctionFactoryTermReplace = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/ActorFunctionFactoryTermReplace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermReplace = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionReplace_1 = require_TermFunctionReplace();
    var ActorFunctionFactoryTermReplace = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.REPLACE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionReplace_1.TermFunctionReplace();
      }
    };
    exports.ActorFunctionFactoryTermReplace = ActorFunctionFactoryTermReplace;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/index.js
var require_lib132 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-replace/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermReplace(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/TermFunctionRound.js
var require_TermFunctionRound = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/TermFunctionRound.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionRound = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRound = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.ROUND,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.ROUND).numericConverter(() => (num) => Math.round(num)).collect()
        });
      }
    };
    exports.TermFunctionRound = TermFunctionRound;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/ActorFunctionFactoryTermRound.js
var require_ActorFunctionFactoryTermRound = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/ActorFunctionFactoryTermRound.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermRound = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionRound_1 = require_TermFunctionRound();
    var ActorFunctionFactoryTermRound = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.ROUND],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionRound_1.TermFunctionRound();
      }
    };
    exports.ActorFunctionFactoryTermRound = ActorFunctionFactoryTermRound;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/index.js
var require_lib133 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-round/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermRound(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/TermFunctionSeconds.js
var require_TermFunctionSeconds = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/TermFunctionSeconds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSeconds = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSeconds = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SECONDS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SECONDS).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.decimal)(date.typedValue.seconds)).set([utils_expression_evaluator_1.TypeURL.XSD_TIME], () => ([time]) => (0, utils_expression_evaluator_1.integer)(time.typedValue.seconds)).collect()
        });
      }
    };
    exports.TermFunctionSeconds = TermFunctionSeconds;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/ActorFunctionFactoryTermSeconds.js
var require_ActorFunctionFactoryTermSeconds = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/ActorFunctionFactoryTermSeconds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSeconds = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSeconds_1 = require_TermFunctionSeconds();
    var ActorFunctionFactoryTermSeconds = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SECONDS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSeconds_1.TermFunctionSeconds();
      }
    };
    exports.ActorFunctionFactoryTermSeconds = ActorFunctionFactoryTermSeconds;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/index.js
var require_lib134 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-seconds/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSeconds(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/TermFunctionSha1.js
var require_TermFunctionSha1 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/TermFunctionSha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSha1 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var hash_js_1 = require_hash();
    var TermFunctionSha1 = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SHA1,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SHA1).onString1Typed(() => (str) => (0, utils_expression_evaluator_1.string)((0, hash_js_1.sha1)().update(str).digest("hex"))).collect()
        });
      }
    };
    exports.TermFunctionSha1 = TermFunctionSha1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/ActorFunctionFactoryTermSha1.js
var require_ActorFunctionFactoryTermSha1 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/ActorFunctionFactoryTermSha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSha1 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSha1_1 = require_TermFunctionSha1();
    var ActorFunctionFactoryTermSha1 = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SHA1],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSha1_1.TermFunctionSha1();
      }
    };
    exports.ActorFunctionFactoryTermSha1 = ActorFunctionFactoryTermSha1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/index.js
var require_lib135 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha1/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSha1(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/TermFunctionSha256.js
var require_TermFunctionSha256 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/TermFunctionSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSha256 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var hash_js_1 = require_hash();
    var TermFunctionSha256 = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SHA256,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SHA256).onString1Typed(() => (str) => (0, utils_expression_evaluator_1.string)((0, hash_js_1.sha256)().update(str).digest("hex"))).collect()
        });
      }
    };
    exports.TermFunctionSha256 = TermFunctionSha256;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/ActorFunctionFactoryTermSha256.js
var require_ActorFunctionFactoryTermSha256 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/ActorFunctionFactoryTermSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSha256 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSha256_1 = require_TermFunctionSha256();
    var ActorFunctionFactoryTermSha256 = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SHA256],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSha256_1.TermFunctionSha256();
      }
    };
    exports.ActorFunctionFactoryTermSha256 = ActorFunctionFactoryTermSha256;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/index.js
var require_lib136 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha256/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSha256(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/TermFunctionSha384.js
var require_TermFunctionSha384 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/TermFunctionSha384.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSha384 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var hash_js_1 = require_hash();
    var TermFunctionSha384 = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SHA384,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SHA384).onString1Typed(() => (str) => (0, utils_expression_evaluator_1.string)((0, hash_js_1.sha384)().update(str).digest("hex"))).collect()
        });
      }
    };
    exports.TermFunctionSha384 = TermFunctionSha384;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/ActorFunctionFactoryTermSha384.js
var require_ActorFunctionFactoryTermSha384 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/ActorFunctionFactoryTermSha384.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSha384 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSha384_1 = require_TermFunctionSha384();
    var ActorFunctionFactoryTermSha384 = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SHA384],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSha384_1.TermFunctionSha384();
      }
    };
    exports.ActorFunctionFactoryTermSha384 = ActorFunctionFactoryTermSha384;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/index.js
var require_lib137 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha384/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSha384(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/TermFunctionSha512.js
var require_TermFunctionSha512 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/TermFunctionSha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSha512 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var hash_js_1 = require_hash();
    var TermFunctionSha512 = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SHA512,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SHA512).onString1Typed(() => (str) => (0, utils_expression_evaluator_1.string)((0, hash_js_1.sha512)().update(str).digest("hex"))).collect()
        });
      }
    };
    exports.TermFunctionSha512 = TermFunctionSha512;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/ActorFunctionFactoryTermSha512.js
var require_ActorFunctionFactoryTermSha512 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/ActorFunctionFactoryTermSha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSha512 = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSha512_1 = require_TermFunctionSha512();
    var ActorFunctionFactoryTermSha512 = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SHA512],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSha512_1.TermFunctionSha512();
      }
    };
    exports.ActorFunctionFactoryTermSha512 = ActorFunctionFactoryTermSha512;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/index.js
var require_lib138 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sha512/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSha512(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/TermFunctionStrAfter.js
var require_TermFunctionStrAfter = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/TermFunctionStrAfter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrAfter = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrAfter = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRAFTER,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRAFTER).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, utils_expression_evaluator_1.string)(arg1.slice(arg1.indexOf(arg2)).slice(arg2.length))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => {
            const [a1, a2] = [arg1.typedValue, arg2.typedValue];
            const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);
            return sub || !a2 ? (0, utils_expression_evaluator_1.langString)(sub, arg1.language) : (0, utils_expression_evaluator_1.string)(sub);
          }).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
            if (arg1.language !== arg2.language) {
              throw new utils_expression_evaluator_1.IncompatibleLanguageOperation(arg1, arg2);
            }
            const [a1, a2] = [arg1.typedValue, arg2.typedValue];
            const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);
            return sub || !a2 ? (0, utils_expression_evaluator_1.langString)(sub, arg1.language) : (0, utils_expression_evaluator_1.string)(sub);
          }).collect()
        });
      }
    };
    exports.TermFunctionStrAfter = TermFunctionStrAfter;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/ActorFunctionFactoryTermStrAfter.js
var require_ActorFunctionFactoryTermStrAfter = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/ActorFunctionFactoryTermStrAfter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrAfter = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrAfter_1 = require_TermFunctionStrAfter();
    var ActorFunctionFactoryTermStrAfter = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRAFTER],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrAfter_1.TermFunctionStrAfter();
      }
    };
    exports.ActorFunctionFactoryTermStrAfter = ActorFunctionFactoryTermStrAfter;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/index.js
var require_lib139 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-after/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrAfter(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/TermFunctionStrBefore.js
var require_TermFunctionStrBefore = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/TermFunctionStrBefore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrBefore = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrBefore = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRBEFORE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRBEFORE).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, utils_expression_evaluator_1.string)(arg1.slice(0, Math.max(0, arg1.indexOf(arg2))))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => {
            const [a1, a2] = [arg1.typedValue, arg2.typedValue];
            const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));
            return sub || !a2 ? (0, utils_expression_evaluator_1.langString)(sub, arg1.language) : (0, utils_expression_evaluator_1.string)(sub);
          }).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
            if (arg1.language !== arg2.language) {
              throw new utils_expression_evaluator_1.IncompatibleLanguageOperation(arg1, arg2);
            }
            const [a1, a2] = [arg1.typedValue, arg2.typedValue];
            const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));
            return sub || !a2 ? (0, utils_expression_evaluator_1.langString)(sub, arg1.language) : (0, utils_expression_evaluator_1.string)(sub);
          }).collect()
        });
      }
    };
    exports.TermFunctionStrBefore = TermFunctionStrBefore;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/ActorFunctionFactoryTermStrBefore.js
var require_ActorFunctionFactoryTermStrBefore = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/ActorFunctionFactoryTermStrBefore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrBefore = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrBefore_1 = require_TermFunctionStrBefore();
    var ActorFunctionFactoryTermStrBefore = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRBEFORE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrBefore_1.TermFunctionStrBefore();
      }
    };
    exports.ActorFunctionFactoryTermStrBefore = ActorFunctionFactoryTermStrBefore;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/index.js
var require_lib140 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-before/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrBefore(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/TermFunctionStrDt.js
var require_TermFunctionStrDt = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/TermFunctionStrDt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrDt = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrDt = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRDT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRDT).set([utils_expression_evaluator_1.TypeURL.XSD_STRING, "namedNode"], (exprEval) => ([str, iri]) => {
            const dataFactory = exprEval.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
            const lit = dataFactory.literal(str.typedValue, dataFactory.namedNode(iri.value));
            return new utils_expression_evaluator_1.TermTransformer(exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider)).transformLiteral(lit);
          }).collect()
        });
      }
    };
    exports.TermFunctionStrDt = TermFunctionStrDt;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/ActorFunctionFactoryTermStrDt.js
var require_ActorFunctionFactoryTermStrDt = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/ActorFunctionFactoryTermStrDt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrDt = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrDt_1 = require_TermFunctionStrDt();
    var ActorFunctionFactoryTermStrDt = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRDT],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrDt_1.TermFunctionStrDt();
      }
    };
    exports.ActorFunctionFactoryTermStrDt = ActorFunctionFactoryTermStrDt;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/index.js
var require_lib141 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-dt/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrDt(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/TermFunctionStrEnds.js
var require_TermFunctionStrEnds = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/TermFunctionStrEnds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrEnds = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrEnds = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRENDS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRENDS).onBinaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, utils_expression_evaluator_1.bool)(arg1.endsWith(arg2))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
            if (arg1.language !== arg2.language) {
              throw new utils_expression_evaluator_1.IncompatibleLanguageOperation(arg1, arg2);
            }
            return (0, utils_expression_evaluator_1.bool)(arg1.typedValue.endsWith(arg2.typedValue));
          }).collect()
        });
      }
    };
    exports.TermFunctionStrEnds = TermFunctionStrEnds;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/ActorFunctionFactoryTermStrEnds.js
var require_ActorFunctionFactoryTermStrEnds = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/ActorFunctionFactoryTermStrEnds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrEnds = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrEnds_1 = require_TermFunctionStrEnds();
    var ActorFunctionFactoryTermStrEnds = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRENDS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrEnds_1.TermFunctionStrEnds();
      }
    };
    exports.ActorFunctionFactoryTermStrEnds = ActorFunctionFactoryTermStrEnds;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/index.js
var require_lib142 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-ends/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrEnds(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/TermFunctionStrLang.js
var require_TermFunctionStrLang = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/TermFunctionStrLang.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrLang = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrLang = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRLANG,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRLANG).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (val, language) => new utils_expression_evaluator_1.LangStringLiteral(val, language.toLowerCase())).collect()
        });
      }
    };
    exports.TermFunctionStrLang = TermFunctionStrLang;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/ActorFunctionFactoryTermStrLang.js
var require_ActorFunctionFactoryTermStrLang = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/ActorFunctionFactoryTermStrLang.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrLang = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrLang_1 = require_TermFunctionStrLang();
    var ActorFunctionFactoryTermStrLang = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRLANG],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrLang_1.TermFunctionStrLang();
      }
    };
    exports.ActorFunctionFactoryTermStrLang = ActorFunctionFactoryTermStrLang;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/index.js
var require_lib143 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-lang/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrLang(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/TermFunctionStrLen.js
var require_TermFunctionStrLen = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/TermFunctionStrLen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrLen = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrLen = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.STRLEN,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRLEN).onStringly1(() => (str) => (0, utils_expression_evaluator_1.integer)([...str.typedValue].length)).collect()
        });
      }
    };
    exports.TermFunctionStrLen = TermFunctionStrLen;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/ActorFunctionFactoryTermStrLen.js
var require_ActorFunctionFactoryTermStrLen = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/ActorFunctionFactoryTermStrLen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrLen = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrLen_1 = require_TermFunctionStrLen();
    var ActorFunctionFactoryTermStrLen = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRLEN],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrLen_1.TermFunctionStrLen();
      }
    };
    exports.ActorFunctionFactoryTermStrLen = ActorFunctionFactoryTermStrLen;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/index.js
var require_lib144 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-len/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrLen(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/TermFunctionStrStarts.js
var require_TermFunctionStrStarts = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/TermFunctionStrStarts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrStarts = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrStarts = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.STRSTARTS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRSTARTS).onBinaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, utils_expression_evaluator_1.bool)(arg1.startsWith(arg2))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
            if (arg1.language !== arg2.language) {
              throw new utils_expression_evaluator_1.IncompatibleLanguageOperation(arg1, arg2);
            }
            return (0, utils_expression_evaluator_1.bool)(arg1.typedValue.startsWith(arg2.typedValue));
          }).collect()
        });
      }
    };
    exports.TermFunctionStrStarts = TermFunctionStrStarts;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/ActorFunctionFactoryTermStrStarts.js
var require_ActorFunctionFactoryTermStrStarts = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/ActorFunctionFactoryTermStrStarts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrStarts = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrStarts_1 = require_TermFunctionStrStarts();
    var ActorFunctionFactoryTermStrStarts = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRSTARTS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrStarts_1.TermFunctionStrStarts();
      }
    };
    exports.ActorFunctionFactoryTermStrStarts = ActorFunctionFactoryTermStrStarts;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/index.js
var require_lib145 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-starts/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrStarts(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/max.js
var require_max = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "ffffffff-ffff-ffff-ffff-ffffffffffff";
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/nil.js
var require_nil = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/regex.js
var require_regex = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/validate.js
var require_validate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var regex_js_1 = require_regex();
    function validate(uuid) {
      return typeof uuid === "string" && regex_js_1.default.test(uuid);
    }
    exports.default = validate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/parse.js
var require_parse = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_js_1 = require_validate();
    function parse2(uuid) {
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
    }
    exports.default = parse2;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/stringify.js
var require_stringify2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unsafeStringify = void 0;
    var validate_js_1 = require_validate();
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }
    exports.unsafeStringify = unsafeStringify;
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    exports.default = stringify;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/rng.js
var require_rng = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        if (typeof crypto === "undefined" || !crypto.getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
        getRandomValues = crypto.getRandomValues.bind(crypto);
      }
      return getRandomValues(rnds8);
    }
    exports.default = rng;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v1.js
var require_v1 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateV1State = void 0;
    var rng_js_1 = require_rng();
    var stringify_js_1 = require_stringify2();
    var _state = {};
    function v1(options, buf, offset) {
      var _a;
      let bytes;
      const isV6 = (options == null ? void 0 : options._v6) ?? false;
      if (options) {
        const optionsKeys = Object.keys(options);
        if (optionsKeys.length === 1 && optionsKeys[0] === "_v6") {
          options = void 0;
        }
      }
      if (options) {
        bytes = v1Bytes(options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);
      } else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV1State(_state, now, rnds);
        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? void 0 : _state.clockseq, isV6 ? void 0 : _state.node, buf, offset);
      }
      return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
    }
    function updateV1State(state, now, rnds) {
      state.msecs ?? (state.msecs = -Infinity);
      state.nsecs ?? (state.nsecs = 0);
      if (now === state.msecs) {
        state.nsecs++;
        if (state.nsecs >= 1e4) {
          state.node = void 0;
          state.nsecs = 0;
        }
      } else if (now > state.msecs) {
        state.nsecs = 0;
      } else if (now < state.msecs) {
        state.node = void 0;
      }
      if (!state.node) {
        state.node = rnds.slice(10, 16);
        state.node[0] |= 1;
        state.clockseq = (rnds[8] << 8 | rnds[9]) & 16383;
      }
      state.msecs = now;
      return state;
    }
    exports.updateV1State = updateV1State;
    function v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
      } else {
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
      }
      msecs ?? (msecs = Date.now());
      nsecs ?? (nsecs = 0);
      clockseq ?? (clockseq = (rnds[8] << 8 | rnds[9]) & 16383);
      node ?? (node = rnds.slice(10, 16));
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      buf[offset++] = tl >>> 24 & 255;
      buf[offset++] = tl >>> 16 & 255;
      buf[offset++] = tl >>> 8 & 255;
      buf[offset++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      buf[offset++] = tmh >>> 8 & 255;
      buf[offset++] = tmh & 255;
      buf[offset++] = tmh >>> 24 & 15 | 16;
      buf[offset++] = tmh >>> 16 & 255;
      buf[offset++] = clockseq >>> 8 | 128;
      buf[offset++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        buf[offset++] = node[n];
      }
      return buf;
    }
    exports.default = v1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v1ToV6.js
var require_v1ToV6 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v1ToV6.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var parse_js_1 = require_parse();
    var stringify_js_1 = require_stringify2();
    function v1ToV6(uuid) {
      const v1Bytes = typeof uuid === "string" ? (0, parse_js_1.default)(uuid) : uuid;
      const v6Bytes = _v1ToV6(v1Bytes);
      return typeof uuid === "string" ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;
    }
    exports.default = v1ToV6;
    function _v1ToV6(v1Bytes) {
      return Uint8Array.of((v1Bytes[6] & 15) << 4 | v1Bytes[7] >> 4 & 15, (v1Bytes[7] & 15) << 4 | (v1Bytes[4] & 240) >> 4, (v1Bytes[4] & 15) << 4 | (v1Bytes[5] & 240) >> 4, (v1Bytes[5] & 15) << 4 | (v1Bytes[0] & 240) >> 4, (v1Bytes[0] & 15) << 4 | (v1Bytes[1] & 240) >> 4, (v1Bytes[1] & 15) << 4 | (v1Bytes[2] & 240) >> 4, 96 | v1Bytes[2] & 15, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/md5.js
var require_md5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function md5(bytes) {
      const words = uint8ToUint32(bytes);
      const md5Bytes = wordsToMd5(words, bytes.length * 8);
      return uint32ToUint8(md5Bytes);
    }
    function uint32ToUint8(input) {
      const bytes = new Uint8Array(input.length * 4);
      for (let i = 0; i < input.length * 4; i++) {
        bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
      }
      return bytes;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      const xpad = new Uint32Array(getOutputLength(len)).fill(0);
      xpad.set(x);
      xpad[len >> 5] |= 128 << len % 32;
      xpad[xpad.length - 1] = len;
      x = xpad;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return Uint32Array.of(a, b, c, d);
    }
    function uint8ToUint32(input) {
      if (input.length === 0) {
        return new Uint32Array();
      }
      const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
      for (let i = 0; i < input.length; i++) {
        output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    exports.default = md5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v35.js
var require_v35 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = exports.stringToBytes = void 0;
    var parse_js_1 = require_parse();
    var stringify_js_1 = require_stringify2();
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = new Uint8Array(str.length);
      for (let i = 0; i < str.length; ++i) {
        bytes[i] = str.charCodeAt(i);
      }
      return bytes;
    }
    exports.stringToBytes = stringToBytes;
    exports.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    function v35(version2, hash2, value, namespace, buf, offset) {
      const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
      const namespaceBytes = typeof namespace === "string" ? (0, parse_js_1.default)(namespace) : namespace;
      if (typeof namespace === "string") {
        namespace = (0, parse_js_1.default)(namespace);
      }
      if ((namespace == null ? void 0 : namespace.length) !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + valueBytes.length);
      bytes.set(namespaceBytes);
      bytes.set(valueBytes, namespaceBytes.length);
      bytes = hash2(bytes);
      bytes[6] = bytes[6] & 15 | version2;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(bytes);
    }
    exports.default = v35;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v3.js
var require_v3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = void 0;
    var md5_js_1 = require_md5();
    var v35_js_1 = require_v35();
    var v35_js_2 = require_v35();
    Object.defineProperty(exports, "DNS", { enumerable: true, get: function() {
      return v35_js_2.DNS;
    } });
    Object.defineProperty(exports, "URL", { enumerable: true, get: function() {
      return v35_js_2.URL;
    } });
    function v3(value, namespace, buf, offset) {
      return (0, v35_js_1.default)(48, md5_js_1.default, value, namespace, buf, offset);
    }
    v3.DNS = v35_js_1.DNS;
    v3.URL = v35_js_1.URL;
    exports.default = v3;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/native.js
var require_native = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    exports.default = { randomUUID };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v4.js
var require_v4 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var native_js_1 = require_native();
    var rng_js_1 = require_rng();
    var stringify_js_1 = require_stringify2();
    function v4(options, buf, offset) {
      var _a;
      if (native_js_1.default.randomUUID && !buf && !options) {
        return native_js_1.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)();
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(rnds);
    }
    exports.default = v4;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/sha1.js
var require_sha1 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      const newBytes = new Uint8Array(bytes.length + 1);
      newBytes.set(bytes);
      newBytes[bytes.length] = 128;
      bytes = newBytes;
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
    }
    exports.default = sha1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v5.js
var require_v5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = void 0;
    var sha1_js_1 = require_sha1();
    var v35_js_1 = require_v35();
    var v35_js_2 = require_v35();
    Object.defineProperty(exports, "DNS", { enumerable: true, get: function() {
      return v35_js_2.DNS;
    } });
    Object.defineProperty(exports, "URL", { enumerable: true, get: function() {
      return v35_js_2.URL;
    } });
    function v5(value, namespace, buf, offset) {
      return (0, v35_js_1.default)(80, sha1_js_1.default, value, namespace, buf, offset);
    }
    v5.DNS = v35_js_1.DNS;
    v5.URL = v35_js_1.URL;
    exports.default = v5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v6.js
var require_v6 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v6.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stringify_js_1 = require_stringify2();
    var v1_js_1 = require_v1();
    var v1ToV6_js_1 = require_v1ToV6();
    function v6(options, buf, offset) {
      options ?? (options = {});
      offset ?? (offset = 0);
      let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));
      bytes = (0, v1ToV6_js_1.default)(bytes);
      if (buf) {
        for (let i = 0; i < 16; i++) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(bytes);
    }
    exports.default = v6;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v6ToV1.js
var require_v6ToV1 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v6ToV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var parse_js_1 = require_parse();
    var stringify_js_1 = require_stringify2();
    function v6ToV1(uuid) {
      const v6Bytes = typeof uuid === "string" ? (0, parse_js_1.default)(uuid) : uuid;
      const v1Bytes = _v6ToV1(v6Bytes);
      return typeof uuid === "string" ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;
    }
    exports.default = v6ToV1;
    function _v6ToV1(v6Bytes) {
      return Uint8Array.of((v6Bytes[3] & 15) << 4 | v6Bytes[4] >> 4 & 15, (v6Bytes[4] & 15) << 4 | (v6Bytes[5] & 240) >> 4, (v6Bytes[5] & 15) << 4 | v6Bytes[6] & 15, v6Bytes[7], (v6Bytes[1] & 15) << 4 | (v6Bytes[2] & 240) >> 4, (v6Bytes[2] & 15) << 4 | (v6Bytes[3] & 240) >> 4, 16 | (v6Bytes[0] & 240) >> 4, (v6Bytes[0] & 15) << 4 | (v6Bytes[1] & 240) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v7.js
var require_v7 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/v7.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateV7State = void 0;
    var rng_js_1 = require_rng();
    var stringify_js_1 = require_stringify2();
    var _state = {};
    function v7(options, buf, offset) {
      var _a;
      let bytes;
      if (options) {
        bytes = v7Bytes(options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);
      } else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV7State(_state, now, rnds);
        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);
      }
      return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
    }
    function updateV7State(state, now, rnds) {
      state.msecs ?? (state.msecs = -Infinity);
      state.seq ?? (state.seq = 0);
      if (now > state.msecs) {
        state.seq = rnds[6] << 23 | rnds[7] << 16 | rnds[8] << 8 | rnds[9];
        state.msecs = now;
      } else {
        state.seq = state.seq + 1 | 0;
        if (state.seq === 0) {
          state.msecs++;
        }
      }
      return state;
    }
    exports.updateV7State = updateV7State;
    function v7Bytes(rnds, msecs, seq, buf, offset = 0) {
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
      } else {
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
      }
      msecs ?? (msecs = Date.now());
      seq ?? (seq = rnds[6] * 127 << 24 | rnds[7] << 16 | rnds[8] << 8 | rnds[9]);
      buf[offset++] = msecs / 1099511627776 & 255;
      buf[offset++] = msecs / 4294967296 & 255;
      buf[offset++] = msecs / 16777216 & 255;
      buf[offset++] = msecs / 65536 & 255;
      buf[offset++] = msecs / 256 & 255;
      buf[offset++] = msecs & 255;
      buf[offset++] = 112 | seq >>> 28 & 15;
      buf[offset++] = seq >>> 20 & 255;
      buf[offset++] = 128 | seq >>> 14 & 63;
      buf[offset++] = seq >>> 6 & 255;
      buf[offset++] = seq << 2 & 255 | rnds[10] & 3;
      buf[offset++] = rnds[11];
      buf[offset++] = rnds[12];
      buf[offset++] = rnds[13];
      buf[offset++] = rnds[14];
      buf[offset++] = rnds[15];
      return buf;
    }
    exports.default = v7;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/version.js
var require_version = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_js_1 = require_validate();
    function version2(uuid) {
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    exports.default = version2;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/index.js
var require_cjs_browser = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/node_modules/uuid/dist/cjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;
    var max_js_1 = require_max();
    Object.defineProperty(exports, "MAX", { enumerable: true, get: function() {
      return max_js_1.default;
    } });
    var nil_js_1 = require_nil();
    Object.defineProperty(exports, "NIL", { enumerable: true, get: function() {
      return nil_js_1.default;
    } });
    var parse_js_1 = require_parse();
    Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
      return parse_js_1.default;
    } });
    var stringify_js_1 = require_stringify2();
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.default;
    } });
    var v1_js_1 = require_v1();
    Object.defineProperty(exports, "v1", { enumerable: true, get: function() {
      return v1_js_1.default;
    } });
    var v1ToV6_js_1 = require_v1ToV6();
    Object.defineProperty(exports, "v1ToV6", { enumerable: true, get: function() {
      return v1ToV6_js_1.default;
    } });
    var v3_js_1 = require_v3();
    Object.defineProperty(exports, "v3", { enumerable: true, get: function() {
      return v3_js_1.default;
    } });
    var v4_js_1 = require_v4();
    Object.defineProperty(exports, "v4", { enumerable: true, get: function() {
      return v4_js_1.default;
    } });
    var v5_js_1 = require_v5();
    Object.defineProperty(exports, "v5", { enumerable: true, get: function() {
      return v5_js_1.default;
    } });
    var v6_js_1 = require_v6();
    Object.defineProperty(exports, "v6", { enumerable: true, get: function() {
      return v6_js_1.default;
    } });
    var v6ToV1_js_1 = require_v6ToV1();
    Object.defineProperty(exports, "v6ToV1", { enumerable: true, get: function() {
      return v6ToV1_js_1.default;
    } });
    var v7_js_1 = require_v7();
    Object.defineProperty(exports, "v7", { enumerable: true, get: function() {
      return v7_js_1.default;
    } });
    var validate_js_1 = require_validate();
    Object.defineProperty(exports, "validate", { enumerable: true, get: function() {
      return validate_js_1.default;
    } });
    var version_js_1 = require_version();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return version_js_1.default;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/TermFunctionStrUuid.js
var require_TermFunctionStrUuid = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/TermFunctionStrUuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStrUuid = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var uuid = require_cjs_browser();
    var TermFunctionStrUuid = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 0,
          operator: utils_expression_evaluator_1.SparqlOperator.STRUUID,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STRUUID).set([], () => () => (0, utils_expression_evaluator_1.string)(uuid.v4())).collect()
        });
      }
    };
    exports.TermFunctionStrUuid = TermFunctionStrUuid;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/ActorFunctionFactoryTermStrUuid.js
var require_ActorFunctionFactoryTermStrUuid = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/ActorFunctionFactoryTermStrUuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStrUuid = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStrUuid_1 = require_TermFunctionStrUuid();
    var ActorFunctionFactoryTermStrUuid = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STRUUID],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStrUuid_1.TermFunctionStrUuid();
      }
    };
    exports.ActorFunctionFactoryTermStrUuid = ActorFunctionFactoryTermStrUuid;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/index.js
var require_lib146 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str-uuid/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStrUuid(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/TermFunctionStr.js
var require_TermFunctionStr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/TermFunctionStr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionStr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStr = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.STR,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.STR).onTerm1(() => (term) => (0, utils_expression_evaluator_1.string)(term.str())).collect()
        });
      }
    };
    exports.TermFunctionStr = TermFunctionStr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/ActorFunctionFactoryTermStr.js
var require_ActorFunctionFactoryTermStr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/ActorFunctionFactoryTermStr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermStr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionStr_1 = require_TermFunctionStr();
    var ActorFunctionFactoryTermStr = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.STR],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionStr_1.TermFunctionStr();
      }
    };
    exports.ActorFunctionFactoryTermStr = ActorFunctionFactoryTermStr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/index.js
var require_lib147 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-str/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermStr(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/TermFunctionSubStr.js
var require_TermFunctionSubStr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/TermFunctionSubStr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSubStr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSubStr = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: [2, 3],
          operator: utils_expression_evaluator_1.SparqlOperator.SUBSTR,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SUBSTR).onBinaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_INTEGER], () => (source, startingLoc) => (0, utils_expression_evaluator_1.string)([...source].slice(startingLoc - 1).join(""))).onBinary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_INTEGER], () => (source, startingLoc) => {
            const sub = [...source.typedValue].slice(startingLoc.typedValue - 1).join("");
            return (0, utils_expression_evaluator_1.langString)(sub, source.language);
          }).onTernaryTyped([utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_INTEGER, utils_expression_evaluator_1.TypeURL.XSD_INTEGER], () => (source, startingLoc, length) => (0, utils_expression_evaluator_1.string)([...source].slice(startingLoc - 1, length + startingLoc - 1).join(""))).onTernary([utils_expression_evaluator_1.TypeURL.RDF_LANG_STRING, utils_expression_evaluator_1.TypeURL.XSD_INTEGER, utils_expression_evaluator_1.TypeURL.XSD_INTEGER], () => (source, startingLoc, length) => {
            const sub = [...source.typedValue].slice(startingLoc.typedValue - 1, length.typedValue + startingLoc.typedValue - 1).join("");
            return (0, utils_expression_evaluator_1.langString)(sub, source.language);
          }).collect()
        });
      }
    };
    exports.TermFunctionSubStr = TermFunctionSubStr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/ActorFunctionFactoryTermSubStr.js
var require_ActorFunctionFactoryTermSubStr = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/ActorFunctionFactoryTermSubStr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSubStr = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSubStr_1 = require_TermFunctionSubStr();
    var ActorFunctionFactoryTermSubStr = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SUBSTR],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSubStr_1.TermFunctionSubStr();
      }
    };
    exports.ActorFunctionFactoryTermSubStr = ActorFunctionFactoryTermSubStr;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/index.js
var require_lib148 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-sub-str/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSubStr(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/TermFunctionSubject.js
var require_TermFunctionSubject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/TermFunctionSubject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSubject = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSubject = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.SUBJECT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SUBJECT).onQuad1(() => (quad) => quad.subject).collect()
        });
      }
    };
    exports.TermFunctionSubject = TermFunctionSubject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/ActorFunctionFactoryTermSubject.js
var require_ActorFunctionFactoryTermSubject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/ActorFunctionFactoryTermSubject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSubject = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSubject_1 = require_TermFunctionSubject();
    var ActorFunctionFactoryTermSubject = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SUBJECT],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSubject_1.TermFunctionSubject();
      }
    };
    exports.ActorFunctionFactoryTermSubject = ActorFunctionFactoryTermSubject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/index.js
var require_lib149 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subject/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSubject(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/TermFunctionSubtraction.js
var require_TermFunctionSubtraction = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/TermFunctionSubtraction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionSubtraction = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var bignumber_js_1 = require_bignumber();
    var TermFunctionSubtraction = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.SUBTRACTION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.SUBTRACTION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).minus(right).toNumber()).set([utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], (exprEval) => ([date1, date2]) => (
            // https://www.w3.org/TR/xpath-functions/#func-subtract-dateTimes;
            new utils_expression_evaluator_1.DayTimeDurationLiteral((0, utils_expression_evaluator_1.elapsedDuration)(date1.typedValue, date2.typedValue, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)))
          )).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DATE] }).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_TIME] }).set([utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-dateTime
            new utils_expression_evaluator_1.DateTimeLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)(date.typedValue, (0, utils_expression_evaluator_1.defaultedDurationRepresentation)((0, utils_expression_evaluator_1.negateDuration)(dur.typedValue))))
          )).copy({
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION]
          }).set([utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date
            new utils_expression_evaluator_1.DateLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(date.typedValue), (0, utils_expression_evaluator_1.defaultedDurationRepresentation)((0, utils_expression_evaluator_1.negateDuration)(dur.typedValue))))
          )).copy({
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION]
          }).set([utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([time, dur]) => (
            // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date
            new utils_expression_evaluator_1.TimeLiteral((0, utils_expression_evaluator_1.addDurationToDateTime)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time.typedValue), (0, utils_expression_evaluator_1.defaultedDurationRepresentation)((0, utils_expression_evaluator_1.negateDuration)(dur.typedValue))))
          )).collect()
        });
      }
    };
    exports.TermFunctionSubtraction = TermFunctionSubtraction;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/ActorFunctionFactoryTermSubtraction.js
var require_ActorFunctionFactoryTermSubtraction = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/ActorFunctionFactoryTermSubtraction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermSubtraction = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionSubtraction_1 = require_TermFunctionSubtraction();
    var ActorFunctionFactoryTermSubtraction = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.SUBTRACTION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionSubtraction_1.TermFunctionSubtraction();
      }
    };
    exports.ActorFunctionFactoryTermSubtraction = ActorFunctionFactoryTermSubtraction;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/index.js
var require_lib150 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-subtraction/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermSubtraction(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/TermFunctionTimezone.js
var require_TermFunctionTimezone = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/TermFunctionTimezone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionTimezone = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTimezone = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.TIMEZONE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.TIMEZONE).onDateTime1(() => (date) => {
            const duration = {
              hours: date.typedValue.zoneHours,
              minutes: date.typedValue.zoneMinutes
            };
            if (duration.hours === void 0 && duration.minutes === void 0) {
              throw new utils_expression_evaluator_1.InvalidTimezoneCall(date.str());
            }
            return new utils_expression_evaluator_1.DayTimeDurationLiteral(duration);
          }).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_DATE] }).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_TIME] }).collect()
        });
      }
    };
    exports.TermFunctionTimezone = TermFunctionTimezone;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/ActorFunctionFactoryTermTimezone.js
var require_ActorFunctionFactoryTermTimezone = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/ActorFunctionFactoryTermTimezone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermTimezone = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTimezone_1 = require_TermFunctionTimezone();
    var ActorFunctionFactoryTermTimezone = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.TIMEZONE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionTimezone_1.TermFunctionTimezone();
      }
    };
    exports.ActorFunctionFactoryTermTimezone = ActorFunctionFactoryTermTimezone;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/index.js
var require_lib151 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-timezone/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermTimezone(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/TermFunctionTriple.js
var require_TermFunctionTriple = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/TermFunctionTriple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionTriple = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTriple = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 3,
          operator: utils_expression_evaluator_1.SparqlOperator.TRIPLE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.TRIPLE).onTerm3((_) => (...args) => new utils_expression_evaluator_1.Quad(args[0], args[1], args[2], new utils_expression_evaluator_1.DefaultGraph())).collect()
        });
      }
    };
    exports.TermFunctionTriple = TermFunctionTriple;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/ActorFunctionFactoryTermTriple.js
var require_ActorFunctionFactoryTermTriple = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/ActorFunctionFactoryTermTriple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermTriple = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTriple_1 = require_TermFunctionTriple();
    var ActorFunctionFactoryTermTriple = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.TRIPLE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionTriple_1.TermFunctionTriple();
      }
    };
    exports.ActorFunctionFactoryTermTriple = ActorFunctionFactoryTermTriple;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/index.js
var require_lib152 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-triple/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermTriple(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/TermFunctionTz.js
var require_TermFunctionTz = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/TermFunctionTz.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionTz = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTz = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.TZ,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.TZ).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.string)((0, utils_expression_evaluator_1.extractRawTimeZone)(date.str()))).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_DATE] }).copy({ from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME], to: [utils_expression_evaluator_1.TypeURL.XSD_TIME] }).collect()
        });
      }
    };
    exports.TermFunctionTz = TermFunctionTz;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/ActorFunctionFactoryTermTz.js
var require_ActorFunctionFactoryTermTz = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/ActorFunctionFactoryTermTz.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermTz = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionTz_1 = require_TermFunctionTz();
    var ActorFunctionFactoryTermTz = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.TZ],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionTz_1.TermFunctionTz();
      }
    };
    exports.ActorFunctionFactoryTermTz = ActorFunctionFactoryTermTz;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/index.js
var require_lib153 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-tz/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermTz(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/TermFunctionUcase.js
var require_TermFunctionUcase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/TermFunctionUcase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionUcase = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUcase = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.UCASE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.UCASE).onString1Typed(() => (lit) => (0, utils_expression_evaluator_1.string)(lit.toUpperCase())).onLangString1(() => (lit) => (0, utils_expression_evaluator_1.langString)(lit.typedValue.toUpperCase(), lit.language)).collect()
        });
      }
    };
    exports.TermFunctionUcase = TermFunctionUcase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/ActorFunctionFactoryTermUcase.js
var require_ActorFunctionFactoryTermUcase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/ActorFunctionFactoryTermUcase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermUcase = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUcase_1 = require_TermFunctionUcase();
    var ActorFunctionFactoryTermUcase = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.UCASE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionUcase_1.TermFunctionUcase();
      }
    };
    exports.ActorFunctionFactoryTermUcase = ActorFunctionFactoryTermUcase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/index.js
var require_lib154 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-ucase/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermUcase(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/TermFunctionUnaryMinus.js
var require_TermFunctionUnaryMinus = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/TermFunctionUnaryMinus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionUnaryMinus = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUnaryMinus = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.UMINUS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.UMINUS).numericConverter(() => (val) => -val).collect()
        });
      }
    };
    exports.TermFunctionUnaryMinus = TermFunctionUnaryMinus;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/ActorFunctionFactoryTermUnaryMinus.js
var require_ActorFunctionFactoryTermUnaryMinus = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/ActorFunctionFactoryTermUnaryMinus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermUnaryMinus = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUnaryMinus_1 = require_TermFunctionUnaryMinus();
    var ActorFunctionFactoryTermUnaryMinus = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.UMINUS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionUnaryMinus_1.TermFunctionUnaryMinus();
      }
    };
    exports.ActorFunctionFactoryTermUnaryMinus = ActorFunctionFactoryTermUnaryMinus;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/index.js
var require_lib155 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-minus/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermUnaryMinus(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/TermFunctionUnaryPlus.js
var require_TermFunctionUnaryPlus = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/TermFunctionUnaryPlus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionUnaryPlus = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUnaryPlus = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.UPLUS,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.UPLUS).numericConverter(() => (val) => val).collect()
        });
      }
    };
    exports.TermFunctionUnaryPlus = TermFunctionUnaryPlus;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/ActorFunctionFactoryTermUnaryPlus.js
var require_ActorFunctionFactoryTermUnaryPlus = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/ActorFunctionFactoryTermUnaryPlus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermUnaryPlus = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUnaryPlus_1 = require_TermFunctionUnaryPlus();
    var ActorFunctionFactoryTermUnaryPlus = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.UPLUS],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionUnaryPlus_1.TermFunctionUnaryPlus();
      }
    };
    exports.ActorFunctionFactoryTermUnaryPlus = ActorFunctionFactoryTermUnaryPlus;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/index.js
var require_lib156 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-unary-plus/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermUnaryPlus(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/max.js
var require_max2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "ffffffff-ffff-ffff-ffff-ffffffffffff";
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/nil.js
var require_nil2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/regex.js
var require_regex2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/validate.js
var require_validate2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var regex_js_1 = require_regex2();
    function validate(uuid) {
      return typeof uuid === "string" && regex_js_1.default.test(uuid);
    }
    exports.default = validate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/parse.js
var require_parse2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_js_1 = require_validate2();
    function parse2(uuid) {
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
    }
    exports.default = parse2;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/stringify.js
var require_stringify3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unsafeStringify = void 0;
    var validate_js_1 = require_validate2();
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }
    exports.unsafeStringify = unsafeStringify;
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    exports.default = stringify;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/rng.js
var require_rng2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        if (typeof crypto === "undefined" || !crypto.getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
        getRandomValues = crypto.getRandomValues.bind(crypto);
      }
      return getRandomValues(rnds8);
    }
    exports.default = rng;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v1.js
var require_v12 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateV1State = void 0;
    var rng_js_1 = require_rng2();
    var stringify_js_1 = require_stringify3();
    var _state = {};
    function v1(options, buf, offset) {
      var _a;
      let bytes;
      const isV6 = (options == null ? void 0 : options._v6) ?? false;
      if (options) {
        const optionsKeys = Object.keys(options);
        if (optionsKeys.length === 1 && optionsKeys[0] === "_v6") {
          options = void 0;
        }
      }
      if (options) {
        bytes = v1Bytes(options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);
      } else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV1State(_state, now, rnds);
        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? void 0 : _state.clockseq, isV6 ? void 0 : _state.node, buf, offset);
      }
      return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
    }
    function updateV1State(state, now, rnds) {
      state.msecs ?? (state.msecs = -Infinity);
      state.nsecs ?? (state.nsecs = 0);
      if (now === state.msecs) {
        state.nsecs++;
        if (state.nsecs >= 1e4) {
          state.node = void 0;
          state.nsecs = 0;
        }
      } else if (now > state.msecs) {
        state.nsecs = 0;
      } else if (now < state.msecs) {
        state.node = void 0;
      }
      if (!state.node) {
        state.node = rnds.slice(10, 16);
        state.node[0] |= 1;
        state.clockseq = (rnds[8] << 8 | rnds[9]) & 16383;
      }
      state.msecs = now;
      return state;
    }
    exports.updateV1State = updateV1State;
    function v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
      } else {
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
      }
      msecs ?? (msecs = Date.now());
      nsecs ?? (nsecs = 0);
      clockseq ?? (clockseq = (rnds[8] << 8 | rnds[9]) & 16383);
      node ?? (node = rnds.slice(10, 16));
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      buf[offset++] = tl >>> 24 & 255;
      buf[offset++] = tl >>> 16 & 255;
      buf[offset++] = tl >>> 8 & 255;
      buf[offset++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      buf[offset++] = tmh >>> 8 & 255;
      buf[offset++] = tmh & 255;
      buf[offset++] = tmh >>> 24 & 15 | 16;
      buf[offset++] = tmh >>> 16 & 255;
      buf[offset++] = clockseq >>> 8 | 128;
      buf[offset++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        buf[offset++] = node[n];
      }
      return buf;
    }
    exports.default = v1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v1ToV6.js
var require_v1ToV62 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v1ToV6.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var parse_js_1 = require_parse2();
    var stringify_js_1 = require_stringify3();
    function v1ToV6(uuid) {
      const v1Bytes = typeof uuid === "string" ? (0, parse_js_1.default)(uuid) : uuid;
      const v6Bytes = _v1ToV6(v1Bytes);
      return typeof uuid === "string" ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;
    }
    exports.default = v1ToV6;
    function _v1ToV6(v1Bytes) {
      return Uint8Array.of((v1Bytes[6] & 15) << 4 | v1Bytes[7] >> 4 & 15, (v1Bytes[7] & 15) << 4 | (v1Bytes[4] & 240) >> 4, (v1Bytes[4] & 15) << 4 | (v1Bytes[5] & 240) >> 4, (v1Bytes[5] & 15) << 4 | (v1Bytes[0] & 240) >> 4, (v1Bytes[0] & 15) << 4 | (v1Bytes[1] & 240) >> 4, (v1Bytes[1] & 15) << 4 | (v1Bytes[2] & 240) >> 4, 96 | v1Bytes[2] & 15, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/md5.js
var require_md52 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function md5(bytes) {
      const words = uint8ToUint32(bytes);
      const md5Bytes = wordsToMd5(words, bytes.length * 8);
      return uint32ToUint8(md5Bytes);
    }
    function uint32ToUint8(input) {
      const bytes = new Uint8Array(input.length * 4);
      for (let i = 0; i < input.length * 4; i++) {
        bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
      }
      return bytes;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      const xpad = new Uint32Array(getOutputLength(len)).fill(0);
      xpad.set(x);
      xpad[len >> 5] |= 128 << len % 32;
      xpad[xpad.length - 1] = len;
      x = xpad;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return Uint32Array.of(a, b, c, d);
    }
    function uint8ToUint32(input) {
      if (input.length === 0) {
        return new Uint32Array();
      }
      const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
      for (let i = 0; i < input.length; i++) {
        output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    exports.default = md5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v35.js
var require_v352 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = exports.stringToBytes = void 0;
    var parse_js_1 = require_parse2();
    var stringify_js_1 = require_stringify3();
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = new Uint8Array(str.length);
      for (let i = 0; i < str.length; ++i) {
        bytes[i] = str.charCodeAt(i);
      }
      return bytes;
    }
    exports.stringToBytes = stringToBytes;
    exports.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    function v35(version2, hash2, value, namespace, buf, offset) {
      const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
      const namespaceBytes = typeof namespace === "string" ? (0, parse_js_1.default)(namespace) : namespace;
      if (typeof namespace === "string") {
        namespace = (0, parse_js_1.default)(namespace);
      }
      if ((namespace == null ? void 0 : namespace.length) !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + valueBytes.length);
      bytes.set(namespaceBytes);
      bytes.set(valueBytes, namespaceBytes.length);
      bytes = hash2(bytes);
      bytes[6] = bytes[6] & 15 | version2;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(bytes);
    }
    exports.default = v35;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v3.js
var require_v32 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = void 0;
    var md5_js_1 = require_md52();
    var v35_js_1 = require_v352();
    var v35_js_2 = require_v352();
    Object.defineProperty(exports, "DNS", { enumerable: true, get: function() {
      return v35_js_2.DNS;
    } });
    Object.defineProperty(exports, "URL", { enumerable: true, get: function() {
      return v35_js_2.URL;
    } });
    function v3(value, namespace, buf, offset) {
      return (0, v35_js_1.default)(48, md5_js_1.default, value, namespace, buf, offset);
    }
    v3.DNS = v35_js_1.DNS;
    v3.URL = v35_js_1.URL;
    exports.default = v3;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/native.js
var require_native2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    exports.default = { randomUUID };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v4.js
var require_v42 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var native_js_1 = require_native2();
    var rng_js_1 = require_rng2();
    var stringify_js_1 = require_stringify3();
    function v4(options, buf, offset) {
      var _a;
      if (native_js_1.default.randomUUID && !buf && !options) {
        return native_js_1.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)();
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(rnds);
    }
    exports.default = v4;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/sha1.js
var require_sha12 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      const newBytes = new Uint8Array(bytes.length + 1);
      newBytes.set(bytes);
      newBytes[bytes.length] = 128;
      bytes = newBytes;
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
    }
    exports.default = sha1;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v5.js
var require_v52 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URL = exports.DNS = void 0;
    var sha1_js_1 = require_sha12();
    var v35_js_1 = require_v352();
    var v35_js_2 = require_v352();
    Object.defineProperty(exports, "DNS", { enumerable: true, get: function() {
      return v35_js_2.DNS;
    } });
    Object.defineProperty(exports, "URL", { enumerable: true, get: function() {
      return v35_js_2.URL;
    } });
    function v5(value, namespace, buf, offset) {
      return (0, v35_js_1.default)(80, sha1_js_1.default, value, namespace, buf, offset);
    }
    v5.DNS = v35_js_1.DNS;
    v5.URL = v35_js_1.URL;
    exports.default = v5;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v6.js
var require_v62 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v6.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stringify_js_1 = require_stringify3();
    var v1_js_1 = require_v12();
    var v1ToV6_js_1 = require_v1ToV62();
    function v6(options, buf, offset) {
      options ?? (options = {});
      offset ?? (offset = 0);
      let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));
      bytes = (0, v1ToV6_js_1.default)(bytes);
      if (buf) {
        for (let i = 0; i < 16; i++) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, stringify_js_1.unsafeStringify)(bytes);
    }
    exports.default = v6;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v6ToV1.js
var require_v6ToV12 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v6ToV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var parse_js_1 = require_parse2();
    var stringify_js_1 = require_stringify3();
    function v6ToV1(uuid) {
      const v6Bytes = typeof uuid === "string" ? (0, parse_js_1.default)(uuid) : uuid;
      const v1Bytes = _v6ToV1(v6Bytes);
      return typeof uuid === "string" ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;
    }
    exports.default = v6ToV1;
    function _v6ToV1(v6Bytes) {
      return Uint8Array.of((v6Bytes[3] & 15) << 4 | v6Bytes[4] >> 4 & 15, (v6Bytes[4] & 15) << 4 | (v6Bytes[5] & 240) >> 4, (v6Bytes[5] & 15) << 4 | v6Bytes[6] & 15, v6Bytes[7], (v6Bytes[1] & 15) << 4 | (v6Bytes[2] & 240) >> 4, (v6Bytes[2] & 15) << 4 | (v6Bytes[3] & 240) >> 4, 16 | (v6Bytes[0] & 240) >> 4, (v6Bytes[0] & 15) << 4 | (v6Bytes[1] & 240) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v7.js
var require_v72 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/v7.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateV7State = void 0;
    var rng_js_1 = require_rng2();
    var stringify_js_1 = require_stringify3();
    var _state = {};
    function v7(options, buf, offset) {
      var _a;
      let bytes;
      if (options) {
        bytes = v7Bytes(options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);
      } else {
        const now = Date.now();
        const rnds = (0, rng_js_1.default)();
        updateV7State(_state, now, rnds);
        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);
      }
      return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);
    }
    function updateV7State(state, now, rnds) {
      state.msecs ?? (state.msecs = -Infinity);
      state.seq ?? (state.seq = 0);
      if (now > state.msecs) {
        state.seq = rnds[6] << 23 | rnds[7] << 16 | rnds[8] << 8 | rnds[9];
        state.msecs = now;
      } else {
        state.seq = state.seq + 1 | 0;
        if (state.seq === 0) {
          state.msecs++;
        }
      }
      return state;
    }
    exports.updateV7State = updateV7State;
    function v7Bytes(rnds, msecs, seq, buf, offset = 0) {
      if (rnds.length < 16) {
        throw new Error("Random bytes length must be >= 16");
      }
      if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
      } else {
        if (offset < 0 || offset + 16 > buf.length) {
          throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        }
      }
      msecs ?? (msecs = Date.now());
      seq ?? (seq = rnds[6] * 127 << 24 | rnds[7] << 16 | rnds[8] << 8 | rnds[9]);
      buf[offset++] = msecs / 1099511627776 & 255;
      buf[offset++] = msecs / 4294967296 & 255;
      buf[offset++] = msecs / 16777216 & 255;
      buf[offset++] = msecs / 65536 & 255;
      buf[offset++] = msecs / 256 & 255;
      buf[offset++] = msecs & 255;
      buf[offset++] = 112 | seq >>> 28 & 15;
      buf[offset++] = seq >>> 20 & 255;
      buf[offset++] = 128 | seq >>> 14 & 63;
      buf[offset++] = seq >>> 6 & 255;
      buf[offset++] = seq << 2 & 255 | rnds[10] & 3;
      buf[offset++] = rnds[11];
      buf[offset++] = rnds[12];
      buf[offset++] = rnds[13];
      buf[offset++] = rnds[14];
      buf[offset++] = rnds[15];
      return buf;
    }
    exports.default = v7;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/version.js
var require_version2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_js_1 = require_validate2();
    function version2(uuid) {
      if (!(0, validate_js_1.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    exports.default = version2;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/index.js
var require_cjs_browser2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/node_modules/uuid/dist/cjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;
    var max_js_1 = require_max2();
    Object.defineProperty(exports, "MAX", { enumerable: true, get: function() {
      return max_js_1.default;
    } });
    var nil_js_1 = require_nil2();
    Object.defineProperty(exports, "NIL", { enumerable: true, get: function() {
      return nil_js_1.default;
    } });
    var parse_js_1 = require_parse2();
    Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
      return parse_js_1.default;
    } });
    var stringify_js_1 = require_stringify3();
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.default;
    } });
    var v1_js_1 = require_v12();
    Object.defineProperty(exports, "v1", { enumerable: true, get: function() {
      return v1_js_1.default;
    } });
    var v1ToV6_js_1 = require_v1ToV62();
    Object.defineProperty(exports, "v1ToV6", { enumerable: true, get: function() {
      return v1ToV6_js_1.default;
    } });
    var v3_js_1 = require_v32();
    Object.defineProperty(exports, "v3", { enumerable: true, get: function() {
      return v3_js_1.default;
    } });
    var v4_js_1 = require_v42();
    Object.defineProperty(exports, "v4", { enumerable: true, get: function() {
      return v4_js_1.default;
    } });
    var v5_js_1 = require_v52();
    Object.defineProperty(exports, "v5", { enumerable: true, get: function() {
      return v5_js_1.default;
    } });
    var v6_js_1 = require_v62();
    Object.defineProperty(exports, "v6", { enumerable: true, get: function() {
      return v6_js_1.default;
    } });
    var v6ToV1_js_1 = require_v6ToV12();
    Object.defineProperty(exports, "v6ToV1", { enumerable: true, get: function() {
      return v6ToV1_js_1.default;
    } });
    var v7_js_1 = require_v72();
    Object.defineProperty(exports, "v7", { enumerable: true, get: function() {
      return v7_js_1.default;
    } });
    var validate_js_1 = require_validate2();
    Object.defineProperty(exports, "validate", { enumerable: true, get: function() {
      return validate_js_1.default;
    } });
    var version_js_1 = require_version2();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return version_js_1.default;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/TermFunctionUuid.js
var require_TermFunctionUuid = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/TermFunctionUuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionUuid = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var uuid = require_cjs_browser2();
    var TermFunctionUuid = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 0,
          operator: utils_expression_evaluator_1.SparqlOperator.UUID,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.UUID).set([], () => () => new utils_expression_evaluator_1.NamedNode(`urn:uuid:${uuid.v4()}`)).collect()
        });
      }
    };
    exports.TermFunctionUuid = TermFunctionUuid;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/ActorFunctionFactoryTermUuid.js
var require_ActorFunctionFactoryTermUuid = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/ActorFunctionFactoryTermUuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermUuid = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionUuid_1 = require_TermFunctionUuid();
    var ActorFunctionFactoryTermUuid = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.UUID],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionUuid_1.TermFunctionUuid();
      }
    };
    exports.ActorFunctionFactoryTermUuid = ActorFunctionFactoryTermUuid;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/index.js
var require_lib157 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-uuid/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermUuid(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/TermFunctionXsdToBoolean.js
var require_TermFunctionXsdToBoolean = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/TermFunctionXsdToBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToBoolean = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToBoolean = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_BOOLEAN,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_BOOLEAN).onNumeric1(() => (val) => (0, utils_expression_evaluator_1.bool)(val.coerceEBV()), true).onUnary(utils_expression_evaluator_1.TypeURL.XSD_BOOLEAN, () => (val) => (0, utils_expression_evaluator_1.bool)(val.coerceEBV()), true).onUnary(utils_expression_evaluator_1.TypeURL.XSD_STRING, () => (val) => {
            switch (val.str()) {
              case "true":
                return (0, utils_expression_evaluator_1.bool)(true);
              case "false":
                return (0, utils_expression_evaluator_1.bool)(false);
              case "1":
                return (0, utils_expression_evaluator_1.bool)(true);
              case "0":
                return (0, utils_expression_evaluator_1.bool)(false);
              default:
                throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_BOOLEAN);
            }
          }, false).collect()
        });
      }
    };
    exports.TermFunctionXsdToBoolean = TermFunctionXsdToBoolean;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/ActorFunctionFactoryTermXsdToBoolean.js
var require_ActorFunctionFactoryTermXsdToBoolean = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/ActorFunctionFactoryTermXsdToBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToBoolean = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToBoolean_1 = require_TermFunctionXsdToBoolean();
    var ActorFunctionFactoryTermXsdToBoolean = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_BOOLEAN],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToBoolean_1.TermFunctionXsdToBoolean();
      }
    };
    exports.ActorFunctionFactoryTermXsdToBoolean = ActorFunctionFactoryTermXsdToBoolean;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/index.js
var require_lib158 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-boolean/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToBoolean(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/TermFunctionXsdToDate.js
var require_TermFunctionXsdToDate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/TermFunctionXsdToDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDate = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDate = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DATE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DATE).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DATE, () => (val) => new utils_expression_evaluator_1.DateLiteral(val.typedValue, val.strValue)).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, () => (val) => new utils_expression_evaluator_1.DateLiteral(val.typedValue)).onStringly1(() => (val) => new utils_expression_evaluator_1.DateLiteral((0, utils_expression_evaluator_1.parseDate)(val.str()))).collect()
        });
      }
    };
    exports.TermFunctionXsdToDate = TermFunctionXsdToDate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/ActorFunctionFactoryTermXsdToDate.js
var require_ActorFunctionFactoryTermXsdToDate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/ActorFunctionFactoryTermXsdToDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDate = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDate_1 = require_TermFunctionXsdToDate();
    var ActorFunctionFactoryTermXsdToDate = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DATE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDate_1.TermFunctionXsdToDate();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDate = ActorFunctionFactoryTermXsdToDate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/index.js
var require_lib159 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-date/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/TermFunctionXsdToDatetime.js
var require_TermFunctionXsdToDatetime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/TermFunctionXsdToDatetime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDatetime = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDatetime = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, () => (val) => val).onUnary(utils_expression_evaluator_1.TypeURL.XSD_STRING, () => (val) => (0, utils_expression_evaluator_1.dateTime)((0, utils_expression_evaluator_1.parseDateTime)(val.str()), val.str()), false).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DATE, () => (val) => new utils_expression_evaluator_1.DateTimeLiteral({ ...val.typedValue, hours: 0, minutes: 0, seconds: 0 })).collect()
        });
      }
    };
    exports.TermFunctionXsdToDatetime = TermFunctionXsdToDatetime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/ActorFunctionFactoryTermXsdToDatetime.js
var require_ActorFunctionFactoryTermXsdToDatetime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/ActorFunctionFactoryTermXsdToDatetime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDatetime = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDatetime_1 = require_TermFunctionXsdToDatetime();
    var ActorFunctionFactoryTermXsdToDatetime = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDatetime_1.TermFunctionXsdToDatetime();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDatetime = ActorFunctionFactoryTermXsdToDatetime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/index.js
var require_lib160 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-datetime/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDatetime(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/TermFunctionXsdToDayTimeDuration.js
var require_TermFunctionXsdToDayTimeDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/TermFunctionXsdToDayTimeDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDayTimeDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDayTimeDuration = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DURATION, () => (val) => (
            // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
            new utils_expression_evaluator_1.DayTimeDurationLiteral((0, utils_expression_evaluator_1.trimToDayTimeDuration)(val.typedValue))
          )).onStringly1(() => (val) => new utils_expression_evaluator_1.DayTimeDurationLiteral((0, utils_expression_evaluator_1.parseDayTimeDuration)(val.str()))).collect()
        });
      }
    };
    exports.TermFunctionXsdToDayTimeDuration = TermFunctionXsdToDayTimeDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/ActorFunctionFactoryTermXsdToDayTimeDuration.js
var require_ActorFunctionFactoryTermXsdToDayTimeDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/ActorFunctionFactoryTermXsdToDayTimeDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDayTimeDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDayTimeDuration_1 = require_TermFunctionXsdToDayTimeDuration();
    var ActorFunctionFactoryTermXsdToDayTimeDuration = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDayTimeDuration_1.TermFunctionXsdToDayTimeDuration();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDayTimeDuration = ActorFunctionFactoryTermXsdToDayTimeDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/index.js
var require_lib161 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-day-time-duration/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDayTimeDuration(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/TermFunctionXsdToDecimal.js
var require_TermFunctionXsdToDecimal = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/TermFunctionXsdToDecimal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDecimal = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDecimal = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DECIMAL,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DECIMAL).onNumeric1(() => (val) => {
            const result = (0, utils_expression_evaluator_1.parseXSDDecimal)(val.str());
            if (result === void 0) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_DECIMAL);
            }
            return (0, utils_expression_evaluator_1.decimal)(result);
          }).onString1(() => (val) => {
            const str = val.str();
            const result = /^([+-])?(\d+(\.\d+)?)$/u.test(str) ? (0, utils_expression_evaluator_1.parseXSDDecimal)(str) : void 0;
            if (result === void 0) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_DECIMAL);
            }
            return (0, utils_expression_evaluator_1.decimal)(result);
          }, false).onBoolean1Typed(() => (val) => (0, utils_expression_evaluator_1.decimal)(val ? 1 : 0)).collect()
        });
      }
    };
    exports.TermFunctionXsdToDecimal = TermFunctionXsdToDecimal;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/ActorFunctionFactoryTermXsdToDecimal.js
var require_ActorFunctionFactoryTermXsdToDecimal = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/ActorFunctionFactoryTermXsdToDecimal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDecimal = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDecimal_1 = require_TermFunctionXsdToDecimal();
    var ActorFunctionFactoryTermXsdToDecimal = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DECIMAL],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDecimal_1.TermFunctionXsdToDecimal();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDecimal = ActorFunctionFactoryTermXsdToDecimal;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/index.js
var require_lib162 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-decimal/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDecimal(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/TermFunctionXsdToDouble.js
var require_TermFunctionXsdToDouble = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/TermFunctionXsdToDouble.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDouble = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDouble = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DOUBLE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DOUBLE).onNumeric1(() => (val) => (0, utils_expression_evaluator_1.double)(val.typedValue)).onBoolean1Typed(() => (val) => (0, utils_expression_evaluator_1.double)(val ? 1 : 0)).onUnary(utils_expression_evaluator_1.TypeURL.XSD_STRING, () => (val) => {
            const result = (0, utils_expression_evaluator_1.parseXSDFloat)(val.str());
            if (result === void 0) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_DOUBLE);
            }
            return (0, utils_expression_evaluator_1.double)(result);
          }, false).collect()
        });
      }
    };
    exports.TermFunctionXsdToDouble = TermFunctionXsdToDouble;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/ActorFunctionFactoryTermXsdToDouble.js
var require_ActorFunctionFactoryTermXsdToDouble = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/ActorFunctionFactoryTermXsdToDouble.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDouble = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDouble_1 = require_TermFunctionXsdToDouble();
    var ActorFunctionFactoryTermXsdToDouble = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DOUBLE],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDouble_1.TermFunctionXsdToDouble();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDouble = ActorFunctionFactoryTermXsdToDouble;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/index.js
var require_lib163 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-double/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDouble(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/TermFunctionXsdToDuration.js
var require_TermFunctionXsdToDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/TermFunctionXsdToDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDuration = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_DURATION).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DURATION, () => (val) => (
            // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
            new utils_expression_evaluator_1.DurationLiteral(val.typedValue, val.strValue)
          )).onStringly1(() => (val) => new utils_expression_evaluator_1.DurationLiteral((0, utils_expression_evaluator_1.parseDuration)(val.str()))).collect()
        });
      }
    };
    exports.TermFunctionXsdToDuration = TermFunctionXsdToDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/ActorFunctionFactoryTermXsdToDuration.js
var require_ActorFunctionFactoryTermXsdToDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/ActorFunctionFactoryTermXsdToDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToDuration_1 = require_TermFunctionXsdToDuration();
    var ActorFunctionFactoryTermXsdToDuration = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_DURATION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToDuration_1.TermFunctionXsdToDuration();
      }
    };
    exports.ActorFunctionFactoryTermXsdToDuration = ActorFunctionFactoryTermXsdToDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/index.js
var require_lib164 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-duration/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToDuration(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/TermFunctionXsdToFloat.js
var require_TermFunctionXsdToFloat = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/TermFunctionXsdToFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToFloat = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToFloat = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_FLOAT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_FLOAT).onNumeric1(() => (val) => (0, utils_expression_evaluator_1.float)(val.typedValue)).onBoolean1Typed(() => (val) => (0, utils_expression_evaluator_1.float)(val ? 1 : 0)).onUnary(utils_expression_evaluator_1.TypeURL.XSD_STRING, () => (val) => {
            const result = (0, utils_expression_evaluator_1.parseXSDFloat)(val.str());
            if (result === void 0) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_FLOAT);
            }
            return (0, utils_expression_evaluator_1.float)(result);
          }, false).collect()
        });
      }
    };
    exports.TermFunctionXsdToFloat = TermFunctionXsdToFloat;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/ActorFunctionFactoryTermXsdToFloat.js
var require_ActorFunctionFactoryTermXsdToFloat = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/ActorFunctionFactoryTermXsdToFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToFloat = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToFloat_1 = require_TermFunctionXsdToFloat();
    var ActorFunctionFactoryTermXsdToFloat = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_FLOAT],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToFloat_1.TermFunctionXsdToFloat();
      }
    };
    exports.ActorFunctionFactoryTermXsdToFloat = ActorFunctionFactoryTermXsdToFloat;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/index.js
var require_lib165 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-float/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToFloat(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/TermFunctionXsdToInteger.js
var require_TermFunctionXsdToInteger = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/TermFunctionXsdToInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToInteger = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToInteger = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_INTEGER,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_INTEGER).onBoolean1Typed(() => (val) => (0, utils_expression_evaluator_1.integer)(val ? 1 : 0)).onNumeric1(() => (val) => {
            if (!Number.isFinite(val.typedValue)) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
            }
            return (0, utils_expression_evaluator_1.integer)(Math.trunc(val.typedValue));
          }).onString1(() => (val) => {
            const str = val.str();
            const result = /^\d+$/u.test(str) ? Number.parseInt(str, 10) : void 0;
            if (result === void 0) {
              throw new utils_expression_evaluator_1.CastError(val, utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
            }
            return (0, utils_expression_evaluator_1.integer)(result);
          }).collect()
        });
      }
    };
    exports.TermFunctionXsdToInteger = TermFunctionXsdToInteger;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/ActorFunctionFactoryTermXsdToInteger.js
var require_ActorFunctionFactoryTermXsdToInteger = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/ActorFunctionFactoryTermXsdToInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToInteger = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToInteger_1 = require_TermFunctionXsdToInteger();
    var ActorFunctionFactoryTermXsdToInteger = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_INTEGER],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToInteger_1.TermFunctionXsdToInteger();
      }
    };
    exports.ActorFunctionFactoryTermXsdToInteger = ActorFunctionFactoryTermXsdToInteger;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/index.js
var require_lib166 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-integer/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToInteger(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/TermFunctionXsdToString.js
var require_TermFunctionXsdToString = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/TermFunctionXsdToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToString = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToString = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_STRING,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_STRING).onNumeric1(() => (val) => (0, utils_expression_evaluator_1.string)((0, utils_expression_evaluator_1.float)(val.typedValue).str())).onBoolean1Typed(() => (val) => (0, utils_expression_evaluator_1.string)((0, utils_expression_evaluator_1.bool)(val).str())).onTerm1(() => (val) => (0, utils_expression_evaluator_1.string)(val.str())).collect()
        });
      }
    };
    exports.TermFunctionXsdToString = TermFunctionXsdToString;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/ActorFunctionFactoryTermXsdToString.js
var require_ActorFunctionFactoryTermXsdToString = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/ActorFunctionFactoryTermXsdToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToString = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToString_1 = require_TermFunctionXsdToString();
    var ActorFunctionFactoryTermXsdToString = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_STRING],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToString_1.TermFunctionXsdToString();
      }
    };
    exports.ActorFunctionFactoryTermXsdToString = ActorFunctionFactoryTermXsdToString;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/index.js
var require_lib167 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-string/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToString(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/TermFunctionXsdToTime.js
var require_TermFunctionXsdToTime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/TermFunctionXsdToTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToTime = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToTime = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_TIME,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_TIME).onUnary(utils_expression_evaluator_1.TypeURL.XSD_TIME, () => (val) => new utils_expression_evaluator_1.TimeLiteral(val.typedValue, val.strValue)).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, () => (val) => new utils_expression_evaluator_1.TimeLiteral(val.typedValue)).onStringly1(() => (val) => new utils_expression_evaluator_1.TimeLiteral((0, utils_expression_evaluator_1.parseTime)(val.str()))).collect()
        });
      }
    };
    exports.TermFunctionXsdToTime = TermFunctionXsdToTime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/ActorFunctionFactoryTermXsdToTime.js
var require_ActorFunctionFactoryTermXsdToTime = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/ActorFunctionFactoryTermXsdToTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToTime = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToTime_1 = require_TermFunctionXsdToTime();
    var ActorFunctionFactoryTermXsdToTime = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_TIME],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToTime_1.TermFunctionXsdToTime();
      }
    };
    exports.ActorFunctionFactoryTermXsdToTime = ActorFunctionFactoryTermXsdToTime;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/index.js
var require_lib168 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-time/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToTime(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/TermFunctionXsdToYearMonthDuration.js
var require_TermFunctionXsdToYearMonthDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/TermFunctionXsdToYearMonthDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionXsdToYearMonthDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToYearMonthDuration = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION).onUnary(utils_expression_evaluator_1.TypeURL.XSD_DURATION, () => (val) => (
            // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
            new utils_expression_evaluator_1.YearMonthDurationLiteral((0, utils_expression_evaluator_1.trimToYearMonthDuration)(val.typedValue))
          )).onStringly1(() => (val) => new utils_expression_evaluator_1.YearMonthDurationLiteral((0, utils_expression_evaluator_1.parseYearMonthDuration)(val.str()))).collect()
        });
      }
    };
    exports.TermFunctionXsdToYearMonthDuration = TermFunctionXsdToYearMonthDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/ActorFunctionFactoryTermXsdToYearMonthDuration.js
var require_ActorFunctionFactoryTermXsdToYearMonthDuration = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/ActorFunctionFactoryTermXsdToYearMonthDuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermXsdToYearMonthDuration = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionXsdToYearMonthDuration_1 = require_TermFunctionXsdToYearMonthDuration();
    var ActorFunctionFactoryTermXsdToYearMonthDuration = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionXsdToYearMonthDuration_1.TermFunctionXsdToYearMonthDuration();
      }
    };
    exports.ActorFunctionFactoryTermXsdToYearMonthDuration = ActorFunctionFactoryTermXsdToYearMonthDuration;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/index.js
var require_lib169 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-xsd-to-year-month-duration/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermXsdToYearMonthDuration(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/TermFunctionYear.js
var require_TermFunctionYear = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/TermFunctionYear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionYear = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionYear = class extends bus_function_factory_1.TermFunctionBase {
      constructor() {
        super({
          arity: 1,
          operator: utils_expression_evaluator_1.SparqlOperator.YEAR,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.YEAR).onDateTime1(() => (date) => (0, utils_expression_evaluator_1.integer)(date.typedValue.year)).set([utils_expression_evaluator_1.TypeURL.XSD_DATE], () => ([date]) => (0, utils_expression_evaluator_1.integer)(date.typedValue.year)).collect()
        });
      }
    };
    exports.TermFunctionYear = TermFunctionYear;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/ActorFunctionFactoryTermYear.js
var require_ActorFunctionFactoryTermYear = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/ActorFunctionFactoryTermYear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermYear = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionYear_1 = require_TermFunctionYear();
    var ActorFunctionFactoryTermYear = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.YEAR],
          termFunction: true
        });
      }
      async run(_) {
        return new TermFunctionYear_1.TermFunctionYear();
      }
    };
    exports.ActorFunctionFactoryTermYear = ActorFunctionFactoryTermYear;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/index.js
var require_lib170 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-year/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermYear(), exports);
  }
});

// ../../lipdjs/node_modules/readable-from-web/lib/ReadableFromWeb.js
var require_ReadableFromWeb = __commonJS({
  "../../lipdjs/node_modules/readable-from-web/lib/ReadableFromWeb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readableFromWeb = exports.ReadableFromWeb = void 0;
    var readable_stream_1 = require_browser2();
    var ReadableFromWeb = class extends readable_stream_1.Readable {
      constructor(stream, options) {
        super(options);
        this.reader = stream.getReader();
        this.readerClosed = false;
        this.reader.closed.then(() => {
          this.readerClosed = true;
        }).catch((error) => {
          this.readerClosed = true;
          this.destroy(error);
        });
      }
      // eslint-disable-next-line ts/naming-convention
      _read() {
        this.reader.read().then((chunk) => this.push(chunk.done ? null : chunk.value)).catch((error) => this.destroy(error));
      }
      destroy(error) {
        if (!this.readerClosed) {
          this.reader.cancel(error).then().catch(() => {
          });
        }
        return super.destroy(error);
      }
    };
    exports.ReadableFromWeb = ReadableFromWeb;
    function readableFromWeb(stream, options) {
      return new ReadableFromWeb(stream, options);
    }
    exports.readableFromWeb = readableFromWeb;
  }
});

// ../../lipdjs/node_modules/readable-from-web/lib/index.js
var require_lib171 = __commonJS({
  "../../lipdjs/node_modules/readable-from-web/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readableFromWeb = void 0;
    var ReadableFromWeb_1 = require_ReadableFromWeb();
    Object.defineProperty(exports, "readableFromWeb", { enumerable: true, get: function() {
      return ReadableFromWeb_1.readableFromWeb;
    } });
  }
});

// ../../lipdjs/node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "../../lipdjs/node_modules/is-stream/index.js"(exports, module) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module.exports = isStream;
  }
});

// ../../lipdjs/node_modules/readable-stream-node-to-web/index.js
var require_readable_stream_node_to_web = __commonJS({
  "../../lipdjs/node_modules/readable-stream-node-to-web/index.js"(exports, module) {
    module.exports = nodeToWeb;
    module.exports.WEBSTREAM_SUPPORT = typeof ReadableStream !== "undefined";
    function nodeToWeb(nodeStream) {
      if (!module.exports.WEBSTREAM_SUPPORT) throw new Error("No web ReadableStream support");
      var destroyed = false;
      var listeners = {};
      function start(controller) {
        listeners["data"] = onData;
        listeners["end"] = onData;
        listeners["end"] = onDestroy;
        listeners["close"] = onDestroy;
        listeners["error"] = onDestroy;
        for (var name in listeners) nodeStream.on(name, listeners[name]);
        nodeStream.pause();
        function onData(chunk) {
          if (destroyed) return;
          controller.enqueue(chunk);
          nodeStream.pause();
        }
        function onDestroy(err) {
          if (destroyed) return;
          destroyed = true;
          for (var name2 in listeners) nodeStream.removeListener(name2, listeners[name2]);
          if (err) controller.error(err);
          else controller.close();
        }
      }
      function pull() {
        if (destroyed) return;
        nodeStream.resume();
      }
      function cancel() {
        destroyed = true;
        for (var name in listeners) nodeStream.removeListener(name, listeners[name]);
        nodeStream.push(null);
        nodeStream.pause();
        if (nodeStream.destroy) nodeStream.destroy();
        else if (nodeStream.close) nodeStream.close();
      }
      return new ReadableStream({ start, pull, cancel });
    }
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http/lib/ActorHttp.js
var require_ActorHttp = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http/lib/ActorHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttp = void 0;
    var core_1 = require_lib();
    var readable_from_web_1 = require_lib171();
    var isStream = require_is_stream();
    var toWebReadableStream = require_readable_stream_node_to_web();
    var ActorHttp = class _ActorHttp extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {HTTP request failed: none of the configured actors were able to handle ${action.input}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
      /**
       * Converts WhatWG streams to Node streams if required.
       * Returns the input in case the stream already is a Node stream.
       * @param {ReadableStream} body
       * @returns {NodeJS.ReadableStream} A node stream.
       */
      static toNodeReadable(body) {
        return isStream(body) || body === null ? body : (0, readable_from_web_1.readableFromWeb)(body);
      }
      /**
       * Converts Node streams to WhatWG streams.
       * @param {NodeJS.ReadableStream} body
       * @returns {ReadableStream} A web stream.
       */
      static toWebReadableStream(body) {
        return toWebReadableStream(body);
      }
      /**
       * Convert the given headers object into a raw hash.
       * @param headers A headers object.
       */
      static headersToHash(headers) {
        const hash2 = {};
        headers.forEach((value, key) => {
          hash2[key] = value;
        });
        return hash2;
      }
      /**
       * Extract the requested URL from the action input.
       * @param {RequestInfo | URL} input The request input.
       * @returns {URL} The extracted URL.
       */
      static getInputUrl(input) {
        return new URL(input instanceof Request ? input.url : input);
      }
      /**
       * Creates an appropriate User-Agent header string for Node.js or other environments.
       * Within browsers, returns undefined, because the value should not be overridden due to potential CORS issues.
       */
      static createUserAgent(actorName, actorVersion) {
        if (!_ActorHttp.isBrowser()) {
          const versions = [
            `Comunica/${actorVersion.split(".")[0]}.0`,
            `${actorName}/${actorVersion}`
          ];
          if (typeof globalThis.navigator === "object" && typeof globalThis.navigator.userAgent === "string") {
            versions.push(globalThis.navigator.userAgent);
          } else if (typeof globalThis.process === "object" && typeof globalThis.process.versions === "object" && typeof globalThis.process.versions.node === "string") {
            versions.push(`Node.js/${globalThis.process.versions.node.split(".")[0]}`);
          }
          if (typeof globalThis.process === "object" && typeof globalThis.process.platform === "string" && typeof globalThis.process.arch === "string") {
            versions.splice(1, 0, `(${globalThis.process.platform}; ${globalThis.process.arch})`);
          }
          return versions.join(" ");
        }
      }
      /**
       * Attempts to determine whether the current environment is a browser or not.
       * @returns {boolean} True for browsers and web workers, false for other runtimes.
       */
      static isBrowser() {
        return (
          // The window global and the document are available in browsers, but not in web workers
          // https://developer.mozilla.org/en-US/docs/Glossary/Global_object
          typeof globalThis.window === "object" && typeof globalThis.window.document === "object" || // The importScripts function is only available in Web Workers
          // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts
          typeof globalThis.importScripts === "function"
        );
      }
    };
    exports.ActorHttp = ActorHttp;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http/lib/utils.js
var require_utils5 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAndCloseHttpResponse = void 0;
    var stream_to_string_1 = require_dist2();
    var ActorHttp_1 = require_ActorHttp();
    async function validateAndCloseHttpResponse(url, httpResponse) {
      var _a;
      if (httpResponse.status >= 400) {
        let bodyString = "empty response";
        if (httpResponse.body) {
          const responseStream = ActorHttp_1.ActorHttp.toNodeReadable(httpResponse.body);
          bodyString = await (0, stream_to_string_1.stringify)(responseStream);
        }
        throw new Error(`Could not update ${url} (HTTP status ${httpResponse.status}):
${bodyString}`);
      }
      await ((_a = httpResponse.body) == null ? void 0 : _a.cancel());
    }
    exports.validateAndCloseHttpResponse = validateAndCloseHttpResponse;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http/lib/index.js
var require_lib172 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttp(), exports);
    __exportStar(require_utils5(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-fetch/package.json
var require_package = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-fetch/package.json"(exports, module) {
    module.exports = {
      name: "@comunica/actor-http-fetch",
      version: "4.2.0",
      description: "A fetch http actor",
      "lsd:module": true,
      license: "MIT",
      funding: {
        type: "opencollective",
        url: "https://opencollective.com/comunica-association"
      },
      homepage: "https://comunica.dev/",
      repository: {
        type: "git",
        url: "https://github.com/comunica/comunica.git",
        directory: "packages/actor-http-fetch"
      },
      bugs: {
        url: "https://github.com/comunica/comunica/issues"
      },
      keywords: [
        "comunica",
        "runner"
      ],
      sideEffects: false,
      main: "lib/index.js",
      typings: "lib/index",
      publishConfig: {
        access: "public"
      },
      files: [
        "components",
        "lib/**/*.d.ts",
        "lib/**/*.js",
        "lib/**/*.js.map"
      ],
      scripts: {
        build: "yarn run build:ts && yarn run build:components",
        "build:ts": 'node "../../node_modules/typescript/bin/tsc"',
        "build:components": "componentsjs-generator"
      },
      dependencies: {
        "@comunica/bus-http": "^4.2.0",
        "@comunica/context-entries": "^4.2.0",
        "@comunica/core": "^4.2.0",
        "@comunica/mediatortype-time": "^4.2.0"
      },
      browser: {
        "./lib/FetchInitPreprocessor.js": "./lib/FetchInitPreprocessor-browser.js"
      },
      gitHead: "94e1eacab069551590cc250074b36bce08720c4c"
    };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/FetchInitPreprocessor-browser.js
var require_FetchInitPreprocessor_browser = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/FetchInitPreprocessor-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchInitPreprocessor = void 0;
    var FetchInitPreprocessor = class {
      async handle(init) {
        if (init.body && typeof init.body !== "string" && "getReader" in init.body) {
          const reader = init.body.getReader();
          const chunks = [];
          while (true) {
            const { done, value } = await reader.read();
            if (done) {
              break;
            }
            chunks.push(value);
          }
          init.body = chunks.join("");
        }
        return { ...init, keepalive: !init.body };
      }
    };
    exports.FetchInitPreprocessor = FetchInitPreprocessor;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/ActorHttpFetch.js
var require_ActorHttpFetch = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/ActorHttpFetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpFetch = void 0;
    var bus_http_1 = require_lib172();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var package_json_1 = require_package();
    var FetchInitPreprocessor_1 = require_FetchInitPreprocessor_browser();
    var ActorHttpFetch = class _ActorHttpFetch extends bus_http_1.ActorHttp {
      constructor(args) {
        super(args);
        this.fetchInitPreprocessor = new FetchInitPreprocessor_1.FetchInitPreprocessor(args.agentOptions);
      }
      async test(_action) {
        return (0, core_1.passTest)({ time: Number.POSITIVE_INFINITY });
      }
      async run(action) {
        const headers = this.prepareRequestHeaders(action);
        const init = { method: "GET", ...action.init, headers };
        this.logInfo(action.context, `Requesting ${bus_http_1.ActorHttp.getInputUrl(action.input).href}`, () => ({
          headers: bus_http_1.ActorHttp.headersToHash(headers),
          method: init.method
        }));
        if (action.context.has(context_entries_1.KeysHttp.fetch)) {
          init.headers = bus_http_1.ActorHttp.headersToHash(headers);
        }
        if (action.context.get(context_entries_1.KeysHttp.includeCredentials)) {
          init.credentials = "include";
        }
        const httpTimeout = action.context.get(context_entries_1.KeysHttp.httpTimeout);
        const httpBodyTimeout = action.context.get(context_entries_1.KeysHttp.httpBodyTimeout);
        const fetchFunction = action.context.get(context_entries_1.KeysHttp.fetch) ?? fetch;
        const requestInit = await this.fetchInitPreprocessor.handle(init);
        let timeoutCallback;
        let timeoutHandle;
        if (httpTimeout) {
          const abortController = new AbortController();
          requestInit.signal = abortController.signal;
          timeoutCallback = () => abortController.abort(new Error(`Fetch timed out for ${bus_http_1.ActorHttp.getInputUrl(action.input).href} after ${httpTimeout} ms`));
          timeoutHandle = setTimeout(() => timeoutCallback(), httpTimeout);
        }
        const response = await fetchFunction(action.input, requestInit);
        if (httpTimeout && (!httpBodyTimeout || !response.body)) {
          clearTimeout(timeoutHandle);
        }
        return response;
      }
      /**
       * Prepares the request headers, taking into account the environment.
       * @param {IActionHttp} action The HTTP action
       * @returns {Headers} Headers
       */
      prepareRequestHeaders(action) {
        var _a;
        const headers = new Headers((_a = action.init) == null ? void 0 : _a.headers);
        if (bus_http_1.ActorHttp.isBrowser()) {
          headers.delete("user-agent");
        } else if (!headers.has("user-agent")) {
          headers.set("user-agent", _ActorHttpFetch.userAgent);
        }
        const authString = action.context.get(context_entries_1.KeysHttp.auth);
        if (authString) {
          headers.set("Authorization", `Basic ${_ActorHttpFetch.stringToBase64(authString)}`);
        }
        return headers;
      }
      /**
       * Converts a string, including ones with Unicode symbols, to Base64 encoding.
       * This function was adapted from the MDN example function here:
       * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem
       * @param {string} value The string value to encode
       * @returns {string} The Base64-encoded value
       */
      static stringToBase64(value) {
        const bytes = new TextEncoder().encode(value);
        const binString = Array.from(bytes, (byte) => String.fromCodePoint(byte)).join("");
        return btoa(binString);
      }
    };
    exports.ActorHttpFetch = ActorHttpFetch;
    ActorHttpFetch.userAgent = bus_http_1.ActorHttp.createUserAgent("ActorHttpFetch", package_json_1.version);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/index.js
var require_lib173 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-fetch/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpFetch(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-source/lib/ActorQueryOperationSource.js
var require_ActorQueryOperationSource = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-source/lib/ActorQueryOperationSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationSource = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationSource = class extends bus_query_operation_1.ActorQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (!(0, utils_query_operation_1.getOperationSource)(action.operation)) {
          return (0, core_1.failTest)(`Actor ${this.name} requires an operation with source annotation.`);
        }
        return (0, core_1.passTest)({ httpRequests: 1 });
      }
      async run(action) {
        const physicalQueryPlanLogger = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanLogger);
        if (physicalQueryPlanLogger) {
          physicalQueryPlanLogger.logOperation(action.operation.type, void 0, action.operation, action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanNode), this.name, {});
          action.context = action.context.set(context_entries_1.KeysInitQuery.physicalQueryPlanNode, action.operation);
        }
        const sourceWrapper = (0, utils_query_operation_1.getOperationSource)(action.operation);
        const mergedContext = sourceWrapper.context ? action.context.merge(sourceWrapper.context) : action.context;
        let construct = false;
        sparqlalgebrajs_1.Util.recurseOperation(action.operation, {
          construct() {
            construct = true;
            return false;
          }
        });
        if (construct) {
          const quadStream = sourceWrapper.source.queryQuads(action.operation, mergedContext);
          const metadata2 = (0, utils_metadata_1.getMetadataQuads)(quadStream);
          return {
            type: "quads",
            quadStream,
            metadata: metadata2
          };
        }
        switch (action.operation.type) {
          case sparqlalgebrajs_1.Algebra.types.ASK:
            return {
              type: "boolean",
              execute: () => sourceWrapper.source.queryBoolean(action.operation, mergedContext)
            };
          case sparqlalgebrajs_1.Algebra.types.COMPOSITE_UPDATE:
          case sparqlalgebrajs_1.Algebra.types.DELETE_INSERT:
          case sparqlalgebrajs_1.Algebra.types.LOAD:
          case sparqlalgebrajs_1.Algebra.types.CLEAR:
          case sparqlalgebrajs_1.Algebra.types.CREATE:
          case sparqlalgebrajs_1.Algebra.types.DROP:
          case sparqlalgebrajs_1.Algebra.types.ADD:
          case sparqlalgebrajs_1.Algebra.types.MOVE:
          case sparqlalgebrajs_1.Algebra.types.COPY:
            return {
              type: "void",
              execute: () => sourceWrapper.source.queryVoid(action.operation, mergedContext)
            };
        }
        const bindingsStream = sourceWrapper.source.queryBindings(action.operation, mergedContext);
        const metadata = (0, utils_metadata_1.getMetadataBindings)(bindingsStream);
        return {
          type: "bindings",
          bindingsStream,
          metadata
        };
      }
    };
    exports.ActorQueryOperationSource = ActorQueryOperationSource;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-source/lib/index.js
var require_lib174 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-source/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationSource(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-join-coefficients-fixed/lib/MediatorJoinCoefficientsFixed.js
var require_MediatorJoinCoefficientsFixed = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-join-coefficients-fixed/lib/MediatorJoinCoefficientsFixed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorJoinCoefficientsFixed = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var MediatorJoinCoefficientsFixed = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediateWith(action, testResults) {
        var _a;
        const errors = [];
        const promises = testResults.map(({ reply }) => reply);
        const results = (await Promise.all(promises)).map((testResult) => {
          if (testResult.isFailed()) {
            errors.push(testResult.getFailMessage());
            return;
          }
          return { value: testResult.get(), sideData: testResult.getSideData() };
        });
        let costs = results.map((result) => {
          if (result) {
            return result.value.iterations * this.cpuWeight + result.value.persistedItems * this.memoryWeight + result.value.blockingItems * this.timeWeight + result.value.requestTime * this.ioWeight;
          }
        });
        const maxCost = Math.max(...costs.filter((cost) => cost !== void 0));
        const limitIndicator = action.context.get(context_entries_1.KeysQueryOperation.limitIndicator);
        if (limitIndicator) {
          costs = costs.map((cost, i) => {
            var _a2, _b;
            if (cost !== void 0 && ((_a2 = results[i]) == null ? void 0 : _a2.value).blockingItems > 0 && ((_b = results[i]) == null ? void 0 : _b.value).iterations > limitIndicator) {
              return cost + maxCost;
            }
            return cost;
          });
        }
        let minIndex = -1;
        let minValue = Number.POSITIVE_INFINITY;
        for (const [i, cost] of costs.entries()) {
          if (cost !== void 0 && (minIndex === -1 || cost < minValue)) {
            minIndex = i;
            minValue = cost;
          }
        }
        if (minIndex < 0) {
          return (0, core_1.failTest)(this.constructFailureMessage(action, errors));
        }
        const bestActor = testResults[minIndex].actor;
        if (bestActor.includeInLogs) {
          (_a = core_1.Actor.getContextLogger(action.context)) == null ? void 0 : _a.debug(`Determined physical join operator '${bestActor.logicalType}-${bestActor.physicalName}'`, {
            entries: action.entries.length,
            variables: await Promise.all(action.entries.map(async (entry) => (await entry.output.metadata()).variables.map((variable) => variable.variable.value))),
            costs: Object.fromEntries(costs.map((coeff, i) => [
              `${testResults[i].actor.logicalType}-${testResults[i].actor.physicalName}`,
              coeff
            ]).filter((entry) => entry[1] !== void 0)),
            coefficients: Object.fromEntries(results.map((result, i) => [
              `${testResults[i].actor.logicalType}-${testResults[i].actor.physicalName}`,
              result == null ? void 0 : result.value
            ]).filter((entry) => entry[1] !== void 0))
          });
        }
        return (0, core_1.passTestWithSideData)(bestActor, results[minIndex].sideData);
      }
    };
    exports.MediatorJoinCoefficientsFixed = MediatorJoinCoefficientsFixed;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-join-coefficients-fixed/lib/index.js
var require_lib175 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-join-coefficients-fixed/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorJoinCoefficientsFixed(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidate.js
var require_ActorHttpInvalidate = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpInvalidate = void 0;
    var core_1 = require_lib();
    var ActorHttpInvalidate = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorHttpInvalidate = ActorHttpInvalidate;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidateListenable.js
var require_ActorHttpInvalidateListenable = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidateListenable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpInvalidateListenable = void 0;
    var core_1 = require_lib();
    var ActorHttpInvalidate_1 = require_ActorHttpInvalidate();
    var ActorHttpInvalidateListenable = class extends ActorHttpInvalidate_1.ActorHttpInvalidate {
      constructor(args) {
        super(args);
        this.invalidateListeners = [];
        this.invalidateListeners = [];
      }
      addInvalidateListener(listener) {
        this.invalidateListeners.push(listener);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        for (const listener of this.invalidateListeners) {
          listener(action);
        }
        return {};
      }
    };
    exports.ActorHttpInvalidateListenable = ActorHttpInvalidateListenable;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/index.js
var require_lib176 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-http-invalidate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpInvalidate(), exports);
    __exportStar(require_ActorHttpInvalidateListenable(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-all/lib/MediatorAll.js
var require_MediatorAll = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-all/lib/MediatorAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorAll = void 0;
    var core_1 = require_lib();
    var MediatorAll = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediate(action) {
        const passedResults = [];
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          testResults = [];
        }
        for (const testResult of testResults) {
          const reply = await testResult.reply;
          if (reply.isPassed()) {
            passedResults.push({ actor: testResult.actor, sideData: reply.getSideData() });
          }
        }
        const outputs = await Promise.all(passedResults.map((result) => result.actor.runObservable(action, result.sideData)));
        return outputs[0];
      }
      async mediateWith() {
        throw new Error("Unsupported operation: MediatorAll#mediateWith");
      }
    };
    exports.MediatorAll = MediatorAll;
  }
});

// ../../lipdjs/node_modules/@comunica/mediator-all/lib/index.js
var require_lib177 = __commonJS({
  "../../lipdjs/node_modules/@comunica/mediator-all/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorAll(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-selectivity/lib/ActorRdfJoinEntriesSortSelectivity.js
var require_ActorRdfJoinEntriesSortSelectivity = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-selectivity/lib/ActorRdfJoinEntriesSortSelectivity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinEntriesSortSelectivity = void 0;
    var bus_rdf_join_entries_sort_1 = require_lib45();
    var core_1 = require_lib();
    var ActorRdfJoinEntriesSortSelectivity = class extends bus_rdf_join_entries_sort_1.ActorRdfJoinEntriesSort {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTest)({ accuracy: 0.501 });
      }
      async run(action) {
        const remainingEntries = [...action.entries];
        const finalEntries = [];
        while (remainingEntries.length > 0) {
          let minSelectivity = Number.MAX_VALUE;
          let minEntryIndex = -1;
          for (const [remainingEntryIndex, remainingEntry] of remainingEntries.entries()) {
            const { selectivity } = await this.mediatorJoinSelectivity.mediate({
              entries: [remainingEntry, ...finalEntries],
              context: action.context
            });
            if (selectivity < minSelectivity) {
              minSelectivity = selectivity;
              minEntryIndex = remainingEntryIndex;
            }
          }
          finalEntries.push(remainingEntries[minEntryIndex]);
          remainingEntries.splice(minEntryIndex, 1);
        }
        return { entries: finalEntries };
      }
    };
    exports.ActorRdfJoinEntriesSortSelectivity = ActorRdfJoinEntriesSortSelectivity;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-selectivity/lib/index.js
var require_lib178 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-entries-sort-selectivity/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinEntriesSortSelectivity(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/utils-iterator/lib/ChunkedIterator.js
var require_ChunkedIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-iterator/lib/ChunkedIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChunkedIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var ChunkedIterator = class extends asynciterator_1.TransformIterator {
      constructor(source, blockSize, options) {
        super(source, options);
        this.chunk = [];
        this.blockSize = blockSize;
      }
      consumeChunkAsIterator() {
        const it = new asynciterator_1.ArrayIterator(this.chunk, { autoStart: false });
        this.chunk = [];
        return it;
      }
      _transform(item, done, push) {
        this.chunk.push(item);
        if (this.chunk.length >= this.blockSize) {
          push(this.consumeChunkAsIterator());
        }
        done();
      }
      _flush(done) {
        if (this.chunk.length > 0) {
          this._push(this.consumeChunkAsIterator());
        }
        super._flush(done);
      }
    };
    exports.ChunkedIterator = ChunkedIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-iterator/lib/ClosableIterator.js
var require_ClosableIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-iterator/lib/ClosableIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClosableIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var ClosableIterator = class extends asynciterator_1.AsyncIterator {
      constructor(source, options) {
        super();
        this.onClose = options.onClose;
        this._source = source;
        this._source[asynciterator_1.DESTINATION] = this;
        this._source.on("end", destinationClose);
        this._source.on("error", destinationEmitError);
        this._source.on("readable", destinationSetReadable);
        this.readable = this._source.readable;
      }
      read() {
        const ret = this._source.read();
        if (!ret) {
          this.readable = false;
          if (this._source.done) {
            this.close();
          }
        }
        return ret;
      }
      _end(destroy) {
        this.onClose();
        this._source.removeListener("end", destinationClose);
        this._source.removeListener("error", destinationEmitError);
        this._source.removeListener("readable", destinationSetReadable);
        delete this._source[asynciterator_1.DESTINATION];
        this._source.destroy();
        super._end(destroy);
      }
    };
    exports.ClosableIterator = ClosableIterator;
    function destinationSetReadable() {
      this[asynciterator_1.DESTINATION].readable = true;
    }
    function destinationEmitError(error) {
      this[asynciterator_1.DESTINATION].emit("error", error);
    }
    function destinationClose() {
      this[asynciterator_1.DESTINATION].close();
    }
  }
});

// ../../lipdjs/node_modules/@comunica/utils-iterator/lib/ClosableTransformIterator.js
var require_ClosableTransformIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-iterator/lib/ClosableTransformIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClosableTransformIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var ClosableTransformIterator = class extends asynciterator_1.TransformIterator {
      constructor(source, options) {
        super(source, options);
        this.onClose = options.onClose;
      }
      _end(destroy) {
        this.onClose();
        super._end(destroy);
      }
    };
    exports.ClosableTransformIterator = ClosableTransformIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-iterator/lib/instrumentIterator.js
var require_instrumentIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-iterator/lib/instrumentIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instrumentIterator = void 0;
    function instrumentIterator(iterator) {
      const counters = {
        count: 0,
        timeSelf: 0,
        timeLife: 0
      };
      instrumentIteratorInner(iterator, counters, true);
      return new Promise((resolve) => {
        iterator.on("end", () => {
          resolve(counters);
        });
      });
    }
    exports.instrumentIterator = instrumentIterator;
    function instrumentIteratorInner(iterator, counter, top) {
      if (!("_profileInstrumented" in iterator)) {
        iterator._profileInstrumented = true;
        if ("_read" in iterator) {
          const readOld = iterator._read;
          iterator._read = (count2, done) => {
            const startTime = performance.now();
            readOld.call(iterator, count2, () => {
              counter.timeSelf += performance.now() - startTime;
              done();
            });
          };
        }
        if ("read" in iterator) {
          const readOld = iterator.read;
          iterator.read = () => {
            const startTime = performance.now();
            const ret = readOld.call(iterator);
            if (top && ret) {
              counter.count++;
            }
            counter.timeSelf += performance.now() - startTime;
            return ret;
          };
        }
        if (top) {
          const startTime = performance.now();
          iterator.on("end", () => {
            counter.timeLife = performance.now() - startTime;
          });
        }
        if ("_source" in iterator) {
          instrumentIteratorInner(iterator._source, counter, false);
        }
      }
    }
  }
});

// ../../lipdjs/node_modules/@comunica/utils-iterator/lib/index.js
var require_lib179 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-iterator/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ChunkedIterator(), exports);
    __exportStar(require_ClosableIterator(), exports);
    __exportStar(require_ClosableTransformIterator(), exports);
    __exportStar(require_instrumentIterator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join/lib/ActorRdfJoin.js
var require_ActorRdfJoin = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join/lib/ActorRdfJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoin = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_iterator_1 = require_lib179();
    var utils_metadata_1 = require_lib8();
    var ActorRdfJoin = class _ActorRdfJoin extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF joining failed: none of the configured actors were able to handle the join type ${action.type}} busFailMessage
       * @param options - Actor-specific join options.
       */
      /* eslint-enable max-len */
      constructor(args, options) {
        super(args);
        this.includeInLogs = true;
        this.logicalType = options.logicalType;
        this.physicalName = options.physicalName;
        this.limitEntries = options.limitEntries ?? Number.POSITIVE_INFINITY;
        this.limitEntriesMin = options.limitEntriesMin ?? false;
        this.canHandleUndefs = options.canHandleUndefs ?? false;
        this.isLeaf = options.isLeaf ?? true;
        this.requiresVariableOverlap = options.requiresVariableOverlap ?? false;
      }
      /**
       * Returns an array containing all the variable names that occur in all bindings streams.
       * @param {MetadataBindings[]} metadatas An array of optional metadata objects for the entries.
       * @returns {RDF.Variable[]} An array of variables.
       */
      static overlappingVariables(metadatas) {
        const variablesIndexed = {};
        for (const metadata of metadatas) {
          for (const variable of metadata.variables) {
            if (!variablesIndexed[variable.variable.value]) {
              variablesIndexed[variable.variable.value] = {
                variable: variable.variable,
                canBeUndef: variable.canBeUndef,
                occurrences: 0
              };
            }
            const entry = variablesIndexed[variable.variable.value];
            entry.canBeUndef = entry.canBeUndef || variable.canBeUndef;
            entry.occurrences++;
          }
        }
        return Object.values(variablesIndexed).filter((entry) => entry.occurrences === metadatas.length).map((entry) => ({ variable: entry.variable, canBeUndef: entry.canBeUndef }));
      }
      /**
       * Returns the variables that will occur in the joined bindings.
       * @param dataFactory The data factory.
       * @param {MetadataBindings[]} metadatas An array of metadata objects for the entries.
       * @param optional If an optional join is being performed.
       * @returns {RDF.Variable[]} An array of joined variables.
       */
      static joinVariables(dataFactory, metadatas, optional = false) {
        const variablesIndexed = {};
        let first3 = true;
        for (const metadata of metadatas) {
          for (const variable of metadata.variables) {
            variablesIndexed[variable.variable.value] = variablesIndexed[variable.variable.value] || variable.canBeUndef || !first3 && optional && !(variable.variable.value in variablesIndexed);
          }
          first3 = false;
        }
        return Object.entries(variablesIndexed).map(([variableLabel, canBeUndef]) => ({ variable: dataFactory.variable(variableLabel), canBeUndef }));
      }
      /**
       * Returns the result of joining bindings, or `null` if no join is possible.
       * @param {Bindings[]} bindings
       * @returns {Bindings}
       */
      static joinBindings(...bindings) {
        if (bindings.length === 0) {
          return null;
        }
        if (bindings.length === 1) {
          return bindings[0];
        }
        let acc = bindings[0];
        for (const binding of bindings.slice(1)) {
          const merged = acc.merge(binding);
          if (!merged) {
            return null;
          }
          acc = merged;
        }
        return acc;
      }
      /**
       * Get the estimated number of items from the given metadata.
       * @param {Record<string, any>} metadata A metadata object.
       * @return {number} The estimated number of items, or `Infinity` if cardinality is falsy.
       */
      static getCardinality(metadata) {
        return metadata.cardinality;
      }
      /**
       * Obtain the metadata from all given join entries.
       * @param entries Join entries.
       */
      static async getMetadatas(entries3) {
        return await Promise.all(entries3.map((entry) => entry.output.metadata()));
      }
      /**
       * Obtain the join entries witt metadata from all given join entries.
       * @param entries Join entries.
       */
      static async getEntriesWithMetadatas(entries3) {
        const metadatas = await _ActorRdfJoin.getMetadatas(entries3);
        return entries3.map((entry, i) => ({ ...entry, metadata: metadatas[i] }));
      }
      /**
       * Calculate the time to initiate a request for the given metadata entries.
       * @param metadatas An array of checked metadata.
       */
      static getRequestInitialTimes(metadatas) {
        return metadatas.map((metadata) => metadata.pageSize ? 0 : metadata.requestTime ?? 0);
      }
      /**
       * Calculate the time to receive a single item for the given metadata entries.
       * @param metadatas An array of checked metadata.
       */
      static getRequestItemTimes(metadatas) {
        return metadatas.map((metadata) => metadata.pageSize ? (metadata.requestTime ?? 0) / metadata.pageSize : 0);
      }
      /**
       * Construct a metadata validation state for the given metadata entries.
       * @param metadatas An array of checked metadata.
       */
      constructState(metadatas) {
        const state = new utils_metadata_1.MetadataValidationState();
        const invalidateListener = () => state.invalidate();
        for (const metadata of metadatas) {
          metadata.state.addInvalidateListener(invalidateListener);
        }
        return state;
      }
      /**
       * Helper function to create a new metadata object for the join result.
       * For required metadata entries that are not provided, sane defaults are calculated.
       * @param entries Join entries.
       * @param metadatas Metadata of the join entries.
       * @param context The action context.
       * @param partialMetadata Partial metadata entries.
       * @param optional If metadata for an optional operation must be calculated.
       */
      async constructResultMetadata(entries3, metadatas, context, partialMetadata = {}, optional = false) {
        let cardinalityJoined;
        if (partialMetadata.cardinality) {
          cardinalityJoined = partialMetadata.cardinality;
        } else {
          let hasZeroCardinality = false;
          cardinalityJoined = metadatas.reduce((acc, metadata) => {
            const cardinalityThis = _ActorRdfJoin.getCardinality(metadata);
            if (cardinalityThis.value === 0) {
              hasZeroCardinality = true;
            }
            return {
              type: cardinalityThis.type === "estimate" ? "estimate" : acc.type,
              value: acc.value * (optional ? Math.max(1, cardinalityThis.value) : cardinalityThis.value)
            };
          }, { type: "exact", value: 1 });
          if (!hasZeroCardinality || optional) {
            cardinalityJoined.value *= (await this.mediatorJoinSelectivity.mediate({ entries: entries3, context })).selectivity;
            if (cardinalityJoined.value === 0) {
              cardinalityJoined.value = Number.MIN_VALUE;
            }
          }
        }
        return {
          state: this.constructState(metadatas),
          ...partialMetadata,
          cardinality: {
            type: cardinalityJoined.type,
            value: cardinalityJoined.value
          },
          variables: _ActorRdfJoin.joinVariables(context.getSafe(context_entries_1.KeysInitQuery.dataFactory), metadatas, optional)
        };
      }
      /**
       * Order the given join entries using the join-entries-sort bus.
       * @param {MediatorRdfJoinEntriesSort} mediatorJoinEntriesSort A mediator for sorting join entries.
       * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
       * @param context The action context.
       * @return {IJoinEntryWithMetadata[]} The sorted join entries.
       */
      static async sortJoinEntries(mediatorJoinEntriesSort, entries3, context) {
        const hasUndefVars = entries3.some((entry) => entry.metadata.variables.some((variable) => variable.canBeUndef));
        if (hasUndefVars) {
          return (0, core_1.passTest)(entries3);
        }
        const variableOccurrences = {};
        for (const entry of entries3) {
          for (const variable of entry.metadata.variables) {
            let counter = variableOccurrences[variable.variable.value];
            if (!counter) {
              counter = 0;
            }
            variableOccurrences[variable.variable.value] = ++counter;
          }
        }
        const multiOccurrenceVariables = [];
        for (const [variable, count2] of Object.entries(variableOccurrences)) {
          if (count2 >= 2) {
            multiOccurrenceVariables.push(variable);
          }
        }
        if (multiOccurrenceVariables.length === 0) {
          return (0, core_1.failTest)(`Bind join can only join entries with at least one common variable`);
        }
        return (0, core_1.passTest)((await mediatorJoinEntriesSort.mediate({ entries: entries3, context })).entries);
      }
      /**
       * Default test function for join actors.
       * Checks whether all iterators have metadata.
       * If yes: call the abstract getIterations method, if not: return Infinity.
       * @param {IActionRdfJoin} action The input action containing the relevant iterators
       * @returns {Promise<IMediatorTypeJoinCoefficients>} The join coefficients.
       */
      async test(action) {
        if (action.type !== this.logicalType) {
          return (0, core_1.failTest)(`${this.name} can only handle logical joins of type '${this.logicalType}', while '${action.type}' was given.`);
        }
        if (action.entries.length <= 1) {
          return (0, core_1.failTest)(`${this.name} requires at least two join entries.`);
        }
        if (this.limitEntriesMin ? action.entries.length < this.limitEntries : action.entries.length > this.limitEntries) {
          return (0, core_1.failTest)(`${this.name} requires ${this.limitEntries} join entries at ${this.limitEntriesMin ? "least" : "most"}. The input contained ${action.entries.length}.`);
        }
        for (const entry of action.entries) {
          if (entry.output.type !== "bindings") {
            return (0, core_1.failTest)(`Invalid type of a join entry: Expected 'bindings' but got '${entry.output.type}'`);
          }
        }
        const metadatas = await _ActorRdfJoin.getMetadatas(action.entries);
        let overlappingVariables;
        if (!this.canHandleUndefs) {
          overlappingVariables = _ActorRdfJoin.overlappingVariables(metadatas);
          if (overlappingVariables.some((variable) => variable.canBeUndef)) {
            return (0, core_1.failTest)(`Actor ${this.name} can not join streams containing undefs`);
          }
        }
        if (this.requiresVariableOverlap && (overlappingVariables ?? _ActorRdfJoin.overlappingVariables(metadatas)).length === 0) {
          return (0, core_1.failTest)(`Actor ${this.name} can only join entries with at least one common variable`);
        }
        return await this.getJoinCoefficients(action, { metadatas });
      }
      /**
       * Returns default input for 0 or 1 entries. Calls the getOutput function otherwise
       * @param {IActionRdfJoin} action
       * @param sideData Side data from the test method
       * @returns {Promise<IQueryOperationResultBindings>} A bindings result.
       */
      async run(action, sideData) {
        let parentPhysicalQueryPlanNode;
        if (action.context.has(context_entries_1.KeysInitQuery.physicalQueryPlanLogger)) {
          parentPhysicalQueryPlanNode = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanNode);
          action.context = action.context.set(context_entries_1.KeysInitQuery.physicalQueryPlanNode, action);
        }
        const physicalQueryPlanLogger = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanLogger);
        let planMetadata;
        if (this.includeInLogs && physicalQueryPlanLogger) {
          planMetadata = {};
          physicalQueryPlanLogger.stashChildren(parentPhysicalQueryPlanNode, (node) => node.logicalOperator.startsWith("join"));
          physicalQueryPlanLogger.logOperation(`join-${this.logicalType}`, this.physicalName, action, parentPhysicalQueryPlanNode, this.name, planMetadata);
        }
        const { result, physicalPlanMetadata } = await this.getOutput(action, sideData);
        if (planMetadata) {
          (0, utils_iterator_1.instrumentIterator)(result.bindingsStream).then((counters) => {
            physicalQueryPlanLogger.appendMetadata(action, {
              cardinalityReal: counters.count,
              timeSelf: counters.timeSelf,
              timeLife: counters.timeLife
            });
          });
          Object.assign(planMetadata, physicalPlanMetadata);
          const cardinalities = sideData.metadatas.map(_ActorRdfJoin.getCardinality);
          planMetadata.cardinalities = cardinalities;
          planMetadata.joinCoefficients = (await this.getJoinCoefficients(action, sideData)).getOrThrow();
          if (this.isLeaf) {
            for (let i = 0; i < action.entries.length; i++) {
              const entry = action.entries[i];
              physicalQueryPlanLogger.unstashChild(entry.operation, action);
              physicalQueryPlanLogger.appendMetadata(entry.operation, { cardinality: cardinalities[i] });
            }
          }
        }
        result.metadata = (0, utils_metadata_1.cachifyMetadata)(result.metadata);
        return result;
      }
    };
    exports.ActorRdfJoin = ActorRdfJoin;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-join/lib/index.js
var require_lib180 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoin(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-single/lib/ActorRdfJoinSingle.js
var require_ActorRdfJoinSingle = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-single/lib/ActorRdfJoinSingle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSingle = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var ActorRdfJoinSingle = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "single",
          limitEntries: 1
        });
        this.includeInLogs = false;
      }
      async test(action) {
        if (action.entries.length !== 1) {
          return (0, core_1.failTest)(`Actor ${this.name} can only join a single entry`);
        }
        return await this.getJoinCoefficients(action, void 0);
      }
      async getOutput(action) {
        return {
          result: action.entries[0].output
        };
      }
      async getJoinCoefficients(action, sideData) {
        return (0, core_1.passTestWithSideData)({
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        }, sideData);
      }
    };
    exports.ActorRdfJoinSingle = ActorRdfJoinSingle;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-single/lib/index.js
var require_lib181 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-single/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSingle(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/ActorRdfJoinMultiEmpty.js
var require_ActorRdfJoinMultiEmpty = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/ActorRdfJoinMultiEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiEmpty = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var ActorRdfJoinMultiEmpty = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "multi-empty",
          canHandleUndefs: true
        });
      }
      async test(action) {
        if ((await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries)).every((metadata) => bus_rdf_join_1.ActorRdfJoin.getCardinality(metadata).value > 0)) {
          return (0, core_1.failTest)(`Actor ${this.name} can only join entries where at least one is empty`);
        }
        return super.test(action);
      }
      async getOutput(action) {
        for (const entry of action.entries) {
          entry.output.bindingsStream.close();
        }
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        return {
          result: {
            bindingsStream: new asynciterator_1.ArrayIterator([], { autoStart: false }),
            metadata: async () => ({
              state: new utils_metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 0 },
              variables: bus_rdf_join_1.ActorRdfJoin.joinVariables(dataFactory, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries))
            }),
            type: "bindings"
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        return (0, core_1.passTestWithSideData)({
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        }, sideData);
      }
    };
    exports.ActorRdfJoinMultiEmpty = ActorRdfJoinMultiEmpty;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/index.js
var require_lib182 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiEmpty(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/BindingsIndexDef.js
var require_BindingsIndexDef = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/BindingsIndexDef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsIndexDef = void 0;
    var BindingsIndexDef = class {
      constructor(keys2, hashFn) {
        this.keys = keys2.map((v) => v.variable);
        this.hashFn = hashFn;
        this.index = {};
      }
      put(bindings, value) {
        return this.index[this.hashFn(bindings, this.keys)] = value;
      }
      get(bindings) {
        const v = this.getFirst(bindings);
        return v ? [v] : [];
      }
      getFirst(bindings) {
        return this.index[this.hashFn(bindings, this.keys)];
      }
      values() {
        return Object.values(this.index);
      }
    };
    exports.BindingsIndexDef = BindingsIndexDef;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/BindingsIndexUndef.js
var require_BindingsIndexUndef = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/BindingsIndexUndef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsIndexUndef = void 0;
    var BindingsIndexUndef = class {
      constructor(keys2, hashFn, allowDisjointDomains) {
        this.data = {};
        this.keys = keys2.map((v) => v.variable);
        this.hashFn = hashFn;
        this.allowDisjointDomains = allowDisjointDomains && this.keys.length > 0;
      }
      /**
       * Add the given bindings to the index.
       * @param {Bindings} bindings A bindings.
       * @param {V} value The value to put.
       */
      put(bindings, value) {
        if (this.allowDisjointDomains || this.isBindingsValid(bindings)) {
          let dataIt = this.data;
          for (let i = 0; i < this.keys.length; i++) {
            const key = this.keys[i];
            const dataKey = this.hashFn(bindings.get(key));
            let subDataIt = dataIt[dataKey];
            if (!subDataIt) {
              subDataIt = dataIt[dataKey] = i === this.keys.length - 1 ? value : {};
            }
            dataIt = subDataIt;
          }
        }
        return value;
      }
      isBindingsValid(bindings) {
        let validKeys = false;
        for (const key of this.keys) {
          if (bindings.has(key)) {
            validKeys = true;
            break;
          }
        }
        return validKeys;
      }
      /**
       * Get the value of the given bindings is contained in this index.
       * @param {Bindings} bindings A bindings.
       * @return {V[]} The values.
       */
      get(bindings) {
        if (!(this.allowDisjointDomains || this.isBindingsValid(bindings))) {
          return [];
        }
        return this.getRecursive(bindings, this.keys, [this.data]);
      }
      getRecursive(bindings, keys2, dataIndexes) {
        if (keys2.length === 0) {
          return dataIndexes;
        }
        let key;
        [key, ...keys2] = keys2;
        const matchingRecursive = [];
        for (const data of dataIndexes) {
          const dataKey = this.hashFn(bindings == null ? void 0 : bindings.get(key));
          if (dataKey) {
            const subDatas = [data[dataKey], data[""]].filter(Boolean);
            if (subDatas.length === 0) {
              continue;
            }
            matchingRecursive.push(this.getRecursive(bindings, keys2, subDatas));
          } else {
            const subDatas = Object.values(data);
            if (subDatas.length === 0) {
              continue;
            }
            matchingRecursive.push(this.getRecursive(bindings, keys2, subDatas));
          }
        }
        return matchingRecursive.flat();
      }
      /**
       * Get the first value of the given bindings is contained in this index.
       * @param {Bindings} bindings A bindings.
       * @param matchUndefsAsWildcard If undefs in the given bindings should match with any existing values.
       *                              Otherwise, undefs will only match values that were inserted as undefs.
       * @return {V | undefined} The value.
       */
      getFirst(bindings, matchUndefsAsWildcard = true) {
        if (!(this.allowDisjointDomains || this.isBindingsValid(bindings))) {
          return void 0;
        }
        return this.getRecursiveFirst(bindings, this.keys, [this.data], matchUndefsAsWildcard);
      }
      getRecursiveFirst(bindings, keys2, dataIndexes, matchUndefsAsWildcard) {
        if (keys2.length === 0) {
          return dataIndexes[0];
        }
        let key;
        [key, ...keys2] = keys2;
        for (const data of dataIndexes) {
          const dataKey = this.hashFn(bindings.get(key));
          if (dataKey || !matchUndefsAsWildcard) {
            const subDatas = [data[dataKey], data[""]].filter(Boolean);
            if (subDatas.length === 0) {
              continue;
            }
            const ret = this.getRecursiveFirst(bindings, keys2, subDatas, matchUndefsAsWildcard);
            if (ret) {
              return ret;
            }
          } else {
            const subDatas = Object.values(data);
            if (subDatas.length === 0) {
              continue;
            }
            const ret = this.getRecursiveFirst(bindings, keys2, subDatas, matchUndefsAsWildcard);
            if (ret) {
              return ret;
            }
          }
        }
        return void 0;
      }
      values() {
        return this.keys.length === 0 ? [] : this.getRecursive(void 0, this.keys, [this.data]);
      }
    };
    exports.BindingsIndexUndef = BindingsIndexUndef;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/IBindingsIndex.js
var require_IBindingsIndex = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/IBindingsIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/index.js
var require_lib183 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-index/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BindingsIndexDef(), exports);
    __exportStar(require_BindingsIndexUndef(), exports);
    __exportStar(require_IBindingsIndex(), exports);
  }
});

// ../../lipdjs/node_modules/asyncjoin/join/DynamicNestedLoopJoin.js
var require_DynamicNestedLoopJoin = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/join/DynamicNestedLoopJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator();
    var MultiTransformIterator = AsyncIterator.MultiTransformIterator;
    var SimpleTransformIterator = AsyncIterator.SimpleTransformIterator;
    var DynamicNestedLoopJoin = class extends MultiTransformIterator {
      constructor(left, funRight, funJoin, options) {
        super(left, options);
        this.funRight = funRight;
        this.funJoin = funJoin;
      }
      _createTransformer(leftItem) {
        return new SimpleTransformIterator(this.funRight(leftItem), { transform: (rightItem, done, push) => {
          let result = this.funJoin(leftItem, rightItem);
          if (result !== null)
            push(result);
          done();
        } });
      }
    };
    module.exports = DynamicNestedLoopJoin;
  }
});

// ../../lipdjs/node_modules/asyncjoin/join/HashJoin.js
var require_HashJoin = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/join/HashJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var HashJoin = class extends AsyncIterator {
      constructor(left, right, funHash, funJoin) {
        super();
        this.addedDataListener = false;
        this.left = left;
        this.right = right;
        this.funHash = funHash;
        this.funJoin = funJoin;
        this.leftMap = /* @__PURE__ */ new Map();
        this.match = null;
        this.matches = [];
        this.matchIdx = 0;
        this.left.on("error", (error) => this.destroy(error));
        this.right.on("error", (error) => this.destroy(error));
        this.readable = false;
        this.left.on("end", allowJoining.bind(this));
        function allowJoining() {
          this.readable = true;
          this.right.on("readable", () => this.readable = true);
          this.right.on("end", () => {
            if (!this.hasResults()) this._end();
          });
        }
        this.on("newListener", (eventName) => {
          if (eventName === "data") {
            this._addDataListenerIfNeeded();
          }
        });
        if (this.left.readable)
          this._addDataListenerIfNeeded();
        this.left.on("readable", () => this._addDataListenerIfNeeded());
      }
      hasResults() {
        return !this.right.ended || this.matchIdx < this.matches.length;
      }
      _end() {
        super._end();
        this.left.destroy();
        this.right.destroy();
      }
      read() {
        this._addDataListenerIfNeeded();
        while (true) {
          if (this.ended || !this.readable)
            return null;
          while (this.matchIdx < this.matches.length) {
            let item = this.matches[this.matchIdx++];
            let result = this.funJoin(item, this.match);
            if (result !== null)
              return result;
          }
          if (!this.hasResults())
            this._end();
          this.match = this.right.read();
          if (this.match === null) {
            this.readable = false;
            return null;
          }
          let hash2 = this.funHash(this.match);
          this.matches = this.leftMap.get(hash2) || [];
          this.matchIdx = 0;
        }
      }
      _addDataListenerIfNeeded() {
        if (!this.addedDataListener) {
          this.addedDataListener = true;
          this._addDataListener();
        }
      }
      _addDataListener() {
        this.left.on("data", addItem.bind(this));
        function addItem(item) {
          let hash2 = this.funHash(item);
          let arr = this.leftMap.get(hash2);
          if (!arr) {
            arr = [];
            this.leftMap.set(hash2, arr);
          }
          arr.push(item);
        }
      }
    };
    module.exports = HashJoin;
  }
});

// ../../lipdjs/node_modules/asyncjoin/join/NestedLoopJoin.js
var require_NestedLoopJoin = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/join/NestedLoopJoin.js"(exports, module) {
    var { MultiTransformIterator, SimpleTransformIterator, scheduleTask } = require_asynciterator();
    var NestedLoopJoin = class extends MultiTransformIterator {
      constructor(left, right, funJoin, options) {
        super(left, options);
        this.right = right;
        this.funJoin = funJoin;
        this.on("end", () => this.right.close());
      }
      _end() {
        super._end();
        scheduleTask(() => this.right.destroy());
      }
      _createTransformer(leftItem) {
        return new SimpleTransformIterator(this.right.clone(), { transform: (rightItem, done, push) => {
          let result = this.funJoin(leftItem, rightItem);
          if (result !== null)
            push(result);
          done();
        } });
      }
    };
    module.exports = NestedLoopJoin;
  }
});

// ../../lipdjs/node_modules/asyncjoin/join/SymmetricHashJoin.js
var require_SymmetricHashJoin = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/join/SymmetricHashJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var SymmetricHashJoin = class extends AsyncIterator {
      constructor(left, right, funHash, funJoin) {
        super();
        this.left = left;
        this.right = right;
        this.funHash = funHash;
        this.funJoin = funJoin;
        this.usedLeft = false;
        this.leftMap = /* @__PURE__ */ new Map();
        this.rightMap = /* @__PURE__ */ new Map();
        this.on("end", () => this._cleanup());
        this.match = null;
        this.matches = [];
        this.matchIdx = 0;
        if (this.left.readable || this.right.readable) {
          this.readable = true;
        }
        this.left.on("error", (error) => this.destroy(error));
        this.right.on("error", (error) => this.destroy(error));
        this.left.on("readable", () => this.readable = true);
        this.right.on("readable", () => this.readable = true);
        this.left.on("end", () => {
          if (!this.hasResults()) this._end();
        });
        this.right.on("end", () => {
          if (!this.hasResults()) this._end();
        });
      }
      hasResults() {
        return !this.left.ended || !this.right.ended || !!this.matches && this.matchIdx < this.matches.length;
      }
      _cleanup() {
        this.leftMap = null;
        this.rightMap = null;
        this.matches = null;
      }
      _end() {
        super._end();
        this.left.destroy();
        this.right.destroy();
      }
      read() {
        while (true) {
          if (this.ended)
            return null;
          while (this.matchIdx < this.matches.length) {
            let item2 = this.matches[this.matchIdx++];
            let result = this.usedLeft ? this.funJoin(this.match, item2) : this.funJoin(item2, this.match);
            if (result !== null)
              return result;
          }
          if (!this.hasResults())
            this._end();
          let item = null;
          for (let i = 0; i < 2; ++i) {
            item = this.usedLeft ? this.right.read() : this.left.read();
            this.usedLeft = !this.usedLeft;
            if (item !== null)
              break;
          }
          if (this.done || item === null) {
            this.readable = false;
            return null;
          }
          let hash2 = this.funHash(item);
          if (this.usedLeft && this.right.done) {
            this.leftMap = null;
          } else if (this.left.done) {
            this.rightMap = null;
          } else {
            let map2 = this.usedLeft ? this.leftMap : this.rightMap;
            if (!map2.has(hash2))
              map2.set(hash2, []);
            let arr = map2.get(hash2);
            if (!arr) {
              arr = [];
              map2.set(hash2, arr);
            }
            arr.push(item);
          }
          this.match = item;
          this.matches = (this.usedLeft ? this.rightMap : this.leftMap).get(hash2) || [];
          this.matchIdx = 0;
        }
      }
    };
    module.exports = SymmetricHashJoin;
  }
});

// ../../lipdjs/node_modules/asyncjoin/util/MergeIterator.js
var require_MergeIterator = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/util/MergeIterator.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var MergeIterator = class extends AsyncIterator {
      constructor(streams) {
        super();
        if (!Array.isArray(streams))
          streams = Array.prototype.slice.call(arguments);
        this.streams = streams;
        for (let stream of streams) {
          stream.on("readable", () => this.emit("readable"));
          stream.on("end", () => this._removeStream(stream));
        }
        if (this.streams.length === 0)
          this.close();
        this.idx = this.streams.length - 1;
      }
      _removeStream(stream) {
        let idx = this.streams.indexOf(stream);
        if (idx < 0)
          return;
        this.streams.splice(idx, 1);
        if (this.idx >= this.streams.length)
          --this.idx;
        if (this.streams.length === 0)
          this._end();
      }
      close() {
        super.close();
        for (let stream of this.streams)
          stream.close();
      }
      read() {
        for (let attempts = 0; attempts < this.streams.length; ++attempts) {
          this.idx = (this.idx + 1) % this.streams.length;
          let item = this.streams[this.idx].read();
          if (item !== null)
            return item;
        }
        return null;
      }
    };
    module.exports = MergeIterator;
  }
});

// ../../lipdjs/node_modules/asyncjoin/index.js
var require_asyncjoin = __commonJS({
  "../../lipdjs/node_modules/asyncjoin/index.js"(exports, module) {
    var DynamicNestedLoopJoin = require_DynamicNestedLoopJoin();
    var HashJoin = require_HashJoin();
    var NestedLoopJoin = require_NestedLoopJoin();
    var SymmetricHashJoin = require_SymmetricHashJoin();
    var MergeStream = require_MergeIterator();
    module.exports = {
      DynamicNestedLoopJoin,
      HashJoin,
      NestedLoopJoin,
      SymmetricHashJoin,
      MergeStream
    };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-hash/lib/ActorRdfJoinHash.js
var require_ActorRdfJoinHash = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-hash/lib/ActorRdfJoinHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinHash = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var utils_bindings_index_1 = require_lib183();
    var utils_iterator_1 = require_lib179();
    var asynciterator_1 = require_asynciterator();
    var asyncjoin_1 = require_asyncjoin();
    var rdf_string_1 = require_rdf_string();
    var ActorRdfJoinHash = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: `hash-${args.canHandleUndefs ? "undef" : "def"}`,
          limitEntries: 2,
          requiresVariableOverlap: true,
          canHandleUndefs: args.canHandleUndefs
        });
      }
      async getOutput(action, sideData) {
        const metadatas = sideData.metadatas;
        let bindingsStream;
        const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        if (this.canHandleUndefs) {
          const buffer = sideData.entriesSorted[0].output;
          const output = sideData.entriesSorted[1].output;
          bindingsStream = new utils_iterator_1.ClosableTransformIterator(async () => {
            const index = new utils_bindings_index_1.BindingsIndexUndef(variables, (term) => term && term.termType !== "Variable" ? (0, rdf_string_1.termToString)(term) : "", true);
            await new Promise((resolve) => {
              buffer.bindingsStream.on("data", (bindings) => {
                const iterator = index.getFirst(bindings, false) ?? index.put(bindings, []);
                iterator.push(bindings);
              });
              buffer.bindingsStream.on("end", resolve);
              buffer.bindingsStream.on("error", (error) => {
                bindingsStream.emit("error", error);
              });
            });
            return new asynciterator_1.MultiTransformIterator(output.bindingsStream, {
              multiTransform: (bindings) => new asynciterator_1.ArrayIterator(index.get(bindings).flat().map((indexBindings) => bus_rdf_join_1.ActorRdfJoin.joinBindings(bindings, indexBindings)).filter((b) => b !== null), { autoStart: false }),
              autoStart: false
            });
          }, {
            autoStart: false,
            onClose() {
              buffer.bindingsStream.destroy();
              output.bindingsStream.destroy();
            }
          });
        } else {
          const { hashFunction } = await this.mediatorHashBindings.mediate({ context: action.context });
          const variablesRaw = variables.map((v) => v.variable);
          bindingsStream = new asyncjoin_1.HashJoin(sideData.entriesSorted[0].output.bindingsStream, sideData.entriesSorted[1].output.bindingsStream, (entry) => hashFunction(entry, variablesRaw), bus_rdf_join_1.ActorRdfJoin.joinBindings);
        }
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: async () => await this.constructResultMetadata(sideData.entriesSorted, metadatas, action.context)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        let entriesSorted = action.entries;
        if (sideData.metadatas[1].cardinality.value < sideData.metadatas[0].cardinality.value) {
          sideData.metadatas = [sideData.metadatas[1], sideData.metadatas[0]];
          entriesSorted = [action.entries[1], action.entries[0]];
        }
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        let iterations = metadatas[0].cardinality.value + metadatas[1].cardinality.value;
        if (!this.canHandleUndefs) {
          iterations *= 0.8;
        }
        return (0, core_1.passTestWithSideData)({
          iterations,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, { ...sideData, entriesSorted });
      }
    };
    exports.ActorRdfJoinHash = ActorRdfJoinHash;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-hash/lib/index.js
var require_lib184 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinHash(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/ActorRdfJoinSymmetricHash.js
var require_ActorRdfJoinSymmetricHash = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/ActorRdfJoinSymmetricHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSymmetricHash = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinSymmetricHash = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "symmetric-hash",
          limitEntries: 2,
          requiresVariableOverlap: true
        });
      }
      async getOutput(action) {
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        const { hashFunction } = await this.mediatorHashBindings.mediate({ context: action.context });
        const variablesRaw = variables.map((v) => v.variable);
        const join3 = new asyncjoin_1.SymmetricHashJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, (entry) => hashFunction(entry, variablesRaw), bus_rdf_join_1.ActorRdfJoin.joinBindings);
        return {
          result: {
            type: "bindings",
            bindingsStream: join3,
            metadata: async () => await this.constructResultMetadata(action.entries, metadatas, action.context)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          persistedItems: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinSymmetricHash = ActorRdfJoinSymmetricHash;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/index.js
var require_lib185 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSymmetricHash(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/ActorRdfJoinNestedLoop.js
var require_ActorRdfJoinNestedLoop = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/ActorRdfJoinNestedLoop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinNestedLoop = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinNestedLoop = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "nested-loop",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        const join3 = new asyncjoin_1.NestedLoopJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, bus_rdf_join_1.ActorRdfJoin.joinBindings, { autoStart: false });
        return {
          result: {
            type: "bindings",
            bindingsStream: join3,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinNestedLoop = ActorRdfJoinNestedLoop;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/index.js
var require_lib186 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinNestedLoop(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/bindingsToString.js
var require_bindingsToString = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/bindingsToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindingsToCompactString = exports.bindingsToString = void 0;
    var rdf_string_1 = require_rdf_string();
    function bindingsToString(bindings) {
      const raw = {};
      for (const key of bindings.keys()) {
        raw[key.value] = (0, rdf_string_1.termToString)(bindings.get(key));
      }
      return JSON.stringify(raw, null, "  ");
    }
    exports.bindingsToString = bindingsToString;
    function bindingsToCompactString(bindings, variables) {
      return variables.map((variable) => {
        const term = bindings.get(variable);
        if (term) {
          return (0, rdf_string_1.termToString)(term);
        }
        return "";
      }).join("");
    }
    exports.bindingsToCompactString = bindingsToCompactString;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/Bindings.js
var require_Bindings2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/Bindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bindings = void 0;
    var core_1 = require_lib();
    var immutable_1 = (init_immutable_es(), __toCommonJS(immutable_es_exports));
    var bindingsToString_1 = require_bindingsToString();
    var Bindings = class _Bindings {
      constructor(dataFactory, entries3, contextHolder) {
        this.type = "bindings";
        this.dataFactory = dataFactory;
        this.entries = entries3;
        this.contextHolder = contextHolder;
      }
      has(key) {
        return this.entries.has(typeof key === "string" ? key : key.value);
      }
      get(key) {
        return this.entries.get(typeof key === "string" ? key : key.value);
      }
      set(key, value) {
        return new _Bindings(this.dataFactory, this.entries.set(typeof key === "string" ? key : key.value, value), this.contextHolder);
      }
      delete(key) {
        return new _Bindings(this.dataFactory, this.entries.delete(typeof key === "string" ? key : key.value), this.contextHolder);
      }
      keys() {
        return this.mapIterable(this.iteratorToIterable(this.entries.keys()), (key) => this.dataFactory.variable(key));
      }
      values() {
        return this.iteratorToIterable(this.entries.values());
      }
      forEach(fn) {
        for (const [key, value] of this.entries.entries()) {
          fn(value, this.dataFactory.variable(key));
        }
      }
      get size() {
        return this.entries.size;
      }
      [Symbol.iterator]() {
        return this.mapIterable(this.iteratorToIterable(this.entries.entries()), ([key, value]) => [this.dataFactory.variable(key), value])[Symbol.iterator]();
      }
      equals(other) {
        var _a;
        if (!other) {
          return false;
        }
        if (this === other) {
          return true;
        }
        if (this.size !== other.size) {
          return false;
        }
        for (const key of this.keys()) {
          if (!((_a = this.get(key)) == null ? void 0 : _a.equals(other.get(key)))) {
            return false;
          }
        }
        return true;
      }
      filter(fn) {
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(this.entries.filter((value, key) => fn(value, this.dataFactory.variable(key)))), this.contextHolder);
      }
      map(fn) {
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(this.entries.map((value, key) => fn(value, this.dataFactory.variable(key)))), this.contextHolder);
      }
      merge(other) {
        if (this.size < other.size && other instanceof _Bindings) {
          return other.merge(this);
        }
        let entries3 = this.entries;
        if (other instanceof _Bindings) {
          for (const [variable, right] of other.entries) {
            const left = this.entries.get(variable);
            if (left && !left.equals(right)) {
              return;
            }
            entries3 = entries3.set(variable, right);
          }
        } else {
          for (const [variable, right] of other) {
            const left = this.entries.get(variable.value);
            if (left && !left.equals(right)) {
              return;
            }
            entries3 = entries3.set(variable.value, right);
          }
        }
        return this.createBindingsWithContexts(entries3, other);
      }
      mergeWith(merger, other) {
        if (this.size < other.size && other instanceof _Bindings) {
          return other.mergeWith(merger, this);
        }
        let entries3 = this.entries;
        if (other instanceof _Bindings) {
          for (const [variable, right] of other.entries) {
            const left = this.entries.get(variable);
            let value;
            if (left && !left.equals(right)) {
              value = merger(left, right, this.dataFactory.variable(variable));
            } else {
              value = right;
            }
            entries3 = entries3.set(variable, value);
          }
        } else {
          for (const [variable, right] of other) {
            const left = this.entries.get(variable.value);
            let value;
            if (left && !left.equals(right)) {
              value = merger(left, right, variable);
            } else {
              value = right;
            }
            entries3 = entries3.set(variable.value, value);
          }
        }
        return this.createBindingsWithContexts(entries3, other);
      }
      createBindingsWithContexts(entries3, other) {
        if (this.contextHolder && this.contextHolder.context) {
          let mergedContext = this.contextHolder.context;
          if ("contextHolder" in other && other.contextHolder && other.contextHolder.context) {
            mergedContext = _Bindings.mergeContext(this.contextHolder.contextMergeHandlers, mergedContext, other.contextHolder.context);
          }
          return new _Bindings(this.dataFactory, entries3, { contextMergeHandlers: this.contextHolder.contextMergeHandlers, context: mergedContext });
        }
        return new _Bindings(this.dataFactory, entries3, other.contextHolder);
      }
      static mergeContext(contextMergeHandlers, context, otherContext) {
        const allKeys = [...context.keys(), ...otherContext.keys()];
        const newContextData = {};
        const handledKeys = {};
        const keysSetOtherContext = new Set(otherContext.keys().map((key) => key.name));
        const keysBothContext = context.keys().filter((key) => keysSetOtherContext.has(key.name));
        for (const key of allKeys) {
          if (handledKeys[key.name] === 1) {
            continue;
          }
          handledKeys[key.name] = 1;
          const occursInBoth = keysBothContext.some((x) => x.name === key.name);
          if (contextMergeHandlers[key.name] && occursInBoth) {
            newContextData[key.name] = contextMergeHandlers[key.name].run(context.get(key), otherContext.get(key));
            continue;
          }
          if (!contextMergeHandlers[key.name] && occursInBoth) {
            continue;
          }
          if (!context.get(key)) {
            newContextData[key.name] = otherContext.get(key);
            continue;
          }
          if (!otherContext.get(key)) {
            newContextData[key.name] = context.get(key);
          }
        }
        return new core_1.ActionContext(newContextData);
      }
      setContextEntry(key, value) {
        return this.setContextEntryRaw(key, value);
      }
      setContextEntryRaw(key, value) {
        var _a;
        if (this.contextHolder && this.contextHolder.context) {
          return new _Bindings(this.dataFactory, this.entries, {
            contextMergeHandlers: this.contextHolder.contextMergeHandlers,
            context: this.contextHolder.context.set(key, value)
          });
        }
        return new _Bindings(this.dataFactory, this.entries, {
          contextMergeHandlers: ((_a = this.contextHolder) == null ? void 0 : _a.contextMergeHandlers) ?? {},
          context: new core_1.ActionContext().set(key, value)
        });
      }
      deleteContextEntry(key) {
        return this.deleteContextEntryRaw(key);
      }
      deleteContextEntryRaw(key) {
        var _a;
        if (this.contextHolder) {
          return new _Bindings(this.dataFactory, this.entries, {
            contextMergeHandlers: this.contextHolder.contextMergeHandlers,
            context: (_a = this.contextHolder.context) == null ? void 0 : _a.delete(key)
          });
        }
        return new _Bindings(this.dataFactory, this.entries);
      }
      getContext() {
        var _a;
        return (_a = this.contextHolder) == null ? void 0 : _a.context;
      }
      getContextEntry(key) {
        var _a;
        return (_a = this.getContext()) == null ? void 0 : _a.get(key);
      }
      toString() {
        return (0, bindingsToString_1.bindingsToString)(this);
      }
      *mapIterable(iterable, callback) {
        for (const x of iterable) {
          yield callback(x);
        }
      }
      iteratorToIterable(iterator) {
        return {
          [Symbol.iterator]: () => iterator
        };
      }
    };
    exports.Bindings = Bindings;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/BindingsFactory.js
var require_BindingsFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/BindingsFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsFactory = void 0;
    var immutable_1 = (init_immutable_es(), __toCommonJS(immutable_es_exports));
    var Bindings_1 = require_Bindings2();
    var BindingsFactory = class _BindingsFactory {
      constructor(dataFactory, contextMergeHandlers) {
        this.dataFactory = dataFactory;
        this.contextMergeHandlers = contextMergeHandlers;
      }
      static async create(mediatorMergeBindingsContext, context, dataFactory) {
        return new _BindingsFactory(dataFactory, (await mediatorMergeBindingsContext.mediate({ context })).mergeHandlers);
      }
      bindings(entries3 = []) {
        return new Bindings_1.Bindings(this.dataFactory, (0, immutable_1.Map)(entries3.map(([key, value]) => [key.value, value])), this.contextMergeHandlers ? { contextMergeHandlers: this.contextMergeHandlers } : void 0);
      }
      fromBindings(bindings) {
        return this.bindings([...bindings]);
      }
      fromRecord(record) {
        return this.bindings(Object.entries(record).map(([key, value]) => [this.dataFactory.variable(key), value]));
      }
    };
    exports.BindingsFactory = BindingsFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/index.js
var require_lib187 = __commonJS({
  "../../lipdjs/node_modules/@comunica/utils-bindings-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Bindings2(), exports);
    __exportStar(require_BindingsFactory(), exports);
    __exportStar(require_bindingsToString(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-hash/lib/ActorRdfJoinOptionalHash.js
var require_ActorRdfJoinOptionalHash = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-hash/lib/ActorRdfJoinOptionalHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinOptionalHash = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_bindings_index_1 = require_lib183();
    var utils_iterator_1 = require_lib179();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var ActorRdfJoinOptionalHash = class _ActorRdfJoinOptionalHash extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "optional",
          physicalName: `hash-${args.canHandleUndefs ? "undef" : "def"}-${args.blocking ? "blocking" : "nonblocking"}`,
          limitEntries: 2,
          canHandleUndefs: args.canHandleUndefs,
          requiresVariableOverlap: true
        });
      }
      static constructIndex(undef, commonVariables) {
        return undef ? new utils_bindings_index_1.BindingsIndexUndef(commonVariables, (term) => term && term.termType !== "Variable" ? (0, rdf_string_1.termToString)(term) : "", true) : new utils_bindings_index_1.BindingsIndexDef(commonVariables, utils_bindings_factory_1.bindingsToCompactString);
      }
      async getOutput(action) {
        const buffer = action.entries[1].output;
        const output = action.entries[0].output;
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const commonVariables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        let bindingsStream;
        if (this.blocking) {
          bindingsStream = new utils_iterator_1.ClosableTransformIterator(async () => {
            const index = _ActorRdfJoinOptionalHash.constructIndex(this.canHandleUndefs, commonVariables);
            await new Promise((resolve) => {
              buffer.bindingsStream.on("data", (bindings) => {
                const iterator = index.getFirst(bindings, true) ?? index.put(bindings, []);
                iterator.push(bindings);
              });
              buffer.bindingsStream.on("end", resolve);
              buffer.bindingsStream.on("error", (error) => {
                bindingsStream.emit("error", error);
              });
            });
            return new asynciterator_1.MultiTransformIterator(output.bindingsStream, {
              multiTransform: (bindings) => new asynciterator_1.ArrayIterator(index.get(bindings).flat().map((indexBindings) => bus_rdf_join_1.ActorRdfJoin.joinBindings(bindings, indexBindings)).filter((b) => b !== null), { autoStart: false }),
              optional: true,
              autoStart: false
            });
          }, {
            autoStart: false,
            onClose() {
              buffer.bindingsStream.destroy();
              output.bindingsStream.destroy();
            }
          });
        } else {
          bindingsStream = new utils_iterator_1.ClosableTransformIterator(async () => {
            const index = _ActorRdfJoinOptionalHash.constructIndex(this.canHandleUndefs, commonVariables);
            let indexActive = true;
            buffer.bindingsStream.on("data", (bindings) => {
              const iterator = index.getFirst(bindings, true) ?? index.put(bindings, new asynciterator_1.BufferedIterator({ autoStart: false }));
              iterator._push(bindings);
            });
            buffer.bindingsStream.on("end", () => {
              for (const iterator of index.values()) {
                iterator.close();
              }
              indexActive = false;
            });
            buffer.bindingsStream.on("error", (error) => {
              bindingsStream.emit("error", error);
            });
            return new asynciterator_1.MultiTransformIterator(output.bindingsStream, {
              multiTransform: (bindings) => {
                let iterators = index.get(bindings);
                if (iterators.length === 0) {
                  if (indexActive) {
                    iterators = [index.put(bindings, new asynciterator_1.BufferedIterator({ autoStart: false }))];
                  } else {
                    iterators = [];
                  }
                }
                const iterator = new asynciterator_1.UnionIterator(iterators.map((it) => it.clone()), { autoStart: false });
                return iterator.map((indexBindings) => bus_rdf_join_1.ActorRdfJoin.joinBindings(bindings, indexBindings));
              },
              optional: true,
              autoStart: false
            });
          }, {
            autoStart: false,
            onClose() {
              buffer.bindingsStream.destroy();
              output.bindingsStream.destroy();
            }
          });
        }
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: async () => await this.constructResultMetadata(action.entries, metadatas, action.context, {}, true)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        let iterations = metadatas[0].cardinality.value + metadatas[1].cardinality.value;
        if (!this.canHandleUndefs) {
          iterations *= 0.8;
        }
        if (this.blocking) {
          iterations *= 0.9;
        }
        return (0, core_1.passTestWithSideData)({
          iterations,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: this.blocking ? metadatas[0].cardinality.value : 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinOptionalHash = ActorRdfJoinOptionalHash;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-hash/lib/index.js
var require_lib188 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinOptionalHash(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/ActorRdfJoinOptionalNestedLoop.js
var require_ActorRdfJoinOptionalNestedLoop = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/ActorRdfJoinOptionalNestedLoop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinOptionalNestedLoop = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinOptionalNestedLoop = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "optional",
          physicalName: "nested-loop",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        const join3 = new asyncjoin_1.NestedLoopJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, bus_rdf_join_1.ActorRdfJoin.joinBindings, { optional: true, autoStart: false });
        return {
          result: {
            type: "bindings",
            bindingsStream: join3,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context, {}, true)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinOptionalNestedLoop = ActorRdfJoinOptionalNestedLoop;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/index.js
var require_lib189 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinOptionalNestedLoop(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-minus-hash/lib/ActorRdfJoinMinusHash.js
var require_ActorRdfJoinMinusHash = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-minus-hash/lib/ActorRdfJoinMinusHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMinusHash = void 0;
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_bindings_index_1 = require_lib183();
    var utils_iterator_1 = require_lib179();
    var rdf_string_1 = require_rdf_string();
    var ActorRdfJoinMinusHash = class _ActorRdfJoinMinusHash extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "minus",
          physicalName: `hash-${args.canHandleUndefs ? "undef" : "def"}`,
          limitEntries: 2,
          canHandleUndefs: args.canHandleUndefs
        });
      }
      static constructIndex(undef, commonVariables) {
        return undef ? new utils_bindings_index_1.BindingsIndexUndef(commonVariables, (term) => term && term.termType !== "Variable" ? (0, rdf_string_1.termToString)(term) : "", false) : new utils_bindings_index_1.BindingsIndexDef(commonVariables, utils_bindings_factory_1.bindingsToCompactString);
      }
      async getOutput(action) {
        const buffer = action.entries[1].output;
        const output = action.entries[0].output;
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const commonVariables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        if (commonVariables.length === 0) {
          buffer.bindingsStream.destroy();
          return { result: output };
        }
        const bindingsStream = new utils_iterator_1.ClosableTransformIterator(async () => {
          const index = _ActorRdfJoinMinusHash.constructIndex(this.canHandleUndefs, commonVariables);
          await new Promise((resolve) => {
            buffer.bindingsStream.on("data", (bindings) => index.put(bindings, true));
            buffer.bindingsStream.on("end", resolve);
            buffer.bindingsStream.on("error", (error) => bindingsStream.emit("error", error));
          });
          return output.bindingsStream.filter((bindings) => !index.getFirst(bindings, true));
        }, {
          autoStart: false,
          onClose() {
            buffer.bindingsStream.destroy();
            output.bindingsStream.destroy();
          }
        });
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: output.metadata
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        let iterations = metadatas[0].cardinality.value + metadatas[1].cardinality.value;
        if (!this.canHandleUndefs) {
          iterations *= 0.8;
        }
        return (0, core_1.passTestWithSideData)({
          iterations,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinMinusHash = ActorRdfJoinMinusHash;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-minus-hash/lib/index.js
var require_lib190 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-minus-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMinusHash(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference-rdf/lib/ActorDereferenceRdf.js
var require_ActorDereferenceRdf = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference-rdf/lib/ActorDereferenceRdf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceRdf = void 0;
    var bus_dereference_1 = require_lib43();
    var ActorDereferenceRdf = class extends bus_dereference_1.ActorDereferenceParse {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF dereferencing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorDereferenceRdf = ActorDereferenceRdf;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-dereference-rdf/lib/index.js
var require_lib191 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-dereference-rdf/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorDereferenceRdf(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-rdf-parse/lib/ActorDereferenceRdfParse.js
var require_ActorDereferenceRdfParse = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-rdf-parse/lib/ActorDereferenceRdfParse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceRdfParse = void 0;
    var bus_dereference_rdf_1 = require_lib191();
    var ActorDereferenceRdfParse = class extends bus_dereference_rdf_1.ActorDereferenceRdf {
      /**
       * @param args - @defaultNested {{
       *   "ttl":      "text/turtle",
       *   "turtle":   "text/turtle",
       *   "shaclc":   "text/shaclc",
       *   "shc":      "text/shaclc",
       *   "shaclce":  "text/shaclc-ext",
       *   "shce":     "text/shaclc-ext",
       *   "nt":       "application/n-triples",
       *   "ntriples": "application/n-triples",
       *   "nq":       "application/n-quads",
       *   "nquads":   "application/n-quads",
       *   "rdf":      "application/rdf+xml",
       *   "rdfxml":   "application/rdf+xml",
       *   "owl":      "application/rdf+xml",
       *   "n3":       "text/n3",
       *   "trig":     "application/trig",
       *   "jsonld":   "application/ld+json",
       *   "json":     "application/json",
       *   "html":     "text/html",
       *   "htm":      "text/html",
       *   "xhtml":    "application/xhtml+xml",
       *   "xht":      "application/xhtml+xml",
       *   "xml":      "application/xml",
       *   "svg":      "image/svg+xml",
       *   "svgz":     "image/svg+xml"
       * }} mediaMappings
       */
      constructor(args) {
        super(args);
      }
      async getMetadata(dereference) {
        return { baseIRI: dereference.url };
      }
    };
    exports.ActorDereferenceRdfParse = ActorDereferenceRdfParse;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-rdf-parse/lib/index.js
var require_lib192 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-rdf-parse/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorDereferenceRdfParse(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/HtmlScriptListener.js
var require_HtmlScriptListener = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/HtmlScriptListener.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HtmlScriptListener = void 0;
    var context_entries_1 = require_lib3();
    var readable_stream_1 = require_browser2();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var HtmlScriptListener = class _HtmlScriptListener {
      constructor(mediatorRdfParseHandle, cbQuad, cbError, cbEnd, supportedTypes, context, baseIRI, headers) {
        this.textChunksJsonLd = [];
        this.endBarrier = 1;
        this.passedScripts = 0;
        this.isFinalJsonLdProcessing = false;
        this.mediatorRdfParseHandle = mediatorRdfParseHandle;
        this.cbQuad = cbQuad;
        this.cbError = cbError;
        this.cbEnd = cbEnd;
        this.supportedTypes = supportedTypes;
        this.context = context.set(context_entries_1.KeysRdfParseHtmlScript.processingHtmlScript, true);
        this.baseIRI = baseIRI;
        this.headers = headers;
        this.onlyFirstScript = context.get(context_entries_1.KeysRdfParseHtmlScript.extractAllScripts) === false;
        const fragmentPos = this.baseIRI.indexOf("#");
        this.targetScriptId = fragmentPos > 0 ? this.baseIRI.slice(fragmentPos + 1, this.baseIRI.length) : null;
      }
      static newErrorCoded(message, code) {
        const error = new Error(message);
        error.code = code;
        return error;
      }
      onEnd() {
        if (--this.endBarrier === 0) {
          if (this.textChunksJsonLd.length > 0) {
            this.handleMediaType = "application/ld+json";
            this.textChunks = this.textChunksJsonLd;
            this.textChunks.push("]");
            this.textChunksJsonLd = [];
            this.isFinalJsonLdProcessing = true;
            this.endBarrier++;
            this.onTagClose();
          } else {
            if (this.passedScripts === 0 && this.targetScriptId) {
              this.cbError(_HtmlScriptListener.newErrorCoded(`Failed to find targeted script id "${this.targetScriptId}"`, "loading document failed"));
            }
            this.cbEnd();
          }
          this.isFinalJsonLdProcessing = false;
        }
      }
      onTagClose() {
        if (this.handleMediaType) {
          if (this.requiresCustomJsonLdHandling(this.handleMediaType) && !this.isFinalJsonLdProcessing) {
            this.handleMediaType = void 0;
            this.textChunks = void 0;
            this.onEnd();
          } else {
            const textStream = new readable_stream_1.Readable({ objectMode: true });
            textStream._read = () => {
            };
            const textChunksLocal = this.textChunks;
            const parseAction = {
              context: this.context,
              handle: {
                metadata: { baseIRI: this.baseIRI },
                data: textStream,
                headers: this.headers,
                context: this.context
              },
              handleMediaType: this.handleMediaType
            };
            this.mediatorRdfParseHandle.mediate(parseAction).then(({ handle }) => {
              handle.data.on("error", (error) => this.cbError(_HtmlScriptListener.newErrorCoded(error.message, "invalid script element"))).on("data", this.cbQuad).on("end", () => this.onEnd());
              for (const textChunk of textChunksLocal) {
                textStream.push(textChunk);
              }
              textStream.push(null);
            }).catch((error) => {
              if (this.targetScriptId) {
                this.cbError(_HtmlScriptListener.newErrorCoded(error.message, "loading document failed"));
              } else {
                this.onEnd();
              }
            });
            this.handleMediaType = void 0;
            this.textChunks = void 0;
          }
        }
      }
      onTagOpen(name, attributes) {
        if (name === "base" && attributes.href) {
          this.baseIRI = (0, relative_to_absolute_iri_1.resolve)(attributes.href, this.baseIRI);
        }
        if (name === "script" && (!this.targetScriptId || attributes.id === this.targetScriptId)) {
          if (this.supportedTypes[attributes.type]) {
            if (this.onlyFirstScript && this.passedScripts > 0) {
              this.handleMediaType = void 0;
            } else {
              this.passedScripts++;
              this.handleMediaType = attributes.type;
              this.endBarrier++;
              if (this.requiresCustomJsonLdHandling(this.handleMediaType)) {
                this.textChunks = this.textChunksJsonLd;
                this.textChunks.push(this.textChunks.length === 0 ? "[" : ",");
              } else {
                this.textChunks = [];
              }
            }
          } else if (this.targetScriptId) {
            this.cbError(_HtmlScriptListener.newErrorCoded(`Targeted script "${this.targetScriptId}" does not have a supported type`, "loading document failed"));
          }
        } else {
          this.handleMediaType = void 0;
        }
      }
      onText(data) {
        if (this.handleMediaType) {
          this.textChunks.push(data);
        }
      }
      /**
       * If we require custom JSON-LD handling for the given media type.
       *
       * The JSON-LD spec requires JSON-LD within script tags to be seen as a single document.
       * As such, we have to buffer all JSON-LD until the end of HTML processing,
       * and encapsulate all found contents in an array.
       *
       * @param mediaType A: IActionRdfParseHtml media type.
       */
      requiresCustomJsonLdHandling(mediaType) {
        return !this.onlyFirstScript && !this.targetScriptId && mediaType === "application/ld+json";
      }
    };
    exports.HtmlScriptListener = HtmlScriptListener;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/ActorRdfParseHtmlScript.js
var require_ActorRdfParseHtmlScript = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/ActorRdfParseHtmlScript.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseHtmlScript = void 0;
    var bus_rdf_parse_html_1 = require_lib79();
    var core_1 = require_lib();
    var HtmlScriptListener_1 = require_HtmlScriptListener();
    var ActorRdfParseHtmlScript = class extends bus_rdf_parse_html_1.ActorRdfParseHtml {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const supportedTypes = (await this.mediatorRdfParseMediatypes.mediate({ context: action.context, mediaTypes: true })).mediaTypes;
        const htmlParseListener = new HtmlScriptListener_1.HtmlScriptListener(this.mediatorRdfParseHandle, action.emit, action.error, action.end, supportedTypes, action.context, action.baseIRI, action.headers);
        return { htmlParseListener };
      }
    };
    exports.ActorRdfParseHtmlScript = ActorRdfParseHtmlScript;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/index.js
var require_lib193 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-html-script/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseHtmlScript(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-rdf/lib/ActorQueryResultSerializeRdf.js
var require_ActorQueryResultSerializeRdf = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-rdf/lib/ActorQueryResultSerializeRdf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeRdf = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var ActorQueryResultSerializeRdf = class extends bus_query_result_serialize_1.ActorQueryResultSerialize {
      constructor(args) {
        super(args);
      }
      async testHandle(action, mediaType, context) {
        if (action.type !== "quads") {
          return (0, core_1.failTest)(`Actor ${this.name} can only handle quad streams`);
        }
        const { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true });
        if (!(mediaType in mediaTypes)) {
          return (0, core_1.failTest)(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${// eslint-disable-next-line ts/restrict-template-expressions
          Object.keys(mediaTypes)}`);
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, mediaType, context) {
        return (await this.mediatorRdfSerialize.mediate({
          context,
          handle: {
            context,
            quadStream: action.quadStream
          },
          handleMediaType: mediaType
        })).handle;
      }
      async testMediaType(_context) {
        return (0, core_1.passTestVoid)();
      }
      async getMediaTypes(context) {
        return (await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;
      }
      async testMediaTypeFormats(_context) {
        return (0, core_1.passTestVoid)();
      }
      async getMediaTypeFormats(context) {
        return (await this.mediatorMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;
      }
    };
    exports.ActorQueryResultSerializeRdf = ActorQueryResultSerializeRdf;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-rdf/lib/index.js
var require_lib194 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-rdf/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeRdf(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/ActorBindingsAggregatorFactory.js
var require_ActorBindingsAggregatorFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/ActorBindingsAggregatorFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactory = void 0;
    var core_1 = require_lib();
    var ActorBindingsAggregatorFactory = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *  \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *  \ @defaultNested {Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
        this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;
      }
    };
    exports.ActorBindingsAggregatorFactory = ActorBindingsAggregatorFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/AggregateEvaluator.js
var require_AggregateEvaluator = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/AggregateEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AggregateEvaluator = void 0;
    var context_entries_1 = require_lib3();
    var Eval = require_lib6();
    var RdfString = require_rdf_string();
    var AggregateEvaluator = class {
      constructor(evaluator, distinct, throwError = false) {
        this.evaluator = evaluator;
        this.distinct = distinct;
        this.throwError = throwError;
        this.errorOccurred = false;
        this.errorOccurred = false;
        this.superTypeProvider = evaluator.context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider);
        this.termTransformer = new Eval.TermTransformer(this.superTypeProvider);
        this.variableValues = /* @__PURE__ */ new Set();
      }
      emptyValueTerm() {
        return void 0;
      }
      /**
       * The spec says to throw an error when a set function is called on an empty
       * set (unless explicitly mentioned otherwise like COUNT).
       * However, aggregate error handling says to not bind the result in case of an
       * error. So to simplify logic in the caller, we return undefined by default.
       */
      emptyValue() {
        const val = this.emptyValueTerm();
        if (val === void 0 && this.throwError) {
          throw new Eval.EmptyAggregateError();
        }
        return val;
      }
      /**
       * Base implementation of putBindings, that evaluates to a term and then calls putTerm.
       * The WildcardCountAggregator will completely discard this implementation.
       * @param bindings
       */
      async putBindings(bindings) {
        if (this.errorOccurred) {
          return;
        }
        try {
          const term = await this.evaluator.evaluate(bindings);
          if (!term || this.errorOccurred) {
            return;
          }
          if (!this.distinct || !this.variableValues.has(RdfString.termToString(term))) {
            this.putTerm(term);
            if (this.distinct) {
              this.variableValues.add(RdfString.termToString(term));
            }
          }
        } catch (error) {
          this.safeThrow(error);
        }
      }
      async result() {
        if (this.errorOccurred) {
          return void 0;
        }
        return this.termResult();
      }
      safeThrow(err) {
        if (this.throwError) {
          throw err;
        } else {
          this.errorOccurred = true;
        }
      }
      termToNumericOrError(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a numeric literal`);
        } else if (!Eval.isSubTypeOf(term.datatype.value, Eval.TypeAlias.SPARQL_NUMERIC, this.superTypeProvider)) {
          throw new Error(`Term datatype ${term.datatype.value} with value ${term.value} has type ${term.termType} and is not a numeric literal`);
        }
        return this.termTransformer.transformLiteral(term);
      }
    };
    exports.AggregateEvaluator = AggregateEvaluator;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/index.js
var require_lib195 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-bindings-aggregator-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactory(), exports);
    __exportStar(require_AggregateEvaluator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/GroupConcatAggregator.js
var require_GroupConcatAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/GroupConcatAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GroupConcatAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var Eval = require_lib6();
    var GroupConcatAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, dataFactory, separator, throwError) {
        super(evaluator, distinct, throwError);
        this.dataFactory = dataFactory;
        this.state = void 0;
        this.lastLanguageValid = true;
        this.lastLanguage = void 0;
        this.separator = separator ?? " ";
      }
      emptyValueTerm() {
        return Eval.typedLiteral("", Eval.TypeURL.XSD_STRING);
      }
      putTerm(term) {
        if (this.state === void 0) {
          this.state = term.value;
          if (term.termType === "Literal") {
            this.lastLanguage = term.language;
          }
        } else {
          this.state += this.separator + term.value;
          if (this.lastLanguageValid && term.termType === "Literal" && this.lastLanguage !== term.language) {
            this.lastLanguageValid = false;
            this.lastLanguage = void 0;
          }
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        if (this.lastLanguageValid && this.lastLanguage) {
          return Eval.langString(this.state, this.lastLanguage).toRDF(this.dataFactory);
        }
        return Eval.typedLiteral(this.state, Eval.TypeURL.XSD_STRING);
      }
    };
    exports.GroupConcatAggregator = GroupConcatAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/ActorBindingsAggregatorFactoryGroupConcat.js
var require_ActorBindingsAggregatorFactoryGroupConcat = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/ActorBindingsAggregatorFactoryGroupConcat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryGroupConcat = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var GroupConcatAggregator_1 = require_GroupConcatAggregator();
    var ActorBindingsAggregatorFactoryGroupConcat = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.expr.aggregator !== "group_concat") {
          return (0, core_1.failTest)("This actor only supports the 'group_concat' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new GroupConcatAggregator_1.GroupConcatAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct, context.getSafe(context_entries_1.KeysInitQuery.dataFactory), expr.separator);
      }
    };
    exports.ActorBindingsAggregatorFactoryGroupConcat = ActorBindingsAggregatorFactoryGroupConcat;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/index.js
var require_lib196 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-group-concat/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryGroupConcat(), exports);
    __exportStar(require_GroupConcatAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/CountAggregator.js
var require_CountAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/CountAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CountAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var utils_expression_evaluator_1 = require_lib6();
    var CountAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, throwError) {
        super(evaluator, distinct, throwError);
        this.state = void 0;
      }
      emptyValueTerm() {
        return (0, utils_expression_evaluator_1.typedLiteral)("0", utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
      }
      putTerm(_) {
        if (this.state === void 0) {
          this.state = 0;
        }
        this.state++;
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return (0, utils_expression_evaluator_1.typedLiteral)(String(this.state), utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
      }
    };
    exports.CountAggregator = CountAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/ActorBindingsAggregatorFactoryCount.js
var require_ActorBindingsAggregatorFactoryCount = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/ActorBindingsAggregatorFactoryCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryCount = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var CountAggregator_1 = require_CountAggregator();
    var ActorBindingsAggregatorFactoryCount = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.expr.aggregator !== "count" || action.expr.expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.WILDCARD) {
          return (0, core_1.failTest)("This actor only supports the 'count' aggregator without wildcard.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new CountAggregator_1.CountAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct);
      }
    };
    exports.ActorBindingsAggregatorFactoryCount = ActorBindingsAggregatorFactoryCount;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/index.js
var require_lib197 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-count/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryCount(), exports);
    __exportStar(require_CountAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/SampleAggregator.js
var require_SampleAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/SampleAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SampleAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var SampleAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, throwError) {
        super(evaluator, distinct, throwError);
        this.state = void 0;
      }
      putTerm(term) {
        if (this.state === void 0) {
          this.state = term;
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return this.state;
      }
    };
    exports.SampleAggregator = SampleAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/ActorBindingsAggregatorFactorySample.js
var require_ActorBindingsAggregatorFactorySample = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/ActorBindingsAggregatorFactorySample.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactorySample = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var core_1 = require_lib();
    var SampleAggregator_1 = require_SampleAggregator();
    var ActorBindingsAggregatorFactorySample = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.expr.aggregator !== "sample") {
          return (0, core_1.failTest)("This actor only supports the 'sample' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new SampleAggregator_1.SampleAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct);
      }
    };
    exports.ActorBindingsAggregatorFactorySample = ActorBindingsAggregatorFactorySample;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/index.js
var require_lib198 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sample/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactorySample(), exports);
    __exportStar(require_SampleAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/WildcardCountAggregator.js
var require_WildcardCountAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/WildcardCountAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WildcardCountAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var utils_expression_evaluator_1 = require_lib6();
    var RdfString = require_rdf_string();
    var WildcardCountAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, throwError) {
        super(evaluator, distinct, throwError);
        this.bindingValues = /* @__PURE__ */ new Map();
        this.state = void 0;
      }
      putTerm(_term) {
      }
      async putBindings(bindings) {
        if (!this.handleDistinct(bindings)) {
          if (this.state === void 0) {
            this.state = 0;
          }
          this.state += 1;
        }
      }
      emptyValueTerm() {
        return (0, utils_expression_evaluator_1.typedLiteral)("0", utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return (0, utils_expression_evaluator_1.typedLiteral)(String(this.state), utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
      }
      /**
       * Returns true if the given bindings should be skipped.
       * @param bindings
       * @private
       */
      handleDistinct(bindings) {
        if (this.distinct) {
          const bindingList = [...bindings];
          bindingList.sort((first3, snd) => first3[0].value.localeCompare(snd[0].value));
          const variables = bindingList.map(([variable]) => variable.value).join(",");
          const terms = bindingList.map(([, term]) => RdfString.termToString(term)).join(",");
          const set3 = this.bindingValues.get(variables);
          const result = set3 !== void 0 && set3.has(terms);
          if (!set3) {
            this.bindingValues.set(variables, /* @__PURE__ */ new Set());
          }
          this.bindingValues.get(variables).add(terms);
          return result;
        }
        return false;
      }
    };
    exports.WildcardCountAggregator = WildcardCountAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/ActorBindingsAggregatorFactoryWildcardCount.js
var require_ActorBindingsAggregatorFactoryWildcardCount = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/ActorBindingsAggregatorFactoryWildcardCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryWildcardCount = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var core_1 = require_lib();
    var WildcardCountAggregator_1 = require_WildcardCountAggregator();
    var ActorBindingsAggregatorFactoryWildcardCount = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.expr.aggregator !== "count" || action.expr.expression.expressionType !== "wildcard") {
          return (0, core_1.failTest)("This actor only supports the 'count' aggregator with wildcard.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new WildcardCountAggregator_1.WildcardCountAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct);
      }
    };
    exports.ActorBindingsAggregatorFactoryWildcardCount = ActorBindingsAggregatorFactoryWildcardCount;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/index.js
var require_lib199 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-wildcard-count/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryWildcardCount(), exports);
    __exportStar(require_WildcardCountAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/AverageAggregator.js
var require_AverageAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/AverageAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AverageAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var Eval = require_lib6();
    var AverageAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, dataFactory, additionFunction, divisionFunction, throwError) {
        super(evaluator, distinct, throwError);
        this.dataFactory = dataFactory;
        this.additionFunction = additionFunction;
        this.divisionFunction = divisionFunction;
        this.state = void 0;
      }
      emptyValueTerm() {
        return Eval.typedLiteral("0", Eval.TypeURL.XSD_INTEGER);
      }
      putTerm(term) {
        if (this.state === void 0) {
          const sum = this.termToNumericOrError(term);
          this.state = { sum, count: 1 };
        } else {
          const internalTerm = this.termToNumericOrError(term);
          this.state.sum = this.additionFunction.applyOnTerms([this.state.sum, internalTerm], this.evaluator);
          this.state.count++;
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        const count2 = new Eval.IntegerLiteral(this.state.count);
        const result = this.divisionFunction.applyOnTerms([this.state.sum, count2], this.evaluator);
        return result.toRDF(this.dataFactory);
      }
    };
    exports.AverageAggregator = AverageAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/ActorBindingsAggregatorFactoryAverage.js
var require_ActorBindingsAggregatorFactoryAverage = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/ActorBindingsAggregatorFactoryAverage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryAverage = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_expression_evaluator_1 = require_lib6();
    var AverageAggregator_1 = require_AverageAggregator();
    var ActorBindingsAggregatorFactoryAverage = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async test(action) {
        if (action.expr.aggregator !== "avg") {
          return (0, core_1.failTest)("This actor only supports the 'avg' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new AverageAggregator_1.AverageAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct, context.getSafe(context_entries_1.KeysInitQuery.dataFactory), await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.ADDITION,
          context,
          requireTermExpression: true
        }), await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.DIVISION,
          context,
          requireTermExpression: true
        }));
      }
    };
    exports.ActorBindingsAggregatorFactoryAverage = ActorBindingsAggregatorFactoryAverage;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/index.js
var require_lib200 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-average/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryAverage(), exports);
    __exportStar(require_AverageAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/SumAggregator.js
var require_SumAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/SumAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SumAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var utils_expression_evaluator_1 = require_lib6();
    var SumAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, dataFactory, additionFunction, throwError) {
        super(evaluator, distinct, throwError);
        this.dataFactory = dataFactory;
        this.additionFunction = additionFunction;
        this.state = void 0;
      }
      emptyValueTerm() {
        return (0, utils_expression_evaluator_1.typedLiteral)("0", utils_expression_evaluator_1.TypeURL.XSD_INTEGER);
      }
      putTerm(term) {
        if (this.state === void 0) {
          this.state = this.termToNumericOrError(term);
        } else {
          const internalTerm = this.termToNumericOrError(term);
          this.state = this.additionFunction.applyOnTerms([this.state, internalTerm], this.evaluator);
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return this.state.toRDF(this.dataFactory);
      }
    };
    exports.SumAggregator = SumAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/ActorBindingsAggregatorFactorySum.js
var require_ActorBindingsAggregatorFactorySum = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/ActorBindingsAggregatorFactorySum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactorySum = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_expression_evaluator_1 = require_lib6();
    var SumAggregator_1 = require_SumAggregator();
    var ActorBindingsAggregatorFactorySum = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async test(action) {
        if (action.expr.aggregator !== "sum") {
          return (0, core_1.failTest)("This actor only supports the 'sum' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ expr, context }) {
        return new SumAggregator_1.SumAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct, context.getSafe(context_entries_1.KeysInitQuery.dataFactory), await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.ADDITION,
          context,
          requireTermExpression: true
        }));
      }
    };
    exports.ActorBindingsAggregatorFactorySum = ActorBindingsAggregatorFactorySum;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/index.js
var require_lib201 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-sum/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactorySum(), exports);
    __exportStar(require_SumAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/ExpressionFunctionIn.js
var require_ExpressionFunctionIn = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/ExpressionFunctionIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionIn = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionIn = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor(equalityFunction) {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator: utils_expression_evaluator_1.SparqlOperator.IN,
          apply: async (context) => {
            const { args, mapping, exprEval } = context;
            const [leftExpr, ...remaining] = args;
            const left = await exprEval.evaluatorExpressionEvaluation(leftExpr, mapping);
            return await this.inRecursive(left, { ...context, args: remaining }, []);
          }
        });
        this.equalityFunction = equalityFunction;
      }
      checkArity(args) {
        return args.length > 0;
      }
      async inRecursive(needle, context, results) {
        const { args, mapping, exprEval } = context;
        if (args.length === 0) {
          const noErrors = results.every((val) => !val);
          return noErrors ? (0, utils_expression_evaluator_1.bool)(false) : Promise.reject(new utils_expression_evaluator_1.InError(results));
        }
        try {
          const nextExpression = args.shift();
          const next = await exprEval.evaluatorExpressionEvaluation(nextExpression, mapping);
          if (this.equalityFunction.applyOnTerms([needle, next], exprEval).typedValue) {
            return (0, utils_expression_evaluator_1.bool)(true);
          }
          return this.inRecursive(needle, context, [...results, false]);
        } catch (error) {
          return this.inRecursive(needle, context, [...results, error]);
        }
      }
    };
    exports.ExpressionFunctionIn = ExpressionFunctionIn;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/ActorFunctionFactoryExpressionIn.js
var require_ActorFunctionFactoryExpressionIn = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/ActorFunctionFactoryExpressionIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionIn = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionIn_1 = require_ExpressionFunctionIn();
    var ActorFunctionFactoryExpressionIn = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.IN],
          termFunction: false
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const equalityFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.EQUAL,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new ExpressionFunctionIn_1.ExpressionFunctionIn(equalityFunction);
      }
    };
    exports.ActorFunctionFactoryExpressionIn = ActorFunctionFactoryExpressionIn;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/index.js
var require_lib202 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-in/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionIn(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/ExpressionFunctionNotIn.js
var require_ExpressionFunctionNotIn = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/ExpressionFunctionNotIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionFunctionNotIn = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionNotIn = class extends bus_function_factory_1.ExpressionFunctionBase {
      constructor(inFunction) {
        super({
          arity: Number.POSITIVE_INFINITY,
          operator: utils_expression_evaluator_1.SparqlOperator.NOT_IN,
          apply: async (context) => {
            const isIn = await this.inFunction.apply(context);
            return (0, utils_expression_evaluator_1.bool)(!isIn.typedValue);
          }
        });
        this.inFunction = inFunction;
      }
      checkArity(args) {
        return args.length > 0;
      }
    };
    exports.ExpressionFunctionNotIn = ExpressionFunctionNotIn;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/ActorFunctionFactoryExpressionNotIn.js
var require_ActorFunctionFactoryExpressionNotIn = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/ActorFunctionFactoryExpressionNotIn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryExpressionNotIn = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var ExpressionFunctionNotIn_1 = require_ExpressionFunctionNotIn();
    var ActorFunctionFactoryExpressionNotIn = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.NOT_IN],
          termFunction: false
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const inFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.IN,
          context: args.context,
          arguments: args.arguments
        });
        return new ExpressionFunctionNotIn_1.ExpressionFunctionNotIn(inFunction);
      }
    };
    exports.ActorFunctionFactoryExpressionNotIn = ActorFunctionFactoryExpressionNotIn;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/index.js
var require_lib203 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-expression-not-in/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryExpressionNotIn(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/TermFunctionGreaterThanEqual.js
var require_TermFunctionGreaterThanEqual = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/TermFunctionGreaterThanEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionGreaterThanEqual = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionGreaterThanEqual = class extends bus_function_factory_1.TermFunctionBase {
      constructor(lessThanEqualFunction) {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.GTE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.GTE).set(["term", "term"], (exprEval) => ([first3, second]) => (
            // X >= Y -> Y <= X
            this.lessThanEqualFunction.applyOnTerms([second, first3], exprEval)
          )).collect()
        });
        this.lessThanEqualFunction = lessThanEqualFunction;
      }
    };
    exports.TermFunctionGreaterThanEqual = TermFunctionGreaterThanEqual;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/ActorFunctionFactoryTermGreaterThanEqual.js
var require_ActorFunctionFactoryTermGreaterThanEqual = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/ActorFunctionFactoryTermGreaterThanEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermGreaterThanEqual = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionGreaterThanEqual_1 = require_TermFunctionGreaterThanEqual();
    var ActorFunctionFactoryTermGreaterThanEqual = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.GTE],
          termFunction: true
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const lessThanEqualFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.LTE,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new TermFunctionGreaterThanEqual_1.TermFunctionGreaterThanEqual(lessThanEqualFunction);
      }
    };
    exports.ActorFunctionFactoryTermGreaterThanEqual = ActorFunctionFactoryTermGreaterThanEqual;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/index.js
var require_lib204 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than-equal/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermGreaterThanEqual(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/TermFunctionGreaterThan.js
var require_TermFunctionGreaterThan = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/TermFunctionGreaterThan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionGreaterThan = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionGreaterThan = class extends bus_function_factory_1.TermFunctionBase {
      constructor(lessThanFunction) {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.GT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.GT).set(["term", "term"], (expressionEvaluator) => ([first3, second]) => (
            // X < Y -> Y > X
            this.lessThanFunction.applyOnTerms([second, first3], expressionEvaluator)
          )).collect()
        });
        this.lessThanFunction = lessThanFunction;
      }
    };
    exports.TermFunctionGreaterThan = TermFunctionGreaterThan;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/ActorFunctionFactoryTermGreaterThan.js
var require_ActorFunctionFactoryTermGreaterThan = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/ActorFunctionFactoryTermGreaterThan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermGreaterThan = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionGreaterThan_1 = require_TermFunctionGreaterThan();
    var ActorFunctionFactoryTermGreaterThan = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.GT],
          termFunction: true
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const lessThanFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.LT,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new TermFunctionGreaterThan_1.TermFunctionGreaterThan(lessThanFunction);
      }
    };
    exports.ActorFunctionFactoryTermGreaterThan = ActorFunctionFactoryTermGreaterThan;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/index.js
var require_lib205 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-greater-than/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermGreaterThan(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/TermFunctionInequality.js
var require_TermFunctionInequality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/TermFunctionInequality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionInequality = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionInequality = class extends bus_function_factory_1.TermFunctionBase {
      constructor(equalityFunction) {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.NOT_EQUAL,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.NOT_EQUAL).set(["term", "term"], (expressionEvaluator) => ([first3, second]) => (0, utils_expression_evaluator_1.bool)(!this.equalityFunction.applyOnTerms([first3, second], expressionEvaluator).typedValue)).collect()
        });
        this.equalityFunction = equalityFunction;
      }
    };
    exports.TermFunctionInequality = TermFunctionInequality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/ActorFunctionFactoryTermInequality.js
var require_ActorFunctionFactoryTermInequality = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/ActorFunctionFactoryTermInequality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermInequality = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionInequality_1 = require_TermFunctionInequality();
    var ActorFunctionFactoryTermInequality = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.NOT_EQUAL],
          termFunction: true
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const equalityFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.EQUAL,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new TermFunctionInequality_1.TermFunctionInequality(equalityFunction);
      }
    };
    exports.ActorFunctionFactoryTermInequality = ActorFunctionFactoryTermInequality;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/index.js
var require_lib206 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-inequality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermInequality(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/TermFunctionLesserThanEqual.js
var require_TermFunctionLesserThanEqual = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/TermFunctionLesserThanEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionLesserThanEqual = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLesserThanEqual = class extends bus_function_factory_1.TermFunctionBase {
      constructor(equalityFunction, lessThanFunction) {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.LTE,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.LTE).set(["term", "term"], (exprEval) => ([first3, second]) => (
            // X <= Y -> X < Y || X = Y
            // First check if the first is lesser than the second, then check if they are equal.
            // Doing this, the correct error will be thrown,
            // each type that has a lesserThanEqual has a matching lesserThan.
            (0, utils_expression_evaluator_1.bool)(this.lessThanFunction.applyOnTerms([first3, second], exprEval).typedValue || this.equalityFunction.applyOnTerms([first3, second], exprEval).typedValue)
          )).collect()
        });
        this.equalityFunction = equalityFunction;
        this.lessThanFunction = lessThanFunction;
      }
    };
    exports.TermFunctionLesserThanEqual = TermFunctionLesserThanEqual;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/ActorFunctionFactoryTermLesserThanEqual.js
var require_ActorFunctionFactoryTermLesserThanEqual = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/ActorFunctionFactoryTermLesserThanEqual.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermLesserThanEqual = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLesserThanEqual_1 = require_TermFunctionLesserThanEqual();
    var ActorFunctionFactoryTermLesserThanEqual = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LTE],
          termFunction: true
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const equalityFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.EQUAL,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        const lessThanFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.LT,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new TermFunctionLesserThanEqual_1.TermFunctionLesserThanEqual(equalityFunction, lessThanFunction);
      }
    };
    exports.ActorFunctionFactoryTermLesserThanEqual = ActorFunctionFactoryTermLesserThanEqual;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/index.js
var require_lib207 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than-equal/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermLesserThanEqual(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/TermFunctionLesserThan.js
var require_TermFunctionLesserThan = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/TermFunctionLesserThan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermFunctionLesserThan = void 0;
    var bus_function_factory_1 = require_lib7();
    var context_entries_1 = require_lib3();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLesserThan = class extends bus_function_factory_1.TermFunctionBase {
      constructor(equalityFunction) {
        super({
          arity: 2,
          operator: utils_expression_evaluator_1.SparqlOperator.LT,
          overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.LT).numberTest(() => (left, right) => left < right).stringTest(() => (left, right) => left.localeCompare(right) === -1).booleanTest(() => (left, right) => left < right).dateTimeTest((exprEval) => (left, right) => (0, utils_expression_evaluator_1.toUTCDate)(left, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime() < (0, utils_expression_evaluator_1.toUTCDate)(right, exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime()).copy({
            // https://www.w3.org/TR/xpath-functions/#func-date-less-than
            from: [utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME, utils_expression_evaluator_1.TypeURL.XSD_DATE_TIME],
            to: [utils_expression_evaluator_1.TypeURL.XSD_DATE, utils_expression_evaluator_1.TypeURL.XSD_DATE]
          }).set([utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION, utils_expression_evaluator_1.TypeURL.XSD_YEAR_MONTH_DURATION], () => ([dur1L, dur2L]) => (
            // https://www.w3.org/TR/xpath-functions/#func-yearMonthDuration-less-than
            (0, utils_expression_evaluator_1.bool)((0, utils_expression_evaluator_1.yearMonthDurationsToMonths)((0, utils_expression_evaluator_1.defaultedYearMonthDurationRepresentation)(dur1L.typedValue)) < (0, utils_expression_evaluator_1.yearMonthDurationsToMonths)((0, utils_expression_evaluator_1.defaultedYearMonthDurationRepresentation)(dur2L.typedValue)))
          )).set([utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION, utils_expression_evaluator_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([dur1, dur2]) => (
            // https://www.w3.org/TR/xpath-functions/#func-dayTimeDuration-greater-than
            (0, utils_expression_evaluator_1.bool)((0, utils_expression_evaluator_1.dayTimeDurationsToSeconds)((0, utils_expression_evaluator_1.defaultedDayTimeDurationRepresentation)(dur1.typedValue)) < (0, utils_expression_evaluator_1.dayTimeDurationsToSeconds)((0, utils_expression_evaluator_1.defaultedDayTimeDurationRepresentation)(dur2.typedValue)))
          )).set([utils_expression_evaluator_1.TypeURL.XSD_TIME, utils_expression_evaluator_1.TypeURL.XSD_TIME], (exprEval) => ([time1, time2]) => (
            // https://www.w3.org/TR/xpath-functions/#func-time-less-than
            (0, utils_expression_evaluator_1.bool)((0, utils_expression_evaluator_1.toUTCDate)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time1.typedValue), exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime() < (0, utils_expression_evaluator_1.toUTCDate)((0, utils_expression_evaluator_1.defaultedDateTimeRepresentation)(time2.typedValue), exprEval.context.getSafe(context_entries_1.KeysExpressionEvaluator.defaultTimeZone)).getTime())
          )).set(["quad", "quad"], (exprEval) => ([left, right]) => {
            const subjectTest = this.quadComponentTest(left.subject, right.subject, exprEval);
            if (subjectTest !== void 0) {
              return (0, utils_expression_evaluator_1.bool)(subjectTest);
            }
            const predicateTest = this.quadComponentTest(left.predicate, right.predicate, exprEval);
            if (predicateTest !== void 0) {
              return (0, utils_expression_evaluator_1.bool)(predicateTest);
            }
            const objectTest = this.quadComponentTest(left.object, right.object, exprEval);
            if (objectTest !== void 0) {
              return (0, utils_expression_evaluator_1.bool)(objectTest);
            }
            return (0, utils_expression_evaluator_1.bool)(this.quadComponentTest(left.graph, right.graph, exprEval) ?? false);
          }, false).collect()
        });
        this.equalityFunction = equalityFunction;
      }
      quadComponentTest(left, right, exprEval) {
        const componentEqual = this.equalityFunction.applyOnTerms([left, right], exprEval);
        if (componentEqual.typedValue) {
          return void 0;
        }
        const componentLess = this.applyOnTerms([left, right], exprEval);
        return componentLess.typedValue;
      }
    };
    exports.TermFunctionLesserThan = TermFunctionLesserThan;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/ActorFunctionFactoryTermLesserThan.js
var require_ActorFunctionFactoryTermLesserThan = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/ActorFunctionFactoryTermLesserThan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorFunctionFactoryTermLesserThan = void 0;
    var bus_function_factory_1 = require_lib7();
    var utils_expression_evaluator_1 = require_lib6();
    var TermFunctionLesserThan_1 = require_TermFunctionLesserThan();
    var ActorFunctionFactoryTermLesserThan = class extends bus_function_factory_1.ActorFunctionFactoryDedicated {
      constructor(args) {
        super({
          ...args,
          functionNames: [utils_expression_evaluator_1.SparqlOperator.LT],
          termFunction: true
        });
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
      }
      async run(args) {
        const equalityFunction = await this.mediatorFunctionFactory.mediate({
          functionName: utils_expression_evaluator_1.SparqlOperator.EQUAL,
          requireTermExpression: true,
          context: args.context,
          arguments: args.arguments
        });
        return new TermFunctionLesserThan_1.TermFunctionLesserThan(equalityFunction);
      }
    };
    exports.ActorFunctionFactoryTermLesserThan = ActorFunctionFactoryTermLesserThan;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/index.js
var require_lib208 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-function-factory-term-lesser-than/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorFunctionFactoryTermLesserThan(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-wayback/lib/ActorHttpWayback.js
var require_ActorHttpWayback = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-wayback/lib/ActorHttpWayback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpWayback = void 0;
    var bus_http_1 = require_lib172();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var stream_to_string_1 = require_dist2();
    var WAYBACK_URL = "http://wayback.archive-it.org/";
    function addWayback(action) {
      const request = new Request(action.input, action.init);
      return {
        input: new Request(new URL(`/${request.url}`, WAYBACK_URL), request)
      };
    }
    function getProxyHandler(context) {
      const handler = context.get(context_entries_1.KeysHttpProxy.httpProxyHandler);
      if (handler) {
        return (action) => handler.getProxy(addWayback(action));
      }
      return (action) => Promise.resolve(addWayback(action));
    }
    var ActorHttpWayback = class extends bus_http_1.ActorHttp {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let result = await this.mediatorHttp.mediate(action);
        if (result.status === 404 && action.context.get(context_entries_1.KeysHttpWayback.recoverBrokenLinks)) {
          let fallbackResult = await this.mediatorHttp.mediate({
            ...action,
            context: action.context.set(context_entries_1.KeysHttpWayback.recoverBrokenLinks, false).set(context_entries_1.KeysHttpProxy.httpProxyHandler, { getProxy: getProxyHandler(action.context) })
          });
          if (fallbackResult.status === 200) {
            [result, fallbackResult] = [fallbackResult, result];
          }
          const { body } = fallbackResult;
          if (body) {
            if ("cancel" in body && typeof body.cancel === "function") {
              await body.cancel();
            } else if ("destroy" in body && typeof body.destroy === "function") {
              body.destroy();
            } else {
              await (0, stream_to_string_1.stringify)(bus_http_1.ActorHttp.toNodeReadable(body));
            }
          }
        }
        return result;
      }
    };
    exports.ActorHttpWayback = ActorHttpWayback;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-wayback/lib/index.js
var require_lib209 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-wayback/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpWayback(), exports);
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/ErrorCoded.js
var require_ErrorCoded3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/ErrorCoded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_CODES = exports.ErrorCoded = void 0;
    var ErrorCoded = class extends Error {
      /* istanbul ignore next */
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports.ErrorCoded = ErrorCoded;
    var ERROR_CODES;
    (function(ERROR_CODES2) {
      ERROR_CODES2["COLLIDING_KEYWORDS"] = "colliding keywords";
      ERROR_CODES2["CONFLICTING_INDEXES"] = "conflicting indexes";
      ERROR_CODES2["CYCLIC_IRI_MAPPING"] = "cyclic IRI mapping";
      ERROR_CODES2["INVALID_ID_VALUE"] = "invalid @id value";
      ERROR_CODES2["INVALID_INDEX_VALUE"] = "invalid @index value";
      ERROR_CODES2["INVALID_NEST_VALUE"] = "invalid @nest value";
      ERROR_CODES2["INVALID_PREFIX_VALUE"] = "invalid @prefix value";
      ERROR_CODES2["INVALID_PROPAGATE_VALUE"] = "invalid @propagate value";
      ERROR_CODES2["INVALID_REVERSE_VALUE"] = "invalid @reverse value";
      ERROR_CODES2["INVALID_IMPORT_VALUE"] = "invalid @import value";
      ERROR_CODES2["INVALID_VERSION_VALUE"] = "invalid @version value";
      ERROR_CODES2["INVALID_BASE_IRI"] = "invalid base IRI";
      ERROR_CODES2["INVALID_CONTAINER_MAPPING"] = "invalid container mapping";
      ERROR_CODES2["INVALID_CONTEXT_ENTRY"] = "invalid context entry";
      ERROR_CODES2["INVALID_CONTEXT_NULLIFICATION"] = "invalid context nullification";
      ERROR_CODES2["INVALID_DEFAULT_LANGUAGE"] = "invalid default language";
      ERROR_CODES2["INVALID_INCLUDED_VALUE"] = "invalid @included value";
      ERROR_CODES2["INVALID_IRI_MAPPING"] = "invalid IRI mapping";
      ERROR_CODES2["INVALID_JSON_LITERAL"] = "invalid JSON literal";
      ERROR_CODES2["INVALID_KEYWORD_ALIAS"] = "invalid keyword alias";
      ERROR_CODES2["INVALID_LANGUAGE_MAP_VALUE"] = "invalid language map value";
      ERROR_CODES2["INVALID_LANGUAGE_MAPPING"] = "invalid language mapping";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_STRING"] = "invalid language-tagged string";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_VALUE"] = "invalid language-tagged value";
      ERROR_CODES2["INVALID_LOCAL_CONTEXT"] = "invalid local context";
      ERROR_CODES2["INVALID_REMOTE_CONTEXT"] = "invalid remote context";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY"] = "invalid reverse property";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_MAP"] = "invalid reverse property map";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_VALUE"] = "invalid reverse property value";
      ERROR_CODES2["INVALID_SCOPED_CONTEXT"] = "invalid scoped context";
      ERROR_CODES2["INVALID_SCRIPT_ELEMENT"] = "invalid script element";
      ERROR_CODES2["INVALID_SET_OR_LIST_OBJECT"] = "invalid set or list object";
      ERROR_CODES2["INVALID_TERM_DEFINITION"] = "invalid term definition";
      ERROR_CODES2["INVALID_TYPE_MAPPING"] = "invalid type mapping";
      ERROR_CODES2["INVALID_TYPE_VALUE"] = "invalid type value";
      ERROR_CODES2["INVALID_TYPED_VALUE"] = "invalid typed value";
      ERROR_CODES2["INVALID_VALUE_OBJECT"] = "invalid value object";
      ERROR_CODES2["INVALID_VALUE_OBJECT_VALUE"] = "invalid value object value";
      ERROR_CODES2["INVALID_VOCAB_MAPPING"] = "invalid vocab mapping";
      ERROR_CODES2["IRI_CONFUSED_WITH_PREFIX"] = "IRI confused with prefix";
      ERROR_CODES2["KEYWORD_REDEFINITION"] = "keyword redefinition";
      ERROR_CODES2["LOADING_DOCUMENT_FAILED"] = "loading document failed";
      ERROR_CODES2["LOADING_REMOTE_CONTEXT_FAILED"] = "loading remote context failed";
      ERROR_CODES2["MULTIPLE_CONTEXT_LINK_HEADERS"] = "multiple context link headers";
      ERROR_CODES2["PROCESSING_MODE_CONFLICT"] = "processing mode conflict";
      ERROR_CODES2["PROTECTED_TERM_REDEFINITION"] = "protected term redefinition";
      ERROR_CODES2["CONTEXT_OVERFLOW"] = "context overflow";
      ERROR_CODES2["INVALID_BASE_DIRECTION"] = "invalid base direction";
      ERROR_CODES2["RECURSIVE_CONTEXT_INCLUSION"] = "recursive context inclusion";
      ERROR_CODES2["INVALID_STREAMING_KEY_ORDER"] = "invalid streaming key order";
      ERROR_CODES2["INVALID_EMBEDDED_NODE"] = "invalid embedded node";
      ERROR_CODES2["INVALID_ANNOTATION"] = "invalid annotation";
    })(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js
var require_FetchDocumentLoader3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchDocumentLoader = void 0;
    var ErrorCoded_1 = require_ErrorCoded3();
    var http_link_header_1 = require_link();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var FetchDocumentLoader = class {
      constructor(fetcher) {
        this.fetcher = fetcher;
      }
      async load(url) {
        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: "application/ld+json" }) });
        if (response.ok && response.headers) {
          let mediaType = response.headers.get("Content-Type");
          if (mediaType) {
            const colonPos = mediaType.indexOf(";");
            if (colonPos > 0) {
              mediaType = mediaType.substr(0, colonPos);
            }
          }
          if (mediaType === "application/ld+json") {
            return await response.json();
          } else {
            if (response.headers.has("Link")) {
              let alternateUrl;
              response.headers.forEach((value, key) => {
                if (key === "link") {
                  const linkHeader = (0, http_link_header_1.parse)(value);
                  for (const link of linkHeader.get("type", "application/ld+json")) {
                    if (link.rel === "alternate") {
                      if (alternateUrl) {
                        throw new Error("Multiple JSON-LD alternate links were found on " + url);
                      }
                      alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                    }
                  }
                }
              });
              if (alternateUrl) {
                return this.load(alternateUrl);
              }
            }
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        } else {
          throw new Error(response.statusText || `Status code: ${response.status}`);
        }
      }
    };
    exports.FetchDocumentLoader = FetchDocumentLoader;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/Util.js
var require_Util7 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var Util = class _Util {
      /**
       * Check if the given term is a valid compact IRI.
       * Otherwise, it may be an IRI.
       * @param {string} term A term.
       * @return {boolean} If it is a compact IRI.
       */
      static isCompactIri(term) {
        return term.indexOf(":") > 0 && !(term && term[0] === "#");
      }
      /**
       * Get the prefix from the given term.
       * @see https://json-ld.org/spec/latest/json-ld/#compact-iris
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {string} The prefix or null.
       */
      static getPrefix(term, context) {
        if (term && term[0] === "#") {
          return null;
        }
        const separatorPos = term.indexOf(":");
        if (separatorPos >= 0) {
          if (term.length > separatorPos + 1 && term.charAt(separatorPos + 1) === "/" && term.charAt(separatorPos + 2) === "/") {
            return null;
          }
          const prefix = term.substr(0, separatorPos);
          if (prefix === "_") {
            return null;
          }
          if (context[prefix]) {
            return prefix;
          }
        }
        return null;
      }
      /**
       * From a given context entry value, get the string value, or the @id field.
       * @param contextValue A value for a term in a context.
       * @return {string} The id value, or null.
       */
      static getContextValueId(contextValue) {
        if (contextValue === null || typeof contextValue === "string") {
          return contextValue;
        }
        const id = contextValue["@id"];
        return id ? id : null;
      }
      /**
       * Check if the given simple term definition (string-based value of a context term)
       * should be considered a prefix.
       * @param value A simple term definition value.
       * @param options Options that define the way how expansion must be done.
       */
      static isSimpleTermDefinitionPrefix(value, options) {
        return !_Util.isPotentialKeyword(value) && (options.allowPrefixNonGenDelims || typeof value === "string" && (value[0] === "_" || _Util.isPrefixIriEndingWithGenDelim(value)));
      }
      /**
       * Check if the given keyword is of the keyword format "@"1*ALPHA.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is of the keyword format.
       */
      static isPotentialKeyword(keyword) {
        return typeof keyword === "string" && _Util.KEYWORD_REGEX.test(keyword);
      }
      /**
       * Check if the given prefix ends with a gen-delim character.
       * @param {string} prefixIri A prefix IRI.
       * @return {boolean} If the given prefix IRI is valid.
       */
      static isPrefixIriEndingWithGenDelim(prefixIri) {
        return _Util.ENDS_WITH_GEN_DELIM.test(prefixIri);
      }
      /**
       * Check if the given context value can be a prefix value.
       * @param value A context value.
       * @return {boolean} If it can be a prefix value.
       */
      static isPrefixValue(value) {
        return value && (typeof value === "string" || value && typeof value === "object");
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return Boolean(iri && _Util.IRI_REGEX.test(iri));
      }
      /**
       * Check if the given IRI is valid, this includes the possibility of being a relative IRI.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIriWeak(iri) {
        return !!iri && iri[0] !== ":" && _Util.IRI_REGEX_WEAK.test(iri);
      }
      /**
       * Check if the given keyword is a defined according to the JSON-LD specification.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is valid.
       */
      static isValidKeyword(keyword) {
        return _Util.VALID_KEYWORDS[keyword];
      }
      /**
       * Check if the given term is protected in the context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {string} key A context term.
       * @return {boolean} If the given term has an @protected flag.
       */
      static isTermProtected(context, key) {
        const value = context[key];
        return !(typeof value === "string") && value && value["@protected"];
      }
      /**
       * Check if the given context has at least one protected term.
       * @param context A context.
       * @return If the context has a protected term.
       */
      static hasProtectedTerms(context) {
        for (const key of Object.keys(context)) {
          if (_Util.isTermProtected(context, key)) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check if the given key is an internal reserved keyword.
       * @param key A context key.
       */
      static isReservedInternalKeyword(key) {
        return key.startsWith("@__");
      }
      /**
       * Check if two objects are deepEqual to on another.
       * @param object1 The first object to test.
       * @param object2 The second object to test.
       */
      static deepEqual(object1, object2) {
        const objKeys1 = Object.keys(object1);
        const objKeys2 = Object.keys(object2);
        if (objKeys1.length !== objKeys2.length)
          return false;
        return objKeys1.every((key) => {
          const value1 = object1[key];
          const value2 = object2[key];
          return value1 === value2 || value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object" && this.deepEqual(value1, value2);
        });
      }
    };
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/;
    Util.IRI_REGEX_WEAK = /(?::[^:])|\//;
    Util.KEYWORD_REGEX = /^@[a-z]+$/i;
    Util.ENDS_WITH_GEN_DELIM = /[:/?#\[\]@]$/;
    Util.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;
    Util.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;
    Util.VALID_KEYWORDS = {
      "@annotation": true,
      "@base": true,
      "@container": true,
      "@context": true,
      "@direction": true,
      "@graph": true,
      "@id": true,
      "@import": true,
      "@included": true,
      "@index": true,
      "@json": true,
      "@language": true,
      "@list": true,
      "@nest": true,
      "@none": true,
      "@prefix": true,
      "@propagate": true,
      "@protected": true,
      "@reverse": true,
      "@set": true,
      "@type": true,
      "@value": true,
      "@version": true,
      "@vocab": true
    };
    Util.EXPAND_KEYS_BLACKLIST = [
      "@base",
      "@vocab",
      "@language",
      "@version",
      "@direction"
    ];
    Util.ALIAS_DOMAIN_BLACKLIST = [
      "@container",
      "@graph",
      "@id",
      "@index",
      "@list",
      "@nest",
      "@none",
      "@prefix",
      "@reverse",
      "@set",
      "@type",
      "@value",
      "@version"
    ];
    Util.ALIAS_RANGE_BLACKLIST = [
      "@context",
      "@preserve"
    ];
    Util.CONTAINERS = [
      "@list",
      "@set",
      "@index",
      "@language",
      "@graph",
      "@id",
      "@type"
    ];
    Util.CONTAINERS_1_0 = [
      "@list",
      "@set",
      "@index"
    ];
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js
var require_JsonLdContextNormalized3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded3();
    var Util_1 = require_Util7();
    var JsonLdContextNormalized = class {
      constructor(contextRaw) {
        this.contextRaw = contextRaw;
      }
      /**
       * @return The raw inner context.
       */
      getContextRaw() {
        return this.contextRaw;
      }
      /**
       * Expand the term or prefix of the given term if it has one,
       * otherwise return the term as-is.
       *
       * This will try to expand the IRI as much as possible.
       *
       * Iff in vocab-mode, then other references to other terms in the context can be used,
       * such as to `myTerm`:
       * ```
       * {
       *   "myTerm": "http://example.org/myLongTerm"
       * }
       * ```
       *
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,
       *                              otherwise it is considered a regular term that is expanded based on @base.
       * @param {IExpandOptions} options Options that define the way how expansion must be done.
       * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.
       * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).
       */
      expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {
        const contextValue = this.contextRaw[term];
        if (contextValue === null || contextValue && contextValue["@id"] === null) {
          return null;
        }
        let validIriMapping = true;
        if (contextValue && expandVocab) {
          const value = Util_1.Util.getContextValueId(contextValue);
          if (value && value !== term) {
            if (typeof value !== "string" || !Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value)) {
              if (!Util_1.Util.isPotentialKeyword(value)) {
                validIriMapping = false;
              }
            } else {
              return value;
            }
          }
        }
        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);
        const vocab = this.contextRaw["@vocab"];
        const vocabRelative = (!!vocab || vocab === "") && vocab.indexOf(":") < 0;
        const base = this.contextRaw["@base"];
        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);
        if (prefix) {
          const contextPrefixValue = this.contextRaw[prefix];
          const value = Util_1.Util.getContextValueId(contextPrefixValue);
          if (value) {
            if (typeof contextPrefixValue === "string" || !options.allowPrefixForcing) {
              if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {
                return term;
              }
            } else {
              if (value[0] !== "_" && !potentialKeyword && !contextPrefixValue["@prefix"] && !(term in this.contextRaw)) {
                return term;
              }
            }
            return value + term.substr(prefix.length + 1);
          }
        } else if (expandVocab && (vocab || vocab === "" || options.allowVocabRelativeToBase && (base && vocabRelative)) && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          if (vocabRelative) {
            if (options.allowVocabRelativeToBase) {
              return (vocab || base ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : "") + term;
            } else {
              throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
            }
          } else {
            return vocab + term;
          }
        } else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          return (0, relative_to_absolute_iri_1.resolve)(term, base);
        }
        if (validIriMapping) {
          return term;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
        }
      }
      /**
       * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.
       *
       * This will try to compact the IRI as much as possible.
       *
       * @param {string} iri An IRI to compact.
       * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,
       *                        otherwise it is considered a regular term that is compacted based on @base.
       * @return {string} The compacted term or the IRI as-is.
       */
      compactIri(iri, vocab) {
        if (vocab && this.contextRaw["@vocab"] && iri.startsWith(this.contextRaw["@vocab"])) {
          return iri.substr(this.contextRaw["@vocab"].length);
        }
        if (!vocab && this.contextRaw["@base"] && iri.startsWith(this.contextRaw["@base"])) {
          return iri.substr(this.contextRaw["@base"].length);
        }
        const shortestPrefixing = { prefix: "", suffix: iri };
        for (const key in this.contextRaw) {
          const value = this.contextRaw[key];
          if (value && !Util_1.Util.isPotentialKeyword(key)) {
            const contextIri = Util_1.Util.getContextValueId(value);
            if (iri.startsWith(contextIri)) {
              const suffix = iri.substr(contextIri.length);
              if (!suffix) {
                if (vocab) {
                  return key;
                }
              } else if (suffix.length < shortestPrefixing.suffix.length) {
                shortestPrefixing.prefix = key;
                shortestPrefixing.suffix = suffix;
              }
            }
          }
        }
        if (shortestPrefixing.prefix) {
          return shortestPrefixing.prefix + ":" + shortestPrefixing.suffix;
        }
        return iri;
      }
    };
    exports.JsonLdContextNormalized = JsonLdContextNormalized;
    exports.defaultExpandOptions = {
      allowPrefixForcing: true,
      allowPrefixNonGenDelims: false,
      allowVocabRelativeToBase: true
    };
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/ContextParser.js
var require_ContextParser3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/ContextParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextParser = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded3();
    var FetchDocumentLoader_1 = require_FetchDocumentLoader3();
    var JsonLdContextNormalized_1 = require_JsonLdContextNormalized3();
    var Util_1 = require_Util7();
    var ContextParser = class _ContextParser {
      constructor(options) {
        options = options || {};
        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();
        this.documentCache = {};
        this.validateContext = !options.skipValidation;
        this.expandContentTypeToBase = !!options.expandContentTypeToBase;
        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;
        this.redirectSchemaOrgHttps = "redirectSchemaOrgHttps" in options ? !!options.redirectSchemaOrgHttps : true;
      }
      /**
       * Validate the given @language value.
       * An error will be thrown if it is invalid.
       * @param value An @language value.
       * @param {boolean} strictRange If the string value should be strictly checked against a regex.
       * @param {string} errorCode The error code to emit on errors.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateLanguage(value, strictRange, errorCode) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);
        }
        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {
          if (strictRange) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Validate the given @direction value.
       * An error will be thrown if it is invalid.
       * @param value An @direction value.
       * @param {boolean} strictValues If the string value should be strictly checked against a regex.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateDirection(value, strictValues) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
        }
        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {
          if (strictValues) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Add an @id term for all @reverse terms.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       */
      idifyReverseTerms(context) {
        for (const key of Object.keys(context)) {
          let value = context[key];
          if (value && typeof value === "object") {
            if (value["@reverse"] && !value["@id"]) {
              if (typeof value["@reverse"] !== "string" || Util_1.Util.isValidKeyword(value["@reverse"])) {
                throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value["@reverse"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
              }
              value = context[key] = Object.assign(Object.assign({}, value), { "@id": value["@reverse"] });
              value["@id"] = value["@reverse"];
              if (Util_1.Util.isPotentialKeyword(value["@reverse"])) {
                delete value["@reverse"];
              } else {
                value["@reverse"] = true;
              }
            }
          }
        }
        return context;
      }
      /**
       * Expand all prefixed terms in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded
       *                                          via @base if @vocab is set to null.
       * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all
       * keys in the context will be expanded.
       */
      expandPrefixedTerms(context, expandContentTypeToBase, keys2) {
        const contextRaw = context.getContextRaw();
        for (const key of keys2 || Object.keys(contextRaw)) {
          if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {
            const keyValue = contextRaw[key];
            if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {
              if (key !== "@type" || typeof contextRaw[key] === "object" && !(contextRaw[key]["@protected"] || contextRaw[key]["@container"] === "@set")) {
                throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
              }
            }
            if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {
              throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);
            }
            if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue)) && keyValue["@prefix"] === true) {
              throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            while (Util_1.Util.isPrefixValue(contextRaw[key])) {
              const value = contextRaw[key];
              let changed = false;
              if (typeof value === "string") {
                contextRaw[key] = context.expandTerm(value, true);
                changed = changed || value !== contextRaw[key];
              } else {
                const id = value["@id"];
                const type = value["@type"];
                const canAddIdEntry = !("@prefix" in value) || Util_1.Util.isValidIri(key);
                if ("@id" in value) {
                  if (id !== void 0 && id !== null && typeof id === "string") {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": context.expandTerm(id, true) });
                    changed = changed || id !== contextRaw[key]["@id"];
                  }
                } else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {
                  const newId = context.expandTerm(key, true);
                  if (newId !== key) {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": newId });
                    changed = true;
                  }
                }
                if (type && typeof type === "string" && type !== "@vocab" && (!value["@container"] || !value["@container"]["@type"]) && canAddIdEntry) {
                  let expandedType = context.expandTerm(type, true);
                  if (expandContentTypeToBase && type === expandedType) {
                    expandedType = context.expandTerm(type, false);
                  }
                  if (expandedType !== type) {
                    changed = true;
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@type": expandedType });
                  }
                }
              }
              if (!changed) {
                break;
              }
            }
          }
        }
      }
      /**
       * Normalize the @language entries in the given context to lowercase.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} parseOptions The parsing options.
       */
      normalize(context, { processingMode, normalizeLanguageTags }) {
        if (normalizeLanguageTags || processingMode === 1) {
          for (const key of Object.keys(context)) {
            if (key === "@language" && typeof context[key] === "string") {
              context[key] = context[key].toLowerCase();
            } else {
              const value = context[key];
              if (value && typeof value === "object") {
                if (typeof value["@language"] === "string") {
                  const lowercase = value["@language"].toLowerCase();
                  if (lowercase !== value["@language"]) {
                    context[key] = Object.assign(Object.assign({}, value), { "@language": lowercase });
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Convert all @container strings and array values to hash-based values.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       */
      containersToHash(context) {
        for (const key of Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if (typeof value["@container"] === "string") {
              context[key] = Object.assign(Object.assign({}, value), { "@container": { [value["@container"]]: true } });
            } else if (Array.isArray(value["@container"])) {
              const newValue = {};
              for (const containerValue of value["@container"]) {
                newValue[containerValue] = true;
              }
              context[key] = Object.assign(Object.assign({}, value), { "@container": newValue });
            }
          }
        }
      }
      /**
       * Normalize and apply context-level @protected terms onto each term separately.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {number} processingMode The processing mode.
       */
      applyScopedProtected(context, { processingMode }, expandOptions) {
        if (processingMode && processingMode >= 1.1) {
          if (context["@protected"]) {
            for (const key of Object.keys(context)) {
              if (Util_1.Util.isReservedInternalKeyword(key)) {
                continue;
              }
              if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {
                const value = context[key];
                if (value && typeof value === "object") {
                  if (!("@protected" in context[key])) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@protected": true });
                  }
                } else {
                  context[key] = {
                    "@id": value,
                    "@protected": true
                  };
                  if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@prefix": true });
                  }
                }
              }
            }
            delete context["@protected"];
          }
        }
      }
      /**
       * Check if the given context inheritance does not contain any overrides of protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.
       * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.
       * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all
       * keys defined in contextAfter will be checked.
       */
      validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(contextAfter)) {
          if (Util_1.Util.isTermProtected(contextBefore, key)) {
            if (typeof contextAfter[key] === "string") {
              contextAfter[key] = { "@id": contextAfter[key], "@protected": true };
            } else {
              contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { "@protected": true });
            }
            if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {
              throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);
            }
          }
        }
      }
      /**
       * Validate the entries of the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options The parse options.
       */
      validate(context, { processingMode }) {
        for (const key of Object.keys(context)) {
          if (Util_1.Util.isReservedInternalKeyword(key)) {
            continue;
          }
          if (key === "") {
            throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
          }
          const value = context[key];
          const valueType = typeof value;
          if (Util_1.Util.isPotentialKeyword(key)) {
            switch (key.substr(1)) {
              case "vocab":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
                }
                break;
              case "base":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);
                }
                break;
              case "language":
                if (value !== null) {
                  _ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);
                }
                break;
              case "version":
                if (value !== null && valueType !== "number") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
                }
                break;
              case "direction":
                if (value !== null) {
                  _ContextParser.validateDirection(value, true);
                }
                break;
              case "propagate":
                if (processingMode === 1) {
                  throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
                }
                if (value !== null && valueType !== "boolean") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);
                }
                break;
            }
            if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {
              throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util.getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
            }
            continue;
          }
          if (value !== null) {
            switch (valueType) {
              case "string":
                if (Util_1.Util.getPrefix(value, context) === key) {
                  throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                }
                if (Util_1.Util.isValidIriWeak(key)) {
                  if (value === "@type") {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  } else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  }
                }
                break;
              case "object":
                if (!Util_1.Util.isCompactIri(key) && !("@id" in value) && (value["@type"] === "@id" ? !context["@base"] : !context["@vocab"])) {
                  throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                }
                for (const objectKey of Object.keys(value)) {
                  const objectValue = value[objectKey];
                  if (!objectValue) {
                    continue;
                  }
                  switch (objectKey) {
                    case "@id":
                      if (Util_1.Util.isValidKeyword(objectValue) && objectValue !== "@type" && objectValue !== "@id" && objectValue !== "@graph" && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.isValidIriWeak(key)) {
                        if (objectValue === "@type") {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        } else if (Util_1.Util.isValidIri(objectValue) && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        }
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.getPrefix(objectValue, context) === key) {
                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                      }
                      break;
                    case "@type":
                      if (value["@container"] === "@type" && objectValue !== "@id" && objectValue !== "@vocab") {
                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (objectValue !== "@id" && objectValue !== "@vocab" && (processingMode === 1 || objectValue !== "@json") && (processingMode === 1 || objectValue !== "@none") && (objectValue[0] === "_" || !Util_1.Util.isValidIri(objectValue))) {
                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      break;
                    case "@reverse":
                      if (typeof objectValue === "string" && value["@id"] && value["@id"] !== objectValue) {
                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':'${objectValue}' and '${value["@id"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      if ("@nest" in value) {
                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      break;
                    case "@container":
                      if (processingMode === 1) {
                        if (Object.keys(objectValue).length > 1 || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, must be only one of ${Util_1.Util.CONTAINERS_1_0.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      for (const containerValue of Object.keys(objectValue)) {
                        if (containerValue === "@list" && value["@reverse"]) {
                          throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                        }
                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), must be one of ${Util_1.Util.CONTAINERS.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      break;
                    case "@language":
                      _ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);
                      break;
                    case "@direction":
                      _ContextParser.validateDirection(objectValue, true);
                      break;
                    case "@prefix":
                      if (objectValue !== null && typeof objectValue !== "boolean") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);
                      }
                      if (!("@id" in value) && !Util_1.Util.isValidIri(key)) {
                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@index":
                      if (processingMode === 1 || !value["@container"] || !value["@container"]["@index"]) {
                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@nest":
                      if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);
                      }
                  }
                }
                break;
              default:
                throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
          }
        }
      }
      /**
       * Apply the @base context entry to the given context under certain circumstances.
       * @param context A context.
       * @param options Parsing options.
       * @param inheritFromParent If the @base value from the parent context can be inherited.
       * @return The given context.
       */
      applyBaseEntry(context, options, inheritFromParent) {
        if (typeof context === "string") {
          return context;
        }
        if (inheritFromParent && !("@base" in context) && options.parentContext && typeof options.parentContext === "object" && "@base" in options.parentContext) {
          context["@base"] = options.parentContext["@base"];
          if (options.parentContext["@__baseDocument"]) {
            context["@__baseDocument"] = true;
          }
        }
        if (options.baseIRI && !options.external) {
          if (!("@base" in context)) {
            context["@base"] = options.baseIRI;
            context["@__baseDocument"] = true;
          } else if (context["@base"] !== null && typeof context["@base"] === "string" && !Util_1.Util.isValidIri(context["@base"])) {
            context["@base"] = (0, relative_to_absolute_iri_1.resolve)(context["@base"], options.parentContext && options.parentContext["@base"] || options.baseIRI);
          }
        }
        return context;
      }
      /**
       * Resolve relative context IRIs, or return full IRIs as-is.
       * @param {string} contextIri A context IRI.
       * @param {string} baseIRI A base IRI.
       * @return {string} The normalized context IRI.
       */
      normalizeContextIri(contextIri, baseIRI) {
        if (!Util_1.Util.isValidIri(contextIri)) {
          try {
            contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);
          } catch (_a) {
            throw new Error(`Invalid context IRI: ${contextIri}`);
          }
        }
        if (this.redirectSchemaOrgHttps && contextIri.startsWith("http://schema.org")) {
          contextIri = "https://schema.org/";
        }
        return contextIri;
      }
      /**
       * Parse scoped contexts in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options Parsing options.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all
       * keys in the context will be iterated over.
       */
      async parseInnerContexts(context, options, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if ("@context" in value && value["@context"] !== null && !options.ignoreScopedContexts) {
              if (this.validateContext) {
                try {
                  const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });
                  delete parentContext[key]["@context"];
                  await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));
                } catch (e) {
                  throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);
                }
              }
              context[key] = Object.assign(Object.assign({}, value), { "@context": (await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context }))).getContextRaw() });
            }
          }
        }
        return context;
      }
      async parse(context, options = {}, internalOptions = {}) {
        const { baseIRI, parentContext, external, processingMode = _ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing } = options;
        const remoteContexts = options.remoteContexts || {};
        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {
          throw new ErrorCoded_1.ErrorCoded("Detected an overflow in remote context inclusions: " + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);
        }
        if (context === null || context === void 0) {
          if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {
            throw new ErrorCoded_1.ErrorCoded("Illegal context nullification when terms are protected", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);
          }
          return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));
        } else if (typeof context === "string") {
          const contextIri = this.normalizeContextIri(context, baseIRI);
          const overriddenLoad = this.getOverriddenLoad(contextIri, options);
          if (overriddenLoad) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);
          }
          const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));
          this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);
          return parsedStringContext;
        } else if (Array.isArray(context)) {
          const contextIris = [];
          const contexts = await Promise.all(context.map((subContext, i) => {
            if (typeof subContext === "string") {
              const contextIri = this.normalizeContextIri(subContext, baseIRI);
              contextIris[i] = contextIri;
              const overriddenLoad = this.getOverriddenLoad(contextIri, options);
              if (overriddenLoad) {
                return overriddenLoad;
              }
              return this.load(contextIri);
            } else {
              return subContext;
            }
          }));
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);
          }
          const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise.then((accContext) => this.parse(
            contextEntry,
            Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }),
            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers
            {
              skipValidation: i < contexts.length - 1
            }
          )), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));
          this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);
          return reducedContexts;
        } else if (typeof context === "object") {
          if ("@context" in context) {
            return await this.parse(context["@context"], options);
          }
          context = Object.assign({}, context);
          if (external) {
            delete context["@base"];
          }
          this.applyBaseEntry(context, options, true);
          this.containersToHash(context);
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);
          }
          let importContext = {};
          if ("@import" in context) {
            if (processingMode >= 1.1) {
              if (typeof context["@import"] !== "string") {
                throw new ErrorCoded_1.ErrorCoded("An @import value must be a string, but got " + typeof context["@import"], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);
              }
              importContext = await this.loadImportContext(this.normalizeContextIri(context["@import"], baseIRI));
              delete context["@import"];
            } else {
              throw new ErrorCoded_1.ErrorCoded("Context importing is not supported in JSON-LD 1.0", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
            }
          }
          this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const newContext = Object.assign(importContext, context);
          this.idifyReverseTerms(newContext);
          this.normalize(newContext, { processingMode, normalizeLanguageTags });
          this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const keys2 = Object.keys(newContext);
          const overlappingKeys = [];
          if (typeof parentContext === "object") {
            for (const key in parentContext) {
              if (key in newContext) {
                overlappingKeys.push(key);
              } else {
                newContext[key] = parentContext[key];
              }
            }
          }
          await this.parseInnerContexts(newContext, options, keys2);
          const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);
          if ((newContext && newContext["@version"] || _ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1 && (context["@vocab"] && typeof context["@vocab"] === "string" || context["@vocab"] === "")) {
            if (parentContext && "@vocab" in parentContext && context["@vocab"].indexOf(":") < 0) {
              newContext["@vocab"] = parentContext["@vocab"] + context["@vocab"];
            } else if (Util_1.Util.isCompactIri(context["@vocab"]) || context["@vocab"] in newContext) {
              newContext["@vocab"] = newContextWrapped.expandTerm(context["@vocab"], true);
            }
          }
          this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys2);
          if (!ignoreProtection && parentContext && processingMode >= 1.1) {
            this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);
          }
          if (this.validateContext && !internalOptions.skipValidation) {
            this.validate(newContext, { processingMode });
          }
          return newContextWrapped;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);
        }
      }
      /**
       * Fetch the given URL as a raw JSON-LD context.
       * @param url An URL.
       * @return A promise resolving to a raw JSON-LD context.
       */
      async load(url) {
        const cached = this.documentCache[url];
        if (cached) {
          return cached;
        }
        let document;
        try {
          document = await this.documentLoader.load(url);
        } catch (e) {
          throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);
        }
        if (!("@context" in document)) {
          throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        return this.documentCache[url] = document["@context"];
      }
      /**
       * Override the given context that may be loaded.
       *
       * This will check whether or not the url is recursively being loaded.
       * @param url An URL.
       * @param options Parsing options.
       * @return An overridden context, or null.
       *         Optionally an error can be thrown if a cyclic context is detected.
       */
      getOverriddenLoad(url, options) {
        if (url in (options.remoteContexts || {})) {
          if (options.ignoreRemoteScopedContexts) {
            return url;
          } else {
            throw new ErrorCoded_1.ErrorCoded("Detected a cyclic context inclusion of " + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);
          }
        }
        return null;
      }
      /**
       * Load an @import'ed context.
       * @param importContextIri The full URI of an @import value.
       */
      async loadImportContext(importContextIri) {
        let importContext = await this.load(importContextIri);
        if (typeof importContext !== "object" || Array.isArray(importContext)) {
          throw new ErrorCoded_1.ErrorCoded("An imported context must be a single object: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        if ("@import" in importContext) {
          throw new ErrorCoded_1.ErrorCoded("An imported context can not import another context: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
        }
        importContext = Object.assign({}, importContext);
        this.containersToHash(importContext);
        return importContext;
      }
    };
    ContextParser.DEFAULT_PROCESSING_MODE = 1.1;
    exports.ContextParser = ContextParser;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/IDocumentLoader.js
var require_IDocumentLoader3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/IDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/JsonLdContext.js
var require_JsonLdContext3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/lib/JsonLdContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/index.js
var require_jsonld_context_parser3 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/node_modules/jsonld-context-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ContextParser3(), exports);
    __exportStar(require_ErrorCoded3(), exports);
    __exportStar(require_FetchDocumentLoader3(), exports);
    __exportStar(require_IDocumentLoader3(), exports);
    __exportStar(require_JsonLdContext3(), exports);
    __exportStar(require_JsonLdContextNormalized3(), exports);
    __exportStar(require_Util7(), exports);
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js
var require_ContainerHandlerIdentifier = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerIdentifier = void 0;
    var ContainerHandlerIdentifier = class {
      canCombineWithGraph() {
        return true;
      }
      async handle(containers, parsingContext, util, keys2, value, depth) {
        let id;
        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {
          id = parsingContext.idStack[depth + 1][0];
        } else {
          const keyUnaliased = await util.getContainerKey(keys2[depth], keys2, depth);
          const maybeId = keyUnaliased !== null ? await util.resourceToTerm(await parsingContext.getContext(keys2), keys2[depth]) : util.dataFactory.blankNode();
          if (!maybeId) {
            parsingContext.emittedStack[depth] = false;
            return;
          }
          id = maybeId;
          parsingContext.idStack[depth + 1] = [id];
        }
        let ids = parsingContext.idStack[depth];
        if (!ids) {
          ids = parsingContext.idStack[depth] = [];
        }
        if (!ids.some((term) => term.equals(id))) {
          ids.push(id);
        }
        if (!await parsingContext.handlePendingContainerFlushBuffers()) {
          parsingContext.emittedStack[depth] = false;
        }
      }
    };
    exports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js
var require_EntryHandlerPredicate = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerPredicate = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var Util_1 = require_Util8();
    var EntryHandlerPredicate = class _EntryHandlerPredicate {
      /**
       * Handle the given predicate-object by either emitting it,
       * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {Util} util A utility instance.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth The current depth.
       * @param {Term} predicate The predicate.
       * @param {Term} object The object.
       * @param {boolean} reverse If the property is reversed.
       * @param {boolean} isEmbedded If the property exists in an embedded node as direct child.
       * @param {boolean} isAnnotation If the property exists in an annotation object.
       * @return {Promise<void>} A promise resolving when handling is done.
       */
      static async handlePredicateObject(parsingContext, util, keys2, depth, predicate, object, reverse3, isEmbedded, isAnnotation) {
        const depthProperties = await util.getPropertiesDepth(keys2, depth);
        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys2);
        const depthPropertiesGraph = depth - depthOffsetGraph;
        const subjects = parsingContext.idStack[depthProperties];
        if (subjects && !isAnnotation) {
          for (const subject of subjects) {
            const atGraph = depthOffsetGraph >= 0;
            if (atGraph) {
              const graphs = parsingContext.idStack[depthPropertiesGraph - 1];
              if (graphs) {
                for (const graph of graphs) {
                  util.emitQuadChecked(depth, subject, predicate, object, graph, reverse3, isEmbedded);
                }
              } else {
                if (reverse3) {
                  util.validateReverseSubject(object);
                  parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject, isEmbedded });
                } else {
                  parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject, predicate, object, isEmbedded });
                }
              }
            } else {
              const graph = await util.getGraphContainerValue(keys2, depthProperties);
              util.emitQuadChecked(depth, subject, predicate, object, graph, reverse3, isEmbedded);
            }
          }
        } else {
          if (reverse3) {
            util.validateReverseSubject(object);
          }
          if (isAnnotation) {
            if (parsingContext.rdfstar) {
              if (parsingContext.idStack[depth]) {
                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${parsingContext.idStack[depth][0].value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
              }
              for (let i = 0; i < depth; i++) {
                if (await util.unaliasKeyword(keys2[i], keys2, i) === "@id") {
                  parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
                }
              }
              const annotationsBuffer = parsingContext.getAnnotationsBufferSafe(depthProperties);
              const newAnnotation = { predicate, object, reverse: reverse3, nestedAnnotations: [], depth: depthProperties };
              annotationsBuffer.push(newAnnotation);
              for (let i = annotationsBuffer.length - 2; i >= 0; i--) {
                const existingAnnotation = annotationsBuffer[i];
                if (existingAnnotation.depth > depthProperties) {
                  newAnnotation.nestedAnnotations.push(existingAnnotation);
                  annotationsBuffer.splice(i, 1);
                }
              }
            }
          } else {
            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse: reverse3, isEmbedded });
          }
        }
      }
      isPropertyHandler() {
        return true;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        const key = keys2[depth];
        if (key) {
          const context = await parsingContext.getContext(keys2);
          if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys2[depth])) {
            if (Util_1.Util.getContextValueType(context, key) === "@json") {
              parsingContext.jsonLiteralStack[depth + 1] = true;
            }
            return true;
          }
        }
        return false;
      }
      async test(parsingContext, util, key, keys2, depth) {
        return keys2[depth];
      }
      async handle(parsingContext, util, key, keys2, value, depth, testResult) {
        const keyOriginal = keys2[depth];
        const context = await parsingContext.getContext(keys2);
        const predicate = await util.predicateToTerm(context, key);
        if (predicate) {
          const objects = await util.valueToTerm(context, key, value, depth, keys2);
          if (objects.length) {
            for (let object of objects) {
              let parentKey = await util.unaliasKeywordParent(keys2, depth);
              const reverse3 = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);
              let parentDepthOffset = 0;
              while (parentKey === "@reverse" || typeof parentKey === "number") {
                if (typeof parentKey === "number") {
                  parentDepthOffset++;
                } else {
                  depth--;
                }
                parentKey = await util.unaliasKeywordParent(keys2, depth - parentDepthOffset);
              }
              const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);
              util.validateReverseInEmbeddedNode(key, reverse3, isEmbedded);
              const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);
              if (value) {
                const listValueContainer = "@list" in Util_1.Util.getContextValueContainer(context, key);
                if (listValueContainer || value["@list"]) {
                  if ((listValueContainer && !Array.isArray(value) && !value["@list"] || value["@list"] && !Array.isArray(value["@list"])) && object !== util.rdfNil) {
                    const listPointer = util.dataFactory.blankNode();
                    parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));
                    parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));
                    object = listPointer;
                  }
                  if (reverse3 && !parsingContext.allowSubjectList) {
                    throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);
                  }
                }
              }
              await _EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys2, depth, predicate, object, reverse3, isEmbedded, isAnnotation);
            }
          }
        }
      }
    };
    exports.EntryHandlerPredicate = EntryHandlerPredicate;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js
var require_ContainerHandlerIndex = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerIndex = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var Util_1 = require_Util8();
    var ContainerHandlerIndex = class {
      canCombineWithGraph() {
        return true;
      }
      async handle(containers, parsingContext, util, keys2, value, depth) {
        if (!Array.isArray(value)) {
          const graphContainer = "@graph" in containers;
          const context = await parsingContext.getContext(keys2);
          const indexKey = keys2[depth - 1];
          const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);
          if (indexPropertyRaw) {
            if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {
              throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            if (typeof indexPropertyRaw !== "string") {
              throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            if (typeof value !== "object") {
              if (Util_1.Util.getContextValueType(context, indexKey) !== "@id") {
                throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
              }
              const id = util.resourceToTerm(context, value);
              if (id) {
                parsingContext.idStack[depth + 1] = [id];
              }
            }
            const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);
            if (indexProperty) {
              const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys2[depth], keys2, depth), depth, keys2);
              if (graphContainer) {
                const graphId = await util.getGraphContainerValue(keys2, depth + 1);
                for (const indexValue of indexValues) {
                  parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));
                }
              } else {
                for (const indexValue of indexValues) {
                  await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys2, depth + 1, indexProperty, indexValue, false, false, false);
                }
              }
            }
          }
          const depthOffset = graphContainer ? 2 : 1;
          await parsingContext.newOnValueJob(keys2.slice(0, keys2.length - depthOffset), value, depth - depthOffset, true);
          await parsingContext.handlePendingContainerFlushBuffers();
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerIndex = ContainerHandlerIndex;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js
var require_ContainerHandlerLanguage = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerLanguage = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var ContainerHandlerLanguage = class {
      canCombineWithGraph() {
        return false;
      }
      async handle(containers, parsingContext, util, keys2, value, depth) {
        const language = await util.getContainerKey(keys2[depth], keys2, depth);
        if (Array.isArray(value)) {
          value = value.map((subValue) => ({ "@value": subValue, "@language": language }));
        } else {
          if (typeof value !== "string") {
            throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);
          }
          value = { "@value": value, "@language": language };
        }
        await parsingContext.newOnValueJob(keys2.slice(0, keys2.length - 1), value, depth - 1, true);
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerLanguage = ContainerHandlerLanguage;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js
var require_ContainerHandlerType = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerType = void 0;
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var Util_1 = require_Util8();
    var ContainerHandlerType = class {
      canCombineWithGraph() {
        return false;
      }
      async handle(containers, parsingContext, util, keys2, value, depth) {
        if (!Array.isArray(value)) {
          if (typeof value === "string") {
            const context = await parsingContext.getContext(keys2);
            const containerTypeType = Util_1.Util.getContextValueType(context, keys2[depth - 1]);
            const id = containerTypeType === "@vocab" ? await util.createVocabOrBaseTerm(context, value) : await util.resourceToTerm(context, value);
            if (id) {
              const subValue = { "@id": id.termType === "NamedNode" ? id.value : value };
              await parsingContext.newOnValueJob(keys2.slice(0, keys2.length - 1), subValue, depth - 1, true);
              parsingContext.idStack[depth + 1] = [id];
            }
          } else {
            const entryHasIdentifier = !!parsingContext.idStack[depth + 1];
            if (!entryHasIdentifier) {
              delete parsingContext.idStack[depth];
            }
            await parsingContext.newOnValueJob(keys2.slice(0, keys2.length - 1), value, depth - 1, true);
            if (!entryHasIdentifier) {
              parsingContext.idStack[depth + 1] = parsingContext.idStack[depth];
            }
          }
          const keyOriginal = await util.getContainerKey(keys2[depth], keys2, depth);
          const type = keyOriginal !== null ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys2), keyOriginal) : null;
          if (type) {
            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys2, depth + 1, util.rdfType, type, false, false, false);
          }
          await parsingContext.handlePendingContainerFlushBuffers();
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerType = ContainerHandlerType;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js
var require_EntryHandlerContainer = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerContainer = void 0;
    var ContainerHandlerIdentifier_1 = require_ContainerHandlerIdentifier();
    var ContainerHandlerIndex_1 = require_ContainerHandlerIndex();
    var ContainerHandlerLanguage_1 = require_ContainerHandlerLanguage();
    var ContainerHandlerType_1 = require_ContainerHandlerType();
    var Util_1 = require_Util8();
    var EntryHandlerContainer = class _EntryHandlerContainer {
      /**
       * Check fit the given container is a simple @graph container.
       * Concretely, it will check if no @index or @id is active as well.
       * @param containers A container hash.
       */
      static isSimpleGraphContainer(containers) {
        return "@graph" in containers && ("@set" in containers && Object.keys(containers).length === 2 || Object.keys(containers).length === 1);
      }
      /**
       * Check fit the given container is a complex @graph container.
       * Concretely, it will check if @index or @id is active as well next to @graph.
       * @param containers A container hash.
       */
      static isComplexGraphContainer(containers) {
        return "@graph" in containers && ("@set" in containers && Object.keys(containers).length > 2 || !("@set" in containers) && Object.keys(containers).length > 1);
      }
      /**
       * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.
       * @param containers The applicable containers.
       * @param depth The container depth.
       * @param keys The array of keys.
       * @return The graph index.
       */
      static getContainerGraphIndex(containers, depth, keys2) {
        let isSimpleGraphContainer = _EntryHandlerContainer.isSimpleGraphContainer(containers);
        let index = "";
        for (let i = depth; i < keys2.length; i++) {
          if (!isSimpleGraphContainer || typeof keys2[i] === "number") {
            index += ":" + keys2[i];
          }
          if (!isSimpleGraphContainer && typeof keys2[i] !== "number") {
            isSimpleGraphContainer = true;
          }
        }
        return index;
      }
      /**
       * Return the applicable container type at the given depth.
       *
       * This will ignore any arrays in the key chain.
       *
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {any[]} keys The array of keys.
       * @param {number} depth The current depth.
       * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}
       *          All applicable containers for the given depth,
       *          the `depth` of the container root (can change when arrays are in the key chain),
       *          and the `fallback` flag that indicates if the default container type was returned
       *            (i.e., no dedicated container type is defined).
       */
      static async getContainerHandler(parsingContext, keys2, depth) {
        const fallback = {
          containers: { "@set": true },
          depth,
          fallback: true
        };
        let checkGraphContainer = false;
        const context = await parsingContext.getContext(keys2, 2);
        for (let i = depth - 1; i >= 0; i--) {
          if (typeof keys2[i] !== "number") {
            const containersSelf = Util_1.Util.getContextValue(context, "@container", keys2[i], false);
            if (containersSelf && _EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {
              return {
                containers: containersSelf,
                depth: i + 1,
                fallback: false
              };
            }
            const containersParent = Util_1.Util.getContextValue(context, "@container", keys2[i - 1], false);
            if (!containersParent) {
              if (checkGraphContainer) {
                return fallback;
              }
              checkGraphContainer = true;
            } else {
              const graphContainer = "@graph" in containersParent;
              for (const containerHandleName in _EntryHandlerContainer.CONTAINER_HANDLERS) {
                if (containersParent[containerHandleName]) {
                  if (graphContainer) {
                    if (_EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {
                      return {
                        containers: containersParent,
                        depth: i,
                        fallback: false
                      };
                    } else {
                      return fallback;
                    }
                  } else {
                    if (checkGraphContainer) {
                      return fallback;
                    } else {
                      return {
                        containers: containersParent,
                        depth: i,
                        fallback: false
                      };
                    }
                  }
                }
              }
              return fallback;
            }
          }
        }
        return fallback;
      }
      /**
       * Check if we are handling a value at the given depth
       * that is part of something that should be handled as a container,
       * AND if this container should be buffered, so that it can be handled by a dedicated container handler.
       *
       * For instance, any container with @graph will NOT be buffered.
       *
       * This will ignore any arrays in the key chain.
       *
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {any[]} keys The array of keys.
       * @param {number} depth The current depth.
       * @return {Promise<boolean>} If we are in the scope of a container handler.
       */
      static async isBufferableContainerHandler(parsingContext, keys2, depth) {
        const handler = await _EntryHandlerContainer.getContainerHandler(parsingContext, keys2, depth);
        return !handler.fallback && !("@graph" in handler.containers);
      }
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        return !!await this.test(parsingContext, util, null, keys2, depth);
      }
      async test(parsingContext, util, key, keys2, depth) {
        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys2, 2), keys2[depth - 1]);
        for (const containerName in _EntryHandlerContainer.CONTAINER_HANDLERS) {
          if (containers[containerName]) {
            return {
              containers,
              handler: _EntryHandlerContainer.CONTAINER_HANDLERS[containerName]
            };
          }
        }
        return null;
      }
      async handle(parsingContext, util, key, keys2, value, depth, testResult) {
        return testResult.handler.handle(testResult.containers, parsingContext, util, keys2, value, depth);
      }
    };
    EntryHandlerContainer.CONTAINER_HANDLERS = {
      "@id": new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),
      "@index": new ContainerHandlerIndex_1.ContainerHandlerIndex(),
      "@language": new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),
      "@type": new ContainerHandlerType_1.ContainerHandlerType()
    };
    exports.EntryHandlerContainer = EntryHandlerContainer;
  }
});

// ../../lipdjs/node_modules/canonicalize/lib/canonicalize.js
var require_canonicalize = __commonJS({
  "../../lipdjs/node_modules/canonicalize/lib/canonicalize.js"(exports, module) {
    "use strict";
    module.exports = function serialize(object) {
      if (object === null || typeof object !== "object" || object.toJSON != null) {
        return JSON.stringify(object);
      }
      if (Array.isArray(object)) {
        return "[" + object.reduce((t, cv, ci) => {
          const comma = ci === 0 ? "" : ",";
          const value = cv === void 0 || typeof cv === "symbol" ? null : cv;
          return t + comma + serialize(value);
        }, "") + "]";
      }
      return "{" + Object.keys(object).sort().reduce((t, cv, ci) => {
        if (object[cv] === void 0 || typeof object[cv] === "symbol") {
          return t;
        }
        const comma = t.length === 0 ? "" : ",";
        return t + comma + serialize(cv) + ":" + serialize(object[cv]);
      }, "") + "}";
    };
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/Util.js
var require_Util8 = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var EntryHandlerContainer_1 = require_EntryHandlerContainer();
    var canonicalizeJson = require_canonicalize();
    var Util = class _Util {
      constructor(options) {
        this.parsingContext = options.parsingContext;
        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();
        this.rdfFirst = this.dataFactory.namedNode(_Util.RDF + "first");
        this.rdfRest = this.dataFactory.namedNode(_Util.RDF + "rest");
        this.rdfNil = this.dataFactory.namedNode(_Util.RDF + "nil");
        this.rdfType = this.dataFactory.namedNode(_Util.RDF + "type");
        this.rdfJson = this.dataFactory.namedNode(_Util.RDF + "JSON");
      }
      /**
       * Helper function to get the value of a context entry,
       * or fallback to a certain value.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} contextKey A pre-defined JSON-LD key in context entries.
       * @param {string} key A context entry key.
       * @param {string} fallback A fallback value for when the given contextKey
       *                          could not be found in the value with the given key.
       * @return {string} The value of the given contextKey in the entry behind key in the given context,
       *                  or the given fallback value.
       */
      static getContextValue(context, contextKey, key, fallback) {
        const entry = context.getContextRaw()[key];
        if (!entry) {
          return fallback;
        }
        const type = entry[contextKey];
        return type === void 0 ? fallback : type;
      }
      /**
       * Get the container type of the given key in the context.
       *
       * Should any context-scoping bugs should occur related to this in the future,
       * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).
       * This is because containers act 2 levels deep.
       *
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The container type.
       */
      static getContextValueContainer(context, key) {
        return _Util.getContextValue(context, "@container", key, { "@set": true });
      }
      /**
       * Get the value type of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueType(context, key) {
        const valueType = _Util.getContextValue(context, "@type", key, null);
        if (valueType === "@none") {
          return null;
        }
        return valueType;
      }
      /**
       * Get the language of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueLanguage(context, key) {
        return _Util.getContextValue(context, "@language", key, context.getContextRaw()["@language"] || null);
      }
      /**
       * Get the direction of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueDirection(context, key) {
        return _Util.getContextValue(context, "@direction", key, context.getContextRaw()["@direction"] || null);
      }
      /**
       * Check if the given key in the context is a reversed property.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {boolean} If the context value has a @reverse key.
       */
      static isContextValueReverse(context, key) {
        return !!_Util.getContextValue(context, "@reverse", key, null);
      }
      /**
       * Get the @index of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The index.
       */
      static getContextValueIndex(context, key) {
        return _Util.getContextValue(context, "@index", key, context.getContextRaw()["@index"] || null);
      }
      /**
       * Check if the given key refers to a reversed property.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The property key.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property must be reversed.
       */
      static isPropertyReverse(context, key, parentKey) {
        return parentKey === "@reverse" !== _Util.isContextValueReverse(context, key);
      }
      /**
       * Check if the given key exists inside an embedded node as direct child.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property is embedded.
       */
      static isPropertyInEmbeddedNode(parentKey) {
        return parentKey === "@id";
      }
      /**
       * Check if the given key exists inside an annotation object as direct child.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property is an annotation.
       */
      static isPropertyInAnnotationObject(parentKey) {
        return parentKey === "@annotation";
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);
      }
      /**
       * Check if the given first array (needle) is a prefix of the given second array (haystack).
       * @param needle An array to check if it is a prefix.
       * @param haystack An array to look in.
       */
      static isPrefixArray(needle, haystack) {
        if (needle.length > haystack.length) {
          return false;
        }
        for (let i = 0; i < needle.length; i++) {
          if (needle[i] !== haystack[i]) {
            return false;
          }
        }
        return true;
      }
      /**
       * Make sure that @id-@index pairs are equal over all array values.
       * Reject otherwise.
       * @param {any[]} value An array value.
       * @return {Promise<void>} A promise rejecting if conflicts are present.
       */
      async validateValueIndexes(value) {
        if (this.parsingContext.validateValueIndexes) {
          const indexHashes = {};
          for (const entry of value) {
            if (entry && typeof entry === "object") {
              const id = entry["@id"];
              const index = entry["@index"];
              if (id && index) {
                const existingIndexValue = indexHashes[id];
                if (existingIndexValue && existingIndexValue !== index) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);
                }
                indexHashes[id] = index;
              }
            }
          }
        }
      }
      /**
       * Convert a given JSON value to an RDF term.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The current JSON key.
       * @param value A JSON value.
       * @param {number} depth The depth the value is at.
       * @param {string[]} keys The path of keys.
       * @return {Promise<RDF.Term[]>} An RDF term array.
       */
      async valueToTerm(context, key, value, depth, keys2) {
        if (_Util.getContextValueType(context, key) === "@json") {
          return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];
        }
        const type = typeof value;
        switch (type) {
          case "object":
            if (value === null || value === void 0) {
              return [];
            }
            if (Array.isArray(value)) {
              if ("@list" in _Util.getContextValueContainer(context, key)) {
                if (value.length === 0) {
                  return [this.rdfNil];
                } else {
                  return this.parsingContext.idStack[depth + 1] || [];
                }
              }
              await this.validateValueIndexes(value);
              return [];
            }
            context = await this.getContextSelfOrPropertyScoped(context, key);
            if ("@context" in value) {
              context = await this.parsingContext.parseContext(value["@context"], (await this.parsingContext.getContext(keys2, 0)).getContextRaw());
            }
            value = await this.unaliasKeywords(value, keys2, depth, context);
            if ("@value" in value) {
              let val;
              let valueLanguage;
              let valueDirection;
              let valueType;
              let valueIndex;
              for (key in value) {
                const subValue = value[key];
                switch (key) {
                  case "@value":
                    val = subValue;
                    break;
                  case "@language":
                    valueLanguage = subValue;
                    break;
                  case "@direction":
                    valueDirection = subValue;
                    break;
                  case "@type":
                    valueType = subValue;
                    break;
                  case "@index":
                    valueIndex = subValue;
                    break;
                  case "@annotation":
                    break;
                  default:
                    throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
              }
              if (await this.unaliasKeyword(valueType, keys2, depth, true, context) === "@json") {
                return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];
              }
              if (val === null) {
                return [];
              }
              if (typeof val === "object") {
                throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);
              }
              if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== "string") {
                throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);
              }
              if (valueLanguage) {
                if (typeof val !== "string") {
                  throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);
                }
                if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {
                  return [];
                }
                if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1) {
                  valueLanguage = valueLanguage.toLowerCase();
                }
              }
              if (valueDirection) {
                if (typeof val !== "string") {
                  throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);
                }
                if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {
                  return [];
                }
              }
              if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return this.nullableTermToArray(this.createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));
              } else if (valueLanguage) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return [this.dataFactory.literal(val, valueLanguage)];
              } else if (valueDirection && this.parsingContext.rdfDirection) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return this.nullableTermToArray(this.createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));
              } else if (valueType) {
                if (typeof valueType !== "string") {
                  throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                const typeTerm = this.createVocabOrBaseTerm(context, valueType);
                if (!typeTerm) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                if (typeTerm.termType !== "NamedNode") {
                  throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                return [this.dataFactory.literal(val, typeTerm)];
              }
              return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys2);
            } else if ("@set" in value) {
              if (Object.keys(value).length > 1) {
                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);
              }
              return [];
            } else if ("@list" in value) {
              if (Object.keys(value).length > 1) {
                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);
              }
              const listValue = value["@list"];
              if (Array.isArray(listValue)) {
                if (listValue.length === 0) {
                  return [this.rdfNil];
                } else {
                  return this.parsingContext.idStack[depth + 1] || [];
                }
              } else {
                return await this.valueToTerm(await this.parsingContext.getContext(keys2), key, listValue, depth - 1, keys2.slice(0, -1));
              }
            } else if ("@reverse" in value && typeof value["@reverse"] === "boolean") {
              return [];
            } else if ("@graph" in _Util.getContextValueContainer(await this.parsingContext.getContext(keys2), key)) {
              const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];
              return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];
            } else if ("@id" in value) {
              if (Object.keys(value).length > 1) {
                context = await this.parsingContext.getContext(keys2, 0);
              }
              if ("@context" in value) {
                context = await this.parsingContext.parseContext(value["@context"], context.getContextRaw());
              }
              if (value["@type"] === "@vocab") {
                return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value["@id"]));
              } else {
                const valueId = value["@id"];
                let valueTerm;
                if (typeof valueId === "object") {
                  if (this.parsingContext.rdfstar) {
                    valueTerm = this.parsingContext.idStack[depth + 1][0];
                  } else {
                    throw new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE);
                  }
                } else {
                  valueTerm = this.resourceToTerm(context, valueId);
                }
                return this.nullableTermToArray(valueTerm);
              }
            } else {
              if (this.parsingContext.emittedStack[depth + 1] || value && typeof value === "object" && Object.keys(value).length === 0) {
                return this.parsingContext.idStack[depth + 1] || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]);
              } else {
                return [];
              }
            }
          case "string":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));
          case "boolean":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(_Util.XSD_BOOLEAN)));
          case "number":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? _Util.XSD_INTEGER : _Util.XSD_DOUBLE)));
          default:
            this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));
            return [];
        }
      }
      /**
       * If the context defines a property-scoped context for the given key,
       * that context will be returned.
       * Otherwise, the given context will be returned as-is.
       *
       * This should be used for valueToTerm cases that are not objects.
       * @param context A context.
       * @param key A JSON key.
       */
      async getContextSelfOrPropertyScoped(context, key) {
        const contextKeyEntry = context.getContextRaw()[key];
        if (contextKeyEntry && typeof contextKeyEntry === "object" && "@context" in contextKeyEntry) {
          context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);
        }
        return context;
      }
      /**
       * If the given term is null, return an empty array, otherwise return an array with the single given term.
       * @param term A term.
       */
      nullableTermToArray(term) {
        return term ? [term] : [];
      }
      /**
       * Convert a given JSON key to an RDF predicate term,
       * based on @vocab.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node.
       */
      predicateToTerm(context, key) {
        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());
        if (!expanded) {
          return null;
        }
        if (expanded[0] === "_" && expanded[1] === ":") {
          if (this.parsingContext.produceGeneralizedRdf) {
            return this.dataFactory.blankNode(expanded.substr(2));
          } else {
            return null;
          }
        }
        if (_Util.isValidIri(expanded)) {
          return this.dataFactory.namedNode(expanded);
        } else {
          if (expanded && this.parsingContext.strictValues) {
            this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));
          } else {
            return null;
          }
        }
        return null;
      }
      /**
       * Convert a given JSON key to an RDF resource term or blank node,
       * based on @base.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node or null.
       */
      resourceToTerm(context, key) {
        if (key.startsWith("_:")) {
          return this.dataFactory.blankNode(key.substr(2));
        }
        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());
        if (!_Util.isValidIri(iri)) {
          if (iri && this.parsingContext.strictValues) {
            this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));
          } else {
            return null;
          }
        }
        return this.dataFactory.namedNode(iri);
      }
      /**
       * Convert a given JSON key to an RDF resource term.
       * It will do this based on the @vocab,
       * and fallback to @base.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node or null.
       */
      createVocabOrBaseTerm(context, key) {
        if (key.startsWith("_:")) {
          return this.dataFactory.blankNode(key.substr(2));
        }
        const expandOptions = this.parsingContext.getExpandOptions();
        let expanded = context.expandTerm(key, true, expandOptions);
        if (expanded === key) {
          expanded = context.expandTerm(key, false, expandOptions);
        }
        if (!_Util.isValidIri(expanded)) {
          if (expanded && this.parsingContext.strictValues && !expanded.startsWith("@")) {
            this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));
          } else {
            return null;
          }
        }
        return this.dataFactory.namedNode(expanded);
      }
      /**
       * Ensure that the given value becomes a string.
       * @param {string | number} value A string or number.
       * @param {NamedNode} datatype The intended datatype.
       * @return {string} The returned string.
       */
      intToString(value, datatype) {
        if (typeof value === "number") {
          if (Number.isFinite(value)) {
            const isInteger = value % 1 === 0;
            if (isInteger && (!datatype || datatype.value !== _Util.XSD_DOUBLE)) {
              return Number(value).toString();
            } else {
              return value.toExponential(15).replace(/(\d)0*e\+?/, "$1E");
            }
          } else {
            return value > 0 ? "INF" : "-INF";
          }
        } else {
          return value;
        }
      }
      /**
       * Convert a given JSON string value to an RDF term.
       * @param {number} depth The current stack depth.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The current JSON key.
       * @param {string} value A JSON value.
       * @param {NamedNode} defaultDatatype The default datatype for the given value.
       * @return {RDF.Term} An RDF term or null.
       */
      stringValueToTerm(depth, context, key, value, defaultDatatype) {
        const contextType = _Util.getContextValueType(context, key);
        if (contextType) {
          if (contextType === "@id") {
            if (!defaultDatatype) {
              return this.resourceToTerm(context, this.intToString(value, defaultDatatype));
            }
          } else if (contextType === "@vocab") {
            if (!defaultDatatype) {
              return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));
            }
          } else {
            defaultDatatype = this.dataFactory.namedNode(contextType);
          }
        }
        if (!defaultDatatype) {
          const contextLanguage = _Util.getContextValueLanguage(context, key);
          const contextDirection = _Util.getContextValueDirection(context, key);
          if (contextDirection && this.parsingContext.rdfDirection) {
            return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);
          } else {
            return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);
          }
        }
        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);
      }
      /**
       * Create a literal for the given value with the given language and direction.
       * Auxiliary quads may be emitted.
       * @param {number} depth The current stack depth.
       * @param {string} value A string value.
       * @param {string} language A language tag.
       * @param {string} direction A direction.
       * @return {Term} An RDF term.
       */
      createLanguageDirectionLiteral(depth, value, language, direction) {
        if (this.parsingContext.rdfDirection === "i18n-datatype") {
          if (!language) {
            language = "";
          }
          return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));
        } else {
          const valueNode = this.dataFactory.blankNode();
          const graph = this.getDefaultGraph();
          this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "value"), this.dataFactory.literal(value), graph));
          if (language) {
            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "language"), this.dataFactory.literal(language), graph));
          }
          this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "direction"), this.dataFactory.literal(direction), graph));
          return valueNode;
        }
      }
      /**
       * Stringify the given JSON object to a canonical JSON string.
       * @param value Any valid JSON value.
       * @return {string} A canonical JSON string.
       */
      valueToJsonString(value) {
        return canonicalizeJson(value);
      }
      /**
       * If the key is not a keyword, try to check if it is an alias for a keyword,
       * and if so, un-alias it.
       * @param {string} key A key, can be falsy.
       * @param {string[]} keys The path of keys.
       * @param {number} depth The depth to
       * @param {boolean} disableCache If the cache should be disabled
       * @param {JsonLdContextNormalized} context A context to unalias with,
       *                                           will fallback to retrieving the context for the given keys.
       * @return {Promise<string>} A promise resolving to the key itself, or another key.
       */
      async unaliasKeyword(key, keys2, depth, disableCache, context) {
        if (Number.isInteger(key)) {
          return key;
        }
        if (!disableCache) {
          const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];
          if (cachedUnaliasedKeyword) {
            return cachedUnaliasedKeyword;
          }
        }
        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {
          context = context || await this.parsingContext.getContext(keys2);
          let unliased = context.getContextRaw()[key];
          if (unliased && typeof unliased === "object") {
            unliased = unliased["@id"];
          }
          if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {
            key = unliased;
          }
        }
        return disableCache ? key : this.parsingContext.unaliasedKeywordCacheStack[depth] = key;
      }
      /**
       * Unalias the keyword of the parent.
       * This adds a safety check if no parent exist.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth The current depth.
       * @return {Promise<any>} A promise resolving to the parent key, or another key.
       */
      async unaliasKeywordParent(keys2, depth) {
        return await this.unaliasKeyword(depth > 0 && keys2[depth - 1], keys2, depth - 1);
      }
      /**
       * Un-alias all keywords in the given hash.
       * @param {{[p: string]: any}} hash A hash object.
       * @param {string[]} keys The path of keys.
       * @param {number} depth The depth.
       * @param {JsonLdContextNormalized} context A context to unalias with,
       *                                           will fallback to retrieving the context for the given keys.
       * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.
       */
      async unaliasKeywords(hash2, keys2, depth, context) {
        const newHash = {};
        for (const key in hash2) {
          newHash[await this.unaliasKeyword(key, keys2, depth + 1, true, context)] = hash2[key];
        }
        return newHash;
      }
      /**
       * Check if we are processing a literal (including JSON literals) at the given depth.
       * This will also check higher levels,
       * because if a parent is a literal,
       * then the deeper levels are definitely a literal as well.
       * @param {any[]} keys The keys.
       * @param {number} depth The depth.
       * @return {boolean} If we are processing a literal.
       */
      async isLiteral(keys2, depth) {
        for (let i = depth; i >= 0; i--) {
          if (await this.unaliasKeyword(keys2[i], keys2, i) === "@annotation") {
            return false;
          }
          if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check how many parents should be skipped for checking the @graph for the given node.
       *
       * @param {number} depth The depth of the node.
       * @param {any[]} keys An array of keys.
       * @return {number} The graph depth offset.
       */
      async getDepthOffsetGraph(depth, keys2) {
        for (let i = depth - 1; i > 0; i--) {
          if (await this.unaliasKeyword(keys2[i], keys2, i) === "@graph") {
            const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys2, i)).containers;
            if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {
              return -1;
            }
            return depth - i - 1;
          }
        }
        return -1;
      }
      /**
       * Check if the given subject is of a valid type.
       * This should be called when applying @reverse'd properties.
       * @param {Term} subject A subject.
       */
      validateReverseSubject(subject) {
        if (subject.termType === "Literal") {
          throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);
        }
      }
      /**
       * Get the default graph.
       * @return {Term} An RDF term.
       */
      getDefaultGraph() {
        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();
      }
      /**
       * Get the current graph, while taking into account a graph that can be defined via @container: @graph.
       * If not within a graph container, the default graph will be returned.
       * @param keys The current keys.
       * @param depth The current depth.
       */
      async getGraphContainerValue(keys2, depth) {
        let graph = this.getDefaultGraph();
        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys2, depth);
        if ("@graph" in containers) {
          const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys2);
          const entry = this.parsingContext.graphContainerTermStack[depthContainer];
          graph = entry ? entry[graphContainerIndex] : null;
          if (!graph) {
            let graphId = null;
            if ("@id" in containers) {
              const keyUnaliased = await this.getContainerKey(keys2[depthContainer], keys2, depthContainer);
              if (keyUnaliased !== null) {
                graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys2), keyUnaliased);
              }
            }
            if (!graphId) {
              graphId = this.dataFactory.blankNode();
            }
            if (!this.parsingContext.graphContainerTermStack[depthContainer]) {
              this.parsingContext.graphContainerTermStack[depthContainer] = {};
            }
            graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;
          }
        }
        return graph;
      }
      /**
       * Get the properties depth for retrieving properties.
       *
       * Typically, the properties depth will be identical to the given depth.
       *
       * The following exceptions apply:
       * * When the parent is @reverse, the depth is decremented by one.
       * * When @nest parents are found, the depth is decremented by the number of @nest parents.
       * If in combination with the exceptions above an intermediary array is discovered,
       * the depth is also decremented by this number of arrays.
       *
       * @param keys The current key chain.
       * @param depth The current depth.
       */
      async getPropertiesDepth(keys2, depth) {
        let lastValidDepth = depth;
        for (let i = depth - 1; i > 0; i--) {
          if (typeof keys2[i] !== "number") {
            const parentKey = await this.unaliasKeyword(keys2[i], keys2, i);
            if (parentKey === "@reverse") {
              return i;
            } else if (parentKey === "@nest") {
              lastValidDepth = i;
            } else {
              return lastValidDepth;
            }
          }
        }
        return lastValidDepth;
      }
      /**
       * Get the key for the current container entry.
       * @param key A key, can be falsy.
       * @param keys The key chain.
       * @param depth The current depth to get the key from.
       * @return Promise resolving to the key.
       *         Null will be returned for @none entries, with aliasing taken into account.
       */
      async getContainerKey(key, keys2, depth) {
        const keyUnaliased = await this.unaliasKeyword(key, keys2, depth);
        return keyUnaliased === "@none" ? null : keyUnaliased;
      }
      /**
       * Check if no reverse properties are present in embedded nodes.
       * @param key The current key.
       * @param reverse If a reverse property is active.
       * @param isEmbedded If we're in an embedded node.
       */
      validateReverseInEmbeddedNode(key, reverse3, isEmbedded) {
        if (isEmbedded && reverse3 && !this.parsingContext.rdfstarReverseInEmbedded) {
          throw new jsonld_context_parser_1.ErrorCoded(`Illegal reverse property in embedded node in ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);
        }
      }
      /**
       * Emit a quad, with checks.
       * @param depth The current depth.
       * @param subject S
       * @param predicate P
       * @param object O
       * @param graph G
       * @param reverse If a reverse property is active.
       * @param isEmbedded If we're in an embedded node.
       */
      emitQuadChecked(depth, subject, predicate, object, graph, reverse3, isEmbedded) {
        let quad;
        if (reverse3) {
          this.validateReverseSubject(object);
          quad = this.dataFactory.quad(object, predicate, subject, graph);
        } else {
          quad = this.dataFactory.quad(subject, predicate, object, graph);
        }
        if (isEmbedded) {
          if (quad.graph.termType !== "DefaultGraph") {
            quad = this.dataFactory.quad(quad.subject, quad.predicate, quad.object);
          }
          if (this.parsingContext.idStack[depth - 1]) {
            throw new jsonld_context_parser_1.ErrorCoded(`Illegal multiple properties in an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);
          }
          this.parsingContext.idStack[depth - 1] = [quad];
        } else {
          this.parsingContext.emitQuad(depth, quad);
        }
        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];
        if (annotationsBuffer) {
          for (const annotation of annotationsBuffer) {
            this.emitAnnotation(depth, quad, annotation);
          }
          delete this.parsingContext.annotationsBuffer[depth];
        }
      }
      // This is a separate function to enable recursion
      emitAnnotation(depth, quad, annotation) {
        let annotationQuad;
        if (annotation.reverse) {
          this.validateReverseSubject(annotation.object);
          annotationQuad = this.dataFactory.quad(annotation.object, annotation.predicate, quad);
        } else {
          annotationQuad = this.dataFactory.quad(quad, annotation.predicate, annotation.object);
        }
        this.parsingContext.emitQuad(depth, annotationQuad);
        for (const nestedAnnotation of annotation.nestedAnnotations) {
          this.emitAnnotation(depth, annotationQuad, nestedAnnotation);
        }
      }
    };
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.XSD_BOOLEAN = Util.XSD + "boolean";
    Util.XSD_INTEGER = Util.XSD + "integer";
    Util.XSD_DOUBLE = Util.XSD + "double";
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js
var require_EntryHandlerArrayValue = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerArrayValue = void 0;
    var Util_1 = require_Util8();
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerArrayValue = class {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        return this.test(parsingContext, util, null, keys2, depth);
      }
      async test(parsingContext, util, key, keys2, depth) {
        return typeof keys2[depth] === "number";
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        let parentKey = await util.unaliasKeywordParent(keys2, depth);
        if (parentKey === "@list") {
          let listRootKey = null;
          let listRootDepth = 0;
          for (let i = depth - 2; i > 0; i--) {
            const keyOption = keys2[i];
            if (typeof keyOption === "string" || typeof keyOption === "number") {
              listRootDepth = i;
              listRootKey = keyOption;
              break;
            }
          }
          if (listRootKey !== null) {
            const values2 = await util.valueToTerm(await parsingContext.getContext(keys2), listRootKey, value, depth, keys2);
            for (const object of values2) {
              await this.handleListElement(parsingContext, util, object, value, depth, keys2.slice(0, listRootDepth), listRootDepth);
            }
            if (values2.length === 0) {
              await this.handleListElement(parsingContext, util, null, value, depth, keys2.slice(0, listRootDepth), listRootDepth);
            }
          }
        } else if (parentKey === "@set") {
          await parsingContext.newOnValueJob(keys2.slice(0, -2), value, depth - 2, false);
        } else if (parentKey !== void 0 && parentKey !== "@type") {
          for (let i = depth - 1; i > 0; i--) {
            if (typeof keys2[i] !== "number") {
              parentKey = await util.unaliasKeyword(keys2[i], keys2, i);
              break;
            }
          }
          const parentContext = await parsingContext.getContext(keys2.slice(0, -1));
          if ("@list" in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {
            parsingContext.emittedStack[depth + 1] = true;
            const values2 = await util.valueToTerm(await parsingContext.getContext(keys2), parentKey, value, depth, keys2);
            for (const object of values2) {
              await this.handleListElement(parsingContext, util, object, value, depth, keys2.slice(0, -1), depth - 1);
            }
            if (values2.length === 0) {
              await this.handleListElement(parsingContext, util, null, value, depth, keys2.slice(0, -1), depth - 1);
            }
          } else {
            parsingContext.shiftStack(depth, 1);
            await parsingContext.newOnValueJob(keys2.slice(0, -1), value, depth - 1, false);
            parsingContext.contextTree.removeContext(keys2.slice(0, -1));
          }
        }
      }
      async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {
        let listPointer = parsingContext.listPointerStack[depth];
        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))["@value"] !== null) {
          if (!listPointer || !listPointer.value) {
            const linkTerm = util.dataFactory.blankNode();
            listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };
          } else {
            const newLinkTerm = util.dataFactory.blankNode();
            parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));
            listPointer.value = newLinkTerm;
          }
          if (value) {
            parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));
          }
        } else {
          if (!listPointer) {
            listPointer = { listRootDepth, listId: util.rdfNil };
          }
        }
        parsingContext.listPointerStack[depth] = listPointer;
        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside a list`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
        }
      }
    };
    exports.EntryHandlerArrayValue = EntryHandlerArrayValue;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js
var require_EntryHandlerInvalidFallback = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerInvalidFallback = void 0;
    var EntryHandlerInvalidFallback = class {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        return false;
      }
      async test(parsingContext, util, key, keys2, depth) {
        return true;
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js
var require_EntryHandlerKeyword = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeyword = void 0;
    var EntryHandlerKeyword = class {
      constructor(keyword) {
        this.keyword = keyword;
      }
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        return false;
      }
      async test(parsingContext, util, key, keys2, depth) {
        return key === this.keyword;
      }
    };
    exports.EntryHandlerKeyword = EntryHandlerKeyword;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js
var require_EntryHandlerKeywordContext = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordContext = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordContext = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@context");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        if (parsingContext.streamingProfile && (parsingContext.processingStack[depth] || parsingContext.processingType[depth] || parsingContext.idStack[depth] !== void 0)) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded("Found an out-of-order context, while streaming is enabled.(disable `streamingProfile`)", jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));
        }
        const parentContext = parsingContext.getContext(keys2);
        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());
        parsingContext.contextTree.setContext(keys2.slice(0, -1), context);
        parsingContext.emitContext(value);
        await parsingContext.validateContext(await context);
      }
    };
    exports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js
var require_EntryHandlerKeywordGraph = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordGraph = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordGraph = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@graph");
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        parsingContext.graphStack[depth + 1] = true;
      }
    };
    exports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js
var require_EntryHandlerKeywordId = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordId = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordId = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@id");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        if (typeof value !== "string") {
          if (parsingContext.rdfstar && typeof value === "object") {
            const valueKeys = Object.keys(value);
            if (valueKeys.length === 1 && valueKeys[0] === "@id") {
              parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid embedded node without property with @id ${value["@id"]}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE));
            }
          } else {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));
          }
          return;
        }
        const depthProperties = await util.getPropertiesDepth(keys2, depth);
        if (parsingContext.idStack[depthProperties] !== void 0) {
          if (parsingContext.idStack[depthProperties][0].listHead) {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys2[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));
          } else {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext.idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));
          }
        }
        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {
          for (const annotation of parsingContext.annotationsBuffer[depth]) {
            if (annotation.depth === depth) {
              parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
            }
          }
        }
        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys2), value));
      }
    };
    exports.EntryHandlerKeywordId = EntryHandlerKeywordId;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js
var require_EntryHandlerKeywordIncluded = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordIncluded = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordIncluded = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@included");
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        if (typeof value !== "object") {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        const valueUnliased = await util.unaliasKeywords(value, keys2, depth, await parsingContext.getContext(keys2));
        if ("@value" in valueUnliased) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        if ("@list" in valueUnliased) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js
var require_EntryHandlerKeywordNest = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordNest = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordNest = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@nest");
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        if (typeof value !== "object") {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));
        }
        if ("@value" in await util.unaliasKeywords(value, keys2, depth, await parsingContext.getContext(keys2))) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js
var require_EntryHandlerKeywordType = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordType = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var Util_1 = require_Util8();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordType = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@type");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        const keyOriginal = keys2[depth];
        const context = await parsingContext.getContext(keys2);
        const predicate = util.rdfType;
        const parentKey = await util.unaliasKeywordParent(keys2, depth);
        const reverse3 = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);
        const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);
        util.validateReverseInEmbeddedNode(key, reverse3, isEmbedded);
        const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);
        const elements = Array.isArray(value) ? value : [value];
        for (const element of elements) {
          if (typeof element !== "string") {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));
          }
          const type = util.createVocabOrBaseTerm(context, element);
          if (type) {
            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys2, depth, predicate, type, reverse3, isEmbedded, isAnnotation);
          }
        }
        let scopedContext = Promise.resolve(context);
        let hasTypedScopedContext = false;
        for (const element of elements.sort()) {
          const typeContext = Util_1.Util.getContextValue(context, "@context", element, null);
          if (typeContext) {
            hasTypedScopedContext = true;
            scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));
          }
        }
        if (parsingContext.streamingProfile && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType) && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded("Found an out-of-order type-scoped context, while streaming is enabled.(disable `streamingProfile`)", jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));
        }
        if (hasTypedScopedContext) {
          scopedContext = scopedContext.then((c) => {
            if (c.getContextRaw()["@propagate"] !== true) {
              return new jsonld_context_parser_1.JsonLdContextNormalized(Object.assign(Object.assign({}, c.getContextRaw()), { "@propagate": false, "@__propagateFallback": context.getContextRaw() }));
            }
            return c;
          });
          parsingContext.contextTree.setContext(keys2.slice(0, keys2.length - 1), scopedContext);
        }
        parsingContext.processingType[depth] = true;
      }
    };
    exports.EntryHandlerKeywordType = EntryHandlerKeywordType;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js
var require_EntryHandlerKeywordUnknownFallback = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordUnknownFallback = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeywordUnknownFallback = class _EntryHandlerKeywordUnknownFallback {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        const key = await util.unaliasKeyword(keys2[depth], keys2, depth);
        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {
          if (!inProperty) {
            if (key === "@list") {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      async test(parsingContext, util, key, keys2, depth) {
        return jsonld_context_parser_1.Util.isPotentialKeyword(key);
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        const keywordType = _EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];
        if (keywordType !== void 0) {
          if (keywordType && typeof value !== keywordType.type) {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));
          }
        } else if (parsingContext.strictValues) {
          parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {
      "@index": { type: "string", errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },
      "@list": null,
      "@reverse": { type: "object", errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },
      "@set": null,
      "@value": null
    };
    exports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js
var require_EntryHandlerKeywordValue = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordValue = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordValue = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@value");
      }
      async validate(parsingContext, util, keys2, depth, inProperty) {
        const key = keys2[depth];
        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys2, depth)) {
          parsingContext.literalStack[depth] = true;
        }
        return super.validate(parsingContext, util, keys2, depth, inProperty);
      }
      async test(parsingContext, util, key, keys2, depth) {
        return await util.unaliasKeyword(keys2[depth], keys2.slice(0, keys2.length - 1), depth - 1, true) === "@value";
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        parsingContext.literalStack[depth] = true;
        delete parsingContext.unidentifiedValuesBuffer[depth];
        delete parsingContext.unidentifiedGraphsBuffer[depth];
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/ContextTree.js
var require_ContextTree = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/ContextTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextTree = void 0;
    var ContextTree = class _ContextTree {
      constructor() {
        this.subTrees = {};
      }
      getContext(keys2) {
        if (keys2.length > 0) {
          const [head2, ...tail] = keys2;
          const subTree = this.subTrees[head2];
          if (subTree) {
            const subContext = subTree.getContext(tail);
            if (subContext) {
              return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));
            }
          }
        }
        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;
      }
      setContext(keys2, context) {
        if (keys2.length === 0) {
          this.context = context;
        } else {
          const [head2, ...tail] = keys2;
          let subTree = this.subTrees[head2];
          if (!subTree) {
            subTree = this.subTrees[head2] = new _ContextTree();
          }
          subTree.setContext(tail, context);
        }
      }
      removeContext(path) {
        this.setContext(path, null);
      }
    };
    exports.ContextTree = ContextTree;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/ParsingContext.js
var require_ParsingContext = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/ParsingContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsingContext = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var ErrorCoded_1 = require_ErrorCoded3();
    var ContextTree_1 = require_ContextTree();
    var JsonLdParser_1 = require_JsonLdParser();
    var ParsingContext = class _ParsingContext {
      constructor(options) {
        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });
        this.streamingProfile = !!options.streamingProfile;
        this.baseIRI = options.baseIRI;
        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;
        this.allowSubjectList = !!options.allowSubjectList;
        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;
        this.strictValues = !!options.strictValues;
        this.validateValueIndexes = !!options.validateValueIndexes;
        this.defaultGraph = options.defaultGraph;
        this.rdfDirection = options.rdfDirection;
        this.normalizeLanguageTags = options.normalizeLanguageTags;
        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;
        this.rdfstar = options.rdfstar !== false;
        this.rdfstarReverseInEmbedded = options.rdfstarReverseInEmbedded;
        this.topLevelProperties = false;
        this.activeProcessingMode = parseFloat(this.processingMode);
        this.processingStack = [];
        this.processingType = [];
        this.emittedStack = [];
        this.idStack = [];
        this.graphStack = [];
        this.graphContainerTermStack = [];
        this.listPointerStack = [];
        this.contextTree = new ContextTree_1.ContextTree();
        this.literalStack = [];
        this.validationStack = [];
        this.unaliasedKeywordCacheStack = [];
        this.jsonLiteralStack = [];
        this.unidentifiedValuesBuffer = [];
        this.unidentifiedGraphsBuffer = [];
        this.annotationsBuffer = [];
        this.pendingContainerFlushBuffers = [];
        this.parser = options.parser;
        if (options.context) {
          this.rootContext = this.parseContext(options.context);
          this.rootContext.then((context) => this.validateContext(context));
        } else {
          this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { "@base": this.baseIRI, "@__baseDocument": true } : {}));
        }
      }
      /**
       * Parse the given context with the configured options.
       * @param {JsonLdContext} context A context to parse.
       * @param {JsonLdContextNormalized} parentContext An optional parent context.
       * @param {boolean} ignoreProtection If @protected term checks should be ignored.
       * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.
       */
      async parseContext(context, parentContext, ignoreProtection) {
        return this.contextParser.parse(context, {
          baseIRI: this.baseIRI,
          ignoreProtection,
          normalizeLanguageTags: this.normalizeLanguageTags,
          parentContext,
          processingMode: this.activeProcessingMode
        });
      }
      /**
       * Check if the given context is valid.
       * If not, an error will be thrown.
       * @param {JsonLdContextNormalized} context A context.
       */
      validateContext(context) {
        const activeVersion = context.getContextRaw()["@version"];
        if (activeVersion) {
          if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);
          } else {
            if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {
              throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
            }
            this.activeProcessingMode = activeVersion;
          }
        }
      }
      /**
       * Get the context at the given path.
       * @param {keys} keys The path of keys to get the context at.
       * @param {number} offset The path offset, defaults to 1.
       * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.
       */
      async getContext(keys2, offset = 1) {
        const keysOriginal = keys2;
        while (typeof keys2[keys2.length - 1] === "number") {
          keys2 = keys2.slice(0, keys2.length - 1);
        }
        if (offset) {
          keys2 = keys2.slice(0, -offset);
        }
        const contextData = await this.getContextPropagationAware(keys2);
        const context = contextData.context;
        let contextRaw = context.getContextRaw();
        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {
          const key = keysOriginal[i];
          const contextKeyEntry = contextRaw[key];
          if (contextKeyEntry && typeof contextKeyEntry === "object" && "@context" in contextKeyEntry) {
            const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();
            const propagate = !(key in scopedContext) || scopedContext[key]["@context"]["@propagate"];
            if (propagate !== false || i === keysOriginal.length - 1 - offset) {
              contextRaw = Object.assign({}, scopedContext);
              delete contextRaw["@propagate"];
              contextRaw[key] = Object.assign({}, contextRaw[key]);
              if ("@id" in contextKeyEntry) {
                contextRaw[key]["@id"] = contextKeyEntry["@id"];
              }
              delete contextRaw[key]["@context"];
              if (propagate !== false) {
                this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));
              }
            }
          }
        }
        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);
      }
      /**
       * Get the context at the given path.
       * Non-propagating contexts will be skipped,
       * unless the context at that exact depth is retrieved.
       *
       * This ONLY takes into account context propagation logic,
       * so this should usually not be called directly,
       * call {@link #getContext} instead.
       *
       * @param keys The path of keys to get the context at.
       * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.
       */
      async getContextPropagationAware(keys2) {
        const originalDepth = keys2.length;
        let contextData = null;
        let hasApplicablePropertyScopedContext;
        do {
          hasApplicablePropertyScopedContext = false;
          if (contextData && "@__propagateFallback" in contextData.context.getContextRaw()) {
            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()["@__propagateFallback"]);
          } else {
            if (contextData) {
              keys2 = keys2.slice(0, contextData.depth - 1);
            }
            contextData = await this.contextTree.getContext(keys2) || { context: await this.rootContext, depth: 0 };
          }
          const lastKey = keys2[keys2.length - 1];
          if (lastKey in contextData.context.getContextRaw()) {
            const lastKeyValue = contextData.context.getContextRaw()[lastKey];
            if (lastKeyValue && typeof lastKeyValue === "object" && "@context" in lastKeyValue) {
              hasApplicablePropertyScopedContext = true;
            }
          }
        } while (contextData.depth > 0 && contextData.context.getContextRaw()["@propagate"] === false && contextData.depth !== originalDepth && !hasApplicablePropertyScopedContext);
        if (contextData.depth === 0 && contextData.context.getContextRaw()["@propagate"] === false && contextData.depth !== originalDepth) {
          contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});
        }
        return contextData;
      }
      /**
       * Start a new job for parsing the given value.
       * @param {any[]} keys The stack of keys.
       * @param value The value to parse.
       * @param {number} depth The depth to parse at.
       * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.
       * @return {Promise<void>} A promise resolving when the job is done.
       */
      async newOnValueJob(keys2, value, depth, lastDepthCheck) {
        await this.parser.newOnValueJob(keys2, value, depth, lastDepthCheck);
      }
      /**
       * Flush the pending container flush buffers
       * @return {boolean} If any pending buffers were flushed.
       */
      async handlePendingContainerFlushBuffers() {
        if (this.pendingContainerFlushBuffers.length > 0) {
          for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {
            await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);
            this.parser.flushStacks(pendingFlushBuffer.depth);
          }
          this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);
          return true;
        } else {
          return false;
        }
      }
      /**
       * Emit the given quad into the output stream.
       * @param {number} depth The depth the quad was generated at.
       * @param {Quad} quad A quad to emit.
       */
      emitQuad(depth, quad) {
        if (depth === 1) {
          this.topLevelProperties = true;
        }
        this.parser.push(quad);
      }
      /**
       * Emit the given error into the output stream.
       * @param {Error} error An error to emit.
       */
      emitError(error) {
        this.parser.emit("error", error);
      }
      /**
       * Emit the given context into the output stream under the 'context' event.
       * @param {JsonLdContext} context A context to emit.
       */
      emitContext(context) {
        this.parser.emit("context", context);
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.
       * @param {number} depth A depth.
       * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of
       *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.
       */
      getUnidentifiedValueBufferSafe(depth) {
        let buffer = this.unidentifiedValuesBuffer[depth];
        if (!buffer) {
          buffer = [];
          this.unidentifiedValuesBuffer[depth] = buffer;
        }
        return buffer;
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.
       * @param {number} depth A depth.
       * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of
       *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.
       */
      getUnidentifiedGraphBufferSafe(depth) {
        let buffer = this.unidentifiedGraphsBuffer[depth];
        if (!buffer) {
          buffer = [];
          this.unidentifiedGraphsBuffer[depth] = buffer;
        }
        return buffer;
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.annotationsBuffer}.
       * @param {number} depth A depth.
       * @return {} An element of {@link ParsingContext.annotationsBuffer}.
       */
      getAnnotationsBufferSafe(depth) {
        let buffer = this.annotationsBuffer[depth];
        if (!buffer) {
          buffer = [];
          this.annotationsBuffer[depth] = buffer;
        }
        return buffer;
      }
      /**
       * @return IExpandOptions The expand options for the active processing mode.
       */
      getExpandOptions() {
        return _ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];
      }
      /**
       * Shift the stack at the given offset to the given depth.
       *
       * This will override anything in the stack at `depth`,
       * and this will remove anything at `depth + depthOffset`
       *
       * @param depth The target depth.
       * @param depthOffset The origin depth, relative to `depth`.
       */
      shiftStack(depth, depthOffset) {
        const deeperIdStack = this.idStack[depth + depthOffset];
        if (deeperIdStack) {
          this.idStack[depth] = deeperIdStack;
          this.emittedStack[depth] = true;
          delete this.idStack[depth + depthOffset];
        }
        if (this.pendingContainerFlushBuffers.length) {
          for (const buffer of this.pendingContainerFlushBuffers) {
            if (buffer.depth >= depth + depthOffset) {
              buffer.depth -= depthOffset;
              buffer.keys.splice(depth, depthOffset);
            }
          }
        }
        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {
          this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];
          delete this.unidentifiedValuesBuffer[depth + depthOffset];
        }
        if (this.annotationsBuffer[depth + depthOffset - 1]) {
          if (!this.annotationsBuffer[depth - 1]) {
            this.annotationsBuffer[depth - 1] = [];
          }
          this.annotationsBuffer[depth - 1] = [
            ...this.annotationsBuffer[depth - 1],
            ...this.annotationsBuffer[depth + depthOffset - 1]
          ];
          delete this.annotationsBuffer[depth + depthOffset - 1];
        }
      }
    };
    ParsingContext.EXPAND_OPTIONS = {
      1: {
        allowPrefixForcing: false,
        allowPrefixNonGenDelims: false,
        allowVocabRelativeToBase: false
      },
      1.1: {
        allowPrefixForcing: true,
        allowPrefixNonGenDelims: false,
        allowVocabRelativeToBase: true
      }
    };
    exports.ParsingContext = ParsingContext;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js
var require_EntryHandlerKeywordAnnotation = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordAnnotation = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var EntryHandlerKeywordAnnotation = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@annotation");
      }
      async handle(parsingContext, util, key, keys2, value, depth) {
        if (typeof value === "string" || typeof value === "object" && value["@value"]) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal annotation value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
        }
      }
    };
    exports.EntryHandlerKeywordAnnotation = EntryHandlerKeywordAnnotation;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/lib/JsonLdParser.js
var require_JsonLdParser = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/lib/JsonLdParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonLdParser = void 0;
    var Parser2 = require_jsonparse();
    var jsonld_context_parser_1 = require_jsonld_context_parser3();
    var readable_stream_1 = require_browser2();
    var EntryHandlerArrayValue_1 = require_EntryHandlerArrayValue();
    var EntryHandlerContainer_1 = require_EntryHandlerContainer();
    var EntryHandlerInvalidFallback_1 = require_EntryHandlerInvalidFallback();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var EntryHandlerKeywordContext_1 = require_EntryHandlerKeywordContext();
    var EntryHandlerKeywordGraph_1 = require_EntryHandlerKeywordGraph();
    var EntryHandlerKeywordId_1 = require_EntryHandlerKeywordId();
    var EntryHandlerKeywordIncluded_1 = require_EntryHandlerKeywordIncluded();
    var EntryHandlerKeywordNest_1 = require_EntryHandlerKeywordNest();
    var EntryHandlerKeywordType_1 = require_EntryHandlerKeywordType();
    var EntryHandlerKeywordUnknownFallback_1 = require_EntryHandlerKeywordUnknownFallback();
    var EntryHandlerKeywordValue_1 = require_EntryHandlerKeywordValue();
    var ParsingContext_1 = require_ParsingContext();
    var Util_1 = require_Util8();
    var http_link_header_1 = require_link();
    var EntryHandlerKeywordAnnotation_1 = require_EntryHandlerKeywordAnnotation();
    var JsonLdParser = class _JsonLdParser extends readable_stream_1.Transform {
      constructor(options) {
        super({ readableObjectMode: true });
        options = options || {};
        this.options = options;
        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));
        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });
        this.jsonParser = new Parser2();
        this.contextJobs = [];
        this.typeJobs = [];
        this.contextAwaitingJobs = [];
        this.lastDepth = 0;
        this.lastKeys = [];
        this.lastOnValueJob = Promise.resolve();
        this.attachJsonParserListeners();
        this.on("end", () => {
          if (typeof this.jsonParser.mode !== "undefined") {
            this.emit("error", new Error("Unclosed document"));
          }
        });
      }
      /**
       * Construct a JsonLdParser from the given HTTP response.
       *
       * This will throw an error if no valid JSON response is received
       * (application/ld+json, application/json, or something+json).
       *
       * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.
       *
       * This method is not responsible for handling redirects.
       *
       * @param baseIRI The URI of the received response.
       * @param mediaType The received content type.
       * @param headers Optional HTTP headers.
       * @param options Optional parser options.
       */
      static fromHttpResponse(baseIRI, mediaType, headers, options) {
        let context;
        let wellKnownMediaTypes = ["application/activity+json"];
        if (options && options.wellKnownMediaTypes) {
          wellKnownMediaTypes = options.wellKnownMediaTypes;
        }
        if (mediaType !== "application/ld+json" && !wellKnownMediaTypes.includes(mediaType)) {
          if (mediaType !== "application/json" && !mediaType.endsWith("+json")) {
            throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
          if (headers && headers.has("Link")) {
            headers.forEach((value, key) => {
              if (key === "link") {
                const linkHeader = (0, http_link_header_1.parse)(value);
                for (const link of linkHeader.get("rel", "http://www.w3.org/ns/json-ld#context")) {
                  if (context) {
                    throw new jsonld_context_parser_1.ErrorCoded("Multiple JSON-LD context link headers were found on " + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);
                  }
                  context = link.uri;
                }
              }
            });
          }
          if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {
            throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        }
        let streamingProfile;
        if (headers && headers.has("Content-Type")) {
          const contentType = headers.get("Content-Type");
          const match = /; *profile=([^"]*)/.exec(contentType);
          if (match && match[1] === "http://www.w3.org/ns/json-ld#streaming") {
            streamingProfile = true;
          }
        }
        return new _JsonLdParser(Object.assign({
          baseIRI,
          context,
          streamingProfile
        }, options ? options : {}));
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        if ("pipe" in stream) {
          stream.on("error", (error) => parsed.emit("error", error));
          const parsed = stream.pipe(new _JsonLdParser(this.options));
          return parsed;
        } else {
          const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
          stream.on("error", (error) => parsed.emit("error", error));
          stream.on("data", (data) => output.push(data));
          stream.on("end", () => output.push(null));
          const parsed = output.pipe(new _JsonLdParser(this.options));
          return parsed;
        }
      }
      _transform(chunk, encoding, callback) {
        this.jsonParser.write(chunk);
        this.lastOnValueJob.then(() => callback(), (error) => callback(error));
      }
      /**
       * Start a new job for parsing the given value.
       *
       * This will let the first valid {@link IEntryHandler} handle the entry.
       *
       * @param {any[]} keys The stack of keys.
       * @param value The value to parse.
       * @param {number} depth The depth to parse at.
       * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.
       * @return {Promise<void>} A promise resolving when the job is done.
       */
      async newOnValueJob(keys2, value, depth, lastDepthCheck) {
        let flushStacks = true;
        if (lastDepthCheck && depth < this.lastDepth) {
          const listPointer = this.parsingContext.listPointerStack[this.lastDepth];
          if (listPointer) {
            if (listPointer.value) {
              this.push(this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));
            }
            listPointer.listId.listHead = true;
            this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];
            this.parsingContext.listPointerStack.splice(this.lastDepth, 1);
          }
          if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {
            this.parsingContext.pendingContainerFlushBuffers.push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });
            flushStacks = false;
          } else {
            await this.flushBuffer(this.lastDepth, this.lastKeys);
          }
        }
        const key = await this.util.unaliasKeyword(keys2[depth], keys2, depth);
        const parentKey = await this.util.unaliasKeywordParent(keys2, depth);
        this.parsingContext.emittedStack[depth] = true;
        let handleKey = true;
        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === "@reverse" && key !== "@context") {
          this.emit("error", new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));
        }
        let inProperty = false;
        if (this.parsingContext.validationStack.length > 1) {
          inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;
        }
        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys2.length - 1; i++) {
          const validationResult = this.parsingContext.validationStack[i] || (this.parsingContext.validationStack[i] = await this.validateKey(keys2.slice(0, i + 1), i, inProperty));
          if (!validationResult.valid) {
            this.parsingContext.emittedStack[depth] = false;
            handleKey = false;
            break;
          } else if (!inProperty && validationResult.property) {
            inProperty = true;
          }
        }
        if (await this.util.isLiteral(keys2, depth)) {
          handleKey = false;
        }
        if (handleKey) {
          for (const entryHandler of _JsonLdParser.ENTRY_HANDLERS) {
            const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys2, depth);
            if (testResult) {
              await entryHandler.handle(this.parsingContext, this.util, key, keys2, value, depth, testResult);
              if (entryHandler.isStackProcessor()) {
                this.parsingContext.processingStack[depth] = true;
              }
              break;
            }
          }
        }
        if (depth === 0 && Array.isArray(value)) {
          await this.util.validateValueIndexes(value);
        }
        if (flushStacks && depth < this.lastDepth) {
          this.flushStacks(this.lastDepth);
        }
        this.lastDepth = depth;
        this.lastKeys = keys2;
        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);
      }
      /**
       * Flush the processing stacks at the given depth.
       * @param {number} depth A depth.
       */
      flushStacks(depth) {
        this.parsingContext.processingStack.splice(depth, 1);
        this.parsingContext.processingType.splice(depth, 1);
        this.parsingContext.emittedStack.splice(depth, 1);
        this.parsingContext.idStack.splice(depth, 1);
        this.parsingContext.graphStack.splice(depth + 1, 1);
        this.parsingContext.graphContainerTermStack.splice(depth, 1);
        this.parsingContext.jsonLiteralStack.splice(depth, 1);
        this.parsingContext.validationStack.splice(depth - 1, 2);
        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);
        this.parsingContext.annotationsBuffer.splice(depth, 1);
      }
      /**
       * Flush buffers for the given depth.
       *
       * This should be called after the last entry at a given depth was processed.
       *
       * @param {number} depth A depth.
       * @param {any[]} keys A stack of keys.
       * @return {Promise<void>} A promise resolving if flushing is done.
       */
      async flushBuffer(depth, keys2) {
        let subjects = this.parsingContext.idStack[depth];
        const subjectsWasDefined = !!subjects;
        if (!subjectsWasDefined) {
          subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];
        }
        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];
        if (valueBuffer) {
          for (const subject of subjects) {
            const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys2);
            const graphs = this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0 ? this.parsingContext.idStack[depth - depthOffsetGraph - 1] : [await this.util.getGraphContainerValue(keys2, depth)];
            if (graphs) {
              for (const graph of graphs) {
                this.parsingContext.emittedStack[depth] = true;
                for (const bufferedValue of valueBuffer) {
                  this.util.emitQuadChecked(depth, subject, bufferedValue.predicate, bufferedValue.object, graph, bufferedValue.reverse, bufferedValue.isEmbedded);
                }
              }
            } else {
              const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys2) - 1);
              for (const bufferedValue of valueBuffer) {
                if (bufferedValue.reverse) {
                  subGraphBuffer.push({
                    object: subject,
                    predicate: bufferedValue.predicate,
                    subject: bufferedValue.object,
                    isEmbedded: bufferedValue.isEmbedded
                  });
                } else {
                  subGraphBuffer.push({
                    object: bufferedValue.object,
                    predicate: bufferedValue.predicate,
                    subject,
                    isEmbedded: bufferedValue.isEmbedded
                  });
                }
              }
            }
          }
          this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);
          this.parsingContext.literalStack.splice(depth, 1);
          this.parsingContext.jsonLiteralStack.splice(depth, 1);
        }
        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];
        if (graphBuffer) {
          for (const subject of subjects) {
            const graph = depth === 1 && subject.termType === "BlankNode" && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;
            this.parsingContext.emittedStack[depth] = true;
            for (const bufferedValue of graphBuffer) {
              this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));
            }
          }
          this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);
        }
        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];
        if (annotationsBuffer) {
          if (annotationsBuffer.length > 0 && depth === 1) {
            this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Annotations can not be made on top-level nodes`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
          }
          const annotationsBufferParent = this.parsingContext.getAnnotationsBufferSafe(depth - 1);
          for (const annotation of annotationsBuffer) {
            annotationsBufferParent.push(annotation);
          }
          delete this.parsingContext.annotationsBuffer[depth];
        }
      }
      /**
       * Check if at least one {@link IEntryHandler} validates the entry to true.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth A depth.
       * @param {boolean} inProperty If the current depth is part of a valid property node.
       * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.
       */
      async validateKey(keys2, depth, inProperty) {
        for (const entryHandler of _JsonLdParser.ENTRY_HANDLERS) {
          if (await entryHandler.validate(this.parsingContext, this.util, keys2, depth, inProperty)) {
            return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };
          }
        }
        return { valid: false, property: false };
      }
      /**
       * Attach all required listeners to the JSON parser.
       *
       * This should only be called once.
       */
      attachJsonParserListeners() {
        this.jsonParser.onValue = (value) => {
          const depth = this.jsonParser.stack.length;
          const keys2 = new Array(depth + 1).fill(0).map((v, i) => {
            return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;
          });
          if (!this.isParsingContextInner(depth)) {
            const valueJobCb = () => this.newOnValueJob(keys2, value, depth, true);
            if (!this.parsingContext.streamingProfile && !this.parsingContext.contextTree.getContext(keys2.slice(0, -1))) {
              if (keys2[depth] === "@context") {
                let jobs = this.contextJobs[depth];
                if (!jobs) {
                  jobs = this.contextJobs[depth] = [];
                }
                jobs.push(valueJobCb);
              } else {
                this.contextAwaitingJobs.push({ job: valueJobCb, keys: keys2, depth });
              }
            } else {
              this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);
            }
            if (!this.parsingContext.streamingProfile && depth === 0) {
              this.lastOnValueJob = this.lastOnValueJob.then(() => this.executeBufferedJobs());
            }
          }
        };
        this.jsonParser.onError = (error) => {
          this.emit("error", error);
        };
      }
      /**
       * Check if the parser is currently parsing an element that is part of an @context entry.
       * @param {number} depth A depth.
       * @return {boolean} A boolean.
       */
      isParsingContextInner(depth) {
        for (let i = depth; i > 0; i--) {
          if (this.jsonParser.stack[i - 1].key === "@context") {
            return true;
          }
        }
        return false;
      }
      /**
       * Execute all buffered jobs.
       * @return {Promise<void>} A promise resolving if all jobs are finished.
       */
      async executeBufferedJobs() {
        for (const jobs of this.contextJobs) {
          if (jobs) {
            for (const job of jobs) {
              await job();
            }
          }
        }
        this.parsingContext.unaliasedKeywordCacheStack.splice(0);
        const contextAwaitingJobs = [];
        for (const job of this.contextAwaitingJobs) {
          if (await this.util.unaliasKeyword(job.keys[job.depth], job.keys, job.depth, true) === "@type" || typeof job.keys[job.depth] === "number" && await this.util.unaliasKeyword(job.keys[job.depth - 1], job.keys, job.depth - 1, true) === "@type") {
            this.typeJobs.push({ job: job.job, keys: job.keys.slice(0, job.keys.length - 1) });
          } else {
            contextAwaitingJobs.push(job);
          }
        }
        for (const job of contextAwaitingJobs) {
          if (this.typeJobs.length > 0) {
            const applicableTypeJobs = [];
            const applicableTypeJobIds = [];
            for (let i = 0; i < this.typeJobs.length; i++) {
              const typeJob = this.typeJobs[i];
              if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {
                applicableTypeJobs.push(typeJob);
                applicableTypeJobIds.push(i);
              }
            }
            const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);
            for (const typeJob of sortedTypeJobs) {
              await typeJob.job();
            }
            const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();
            for (const jobId of sortedApplicableTypeJobIds) {
              this.typeJobs.splice(jobId, 1);
            }
          }
          await job.job();
        }
      }
    };
    JsonLdParser.DEFAULT_PROCESSING_MODE = "1.1";
    JsonLdParser.ENTRY_HANDLERS = [
      new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),
      new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),
      new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),
      new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),
      new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),
      new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),
      new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),
      new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),
      new EntryHandlerKeywordAnnotation_1.EntryHandlerKeywordAnnotation(),
      new EntryHandlerContainer_1.EntryHandlerContainer(),
      new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),
      new EntryHandlerPredicate_1.EntryHandlerPredicate(),
      new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback()
    ];
    exports.JsonLdParser = JsonLdParser;
  }
});

// ../../lipdjs/node_modules/jsonld-streaming-parser/index.js
var require_jsonld_streaming_parser = __commonJS({
  "../../lipdjs/node_modules/jsonld-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_JsonLdParser(), exports);
  }
});

// ../../lipdjs/node_modules/cross-fetch/dist/browser-polyfill.js
var require_browser_polyfill = __commonJS({
  "../../lipdjs/node_modules/cross-fetch/dist/browser-polyfill.js"(exports) {
    (function(self2) {
      var irrelevant = function(exports2) {
        var g = typeof globalThis !== "undefined" && globalThis || typeof self2 !== "undefined" && self2 || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g,
          iterable: "Symbol" in g && "iterator" in Symbol,
          blob: "FileReader" in g && "Blob" in g && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g,
          arrayBuffer: "ArrayBuffer" in g
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g.location.href ? g.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g.Headers && init.headers instanceof g.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g.fetch) {
          g.fetch = fetch2;
          g.Headers = Headers2;
          g.Request = Request2;
          g.Response = Response;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request2;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(typeof self !== "undefined" ? self : exports);
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/ErrorCoded.js
var require_ErrorCoded4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/ErrorCoded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_CODES = exports.ErrorCoded = void 0;
    var ErrorCoded = class extends Error {
      /* istanbul ignore next */
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports.ErrorCoded = ErrorCoded;
    var ERROR_CODES;
    (function(ERROR_CODES2) {
      ERROR_CODES2["COLLIDING_KEYWORDS"] = "colliding keywords";
      ERROR_CODES2["CONFLICTING_INDEXES"] = "conflicting indexes";
      ERROR_CODES2["CYCLIC_IRI_MAPPING"] = "cyclic IRI mapping";
      ERROR_CODES2["INVALID_ID_VALUE"] = "invalid @id value";
      ERROR_CODES2["INVALID_INDEX_VALUE"] = "invalid @index value";
      ERROR_CODES2["INVALID_NEST_VALUE"] = "invalid @nest value";
      ERROR_CODES2["INVALID_PREFIX_VALUE"] = "invalid @prefix value";
      ERROR_CODES2["INVALID_PROPAGATE_VALUE"] = "invalid @propagate value";
      ERROR_CODES2["INVALID_REVERSE_VALUE"] = "invalid @reverse value";
      ERROR_CODES2["INVALID_IMPORT_VALUE"] = "invalid @import value";
      ERROR_CODES2["INVALID_VERSION_VALUE"] = "invalid @version value";
      ERROR_CODES2["INVALID_BASE_IRI"] = "invalid base IRI";
      ERROR_CODES2["INVALID_CONTAINER_MAPPING"] = "invalid container mapping";
      ERROR_CODES2["INVALID_CONTEXT_ENTRY"] = "invalid context entry";
      ERROR_CODES2["INVALID_CONTEXT_NULLIFICATION"] = "invalid context nullification";
      ERROR_CODES2["INVALID_DEFAULT_LANGUAGE"] = "invalid default language";
      ERROR_CODES2["INVALID_INCLUDED_VALUE"] = "invalid @included value";
      ERROR_CODES2["INVALID_IRI_MAPPING"] = "invalid IRI mapping";
      ERROR_CODES2["INVALID_JSON_LITERAL"] = "invalid JSON literal";
      ERROR_CODES2["INVALID_KEYWORD_ALIAS"] = "invalid keyword alias";
      ERROR_CODES2["INVALID_LANGUAGE_MAP_VALUE"] = "invalid language map value";
      ERROR_CODES2["INVALID_LANGUAGE_MAPPING"] = "invalid language mapping";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_STRING"] = "invalid language-tagged string";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_VALUE"] = "invalid language-tagged value";
      ERROR_CODES2["INVALID_LOCAL_CONTEXT"] = "invalid local context";
      ERROR_CODES2["INVALID_REMOTE_CONTEXT"] = "invalid remote context";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY"] = "invalid reverse property";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_MAP"] = "invalid reverse property map";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_VALUE"] = "invalid reverse property value";
      ERROR_CODES2["INVALID_SCOPED_CONTEXT"] = "invalid scoped context";
      ERROR_CODES2["INVALID_SCRIPT_ELEMENT"] = "invalid script element";
      ERROR_CODES2["INVALID_SET_OR_LIST_OBJECT"] = "invalid set or list object";
      ERROR_CODES2["INVALID_TERM_DEFINITION"] = "invalid term definition";
      ERROR_CODES2["INVALID_TYPE_MAPPING"] = "invalid type mapping";
      ERROR_CODES2["INVALID_TYPE_VALUE"] = "invalid type value";
      ERROR_CODES2["INVALID_TYPED_VALUE"] = "invalid typed value";
      ERROR_CODES2["INVALID_VALUE_OBJECT"] = "invalid value object";
      ERROR_CODES2["INVALID_VALUE_OBJECT_VALUE"] = "invalid value object value";
      ERROR_CODES2["INVALID_VOCAB_MAPPING"] = "invalid vocab mapping";
      ERROR_CODES2["IRI_CONFUSED_WITH_PREFIX"] = "IRI confused with prefix";
      ERROR_CODES2["KEYWORD_REDEFINITION"] = "keyword redefinition";
      ERROR_CODES2["LOADING_DOCUMENT_FAILED"] = "loading document failed";
      ERROR_CODES2["LOADING_REMOTE_CONTEXT_FAILED"] = "loading remote context failed";
      ERROR_CODES2["MULTIPLE_CONTEXT_LINK_HEADERS"] = "multiple context link headers";
      ERROR_CODES2["PROCESSING_MODE_CONFLICT"] = "processing mode conflict";
      ERROR_CODES2["PROTECTED_TERM_REDEFINITION"] = "protected term redefinition";
      ERROR_CODES2["CONTEXT_OVERFLOW"] = "context overflow";
      ERROR_CODES2["INVALID_BASE_DIRECTION"] = "invalid base direction";
      ERROR_CODES2["RECURSIVE_CONTEXT_INCLUSION"] = "recursive context inclusion";
      ERROR_CODES2["INVALID_STREAMING_KEY_ORDER"] = "invalid streaming key order";
      ERROR_CODES2["INVALID_EMBEDDED_NODE"] = "invalid embedded node";
      ERROR_CODES2["INVALID_ANNOTATION"] = "invalid annotation";
    })(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js
var require_FetchDocumentLoader4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchDocumentLoader = void 0;
    require_browser_polyfill();
    var ErrorCoded_1 = require_ErrorCoded4();
    var http_link_header_1 = require_link();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var FetchDocumentLoader = class {
      constructor(fetcher) {
        this.fetcher = fetcher;
      }
      async load(url) {
        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: "application/ld+json" }) });
        if (response.ok && response.headers) {
          let mediaType = response.headers.get("Content-Type");
          if (mediaType) {
            const colonPos = mediaType.indexOf(";");
            if (colonPos > 0) {
              mediaType = mediaType.substr(0, colonPos);
            }
          }
          if (mediaType === "application/ld+json") {
            return await response.json();
          } else {
            if (response.headers.has("Link")) {
              let alternateUrl;
              response.headers.forEach((value, key) => {
                if (key === "link") {
                  const linkHeader = (0, http_link_header_1.parse)(value);
                  for (const link of linkHeader.get("type", "application/ld+json")) {
                    if (link.rel === "alternate") {
                      if (alternateUrl) {
                        throw new Error("Multiple JSON-LD alternate links were found on " + url);
                      }
                      alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                    }
                  }
                }
              });
              if (alternateUrl) {
                return this.load(alternateUrl);
              }
            }
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        } else {
          throw new Error(response.statusText || `Status code: ${response.status}`);
        }
      }
    };
    exports.FetchDocumentLoader = FetchDocumentLoader;
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/Util.js
var require_Util9 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var Util = class _Util {
      /**
       * Check if the given term is a valid compact IRI.
       * Otherwise, it may be an IRI.
       * @param {string} term A term.
       * @return {boolean} If it is a compact IRI.
       */
      static isCompactIri(term) {
        return term.indexOf(":") > 0 && !(term && term[0] === "#");
      }
      /**
       * Get the prefix from the given term.
       * @see https://json-ld.org/spec/latest/json-ld/#compact-iris
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {string} The prefix or null.
       */
      static getPrefix(term, context) {
        if (term && term[0] === "#") {
          return null;
        }
        const separatorPos = term.indexOf(":");
        if (separatorPos >= 0) {
          if (term.length > separatorPos + 1 && term.charAt(separatorPos + 1) === "/" && term.charAt(separatorPos + 2) === "/") {
            return null;
          }
          const prefix = term.substr(0, separatorPos);
          if (prefix === "_") {
            return null;
          }
          if (context[prefix]) {
            return prefix;
          }
        }
        return null;
      }
      /**
       * From a given context entry value, get the string value, or the @id field.
       * @param contextValue A value for a term in a context.
       * @return {string} The id value, or null.
       */
      static getContextValueId(contextValue) {
        if (contextValue === null || typeof contextValue === "string") {
          return contextValue;
        }
        const id = contextValue["@id"];
        return id ? id : null;
      }
      /**
       * Check if the given simple term definition (string-based value of a context term)
       * should be considered a prefix.
       * @param value A simple term definition value.
       * @param options Options that define the way how expansion must be done.
       */
      static isSimpleTermDefinitionPrefix(value, options) {
        return !_Util.isPotentialKeyword(value) && (options.allowPrefixNonGenDelims || typeof value === "string" && (value[0] === "_" || _Util.isPrefixIriEndingWithGenDelim(value)));
      }
      /**
       * Check if the given keyword is of the keyword format "@"1*ALPHA.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is of the keyword format.
       */
      static isPotentialKeyword(keyword) {
        return typeof keyword === "string" && _Util.KEYWORD_REGEX.test(keyword);
      }
      /**
       * Check if the given prefix ends with a gen-delim character.
       * @param {string} prefixIri A prefix IRI.
       * @return {boolean} If the given prefix IRI is valid.
       */
      static isPrefixIriEndingWithGenDelim(prefixIri) {
        return _Util.ENDS_WITH_GEN_DELIM.test(prefixIri);
      }
      /**
       * Check if the given context value can be a prefix value.
       * @param value A context value.
       * @return {boolean} If it can be a prefix value.
       */
      static isPrefixValue(value) {
        return value && (typeof value === "string" || value && typeof value === "object");
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return Boolean(iri && _Util.IRI_REGEX.test(iri));
      }
      /**
       * Check if the given IRI is valid, this includes the possibility of being a relative IRI.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIriWeak(iri) {
        return !!iri && iri[0] !== ":" && _Util.IRI_REGEX_WEAK.test(iri);
      }
      /**
       * Check if the given keyword is a defined according to the JSON-LD specification.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is valid.
       */
      static isValidKeyword(keyword) {
        return _Util.VALID_KEYWORDS[keyword];
      }
      /**
       * Check if the given term is protected in the context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {string} key A context term.
       * @return {boolean} If the given term has an @protected flag.
       */
      static isTermProtected(context, key) {
        const value = context[key];
        return !(typeof value === "string") && value && value["@protected"];
      }
      /**
       * Check if the given context has at least one protected term.
       * @param context A context.
       * @return If the context has a protected term.
       */
      static hasProtectedTerms(context) {
        for (const key of Object.keys(context)) {
          if (_Util.isTermProtected(context, key)) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check if the given key is an internal reserved keyword.
       * @param key A context key.
       */
      static isReservedInternalKeyword(key) {
        return key.startsWith("@__");
      }
      /**
       * Check if two objects are deepEqual to on another.
       * @param object1 The first object to test.
       * @param object2 The second object to test.
       */
      static deepEqual(object1, object2) {
        const objKeys1 = Object.keys(object1);
        const objKeys2 = Object.keys(object2);
        if (objKeys1.length !== objKeys2.length)
          return false;
        return objKeys1.every((key) => {
          const value1 = object1[key];
          const value2 = object2[key];
          return value1 === value2 || value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object" && this.deepEqual(value1, value2);
        });
      }
    };
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/;
    Util.IRI_REGEX_WEAK = /(?::[^:])|\//;
    Util.KEYWORD_REGEX = /^@[a-z]+$/i;
    Util.ENDS_WITH_GEN_DELIM = /[:/?#\[\]@]$/;
    Util.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;
    Util.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;
    Util.VALID_KEYWORDS = {
      "@annotation": true,
      "@base": true,
      "@container": true,
      "@context": true,
      "@direction": true,
      "@graph": true,
      "@id": true,
      "@import": true,
      "@included": true,
      "@index": true,
      "@json": true,
      "@language": true,
      "@list": true,
      "@nest": true,
      "@none": true,
      "@prefix": true,
      "@propagate": true,
      "@protected": true,
      "@reverse": true,
      "@set": true,
      "@type": true,
      "@value": true,
      "@version": true,
      "@vocab": true
    };
    Util.EXPAND_KEYS_BLACKLIST = [
      "@base",
      "@vocab",
      "@language",
      "@version",
      "@direction"
    ];
    Util.ALIAS_DOMAIN_BLACKLIST = [
      "@container",
      "@graph",
      "@id",
      "@index",
      "@list",
      "@nest",
      "@none",
      "@prefix",
      "@reverse",
      "@set",
      "@type",
      "@value",
      "@version"
    ];
    Util.ALIAS_RANGE_BLACKLIST = [
      "@context",
      "@preserve"
    ];
    Util.CONTAINERS = [
      "@list",
      "@set",
      "@index",
      "@language",
      "@graph",
      "@id",
      "@type"
    ];
    Util.CONTAINERS_1_0 = [
      "@list",
      "@set",
      "@index"
    ];
    exports.Util = Util;
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js
var require_JsonLdContextNormalized4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded4();
    var Util_1 = require_Util9();
    var JsonLdContextNormalized = class {
      constructor(contextRaw) {
        this.contextRaw = contextRaw;
      }
      /**
       * @return The raw inner context.
       */
      getContextRaw() {
        return this.contextRaw;
      }
      /**
       * Expand the term or prefix of the given term if it has one,
       * otherwise return the term as-is.
       *
       * This will try to expand the IRI as much as possible.
       *
       * Iff in vocab-mode, then other references to other terms in the context can be used,
       * such as to `myTerm`:
       * ```
       * {
       *   "myTerm": "http://example.org/myLongTerm"
       * }
       * ```
       *
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,
       *                              otherwise it is considered a regular term that is expanded based on @base.
       * @param {IExpandOptions} options Options that define the way how expansion must be done.
       * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.
       * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).
       */
      expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {
        const contextValue = this.contextRaw[term];
        if (contextValue === null || contextValue && contextValue["@id"] === null) {
          return null;
        }
        let validIriMapping = true;
        if (contextValue && expandVocab) {
          const value = Util_1.Util.getContextValueId(contextValue);
          if (value && value !== term) {
            if (typeof value !== "string" || !Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value)) {
              if (!Util_1.Util.isPotentialKeyword(value)) {
                validIriMapping = false;
              }
            } else {
              return value;
            }
          }
        }
        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);
        const vocab = this.contextRaw["@vocab"];
        const vocabRelative = (!!vocab || vocab === "") && vocab.indexOf(":") < 0;
        const base = this.contextRaw["@base"];
        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);
        if (prefix) {
          const contextPrefixValue = this.contextRaw[prefix];
          const value = Util_1.Util.getContextValueId(contextPrefixValue);
          if (value) {
            if (typeof contextPrefixValue === "string" || !options.allowPrefixForcing) {
              if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {
                return term;
              }
            } else {
              if (value[0] !== "_" && !potentialKeyword && !contextPrefixValue["@prefix"] && !(term in this.contextRaw)) {
                return term;
              }
            }
            return value + term.substr(prefix.length + 1);
          }
        } else if (expandVocab && (vocab || vocab === "" || options.allowVocabRelativeToBase && (base && vocabRelative)) && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          if (vocabRelative) {
            if (options.allowVocabRelativeToBase) {
              return (vocab || base ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : "") + term;
            } else {
              throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
            }
          } else {
            return vocab + term;
          }
        } else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          return (0, relative_to_absolute_iri_1.resolve)(term, base);
        }
        if (validIriMapping) {
          return term;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
        }
      }
      /**
       * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.
       *
       * This will try to compact the IRI as much as possible.
       *
       * @param {string} iri An IRI to compact.
       * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,
       *                        otherwise it is considered a regular term that is compacted based on @base.
       * @return {string} The compacted term or the IRI as-is.
       */
      compactIri(iri, vocab) {
        if (vocab && this.contextRaw["@vocab"] && iri.startsWith(this.contextRaw["@vocab"])) {
          return iri.substr(this.contextRaw["@vocab"].length);
        }
        if (!vocab && this.contextRaw["@base"] && iri.startsWith(this.contextRaw["@base"])) {
          return iri.substr(this.contextRaw["@base"].length);
        }
        const shortestPrefixing = { prefix: "", suffix: iri };
        for (const key in this.contextRaw) {
          const value = this.contextRaw[key];
          if (value && !Util_1.Util.isPotentialKeyword(key)) {
            const contextIri = Util_1.Util.getContextValueId(value);
            if (iri.startsWith(contextIri)) {
              const suffix = iri.substr(contextIri.length);
              if (!suffix) {
                if (vocab) {
                  return key;
                }
              } else if (suffix.length < shortestPrefixing.suffix.length) {
                shortestPrefixing.prefix = key;
                shortestPrefixing.suffix = suffix;
              }
            }
          }
        }
        if (shortestPrefixing.prefix) {
          return shortestPrefixing.prefix + ":" + shortestPrefixing.suffix;
        }
        return iri;
      }
    };
    exports.JsonLdContextNormalized = JsonLdContextNormalized;
    exports.defaultExpandOptions = {
      allowPrefixForcing: true,
      allowPrefixNonGenDelims: false,
      allowVocabRelativeToBase: true
    };
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/ContextParser.js
var require_ContextParser4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/ContextParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextParser = void 0;
    require_browser_polyfill();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded4();
    var FetchDocumentLoader_1 = require_FetchDocumentLoader4();
    var JsonLdContextNormalized_1 = require_JsonLdContextNormalized4();
    var Util_1 = require_Util9();
    var ContextParser = class _ContextParser {
      constructor(options) {
        options = options || {};
        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();
        this.documentCache = {};
        this.validateContext = !options.skipValidation;
        this.expandContentTypeToBase = !!options.expandContentTypeToBase;
        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;
        this.redirectSchemaOrgHttps = "redirectSchemaOrgHttps" in options ? !!options.redirectSchemaOrgHttps : true;
      }
      /**
       * Validate the given @language value.
       * An error will be thrown if it is invalid.
       * @param value An @language value.
       * @param {boolean} strictRange If the string value should be strictly checked against a regex.
       * @param {string} errorCode The error code to emit on errors.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateLanguage(value, strictRange, errorCode) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);
        }
        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {
          if (strictRange) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Validate the given @direction value.
       * An error will be thrown if it is invalid.
       * @param value An @direction value.
       * @param {boolean} strictValues If the string value should be strictly checked against a regex.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateDirection(value, strictValues) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
        }
        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {
          if (strictValues) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Add an @id term for all @reverse terms.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       */
      idifyReverseTerms(context) {
        for (const key of Object.keys(context)) {
          let value = context[key];
          if (value && typeof value === "object") {
            if (value["@reverse"] && !value["@id"]) {
              if (typeof value["@reverse"] !== "string" || Util_1.Util.isValidKeyword(value["@reverse"])) {
                throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value["@reverse"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
              }
              value = context[key] = Object.assign(Object.assign({}, value), { "@id": value["@reverse"] });
              value["@id"] = value["@reverse"];
              if (Util_1.Util.isPotentialKeyword(value["@reverse"])) {
                delete value["@reverse"];
              } else {
                value["@reverse"] = true;
              }
            }
          }
        }
        return context;
      }
      /**
       * Expand all prefixed terms in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded
       *                                          via @base if @vocab is set to null.
       * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all
       * keys in the context will be expanded.
       */
      expandPrefixedTerms(context, expandContentTypeToBase, keys2) {
        const contextRaw = context.getContextRaw();
        for (const key of keys2 || Object.keys(contextRaw)) {
          if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {
            const keyValue = contextRaw[key];
            if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {
              if (key !== "@type" || typeof contextRaw[key] === "object" && !(contextRaw[key]["@protected"] || contextRaw[key]["@container"] === "@set")) {
                throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
              }
            }
            if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {
              throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);
            }
            if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue)) && keyValue["@prefix"] === true) {
              throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            while (Util_1.Util.isPrefixValue(contextRaw[key])) {
              const value = contextRaw[key];
              let changed = false;
              if (typeof value === "string") {
                contextRaw[key] = context.expandTerm(value, true);
                changed = changed || value !== contextRaw[key];
              } else {
                const id = value["@id"];
                const type = value["@type"];
                const canAddIdEntry = !("@prefix" in value) || Util_1.Util.isValidIri(key);
                if ("@id" in value) {
                  if (id !== void 0 && id !== null && typeof id === "string") {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": context.expandTerm(id, true) });
                    changed = changed || id !== contextRaw[key]["@id"];
                  }
                } else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {
                  const newId = context.expandTerm(key, true);
                  if (newId !== key) {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": newId });
                    changed = true;
                  }
                }
                if (type && typeof type === "string" && type !== "@vocab" && (!value["@container"] || !value["@container"]["@type"]) && canAddIdEntry) {
                  let expandedType = context.expandTerm(type, true);
                  if (expandContentTypeToBase && type === expandedType) {
                    expandedType = context.expandTerm(type, false);
                  }
                  if (expandedType !== type) {
                    changed = true;
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@type": expandedType });
                  }
                }
              }
              if (!changed) {
                break;
              }
            }
          }
        }
      }
      /**
       * Normalize the @language entries in the given context to lowercase.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} parseOptions The parsing options.
       */
      normalize(context, { processingMode, normalizeLanguageTags }) {
        if (normalizeLanguageTags || processingMode === 1) {
          for (const key of Object.keys(context)) {
            if (key === "@language" && typeof context[key] === "string") {
              context[key] = context[key].toLowerCase();
            } else {
              const value = context[key];
              if (value && typeof value === "object") {
                if (typeof value["@language"] === "string") {
                  const lowercase = value["@language"].toLowerCase();
                  if (lowercase !== value["@language"]) {
                    context[key] = Object.assign(Object.assign({}, value), { "@language": lowercase });
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Convert all @container strings and array values to hash-based values.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       */
      containersToHash(context) {
        for (const key of Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if (typeof value["@container"] === "string") {
              context[key] = Object.assign(Object.assign({}, value), { "@container": { [value["@container"]]: true } });
            } else if (Array.isArray(value["@container"])) {
              const newValue = {};
              for (const containerValue of value["@container"]) {
                newValue[containerValue] = true;
              }
              context[key] = Object.assign(Object.assign({}, value), { "@container": newValue });
            }
          }
        }
      }
      /**
       * Normalize and apply context-level @protected terms onto each term separately.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {number} processingMode The processing mode.
       */
      applyScopedProtected(context, { processingMode }, expandOptions) {
        if (processingMode && processingMode >= 1.1) {
          if (context["@protected"]) {
            for (const key of Object.keys(context)) {
              if (Util_1.Util.isReservedInternalKeyword(key)) {
                continue;
              }
              if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {
                const value = context[key];
                if (value && typeof value === "object") {
                  if (!("@protected" in context[key])) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@protected": true });
                  }
                } else {
                  context[key] = {
                    "@id": value,
                    "@protected": true
                  };
                  if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@prefix": true });
                  }
                }
              }
            }
            delete context["@protected"];
          }
        }
      }
      /**
       * Check if the given context inheritance does not contain any overrides of protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.
       * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.
       * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all
       * keys defined in contextAfter will be checked.
       */
      validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(contextAfter)) {
          if (Util_1.Util.isTermProtected(contextBefore, key)) {
            if (typeof contextAfter[key] === "string") {
              contextAfter[key] = { "@id": contextAfter[key], "@protected": true };
            } else {
              contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { "@protected": true });
            }
            if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {
              throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);
            }
          }
        }
      }
      /**
       * Validate the entries of the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options The parse options.
       */
      validate(context, { processingMode }) {
        for (const key of Object.keys(context)) {
          if (Util_1.Util.isReservedInternalKeyword(key)) {
            continue;
          }
          if (key === "") {
            throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
          }
          const value = context[key];
          const valueType = typeof value;
          if (Util_1.Util.isPotentialKeyword(key)) {
            switch (key.substr(1)) {
              case "vocab":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
                }
                break;
              case "base":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);
                }
                break;
              case "language":
                if (value !== null) {
                  _ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);
                }
                break;
              case "version":
                if (value !== null && valueType !== "number") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
                }
                break;
              case "direction":
                if (value !== null) {
                  _ContextParser.validateDirection(value, true);
                }
                break;
              case "propagate":
                if (processingMode === 1) {
                  throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
                }
                if (value !== null && valueType !== "boolean") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);
                }
                break;
            }
            if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {
              throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util.getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
            }
            continue;
          }
          if (value !== null) {
            switch (valueType) {
              case "string":
                if (Util_1.Util.getPrefix(value, context) === key) {
                  throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                }
                if (Util_1.Util.isValidIriWeak(key)) {
                  if (value === "@type") {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  } else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  }
                }
                break;
              case "object":
                if (!Util_1.Util.isCompactIri(key) && !("@id" in value) && (value["@type"] === "@id" ? !context["@base"] : !context["@vocab"])) {
                  throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                }
                for (const objectKey of Object.keys(value)) {
                  const objectValue = value[objectKey];
                  if (!objectValue) {
                    continue;
                  }
                  switch (objectKey) {
                    case "@id":
                      if (Util_1.Util.isValidKeyword(objectValue) && objectValue !== "@type" && objectValue !== "@id" && objectValue !== "@graph" && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.isValidIriWeak(key)) {
                        if (objectValue === "@type") {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        } else if (Util_1.Util.isValidIri(objectValue) && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        }
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.getPrefix(objectValue, context) === key) {
                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                      }
                      break;
                    case "@type":
                      if (value["@container"] === "@type" && objectValue !== "@id" && objectValue !== "@vocab") {
                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (objectValue !== "@id" && objectValue !== "@vocab" && (processingMode === 1 || objectValue !== "@json") && (processingMode === 1 || objectValue !== "@none") && (objectValue[0] === "_" || !Util_1.Util.isValidIri(objectValue))) {
                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      break;
                    case "@reverse":
                      if (typeof objectValue === "string" && value["@id"] && value["@id"] !== objectValue) {
                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':'${objectValue}' and '${value["@id"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      if ("@nest" in value) {
                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      break;
                    case "@container":
                      if (processingMode === 1) {
                        if (Object.keys(objectValue).length > 1 || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, must be only one of ${Util_1.Util.CONTAINERS_1_0.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      for (const containerValue of Object.keys(objectValue)) {
                        if (containerValue === "@list" && value["@reverse"]) {
                          throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                        }
                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), must be one of ${Util_1.Util.CONTAINERS.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      break;
                    case "@language":
                      _ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);
                      break;
                    case "@direction":
                      _ContextParser.validateDirection(objectValue, true);
                      break;
                    case "@prefix":
                      if (objectValue !== null && typeof objectValue !== "boolean") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);
                      }
                      if (!("@id" in value) && !Util_1.Util.isValidIri(key)) {
                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@index":
                      if (processingMode === 1 || !value["@container"] || !value["@container"]["@index"]) {
                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@nest":
                      if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);
                      }
                  }
                }
                break;
              default:
                throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
          }
        }
      }
      /**
       * Apply the @base context entry to the given context under certain circumstances.
       * @param context A context.
       * @param options Parsing options.
       * @param inheritFromParent If the @base value from the parent context can be inherited.
       * @return The given context.
       */
      applyBaseEntry(context, options, inheritFromParent) {
        if (typeof context === "string") {
          return context;
        }
        if (inheritFromParent && !("@base" in context) && options.parentContext && typeof options.parentContext === "object" && "@base" in options.parentContext) {
          context["@base"] = options.parentContext["@base"];
          if (options.parentContext["@__baseDocument"]) {
            context["@__baseDocument"] = true;
          }
        }
        if (options.baseIRI && !options.external) {
          if (!("@base" in context)) {
            context["@base"] = options.baseIRI;
            context["@__baseDocument"] = true;
          } else if (context["@base"] !== null && typeof context["@base"] === "string" && !Util_1.Util.isValidIri(context["@base"])) {
            context["@base"] = (0, relative_to_absolute_iri_1.resolve)(context["@base"], options.parentContext && options.parentContext["@base"] || options.baseIRI);
          }
        }
        return context;
      }
      /**
       * Resolve relative context IRIs, or return full IRIs as-is.
       * @param {string} contextIri A context IRI.
       * @param {string} baseIRI A base IRI.
       * @return {string} The normalized context IRI.
       */
      normalizeContextIri(contextIri, baseIRI) {
        if (!Util_1.Util.isValidIri(contextIri)) {
          try {
            contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);
          } catch (_a) {
            throw new Error(`Invalid context IRI: ${contextIri}`);
          }
        }
        if (this.redirectSchemaOrgHttps && contextIri.startsWith("http://schema.org")) {
          contextIri = "https://schema.org/";
        }
        return contextIri;
      }
      /**
       * Parse scoped contexts in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options Parsing options.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all
       * keys in the context will be iterated over.
       */
      async parseInnerContexts(context, options, keys2) {
        for (const key of keys2 !== null && keys2 !== void 0 ? keys2 : Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if ("@context" in value && value["@context"] !== null && !options.ignoreScopedContexts) {
              if (this.validateContext) {
                try {
                  const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });
                  delete parentContext[key]["@context"];
                  await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));
                } catch (e) {
                  throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);
                }
              }
              context[key] = Object.assign(Object.assign({}, value), { "@context": (await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context }))).getContextRaw() });
            }
          }
        }
        return context;
      }
      async parse(context, options = {}, internalOptions = {}) {
        const { baseIRI, parentContext, external, processingMode = _ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing } = options;
        const remoteContexts = options.remoteContexts || {};
        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {
          throw new ErrorCoded_1.ErrorCoded("Detected an overflow in remote context inclusions: " + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);
        }
        if (context === null || context === void 0) {
          if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {
            throw new ErrorCoded_1.ErrorCoded("Illegal context nullification when terms are protected", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);
          }
          return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));
        } else if (typeof context === "string") {
          const contextIri = this.normalizeContextIri(context, baseIRI);
          const overriddenLoad = this.getOverriddenLoad(contextIri, options);
          if (overriddenLoad) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);
          }
          const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));
          this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);
          return parsedStringContext;
        } else if (Array.isArray(context)) {
          const contextIris = [];
          const contexts = await Promise.all(context.map((subContext, i) => {
            if (typeof subContext === "string") {
              const contextIri = this.normalizeContextIri(subContext, baseIRI);
              contextIris[i] = contextIri;
              const overriddenLoad = this.getOverriddenLoad(contextIri, options);
              if (overriddenLoad) {
                return overriddenLoad;
              }
              return this.load(contextIri);
            } else {
              return subContext;
            }
          }));
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);
          }
          const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise.then((accContext) => this.parse(
            contextEntry,
            Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }),
            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers
            {
              skipValidation: i < contexts.length - 1
            }
          )), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));
          this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);
          return reducedContexts;
        } else if (typeof context === "object") {
          if ("@context" in context) {
            return await this.parse(context["@context"], options);
          }
          context = Object.assign({}, context);
          if (external) {
            delete context["@base"];
          }
          this.applyBaseEntry(context, options, true);
          this.containersToHash(context);
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);
          }
          let importContext = {};
          if ("@import" in context) {
            if (processingMode >= 1.1) {
              if (typeof context["@import"] !== "string") {
                throw new ErrorCoded_1.ErrorCoded("An @import value must be a string, but got " + typeof context["@import"], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);
              }
              importContext = await this.loadImportContext(this.normalizeContextIri(context["@import"], baseIRI));
              delete context["@import"];
            } else {
              throw new ErrorCoded_1.ErrorCoded("Context importing is not supported in JSON-LD 1.0", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
            }
          }
          this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const newContext = Object.assign(importContext, context);
          this.idifyReverseTerms(newContext);
          this.normalize(newContext, { processingMode, normalizeLanguageTags });
          this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const keys2 = Object.keys(newContext);
          const overlappingKeys = [];
          if (typeof parentContext === "object") {
            for (const key in parentContext) {
              if (key in newContext) {
                overlappingKeys.push(key);
              } else {
                newContext[key] = parentContext[key];
              }
            }
          }
          await this.parseInnerContexts(newContext, options, keys2);
          const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);
          if ((newContext && newContext["@version"] || _ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1 && (context["@vocab"] && typeof context["@vocab"] === "string" || context["@vocab"] === "")) {
            if (parentContext && "@vocab" in parentContext && context["@vocab"].indexOf(":") < 0) {
              newContext["@vocab"] = parentContext["@vocab"] + context["@vocab"];
            } else if (Util_1.Util.isCompactIri(context["@vocab"]) || context["@vocab"] in newContext) {
              newContext["@vocab"] = newContextWrapped.expandTerm(context["@vocab"], true);
            }
          }
          this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys2);
          if (!ignoreProtection && parentContext && processingMode >= 1.1) {
            this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);
          }
          if (this.validateContext && !internalOptions.skipValidation) {
            this.validate(newContext, { processingMode });
          }
          return newContextWrapped;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);
        }
      }
      /**
       * Fetch the given URL as a raw JSON-LD context.
       * @param url An URL.
       * @return A promise resolving to a raw JSON-LD context.
       */
      async load(url) {
        const cached = this.documentCache[url];
        if (cached) {
          return cached;
        }
        let document;
        try {
          document = await this.documentLoader.load(url);
        } catch (e) {
          throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);
        }
        if (!("@context" in document)) {
          throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        return this.documentCache[url] = document["@context"];
      }
      /**
       * Override the given context that may be loaded.
       *
       * This will check whether or not the url is recursively being loaded.
       * @param url An URL.
       * @param options Parsing options.
       * @return An overridden context, or null.
       *         Optionally an error can be thrown if a cyclic context is detected.
       */
      getOverriddenLoad(url, options) {
        if (url in (options.remoteContexts || {})) {
          if (options.ignoreRemoteScopedContexts) {
            return url;
          } else {
            throw new ErrorCoded_1.ErrorCoded("Detected a cyclic context inclusion of " + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);
          }
        }
        return null;
      }
      /**
       * Load an @import'ed context.
       * @param importContextIri The full URI of an @import value.
       */
      async loadImportContext(importContextIri) {
        let importContext = await this.load(importContextIri);
        if (typeof importContext !== "object" || Array.isArray(importContext)) {
          throw new ErrorCoded_1.ErrorCoded("An imported context must be a single object: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        if ("@import" in importContext) {
          throw new ErrorCoded_1.ErrorCoded("An imported context can not import another context: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
        }
        importContext = Object.assign({}, importContext);
        this.containersToHash(importContext);
        return importContext;
      }
    };
    ContextParser.DEFAULT_PROCESSING_MODE = 1.1;
    exports.ContextParser = ContextParser;
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/IDocumentLoader.js
var require_IDocumentLoader4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/IDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/lib/JsonLdContext.js
var require_JsonLdContext4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/lib/JsonLdContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/jsonld-context-parser/index.js
var require_jsonld_context_parser4 = __commonJS({
  "../../lipdjs/node_modules/jsonld-context-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ContextParser4(), exports);
    __exportStar(require_ErrorCoded4(), exports);
    __exportStar(require_FetchDocumentLoader4(), exports);
    __exportStar(require_IDocumentLoader4(), exports);
    __exportStar(require_JsonLdContext4(), exports);
    __exportStar(require_JsonLdContextNormalized4(), exports);
    __exportStar(require_Util9(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/DocumentLoaderMediated.js
var require_DocumentLoaderMediated = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/DocumentLoaderMediated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DocumentLoaderMediated = void 0;
    var bus_http_1 = require_lib172();
    var stream_to_string_1 = require_dist2();
    var jsonld_context_parser_1 = require_jsonld_context_parser4();
    var DocumentLoaderMediated = class _DocumentLoaderMediated extends jsonld_context_parser_1.FetchDocumentLoader {
      constructor(mediatorHttp, context) {
        super(_DocumentLoaderMediated.createFetcher(mediatorHttp, context));
        this.mediatorHttp = mediatorHttp;
        this.context = context;
      }
      static createFetcher(mediatorHttp, context) {
        return async (url, init) => {
          const response = await mediatorHttp.mediate({ input: url, init, context });
          response.json = async () => JSON.parse(await (0, stream_to_string_1.stringify)(bus_http_1.ActorHttp.toNodeReadable(response.body)));
          return response;
        };
      }
    };
    exports.DocumentLoaderMediated = DocumentLoaderMediated;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/ActorRdfParseJsonLd.js
var require_ActorRdfParseJsonLd = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/ActorRdfParseJsonLd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfParseJsonLd = void 0;
    var bus_rdf_parse_1 = require_lib66();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var jsonld_streaming_parser_1 = require_jsonld_streaming_parser();
    var DocumentLoaderMediated_1 = require_DocumentLoaderMediated();
    var ActorRdfParseJsonLd = class extends bus_rdf_parse_1.ActorRdfParseFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/ld+json": 1.0,
       *       "application/json": 0.15
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD",
       *       "application/json": "http://www.w3.org/ns/formats/JSON-LD"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async testHandle(action, mediaType, context) {
        if (context.has(context_entries_1.KeysRdfParseHtmlScript.processingHtmlScript) && mediaType !== "application/ld+json") {
          return (0, core_1.failTest)(`JSON-LD in script tags can only have media type 'application/ld+json'`);
        }
        if (!mediaType || !(mediaType in this.mediaTypePriorities || mediaType.endsWith("+json"))) {
          return (0, core_1.failTest)(`Unrecognized media type: ${mediaType}`);
        }
        return await this.testHandleChecked(action);
      }
      async runHandle(action, mediaType, actionContext) {
        var _a;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const parser = jsonld_streaming_parser_1.JsonLdParser.fromHttpResponse(((_a = action.metadata) == null ? void 0 : _a.baseIRI) ?? "", mediaType, action.headers, {
          dataFactory,
          documentLoader: actionContext.get(context_entries_1.KeysRdfParseJsonLd.documentLoader) ?? new DocumentLoaderMediated_1.DocumentLoaderMediated(this.mediatorHttp, actionContext),
          strictValues: actionContext.get(context_entries_1.KeysRdfParseJsonLd.strictValues),
          ...actionContext.get(context_entries_1.KeysRdfParseJsonLd.parserOptions)
        });
        const data = parser.import(action.data);
        return { data };
      }
    };
    exports.ActorRdfParseJsonLd = ActorRdfParseJsonLd;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/index.js
var require_lib210 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-parse-jsonld/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfParseJsonLd(), exports);
    __exportStar(require_DocumentLoaderMediated(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-hypermedia/lib/ActorRdfUpdateHypermedia.js
var require_ActorRdfUpdateHypermedia = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-hypermedia/lib/ActorRdfUpdateHypermedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateHypermedia = void 0;
    var core_1 = require_lib();
    var ActorRdfUpdateHypermedia = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {RDF hypermedia updating failed: none of the configured actors were able to handle an update for ${action.url}} busFailMessage
       * @param destinationType - The destination type.
       */
      /* eslint-enable max-len */
      constructor(args, destinationType) {
        super(args);
        this.destinationType = destinationType;
      }
      async test(action) {
        if (action.forceDestinationType && this.destinationType !== action.forceDestinationType) {
          return (0, core_1.failTest)(`Actor ${this.name} is not able to handle destination type ${action.forceDestinationType}.`);
        }
        return this.testMetadata(action);
      }
    };
    exports.ActorRdfUpdateHypermedia = ActorRdfUpdateHypermedia;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-rdf-update-hypermedia/lib/index.js
var require_lib211 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-rdf-update-hypermedia/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateHypermedia(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/QuadDestinationPatchSparqlUpdate.js
var require_QuadDestinationPatchSparqlUpdate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/QuadDestinationPatchSparqlUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuadDestinationPatchSparqlUpdate = void 0;
    var bus_http_1 = require_lib172();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var readable_stream_1 = require_browser2();
    var QuadDestinationPatchSparqlUpdate = class {
      constructor(url, context, mediatorHttp) {
        this.url = url;
        this.context = context;
        this.mediatorHttp = mediatorHttp;
      }
      async update(quadStreams) {
        const queryStream = this.createCombinedQuadsQuery(quadStreams.insert, quadStreams.delete);
        await this.wrapSparqlUpdateRequest(queryStream);
      }
      createCombinedQuadsQuery(quadsToInsert, quadsToDelete) {
        return new asynciterator_1.ArrayIterator([], { autoStart: false }).append(this.createQuadsQuery("DELETE", quadsToDelete)).append(quadsToDelete && quadsToInsert ? [" ;\n"] : []).append(this.createQuadsQuery("INSERT", quadsToInsert));
      }
      createQuadsQuery(type, quads) {
        if (!quads) {
          return new asynciterator_1.ArrayIterator([], { autoStart: false });
        }
        return quads.map((quad) => {
          let stringQuad = `${(0, rdf_string_ttl_1.termToString)(quad.subject)} ${(0, rdf_string_ttl_1.termToString)(quad.predicate)} ${(0, rdf_string_ttl_1.termToString)(quad.object)} .`;
          if (quad.graph.termType === "DefaultGraph") {
            stringQuad = `  ${stringQuad}
`;
          } else {
            stringQuad = `  GRAPH ${(0, rdf_string_ttl_1.termToString)(quad.graph)} { ${stringQuad} }
`;
          }
          return stringQuad;
        }).prepend([`${type} DATA {
`]).append(["}"]);
      }
      async wrapSparqlUpdateRequest(queryStream) {
        const readable = new readable_stream_1.Readable();
        readable.wrap(queryStream);
        const headers = new Headers({ "content-type": "application/sparql-update" });
        const httpResponse = await this.mediatorHttp.mediate({
          context: this.context,
          init: {
            headers,
            method: "PATCH",
            body: bus_http_1.ActorHttp.toWebReadableStream(readable)
          },
          input: this.url
        });
        await (0, bus_http_1.validateAndCloseHttpResponse)(this.url, httpResponse);
      }
      async deleteGraphs(_graphs, _requireExistence, _dropGraphs) {
        throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);
      }
      async createGraphs(_graphs, _requireNonExistence) {
        throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);
      }
    };
    exports.QuadDestinationPatchSparqlUpdate = QuadDestinationPatchSparqlUpdate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/ActorRdfUpdateHypermediaPatchSparqlUpdate.js
var require_ActorRdfUpdateHypermediaPatchSparqlUpdate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/ActorRdfUpdateHypermediaPatchSparqlUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateHypermediaPatchSparqlUpdate = void 0;
    var bus_rdf_update_hypermedia_1 = require_lib211();
    var core_1 = require_lib();
    var QuadDestinationPatchSparqlUpdate_1 = require_QuadDestinationPatchSparqlUpdate();
    var ActorRdfUpdateHypermediaPatchSparqlUpdate = class extends bus_rdf_update_hypermedia_1.ActorRdfUpdateHypermedia {
      constructor(args) {
        super(args, "patchSparqlUpdate");
      }
      async testMetadata(action) {
        if (!action.forceDestinationType && !action.metadata.patchSparqlUpdate) {
          return (0, core_1.failTest)(`Actor ${this.name} could not detect a destination with 'application/sparql-update' as 'Accept-Patch' header.`);
        }
        if (!action.forceDestinationType && !action.exists) {
          return (0, core_1.failTest)(`Actor ${this.name} can only patch a destination that already exists.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        this.logInfo(action.context, `Identified as patchSparqlUpdate destination: ${action.url}`);
        return {
          destination: new QuadDestinationPatchSparqlUpdate_1.QuadDestinationPatchSparqlUpdate(action.url, action.context, this.mediatorHttp)
        };
      }
    };
    exports.ActorRdfUpdateHypermediaPatchSparqlUpdate = ActorRdfUpdateHypermediaPatchSparqlUpdate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/index.js
var require_lib212 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-patch-sparql-update/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateHypermediaPatchSparqlUpdate(), exports);
    __exportStar(require_QuadDestinationPatchSparqlUpdate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/QuadDestinationPutLdp.js
var require_QuadDestinationPutLdp = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/QuadDestinationPutLdp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuadDestinationPutLdp = void 0;
    var bus_http_1 = require_lib172();
    var QuadDestinationPutLdp = class {
      constructor(url, context, mediaTypes, mediatorHttp, mediatorRdfSerializeMediatypes, mediatorRdfSerialize) {
        this.url = url;
        this.context = context;
        this.mediaTypes = mediaTypes;
        this.mediatorHttp = mediatorHttp;
        this.mediatorRdfSerializeMediatypes = mediatorRdfSerializeMediatypes;
        this.mediatorRdfSerialize = mediatorRdfSerialize;
      }
      async update(quadStreams) {
        if (quadStreams.delete) {
          throw new Error(`Put-based LDP destinations don't support deletions`);
        }
        if (quadStreams.insert) {
          await this.wrapRdfUpdateRequest("INSERT", quadStreams.insert);
        }
      }
      async wrapRdfUpdateRequest(type, quads) {
        const { mediaTypes } = await this.mediatorRdfSerializeMediatypes.mediate({ context: this.context, mediaTypes: true });
        const availableMediaTypes = this.mediaTypes.filter((mediaType2) => mediaType2 in mediaTypes);
        const mediaType = availableMediaTypes.length > 0 ? availableMediaTypes[0] : Object.keys(mediaTypes).sort((typeA, typeB) => mediaTypes[typeB] - mediaTypes[typeA])[0];
        const { handle: { data } } = await this.mediatorRdfSerialize.mediate({
          context: this.context,
          handle: { quadStream: quads, context: this.context },
          handleMediaType: mediaType
        });
        const headers = new Headers({ "content-type": mediaType });
        const httpResponse = await this.mediatorHttp.mediate({
          context: this.context,
          init: {
            headers,
            method: "PUT",
            body: bus_http_1.ActorHttp.toWebReadableStream(data)
          },
          input: this.url
        });
        await (0, bus_http_1.validateAndCloseHttpResponse)(this.url, httpResponse);
      }
      async deleteGraphs(_graphs, _requireExistence, _dropGraphs) {
        throw new Error(`Put-based LDP destinations don't support named graphs`);
      }
      async createGraphs(_graphs, _requireNonExistence) {
        throw new Error(`Put-based LDP destinations don't support named graphs`);
      }
    };
    exports.QuadDestinationPutLdp = QuadDestinationPutLdp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/ActorRdfUpdateHypermediaPutLdp.js
var require_ActorRdfUpdateHypermediaPutLdp = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/ActorRdfUpdateHypermediaPutLdp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateHypermediaPutLdp = void 0;
    var bus_rdf_update_hypermedia_1 = require_lib211();
    var core_1 = require_lib();
    var QuadDestinationPutLdp_1 = require_QuadDestinationPutLdp();
    var ActorRdfUpdateHypermediaPutLdp = class extends bus_rdf_update_hypermedia_1.ActorRdfUpdateHypermedia {
      constructor(args) {
        super(args, "putLdp");
      }
      async testMetadata(action) {
        if (!action.forceDestinationType) {
          if (!action.metadata.allowHttpMethods || !action.metadata.allowHttpMethods.includes("PUT")) {
            return (0, core_1.failTest)(`Actor ${this.name} could not detect a destination with 'Allow: PUT' header.`);
          }
          if (action.exists) {
            return (0, core_1.failTest)(`Actor ${this.name} can only put on a destination that does not already exists.`);
          }
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        this.logInfo(action.context, `Identified as putLdp destination: ${action.url}`);
        return {
          destination: new QuadDestinationPutLdp_1.QuadDestinationPutLdp(action.url, action.context, action.metadata.putAccepted || [], this.mediatorHttp, this.mediatorRdfSerializeMediatypes, this.mediatorRdfSerialize)
        };
      }
    };
    exports.ActorRdfUpdateHypermediaPutLdp = ActorRdfUpdateHypermediaPutLdp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/index.js
var require_lib213 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-put-ldp/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateHypermediaPutLdp(), exports);
    __exportStar(require_QuadDestinationPutLdp(), exports);
  }
});

// ../../lipdjs/node_modules/sparqlxml-parse/lib/SparqlXmlParser.js
var require_SparqlXmlParser = __commonJS({
  "../../lipdjs/node_modules/sparqlxml-parse/lib/SparqlXmlParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlXmlParser = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var saxes_1 = require_saxes();
    var readable_stream_1 = require_browser2();
    var SparqlXmlParser = class {
      constructor(settings) {
        settings = settings || {};
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.prefixVariableQuestionMark = !!settings.prefixVariableQuestionMark;
      }
      /**
       * Convert a SPARQL XML bindings response stream to a stream of bindings objects.
       *
       * The bindings stream will emit a 'variables' event that will contain
       * the array of variables (as RDF.Variable[]), as defined in the response head.
       *
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL XML response stream.
       * @return {NodeJS.ReadableStream} A stream of bindings.
       */
      parseXmlResultsStream(sparqlResponseStream) {
        const errorListener = (error) => resultStream.emit("error", error);
        sparqlResponseStream.on("error", errorListener);
        const parser = new saxes_1.SaxesParser();
        const stack = [];
        let variablesFound = false;
        let resultsFound = false;
        const variables = [];
        let currentBindings = {};
        let currentBindingName = "";
        let currentBindingType = "";
        let currentBindingAnnotation;
        let currentText = "";
        let currentQuotedTriples = [];
        parser.on("error", errorListener);
        parser.on("opentag", (tag) => {
          if (tag.name === "variable" && this.stackEquals(stack, ["sparql", "head"])) {
            variables.push(this.dataFactory.variable(tag.attributes.name));
          } else if (tag.name === "results" && this.stackEquals(stack, ["sparql"])) {
            resultsFound = true;
          } else if (tag.name === "result" && this.stackEquals(stack, ["sparql", "results"])) {
            currentBindings = {};
          } else if (tag.name === "binding" && this.stackEquals(stack, ["sparql", "results", "result"])) {
            currentBindingName = tag.attributes.name || "";
            currentBindingType = "";
            currentBindingAnnotation = "";
            currentText = "";
            currentQuotedTriples = [];
          } else if (tag.name === "triple" && this.stackBeginsWith(stack, ["sparql", "results", "result"])) {
            currentQuotedTriples.push({ components: {} });
          } else if (stack[stack.length - 1] === "triple" && this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            currentBindingType = "";
            currentBindingAnnotation = "";
            currentText = "";
            if (!["subject", "predicate", "object"].includes(tag.name)) {
              errorListener(new Error(`Illegal quoted triple component '${tag.name}' found on line ${parser.line + 1}`));
            } else {
              currentQuotedTriples[currentQuotedTriples.length - 1].currentComponent = tag.name;
            }
          } else if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            currentBindingType = tag.name;
            if ("xml:lang" in tag.attributes) {
              currentBindingAnnotation = tag.attributes["xml:lang"];
            } else if ("datatype" in tag.attributes) {
              currentBindingAnnotation = this.dataFactory.namedNode(tag.attributes.datatype);
            } else {
              currentBindingAnnotation = void 0;
            }
          }
          stack.push(tag.name);
        });
        parser.on("closetag", (tag) => {
          if (this.stackEquals(stack, ["sparql", "head"])) {
            resultStream.emit("variables", variables);
            variablesFound = true;
          }
          if (this.stackEquals(stack, ["sparql", "results", "result"])) {
            resultStream.push(currentBindings);
          }
          if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            let term;
            if (!currentBindingName && currentBindingType) {
              errorListener(new Error(`Terms should have a name on line ${parser.line + 1}`));
            } else if (currentBindingType === "uri") {
              term = this.dataFactory.namedNode(currentText);
            } else if (currentBindingType === "bnode") {
              term = this.dataFactory.blankNode(currentText);
            } else if (currentBindingType === "literal") {
              term = this.dataFactory.literal(currentText, currentBindingAnnotation);
            } else if (stack[stack.length - 1] === "triple") {
              const currentQuotedTriple = currentQuotedTriples.pop();
              if (currentQuotedTriple && currentQuotedTriple.components.subject && currentQuotedTriple.components.predicate && currentQuotedTriple.components.object) {
                term = this.dataFactory.quad(currentQuotedTriple.components.subject, currentQuotedTriple.components.predicate, currentQuotedTriple.components.object);
              } else {
                errorListener(new Error(`Incomplete quoted triple on line ${parser.line + 1}`));
              }
            } else if (currentBindingType) {
              errorListener(new Error(`Invalid term type '${currentBindingType}' on line ${parser.line + 1}`));
            }
            if (term) {
              if (currentQuotedTriples.length > 0) {
                const currentQuotedTriple = currentQuotedTriples[currentQuotedTriples.length - 1];
                if (currentQuotedTriple.components[currentQuotedTriple.currentComponent]) {
                  errorListener(new Error(`The ${currentQuotedTriple.currentComponent} in a quoted triple on line ${parser.line + 1} was already defined before`));
                }
                currentQuotedTriple.components[currentQuotedTriple.currentComponent] = term;
              } else {
                const key = this.prefixVariableQuestionMark ? "?" + currentBindingName : currentBindingName;
                currentBindings[key] = term;
              }
            }
            currentBindingType = void 0;
          }
          stack.pop();
        });
        parser.on("text", (text) => {
          if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"]) && stack[stack.length - 1] === currentBindingType) {
            currentText = text;
          }
        });
        const resultStream = sparqlResponseStream.on("end", (_) => {
          if (!resultsFound) {
            resultStream.emit("error", new Error("No valid SPARQL query results were found."));
          } else if (!variablesFound) {
            resultStream.emit("variables", []);
          }
        }).pipe(new readable_stream_1.Transform({
          objectMode: true,
          transform(chunk, encoding, callback) {
            parser.write(chunk);
            callback();
          }
        }));
        return resultStream;
      }
      /**
       * Convert a SPARQL XML boolean response stream to a promise resolving to a boolean.
       * This will reject if the given response was not a valid boolean response.
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL XML response stream.
       * @return {Promise<boolean>} The response boolean.
       */
      parseXmlBooleanStream(sparqlResponseStream) {
        return new Promise((resolve, reject) => {
          const parser = new saxes_1.SaxesParser();
          const stack = [];
          parser.on("error", reject);
          parser.on("opentag", (tag) => {
            stack.push(tag.name);
          });
          parser.on("closetag", (_) => {
            stack.pop();
          });
          parser.on("text", (text) => {
            if (this.stackEquals(stack, ["sparql", "boolean"])) {
              resolve(text === "true");
            }
          });
          sparqlResponseStream.on("error", reject).on("data", (d) => parser.write(d)).on("end", () => reject(new Error("No valid ASK response was found.")));
        });
      }
      stackEquals(a, b) {
        return a.length === b.length && a.every((v, i) => b[i] === v);
      }
      stackBeginsWith(a, b) {
        return a.length >= b.length && b.every((v, i) => a[i] === v);
      }
    };
    exports.SparqlXmlParser = SparqlXmlParser;
  }
});

// ../../lipdjs/node_modules/sparqlxml-parse/index.js
var require_sparqlxml_parse = __commonJS({
  "../../lipdjs/node_modules/sparqlxml-parse/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlXmlParser(), exports);
  }
});

// ../../lipdjs/node_modules/promise-polyfill/Promise.js
var require_Promise = __commonJS({
  "../../lipdjs/node_modules/promise-polyfill/Promise.js"(exports, module) {
    (function() {
      var root;
      if (typeof window === "object" && window) {
        root = window;
      } else {
        root = global;
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = root.Promise ? root.Promise : Promise2;
      } else if (!root.Promise) {
        root.Promise = Promise2;
      }
      var asap = root.setImmediate || function(fn) {
        setTimeout(fn, 1);
      };
      function bind(fn, thisArg) {
        return function() {
          fn.apply(thisArg, arguments);
        };
      }
      var isArray = Array.isArray || function(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      };
      function Promise2(fn) {
        if (typeof this !== "object") throw new TypeError("Promises must be constructed via new");
        if (typeof fn !== "function") throw new TypeError("not a function");
        this._state = null;
        this._value = null;
        this._deferreds = [];
        doResolve(fn, bind(resolve, this), bind(reject, this));
      }
      function handle(deferred) {
        var me = this;
        if (this._state === null) {
          this._deferreds.push(deferred);
          return;
        }
        asap(function() {
          var cb = me._state ? deferred.onFulfilled : deferred.onRejected;
          if (cb === null) {
            (me._state ? deferred.resolve : deferred.reject)(me._value);
            return;
          }
          var ret;
          try {
            ret = cb(me._value);
          } catch (e) {
            deferred.reject(e);
            return;
          }
          deferred.resolve(ret);
        });
      }
      function resolve(newValue) {
        try {
          if (newValue === this) throw new TypeError("A promise cannot be resolved with itself.");
          if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
            var then = newValue.then;
            if (typeof then === "function") {
              doResolve(bind(then, newValue), bind(resolve, this), bind(reject, this));
              return;
            }
          }
          this._state = true;
          this._value = newValue;
          finale.call(this);
        } catch (e) {
          reject.call(this, e);
        }
      }
      function reject(newValue) {
        this._state = false;
        this._value = newValue;
        finale.call(this);
      }
      function finale() {
        for (var i = 0, len = this._deferreds.length; i < len; i++) {
          handle.call(this, this._deferreds[i]);
        }
        this._deferreds = null;
      }
      function Handler(onFulfilled, onRejected, resolve2, reject2) {
        this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
        this.onRejected = typeof onRejected === "function" ? onRejected : null;
        this.resolve = resolve2;
        this.reject = reject2;
      }
      function doResolve(fn, onFulfilled, onRejected) {
        var done = false;
        try {
          fn(function(value) {
            if (done) return;
            done = true;
            onFulfilled(value);
          }, function(reason) {
            if (done) return;
            done = true;
            onRejected(reason);
          });
        } catch (ex) {
          if (done) return;
          done = true;
          onRejected(ex);
        }
      }
      Promise2.prototype["catch"] = function(onRejected) {
        return this.then(null, onRejected);
      };
      Promise2.prototype.then = function(onFulfilled, onRejected) {
        var me = this;
        return new Promise2(function(resolve2, reject2) {
          handle.call(me, new Handler(onFulfilled, onRejected, resolve2, reject2));
        });
      };
      Promise2.all = function() {
        var args = Array.prototype.slice.call(arguments.length === 1 && isArray(arguments[0]) ? arguments[0] : arguments);
        return new Promise2(function(resolve2, reject2) {
          if (args.length === 0) return resolve2([]);
          var remaining = args.length;
          function res(i2, val) {
            try {
              if (val && (typeof val === "object" || typeof val === "function")) {
                var then = val.then;
                if (typeof then === "function") {
                  then.call(val, function(val2) {
                    res(i2, val2);
                  }, reject2);
                  return;
                }
              }
              args[i2] = val;
              if (--remaining === 0) {
                resolve2(args);
              }
            } catch (ex) {
              reject2(ex);
            }
          }
          for (var i = 0; i < args.length; i++) {
            res(i, args[i]);
          }
        });
      };
      Promise2.resolve = function(value) {
        if (value && typeof value === "object" && value.constructor === Promise2) {
          return value;
        }
        return new Promise2(function(resolve2) {
          resolve2(value);
        });
      };
      Promise2.reject = function(value) {
        return new Promise2(function(resolve2, reject2) {
          reject2(value);
        });
      };
      Promise2.race = function(values2) {
        return new Promise2(function(resolve2, reject2) {
          for (var i = 0, len = values2.length; i < len; i++) {
            values2[i].then(resolve2, reject2);
          }
        });
      };
    })();
  }
});

// ../../lipdjs/node_modules/stream-to-string/index.js
var require_stream_to_string = __commonJS({
  "../../lipdjs/node_modules/stream-to-string/index.js"(exports, module) {
    var Promise2 = require_Promise();
    module.exports = function(stream, enc, cb) {
      if (typeof enc === "function") {
        cb = enc;
        enc = null;
      }
      var str = "";
      var p = new Promise2(function(resolve, reject) {
        stream.on("data", function(data) {
          str += typeof enc === "string" ? data.toString(enc) : data.toString();
        });
        stream.on("end", function() {
          resolve(str);
        });
        stream.on("error", reject);
      });
      if (cb) {
        p.then(function(str2) {
          cb(null, str2);
        }, cb);
      }
      return p;
    };
  }
});

// ../../lipdjs/node_modules/fetch-sparql-endpoint/lib/SparqlEndpointFetcher.js
var require_SparqlEndpointFetcher = __commonJS({
  "../../lipdjs/node_modules/fetch-sparql-endpoint/lib/SparqlEndpointFetcher.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlEndpointFetcher = void 0;
    var isStream = require_is_stream();
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var readable_from_web_1 = require_lib171();
    var sparqljs_1 = require_sparql();
    var sparqljson_parse_1 = require_sparqljson_parse();
    var sparqlxml_parse_1 = require_sparqlxml_parse();
    var stringifyStream = require_stream_to_string();
    var SparqlEndpointFetcher = class _SparqlEndpointFetcher {
      constructor(args) {
        var _a, _b, _c;
        this.method = (_a = args === null || args === void 0 ? void 0 : args.method) !== null && _a !== void 0 ? _a : "POST";
        this.timeout = args === null || args === void 0 ? void 0 : args.timeout;
        this.additionalUrlParams = (_b = args === null || args === void 0 ? void 0 : args.additionalUrlParams) !== null && _b !== void 0 ? _b : new URLSearchParams();
        this.defaultHeaders = (_c = args === null || args === void 0 ? void 0 : args.defaultHeaders) !== null && _c !== void 0 ? _c : new Headers();
        this.fetchCb = args === null || args === void 0 ? void 0 : args.fetch;
        this.sparqlJsonParser = new sparqljson_parse_1.SparqlJsonParser(args);
        this.sparqlXmlParser = new sparqlxml_parse_1.SparqlXmlParser(args);
        this.sparqlParsers = {
          [_SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON]: {
            parseBooleanStream: (sparqlResponseStream) => this.sparqlJsonParser.parseJsonBooleanStream(sparqlResponseStream),
            parseResultsStream: (sparqlResponseStream) => this.sparqlJsonParser.parseJsonResultsStream(sparqlResponseStream)
          },
          [_SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML]: {
            parseBooleanStream: (sparqlResponseStream) => this.sparqlXmlParser.parseXmlBooleanStream(sparqlResponseStream),
            parseResultsStream: (sparqlResponseStream) => this.sparqlXmlParser.parseXmlResultsStream(sparqlResponseStream)
          }
        };
      }
      /**
       * Get the query type of the given query.
       *
       * This will parse the query and thrown an exception on syntax errors.
       *
       * @param {string} query A query.
       * @return {'SELECT' | 'ASK' | 'CONSTRUCT' | 'UNKNOWN'} The query type.
       */
      getQueryType(query) {
        const parsedQuery = new sparqljs_1.Parser({ sparqlStar: true }).parse(query);
        if (parsedQuery.type === "query") {
          return parsedQuery.queryType === "DESCRIBE" ? "CONSTRUCT" : parsedQuery.queryType;
        }
        return "UNKNOWN";
      }
      /**
       * Get the query type of the given update query.
       *
       * This will parse the update query and thrown an exception on syntax errors.
       *
       * @param {string} query An update query.
       * @return {'UNKNOWN' | UpdateTypes} The included update operations.
       */
      getUpdateTypes(query) {
        const parsedQuery = new sparqljs_1.Parser({ sparqlStar: true }).parse(query);
        if (parsedQuery.type === "update") {
          const operations = {};
          for (const update8 of parsedQuery.updates) {
            if ("type" in update8) {
              operations[update8.type] = true;
            } else {
              operations[update8.updateType] = true;
            }
          }
          return operations;
        }
        return "UNKNOWN";
      }
      /**
       * Send a SELECT query to the given endpoint URL and return the resulting bindings stream.
       * @see IBindings
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<NodeJS.ReadableStream>} A stream of {@link IBindings}.
       */
      fetchBindings(endpoint, query) {
        return __awaiter(this, void 0, void 0, function* () {
          const [contentType, responseStream] = yield this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_SPARQL);
          const parser = this.sparqlParsers[contentType];
          if (!parser) {
            throw new Error(`Unknown SPARQL results content type: ${contentType}`);
          }
          return parser.parseResultsStream(responseStream);
        });
      }
      /**
       * Send an ASK query to the given endpoint URL and return a promise resolving to the boolean answer.
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<boolean>} A boolean resolving to the answer.
       */
      fetchAsk(endpoint, query) {
        return __awaiter(this, void 0, void 0, function* () {
          const [contentType, responseStream] = yield this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_SPARQL);
          const parser = this.sparqlParsers[contentType];
          if (!parser) {
            throw new Error(`Unknown SPARQL results content type: ${contentType}`);
          }
          return parser.parseBooleanStream(responseStream);
        });
      }
      /**
       * Send a CONSTRUCT/DESCRIBE query to the given endpoint URL and return the resulting triple stream.
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<Stream>} A stream of triples.
       */
      fetchTriples(endpoint, query) {
        return __awaiter(this, void 0, void 0, function* () {
          const [contentType, responseStream] = yield this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_TURTLE);
          return responseStream.pipe(new n3_1.StreamParser({ format: contentType }));
        });
      }
      /**
       * Send an update query to the given endpoint URL using POST.
       *
       * @param {string} endpoint     A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query        A SPARQL query string.
       */
      fetchUpdate(endpoint, query) {
        return __awaiter(this, void 0, void 0, function* () {
          const abortController = new AbortController();
          const defaultHeadersRaw = {};
          this.defaultHeaders.forEach((value, key) => {
            defaultHeadersRaw[key] = value;
          });
          const init = {
            method: "POST",
            headers: Object.assign(Object.assign({}, defaultHeadersRaw), { "content-type": "application/sparql-update" }),
            body: query,
            signal: abortController.signal
          };
          yield this.handleFetchCall(endpoint, init, { ignoreBody: true });
          abortController.abort();
        });
      }
      /**
       * Send a query to the given endpoint URL and return the resulting stream.
       *
       * This will only accept responses with the application/sparql-results+json content type.
       *
       * @param {string} endpoint     A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query        A SPARQL query string.
       * @param {string} acceptHeader The HTTP accept to use.
       * @return {Promise<[string, NodeJS.ReadableStream]>} The content type and SPARQL endpoint response stream.
       */
      fetchRawStream(endpoint, query, acceptHeader) {
        return __awaiter(this, void 0, void 0, function* () {
          let url = this.method === "POST" ? endpoint : `${endpoint}?query=${encodeURIComponent(query)}`;
          let body;
          const headers = new Headers(this.defaultHeaders);
          headers.append("Accept", acceptHeader);
          if (this.method === "POST") {
            headers.append("Content-Type", "application/x-www-form-urlencoded");
            body = new URLSearchParams();
            body.set("query", query);
            for (const [key, value] of this.additionalUrlParams.entries()) {
              body.set(key, value);
            }
            headers.append("Content-Length", body.toString().length.toString());
          } else if (this.additionalUrlParams.toString().length > 0) {
            url += `&${this.additionalUrlParams.toString()}`;
          }
          return this.handleFetchCall(url, { headers, method: this.method, body });
        });
      }
      /**
       * Helper function to generalize internal fetch calls.
       *
       * @param {string}      url     The URL to call.
       * @param {RequestInit} init    Options to pass along to the fetch call.
       * @param {any}         options Other specific fetch options.
       * @return {Promise<[string, NodeJS.ReadableStream]>} The content type and SPARQL endpoint response stream.
       */
      handleFetchCall(url, init, options) {
        return __awaiter(this, void 0, void 0, function* () {
          var _a, _b, _c;
          let timeout;
          let responseStream;
          if (this.timeout) {
            const controller = new AbortController();
            init.signal = controller.signal;
            timeout = setTimeout(() => controller.abort(), this.timeout);
          }
          const httpResponse = yield ((_a = this.fetchCb) !== null && _a !== void 0 ? _a : fetch)(url, init);
          clearTimeout(timeout);
          if (!(options === null || options === void 0 ? void 0 : options.ignoreBody) && httpResponse.body) {
            responseStream = isStream(httpResponse.body) ? httpResponse.body : (0, readable_from_web_1.readableFromWeb)(httpResponse.body);
          }
          if (!httpResponse.ok || !responseStream && !(options === null || options === void 0 ? void 0 : options.ignoreBody)) {
            const simpleUrl = url.split("?").at(0);
            const bodyString = responseStream ? yield stringifyStream(responseStream) : "empty response";
            throw new Error(`Invalid SPARQL endpoint response from ${simpleUrl} (HTTP status ${httpResponse.status}):
${bodyString}`);
          }
          const contentType = (_c = (_b = httpResponse.headers.get("Content-Type")) === null || _b === void 0 ? void 0 : _b.split(";").at(0)) !== null && _c !== void 0 ? _c : "";
          return [contentType, responseStream];
        });
      }
    };
    exports.SparqlEndpointFetcher = SparqlEndpointFetcher;
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON = "application/sparql-results+json";
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML = "application/sparql-results+xml";
    SparqlEndpointFetcher.CONTENTTYPE_TURTLE = "text/turtle";
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL = `${SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON};q=1.0,${SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML};q=0.7`;
  }
});

// ../../lipdjs/node_modules/fetch-sparql-endpoint/index.js
var require_fetch_sparql_endpoint = __commonJS({
  "../../lipdjs/node_modules/fetch-sparql-endpoint/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlEndpointFetcher(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/QuadDestinationSparql.js
var require_QuadDestinationSparql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/QuadDestinationSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuadDestinationSparql = void 0;
    var stream_to_string_1 = require_dist2();
    var asynciterator_1 = require_asynciterator();
    var fetch_sparql_endpoint_1 = require_fetch_sparql_endpoint();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var QuadDestinationSparql = class {
      constructor(url, context, mediatorHttp, dataFactory) {
        this.url = url;
        this.context = context;
        this.mediatorHttp = mediatorHttp;
        this.endpointFetcher = new fetch_sparql_endpoint_1.SparqlEndpointFetcher({
          fetch: (input, init) => this.mediatorHttp.mediate({ input, init, context: this.context }),
          prefixVariableQuestionMark: true,
          dataFactory
        });
      }
      async update(quadStreams) {
        const queryStream = this.createCombinedQuadsQuery(quadStreams.insert, quadStreams.delete);
        await this.wrapSparqlUpdateRequest(queryStream);
      }
      createCombinedQuadsQuery(quadsToInsert, quadsToDelete) {
        return new asynciterator_1.ArrayIterator([], { autoStart: false }).append(this.createQuadsQuery("DELETE", quadsToDelete)).append(quadsToDelete && quadsToInsert ? [" ;\n"] : []).append(this.createQuadsQuery("INSERT", quadsToInsert));
      }
      createQuadsQuery(type, quads) {
        if (!quads) {
          return new asynciterator_1.ArrayIterator([], { autoStart: false });
        }
        return quads.map((quad) => {
          let stringQuad = `${(0, rdf_string_ttl_1.termToString)(quad.subject)} ${(0, rdf_string_ttl_1.termToString)(quad.predicate)} ${(0, rdf_string_ttl_1.termToString)(quad.object)} .`;
          if (quad.graph.termType === "DefaultGraph") {
            stringQuad = `  ${stringQuad}
`;
          } else {
            stringQuad = `  GRAPH ${(0, rdf_string_ttl_1.termToString)(quad.graph)} { ${stringQuad} }
`;
          }
          return stringQuad;
        }).prepend([`${type} DATA {
`]).append(["}"]);
      }
      async wrapSparqlUpdateRequest(queryStream) {
        const query = await (0, stream_to_string_1.stringify)(queryStream);
        await this.endpointFetcher.fetchUpdate(this.url, query);
      }
      async deleteGraphs(graphsIn, requireExistence, dropGraphs) {
        const graphs = Array.isArray(graphsIn) ? graphsIn : [graphsIn];
        const queries = [];
        for (const graph of graphs) {
          let graphValue;
          if (typeof graph === "string") {
            graphValue = graph;
          } else if (graph.termType === "DefaultGraph") {
            graphValue = "DEFAULT";
          } else {
            graphValue = `GRAPH <${graph.value}>`;
          }
          queries.push(`${dropGraphs ? "DROP" : "CLEAR"} ${requireExistence ? "" : "SILENT "}${graphValue}`);
        }
        await this.endpointFetcher.fetchUpdate(this.url, queries.join("; "));
      }
      async createGraphs(graphs, requireNonExistence) {
        const queries = [];
        for (const graph of graphs) {
          queries.push(`CREATE${requireNonExistence ? "" : " SILENT"} GRAPH <${graph.value}>`);
        }
        await this.endpointFetcher.fetchUpdate(this.url, queries.join("; "));
      }
    };
    exports.QuadDestinationSparql = QuadDestinationSparql;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/ActorRdfUpdateHypermediaSparql.js
var require_ActorRdfUpdateHypermediaSparql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/ActorRdfUpdateHypermediaSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateHypermediaSparql = void 0;
    var bus_rdf_update_hypermedia_1 = require_lib211();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var QuadDestinationSparql_1 = require_QuadDestinationSparql();
    var ActorRdfUpdateHypermediaSparql = class extends bus_rdf_update_hypermedia_1.ActorRdfUpdateHypermedia {
      constructor(args) {
        super(args, "sparql");
      }
      async testMetadata(action) {
        if (!action.forceDestinationType && !action.metadata.sparqlService && !(this.checkUrlSuffixSparql && (action.url.endsWith("/sparql") || action.url.endsWith("/sparql/"))) && !(this.checkUrlSuffixUpdate && (action.url.endsWith("/update") || action.url.endsWith("/update/")))) {
          return (0, core_1.failTest)(`Actor ${this.name} could not detect a SPARQL service description or URL ending on /sparql or /update.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        this.logInfo(action.context, `Identified as sparql destination: ${action.url}`);
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        return {
          destination: new QuadDestinationSparql_1.QuadDestinationSparql(action.metadata.sparqlService || action.url, action.context, this.mediatorHttp, dataFactory)
        };
      }
    };
    exports.ActorRdfUpdateHypermediaSparql = ActorRdfUpdateHypermediaSparql;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/index.js
var require_lib214 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-hypermedia-sparql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateHypermediaSparql(), exports);
    __exportStar(require_QuadDestinationSparql(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-ask/lib/ActorQueryOperationAsk.js
var require_ActorQueryOperationAsk = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-ask/lib/ActorQueryOperationAsk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationAsk = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationAsk = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "ask");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const { bindingsStream } = (0, utils_query_operation_1.getSafeBindings)(output);
        return { type: "boolean", execute: async () => (await bindingsStream.take(1).toArray()).length === 1 };
      }
    };
    exports.ActorQueryOperationAsk = ActorQueryOperationAsk;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-ask/lib/index.js
var require_lib215 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-ask/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationAsk(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-bgp-join/lib/ActorQueryOperationBgpJoin.js
var require_ActorQueryOperationBgpJoin = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-bgp-join/lib/ActorQueryOperationBgpJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationBgpJoin = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationBgpJoin = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "bgp");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        return this.mediatorQueryOperation.mediate({
          operation: algebraFactory.createJoin(operation.patterns),
          context
        });
      }
    };
    exports.ActorQueryOperationBgpJoin = ActorQueryOperationBgpJoin;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-bgp-join/lib/index.js
var require_lib216 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-bgp-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationBgpJoin(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/BindingsToQuadsIterator.js
var require_BindingsToQuadsIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/BindingsToQuadsIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsToQuadsIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var rdf_terms_1 = require_rdf_terms();
    var BindingsToQuadsIterator = class _BindingsToQuadsIterator extends asynciterator_1.MultiTransformIterator {
      constructor(dataFactory, template, bindingsStream) {
        super(bindingsStream, { autoStart: false });
        this.dataFactory = dataFactory;
        this.template = template;
        this.blankNodeCounter = 0;
      }
      /**
       * Bind the given term.
       * If the term is a variable and the variable is bound in the bindings object,
       * return the bindings value.
       * If the term is a variable and the variable is not bound in the bindings object,
       * a falsy value is returned..
       * Otherwise, the term itself is returned.
       * @param {Bindings}  bindings A bindings object.
       * @param {RDF.Term}  term     An RDF term.
       * @return {RDF.Term}          If the given term is not a variable, the term itself is returned.
       *                             If the given term is a variable, then the bound term is returned,
       *                             or a falsy value if it did not exist in the bindings.
       */
      static bindTerm(bindings, term) {
        if (term.termType === "Variable") {
          return bindings.get(term);
        }
        return term;
      }
      /**
       * Bind the given quad pattern.
       * If one of the terms was a variable AND is not bound in the bindings,
       * a falsy value will be returned.
       * @param {Bindings} bindings A bindings object.
       * @param {RDF.Quad} pattern  An RDF quad.
       * @return {RDF.Quad}         A bound RDF quad or undefined.
       */
      static bindQuad(bindings, pattern) {
        try {
          return (0, rdf_terms_1.mapTermsNested)(pattern, (term) => {
            const boundTerm = _BindingsToQuadsIterator.bindTerm(bindings, term);
            if (!boundTerm) {
              throw new Error("Unbound term");
            }
            return boundTerm;
          });
        } catch {
        }
      }
      /**
       * Convert a blank node to a unique blank node in the given context.
       * If the given term is not a blank node, the term itself will be returned.
       * @param dataFactory The data factory.
       * @param             blankNodeCounter A counter value for the blank node.
       * @param {RDF.Term}  term             The term that should be localized.
       * @return {RDF.Term}                  A term.
       */
      static localizeBlankNode(dataFactory, blankNodeCounter, term) {
        if (term.termType === "BlankNode") {
          return dataFactory.blankNode(`${term.value}${blankNodeCounter}`);
        }
        return term;
      }
      /**
       * Convert the given quad to a quad that only contains unique blank nodes.
       * @param dataFactory The data factory.
       * @param            blankNodeCounter A counter value for the blank node.
       * @param {RDF.BaseQuad} pattern          The pattern that should be localized.
       * @return {RDF.BaseQuad}                 A quad.
       */
      static localizeQuad(dataFactory, blankNodeCounter, pattern) {
        return (0, rdf_terms_1.mapTermsNested)(pattern, (term) => _BindingsToQuadsIterator.localizeBlankNode(dataFactory, blankNodeCounter, term));
      }
      /**
       * Convert the given template to a list of quads based on the given bindings.
       * @param {Bindings}    bindings           A bindings object.
       * @param {RDF.Quad[]}  template           A list of quad patterns.
       * @param               blankNodeCounter   A counter value for the blank node.
       * @return {RDF.Quad[]}                    A list of quads.
       */
      bindTemplate(bindings, template, blankNodeCounter) {
        const quads = template.map(_BindingsToQuadsIterator.localizeQuad.bind(null, this.dataFactory, blankNodeCounter)).map((x) => _BindingsToQuadsIterator.bindQuad.bind(null, bindings)(x)).filter(Boolean);
        return quads;
      }
      _createTransformer(bindings) {
        return new asynciterator_1.ArrayIterator(this.bindTemplate(bindings, this.template, this.blankNodeCounter++), { autoStart: false });
      }
    };
    exports.BindingsToQuadsIterator = BindingsToQuadsIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/ActorQueryOperationConstruct.js
var require_ActorQueryOperationConstruct = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/ActorQueryOperationConstruct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationConstruct = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BindingsToQuadsIterator_1 = require_BindingsToQuadsIterator();
    var ActorQueryOperationConstruct = class _ActorQueryOperationConstruct extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "construct");
      }
      /**
       * Find all variables in a list of triple patterns.
       * @param {Algebra.Pattern[]} patterns An array of triple patterns.
       * @return {RDF.Variable[]} The variables in the triple patterns.
       */
      static getVariables(patterns) {
        return (0, rdf_terms_1.uniqTerms)([].concat.apply([], patterns.map((pattern) => (0, rdf_terms_1.getVariables)((0, rdf_terms_1.getTermsNested)(pattern)))));
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operationOriginal, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const variables = _ActorQueryOperationConstruct.getVariables(operationOriginal.template);
        const operation = { type: sparqlalgebrajs_1.Algebra.types.PROJECT, input: operationOriginal.input, variables };
        const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation, context }));
        const quadStream = new BindingsToQuadsIterator_1.BindingsToQuadsIterator(dataFactory, operationOriginal.template, output.bindingsStream);
        const metadata = () => output.metadata().then((meta) => ({
          ...meta,
          order: void 0,
          cardinality: {
            type: meta.cardinality.type,
            value: meta.cardinality.value * operationOriginal.template.length
          },
          availableOrders: void 0
        }));
        return {
          metadata,
          quadStream,
          type: "quads"
        };
      }
    };
    exports.ActorQueryOperationConstruct = ActorQueryOperationConstruct;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/index.js
var require_lib217 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-construct/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationConstruct(), exports);
    __exportStar(require_BindingsToQuadsIterator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/BlankNode.js
var require_BlankNode2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/BlankNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNode = void 0;
    var BlankNode = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNode = BlankNode;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/DefaultGraph.js
var require_DefaultGraph2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/DefaultGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGraph = void 0;
    var DefaultGraph = class {
      constructor() {
        this.termType = "DefaultGraph";
        this.value = "";
      }
      equals(other) {
        return !!other && other.termType === "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph;
    DefaultGraph.INSTANCE = new DefaultGraph();
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/NamedNode.js
var require_NamedNode2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/NamedNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedNode = void 0;
    var NamedNode = class {
      constructor(value) {
        this.termType = "NamedNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "NamedNode" && other.value === this.value;
      }
    };
    exports.NamedNode = NamedNode;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Literal.js
var require_Literal2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Literal = void 0;
    var NamedNode_1 = require_NamedNode2();
    var Literal = class _Literal {
      constructor(value, languageOrDatatype) {
        this.termType = "Literal";
        this.value = value;
        if (typeof languageOrDatatype === "string") {
          this.language = languageOrDatatype;
          this.datatype = _Literal.RDF_LANGUAGE_STRING;
          this.direction = "";
        } else if (languageOrDatatype) {
          if ("termType" in languageOrDatatype) {
            this.language = "";
            this.datatype = languageOrDatatype;
            this.direction = "";
          } else {
            this.language = languageOrDatatype.language;
            this.datatype = languageOrDatatype.direction ? _Literal.RDF_DIRECTIONAL_LANGUAGE_STRING : _Literal.RDF_LANGUAGE_STRING;
            this.direction = languageOrDatatype.direction || "";
          }
        } else {
          this.language = "";
          this.datatype = _Literal.XSD_STRING;
          this.direction = "";
        }
      }
      equals(other) {
        return !!other && other.termType === "Literal" && other.value === this.value && other.language === this.language && (other.direction === this.direction || !other.direction && this.direction === "") && this.datatype.equals(other.datatype);
      }
    };
    exports.Literal = Literal;
    Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    Literal.RDF_DIRECTIONAL_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString");
    Literal.XSD_STRING = new NamedNode_1.NamedNode("http://www.w3.org/2001/XMLSchema#string");
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Quad.js
var require_Quad2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Quad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quad = void 0;
    var Quad = class {
      constructor(subject, predicate, object, graph) {
        this.termType = "Quad";
        this.value = "";
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
      }
      equals(other) {
        return !!other && (other.termType === "Quad" || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Quad = Quad;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Variable.js
var require_Variable3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Variable2 = class {
      constructor(value) {
        this.termType = "Variable";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "Variable" && other.value === this.value;
      }
    };
    exports.Variable = Variable2;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/DataFactory.js
var require_DataFactory2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/lib/DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFactory = void 0;
    var BlankNode_1 = require_BlankNode2();
    var DefaultGraph_1 = require_DefaultGraph2();
    var Literal_1 = require_Literal2();
    var NamedNode_1 = require_NamedNode2();
    var Quad_1 = require_Quad2();
    var Variable_1 = require_Variable3();
    var dataFactoryCounter = 0;
    var DataFactory = class {
      constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
      }
      /**
       * @param value The IRI for the named node.
       * @return A new instance of NamedNode.
       * @see NamedNode
       */
      namedNode(value) {
        return new NamedNode_1.NamedNode(value);
      }
      /**
       * @param value The optional blank node identifier.
       * @return A new instance of BlankNode.
       *         If the `value` parameter is undefined a new identifier
       *         for the blank node is generated for each call.
       * @see BlankNode
       */
      blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
      }
      /**
       * @param value              The literal value.
       * @param languageOrDatatype The optional language, datatype, or directional language.
       *                           If `languageOrDatatype` is a NamedNode,
       *                           then it is used for the value of `NamedNode.datatype`.
       *                           If `languageOrDatatype` is a NamedNode, it is used for the value
       *                           of `NamedNode.language`.
       *                           Otherwise, it is used as a directional language,
       *                           from which the language is set to `languageOrDatatype.language`
       *                           and the direction to `languageOrDatatype.direction`.
       * @return A new instance of Literal.
       * @see Literal
       */
      literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
      }
      /**
       * This method is optional.
       * @param value The variable name
       * @return A new instance of Variable.
       * @see Variable
       */
      variable(value) {
        return new Variable_1.Variable(value);
      }
      /**
       * @return An instance of DefaultGraph.
       */
      defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
      }
      /**
       * @param subject   The quad subject term.
       * @param predicate The quad predicate term.
       * @param object    The quad object term.
       * @param graph     The quad graph term.
       * @return A new instance of Quad.
       * @see Quad
       */
      quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
      }
      /**
       * Create a deep copy of the given term using this data factory.
       * @param original An RDF term.
       * @return A deep copy of the given term.
       */
      fromTerm(original) {
        switch (original.termType) {
          case "NamedNode":
            return this.namedNode(original.value);
          case "BlankNode":
            return this.blankNode(original.value);
          case "Literal":
            if (original.language) {
              return this.literal(original.value, original.language);
            }
            if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
              return this.literal(original.value, this.fromTerm(original.datatype));
            }
            return this.literal(original.value);
          case "Variable":
            return this.variable(original.value);
          case "DefaultGraph":
            return this.defaultGraph();
          case "Quad":
            return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
      }
      /**
       * Create a deep copy of the given quad using this data factory.
       * @param original An RDF quad.
       * @return A deep copy of the given quad.
       */
      fromQuad(original) {
        return this.fromTerm(original);
      }
      /**
       * Reset the internal blank node counter.
       */
      resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
      }
    };
    exports.DataFactory = DataFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/index.js
var require_rdf_data_factory2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-data-factory/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNode2(), exports);
    __exportStar(require_DataFactory2(), exports);
    __exportStar(require_DefaultGraph2(), exports);
    __exportStar(require_Literal2(), exports);
    __exportStar(require_NamedNode2(), exports);
    __exportStar(require_Quad2(), exports);
    __exportStar(require_Variable3(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-string/lib/TermUtil.js
var require_TermUtil4 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-string/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = termToString;
    exports.getLiteralValue = getLiteralValue;
    exports.getLiteralType = getLiteralType;
    exports.getLiteralLanguage = getLiteralLanguage;
    exports.getLiteralDirection = getLiteralDirection;
    exports.stringToTerm = stringToTerm;
    exports.quadToStringQuad = quadToStringQuad;
    exports.stringQuadToQuad = stringQuadToQuad;
    var rdf_data_factory_1 = require_rdf_data_factory2();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return "_:" + term.value;
        case "Literal":
          const literalValue = term;
          return '"' + literalValue.value + '"' + (literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString" ? "^^" + literalValue.datatype.value : "") + (literalValue.language ? "@" + literalValue.language : "") + (literalValue.direction ? "--" + literalValue.direction : "");
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : " " + termToString(term.graph)}>>`;
        case "Variable":
          return "?" + term.value;
        case "DefaultGraph":
          return term.value;
      }
    }
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1];
    }
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      if (match[1]) {
        let ret = match[1].toLowerCase();
        const doubleDashPos = ret.indexOf("--");
        if (doubleDashPos >= 0) {
          ret = ret.slice(0, doubleDashPos);
        }
        return ret;
      }
      return "";
    }
    function getLiteralDirection(literalValue) {
      const doubleDashPos = literalValue.indexOf("--", literalValue.lastIndexOf('"'));
      if (doubleDashPos >= 0) {
        const direction = literalValue.slice(doubleDashPos + 2, literalValue.length);
        if (direction === "ltr" || direction === "rtl") {
          return direction;
        }
        throw new Error(literalValue + " is not a literal with a valid direction");
      }
      return "";
    }
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || !value.length) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.substr(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.substr(1));
        case '"':
          const language = getLiteralLanguage(value);
          const direction = getLiteralDirection(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language ? { language, direction } : type);
        case "<":
        default:
          if (value[0] === "<" && value.length > 4 && value[1] === "<" && value[value.length - 1] === ">" && value[value.length - 2] === ">") {
            const terms = value.slice(2, -2).trim();
            let stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            let inQuote = false;
            for (let i = 0; i < terms.length; i++) {
              const char = terms[i];
              if (char === "<")
                ignoreTags++;
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error("Found closing tag without opening tag in " + value);
                } else {
                  ignoreTags--;
                }
              }
              if (char === '"') {
                let escaped = false;
                let j = i;
                while (j-- > 0 && terms[j] === "\\") {
                  escaped = !escaped;
                }
                if (!escaped) {
                  inQuote = !inQuote;
                }
              }
              if (char === " " && !inQuote && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i));
                while (terms[i + 1] === " ") {
                  i += 1;
                }
                lastIndex = i + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error("Found opening tag without closing tag in " + value);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error("Nested quad syntax error " + value);
            }
            stringTerms = stringTerms.map((term) => term.startsWith("<") && !term.includes(" ") ? term.slice(1, -1) : term);
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          return dataFactory.namedNode(value);
      }
    }
    function quadToStringQuad(q) {
      return {
        subject: termToString(q.subject),
        predicate: termToString(q.predicate),
        object: termToString(q.object),
        graph: termToString(q.graph)
      };
    }
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-string/index.js
var require_rdf_string2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/node_modules/rdf-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralDirection = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil4();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralDirection", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralDirection;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/lib/ActorQueryOperationDistinctIdentity.js
var require_ActorQueryOperationDistinctIdentity = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/lib/ActorQueryOperationDistinctIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationDistinctIdentity = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var RdfString = require_rdf_string2();
    var ActorQueryOperationDistinctIdentity = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "distinct");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        if (output.type === "quads") {
          const outputQuads = (0, utils_query_operation_1.getSafeQuads)(output);
          const quadStream = outputQuads.quadStream.filter(await this.newIdentityFilterQuads());
          return {
            type: "quads",
            quadStream,
            metadata: outputQuads.metadata
          };
        }
        const outputBindings = (0, utils_query_operation_1.getSafeBindings)(output);
        const variables = (await outputBindings.metadata()).variables.map((v) => v.variable);
        const bindingsStream = outputBindings.bindingsStream.filter(await this.newIdentityFilter(variables));
        return {
          type: "bindings",
          bindingsStream,
          metadata: outputBindings.metadata
        };
      }
      /**
       * Create a new distinct filter function.
       * This will maintain an internal Identity datastructure so that every bindings object only returns true once.
       * @param variables The variables to take into account while hashing.
       * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
       */
      async newIdentityFilter(variables) {
        const identities = {};
        return (bindings) => {
          const identity = variables.map((v) => RdfString.termToString(bindings.get(v))).join("-");
          return !(identity in identities) && (identities[identity] = true);
        };
      }
      /**
       * Create a new distinct filter function to Identity quads.
       * This will maintain an internal Identity datastructure so that every quad object only returns true once.
       * @return {(quad: RDF.Quad) => boolean} A distinct filter for quads.
       */
      async newIdentityFilterQuads() {
        const identities = {};
        return (quad) => {
          const identity = Object.values(RdfString.quadToStringQuad(quad)).join(" ");
          return !(identity in identities) && (identities[identity] = true);
        };
      }
    };
    exports.ActorQueryOperationDistinctIdentity = ActorQueryOperationDistinctIdentity;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/lib/index.js
var require_lib218 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-distinct-identity/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationDistinctIdentity(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-extend/lib/ActorQueryOperationExtend.js
var require_ActorQueryOperationExtend = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-extend/lib/ActorQueryOperationExtend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationExtend = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_expression_evaluator_1 = require_lib6();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationExtend = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "extend");
        this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;
      }
      async testOperation() {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const { expression, input, variable } = operation;
        const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: input, context }));
        if ((await output.metadata()).variables.some((innerVariable) => innerVariable.variable.equals(variable))) {
          throw new Error(`Illegal binding to variable '${variable.value}' that has already been bound`);
        }
        const evaluator = await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expression, context });
        const transform = async (bindings, next, push) => {
          try {
            const result = await evaluator.evaluate(bindings);
            const extended = bindings.set(variable, result);
            push(extended);
          } catch (error) {
            if ((0, utils_expression_evaluator_1.isExpressionError)(error)) {
              push(bindings);
              this.logWarn(context, `Expression error for extend operation (${error.message})with bindings '${(0, utils_bindings_factory_1.bindingsToString)(bindings)}'`);
            } else {
              bindingsStream.emit("error", error);
            }
          }
          next();
        };
        const bindingsStream = output.bindingsStream.transform({ autoStart: false, transform });
        return {
          type: "bindings",
          bindingsStream,
          async metadata() {
            const outputMetadata = await output.metadata();
            return { ...outputMetadata, variables: [...outputMetadata.variables, { variable, canBeUndef: false }] };
          }
        };
      }
    };
    exports.ActorQueryOperationExtend = ActorQueryOperationExtend;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-extend/lib/index.js
var require_lib219 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-extend/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationExtend(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-filter/lib/ActorQueryOperationFilter.js
var require_ActorQueryOperationFilter = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-filter/lib/ActorQueryOperationFilter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationFilter = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_expression_evaluator_1 = require_lib6();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationFilter = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "filter");
        this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;
      }
      async testOperation() {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const output = (0, utils_query_operation_1.getSafeBindings)(outputRaw);
        (0, utils_query_operation_1.validateQueryOutput)(output, "bindings");
        const evaluator = await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: operation.expression, context });
        const transform = async (item, next, push) => {
          try {
            const result = await evaluator.evaluateAsEBV(item);
            if (result) {
              push(item);
            }
          } catch (error) {
            if ((0, utils_expression_evaluator_1.isExpressionError)(error)) {
              this.logWarn(context, "Error occurred while filtering.", () => ({ error, bindings: (0, utils_bindings_factory_1.bindingsToString)(item) }));
            } else {
              bindingsStream.emit("error", error);
            }
          }
          next();
        };
        const bindingsStream = output.bindingsStream.transform({ transform, autoStart: false });
        return { type: "bindings", bindingsStream, metadata: output.metadata };
      }
    };
    exports.ActorQueryOperationFilter = ActorQueryOperationFilter;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-filter/lib/index.js
var require_lib220 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-filter/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationFilter(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-from-quad/lib/ActorQueryOperationFromQuad.js
var require_ActorQueryOperationFromQuad = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-from-quad/lib/ActorQueryOperationFromQuad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationFromQuad = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationFromQuad = class _ActorQueryOperationFromQuad extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "from");
      }
      /**
       * Create a deep copy of the given operation.
       * @param {Operation} operation An operation.
       * @param {(subOperation: Operation) => Operation} recursiveCb A callback for recursive operation calls.
       * @return {Operation} The copied operation.
       */
      static copyOperation(operation, recursiveCb) {
        const copiedOperation = {};
        for (const key of Object.keys(operation)) {
          if (Array.isArray(operation[key]) && key !== "template") {
            if (key === "variables") {
              copiedOperation[key] = operation[key];
            } else {
              copiedOperation[key] = operation[key].map(recursiveCb);
            }
          } else if (_ActorQueryOperationFromQuad.ALGEBRA_TYPES.includes(operation[key].type)) {
            copiedOperation[key] = recursiveCb(operation[key]);
          } else {
            copiedOperation[key] = operation[key];
          }
        }
        return copiedOperation;
      }
      /**
       * Recursively transform the given operation to use the given graphs as default graph
       * This will (possibly) create a new operation and not modify the given operation.
       * @package
       * @param algebraFactory The algebra factory.
       * @param {Operation} operation An operation.
       * @param {RDF.Term[]} defaultGraphs Graph terms.
       * @return {Operation} A new operation.
       */
      static applyOperationDefaultGraph(algebraFactory, operation, defaultGraphs) {
        if (operation.type === "bgp" && operation.patterns.length > 0 || operation.type === "path" || operation.type === "pattern") {
          if (operation.type === "bgp") {
            return _ActorQueryOperationFromQuad.joinOperations(algebraFactory, operation.patterns.map((pattern) => {
              if (pattern.graph.termType !== "DefaultGraph") {
                return algebraFactory.createBgp([pattern]);
              }
              const bgps = defaultGraphs.map((graph) => algebraFactory.createBgp([Object.assign(algebraFactory.createPattern(pattern.subject, pattern.predicate, pattern.object, graph), { metadata: pattern.metadata })]));
              return _ActorQueryOperationFromQuad.unionOperations(algebraFactory, bgps);
            }));
          }
          if (operation.graph.termType !== "DefaultGraph") {
            return operation;
          }
          const paths = defaultGraphs.map((graph) => {
            if (operation.type === "path") {
              return algebraFactory.createPath(operation.subject, operation.predicate, operation.object, graph);
            }
            return Object.assign(algebraFactory.createPattern(operation.subject, operation.predicate, operation.object, graph), { metadata: operation.metadata });
          });
          return _ActorQueryOperationFromQuad.unionOperations(algebraFactory, paths);
        }
        return _ActorQueryOperationFromQuad.copyOperation(operation, (subOperation) => this.applyOperationDefaultGraph(algebraFactory, subOperation, defaultGraphs));
      }
      /**
       * Recursively transform the given operation to use the given graphs as named graph
       * This will (possibly) create a new operation and not modify the given operation.
       * @package
       * @param algebraFactory The algebra factory.
       * @param {Operation} operation An operation.
       * @param {RDF.Term[]} namedGraphs Graph terms.
       * @param {RDF.Term[]} defaultGraphs Default graph terms.
       * @return {Operation} A new operation.
       */
      static applyOperationNamedGraph(algebraFactory, operation, namedGraphs, defaultGraphs) {
        if (operation.type === "bgp" && operation.patterns.length > 0 || operation.type === "path" || operation.type === "pattern") {
          const patternGraph = operation.type === "bgp" ? operation.patterns[0].graph : operation.graph;
          if (patternGraph.termType === "DefaultGraph") {
            return { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: [] };
          }
          if (patternGraph.termType === "Variable") {
            if (namedGraphs.length === 1) {
              const graph = namedGraphs[0];
              const bindings = {};
              bindings[`?${patternGraph.value}`] = graph;
              const values2 = algebraFactory.createValues([patternGraph], [bindings]);
              let pattern;
              if (operation.type === "bgp") {
                pattern = algebraFactory.createBgp(operation.patterns.map((pat) => algebraFactory.createPattern(pat.subject, pat.predicate, pat.object, graph)));
              } else if (operation.type === "path") {
                pattern = algebraFactory.createPath(operation.subject, operation.predicate, operation.object, graph);
              } else {
                pattern = algebraFactory.createPattern(operation.subject, operation.predicate, operation.object, graph);
              }
              return algebraFactory.createJoin([values2, pattern]);
            }
            return _ActorQueryOperationFromQuad.unionOperations(algebraFactory, namedGraphs.map((graph) => _ActorQueryOperationFromQuad.applyOperationNamedGraph(algebraFactory, operation, [graph], defaultGraphs)));
          }
          const isNamedGraphAvailable = [...namedGraphs, ...defaultGraphs].some((namedGraph) => namedGraph.equals(patternGraph));
          if (isNamedGraphAvailable) {
            return operation;
          }
          return { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: [] };
        }
        return _ActorQueryOperationFromQuad.copyOperation(operation, (subOperation) => this.applyOperationNamedGraph(algebraFactory, subOperation, namedGraphs, defaultGraphs));
      }
      /**
       * Transform the given array of operations into a join operation.
       * @package
       * @param algebraFactory The algebra factory.
       * @param {Operation[]} operations An array of operations, must contain at least one operation.
       * @return {Join} A join operation.
       */
      static joinOperations(algebraFactory, operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        if (operations.length > 1) {
          return algebraFactory.createJoin(operations);
        }
        throw new Error("A join can only be applied on at least one operation");
      }
      /**
       * Transform the given array of operations into a union operation.
       * @package
       * @param algebraFactory The algebra factory.
       * @param {Operation[]} operations An array of operations, must contain at least one operation.
       * @return {Union} A union operation.
       */
      static unionOperations(algebraFactory, operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        if (operations.length > 1) {
          return algebraFactory.createUnion(operations);
        }
        throw new Error("A union can only be applied on at least one operation");
      }
      /**
       * Transform an operation based on the default and named graphs in the pattern.
       *
       * FROM sets the default graph.
       * If multiple are available, take the union of the operation for all of them at quad-pattern level.
       *
       * FROM NAMED indicates which named graphs are available.
       * This will rewrite the query so that only triples from the given named graphs can be selected.
       *
       * @package
       * @param algebraFactory The algebra factory.
       * @param {From} pattern A from operation.
       * @return {Operation} The transformed operation.
       */
      static createOperation(algebraFactory, pattern) {
        let operation = pattern.input;
        if (pattern.default.length > 0) {
          operation = _ActorQueryOperationFromQuad.applyOperationDefaultGraph(algebraFactory, operation, pattern.default);
        }
        if (pattern.named.length > 0 || pattern.default.length > 0) {
          operation = _ActorQueryOperationFromQuad.applyOperationNamedGraph(algebraFactory, operation, pattern.named, pattern.default);
        }
        return operation;
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operationOriginal, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = _ActorQueryOperationFromQuad.createOperation(algebraFactory, operationOriginal);
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationFromQuad = ActorQueryOperationFromQuad;
    ActorQueryOperationFromQuad.ALGEBRA_TYPES = Object.keys(sparqlalgebrajs_1.Algebra.types).map((key) => sparqlalgebrajs_1.Algebra.types[key]);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-from-quad/lib/index.js
var require_lib221 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-from-quad/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationFromQuad(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-project/lib/ActorQueryOperationProject.js
var require_ActorQueryOperationProject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-project/lib/ActorQueryOperationProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationProject = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_data_factory_1 = require_lib14();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationProject = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "project");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const outputMetadata = await output.metadata();
        const variablesOutputIndexed = Object.fromEntries(outputMetadata.variables.map((entry) => [entry.variable.value, entry]));
        const variablesOperation = operation.variables.map((v) => ({ variable: v, canBeUndef: false }));
        const variablesOperationIndexed = Object.fromEntries(variablesOperation.map((entry) => [entry.variable.value, entry]));
        const deleteVariables = outputMetadata.variables.filter((variable) => !(variable.variable.value in variablesOperationIndexed));
        const variablesOutput = variablesOperation.map((variable) => ({
          variable: variable.variable,
          canBeUndef: !(variable.variable.value in variablesOutputIndexed) || variablesOutputIndexed[variable.variable.value].canBeUndef
        }));
        let bindingsStream = deleteVariables.length === 0 ? output.bindingsStream : output.bindingsStream.map((bindings) => {
          for (const deleteVariable of deleteVariables) {
            bindings = bindings.delete(deleteVariable.variable);
          }
          return bindings;
        });
        let blankNodeCounter = 0;
        bindingsStream = bindingsStream.map((bindings) => {
          blankNodeCounter++;
          const scopedBlankNodesCache = /* @__PURE__ */ new Map();
          return bindings.map((term) => {
            if (term instanceof utils_data_factory_1.BlankNodeBindingsScoped) {
              let scopedBlankNode = scopedBlankNodesCache.get(term.value);
              if (!scopedBlankNode) {
                scopedBlankNode = dataFactory.blankNode(`${term.value}${blankNodeCounter}`);
                scopedBlankNodesCache.set(term.value, scopedBlankNode);
              }
              return scopedBlankNode;
            }
            return term;
          });
        });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({ ...outputMetadata, variables: variablesOutput })
        };
      }
    };
    exports.ActorQueryOperationProject = ActorQueryOperationProject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-project/lib/index.js
var require_lib222 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-project/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationProject(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-reduced-hash/lib/ActorQueryOperationReducedHash.js
var require_ActorQueryOperationReducedHash = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-reduced-hash/lib/ActorQueryOperationReducedHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationReducedHash = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var lru_cache_1 = require_commonjs();
    var ActorQueryOperationReducedHash = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "reduced");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const variables = (await output.metadata()).variables.map((v) => v.variable);
        const bindingsStream = output.bindingsStream.filter(await this.newHashFilter(context, variables));
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
      /**
       * Create a new distinct filter function.
       * This will maintain an internal hash datastructure so that every bindings object only returns true once.
       * @param context The action context.
       * @param variables The variables to take into account while hashing.
       * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
       */
      async newHashFilter(context, variables) {
        const { hashFunction } = await this.mediatorHashBindings.mediate({ context });
        const hashes = new lru_cache_1.LRUCache({ max: this.cacheSize });
        return (bindings) => {
          const hash2 = hashFunction(bindings, variables);
          if (hashes.has(hash2)) {
            return false;
          }
          hashes.set(hash2, true);
          return true;
        };
      }
    };
    exports.ActorQueryOperationReducedHash = ActorQueryOperationReducedHash;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-reduced-hash/lib/index.js
var require_lib223 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-reduced-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationReducedHash(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-slice/lib/ActorQueryOperationSlice.js
var require_ActorQueryOperationSlice = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-slice/lib/ActorQueryOperationSlice.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationSlice = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorQueryOperationSlice = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "slice");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        if (operation.length) {
          context = context.set(context_entries_1.KeysQueryOperation.limitIndicator, operation.length);
        }
        const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        if (output.type === "bindings") {
          const bindingsStream = this.sliceStream(output.bindingsStream, operation);
          return {
            type: "bindings",
            bindingsStream,
            metadata: this.sliceMetadata(output, operation)
          };
        }
        if (output.type === "quads") {
          const quadStream = this.sliceStream(output.quadStream, operation);
          return {
            type: "quads",
            quadStream,
            metadata: this.sliceMetadata(output, operation)
          };
        }
        return output;
      }
      // Slice the stream based on the pattern values
      sliceStream(stream, pattern) {
        const hasLength = Boolean(pattern.length) || pattern.length === 0;
        const { start } = pattern;
        const end = hasLength ? pattern.start + pattern.length - 1 : Number.POSITIVE_INFINITY;
        return stream.transform({ offset: start, limit: Math.max(end - start + 1, 0), autoStart: false });
      }
      // If we find metadata, apply slicing on the total number of items
      sliceMetadata(output, pattern) {
        const hasLength = Boolean(pattern.length) || pattern.length === 0;
        return () => output.metadata().then((subMetadata) => {
          const cardinality = { ...subMetadata.cardinality };
          if (Number.isFinite(cardinality.value)) {
            cardinality.value = Math.max(0, cardinality.value - pattern.start);
            if (hasLength) {
              cardinality.value = Math.min(cardinality.value, pattern.length);
            }
          }
          return { ...subMetadata, cardinality };
        });
      }
    };
    exports.ActorQueryOperationSlice = ActorQueryOperationSlice;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-slice/lib/index.js
var require_lib224 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-slice/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationSlice(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-union/lib/ActorQueryOperationUnion.js
var require_ActorQueryOperationUnion = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-union/lib/ActorQueryOperationUnion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUnion = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var ActorQueryOperationUnion = class _ActorQueryOperationUnion extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "union");
      }
      /**
       * Takes the union of the given double array variables.
       * Uniqueness is guaranteed.
       * @param {string[][]} variables Double array of variables to take the union of.
       * @return {string[]} The union of the given variables.
       */
      static unionVariables(variables) {
        const variablesIndexed = {};
        for (const variablesA of variables) {
          for (const variable of variablesA) {
            if (!variablesIndexed[variable.variable.value]) {
              variablesIndexed[variable.variable.value] = {
                variable: variable.variable,
                canBeUndef: variable.canBeUndef,
                occurrences: 0
              };
            }
            const entry = variablesIndexed[variable.variable.value];
            entry.canBeUndef = entry.canBeUndef || variable.canBeUndef;
            entry.occurrences++;
          }
        }
        return Object.values(variablesIndexed).map((entry) => entry.occurrences === variables.length ? { variable: entry.variable, canBeUndef: entry.canBeUndef } : { variable: entry.variable, canBeUndef: true });
      }
      /**
       * Takes the union of the given metadata array.
       * It will ensure that the cardinality metadata value is properly calculated.
       * @param {{[p: string]: any}[]} metadatas Array of metadata.
       * @param bindings If the union of the variables field should also be taken.
       * @param context The action context
       * @param mediatorRdfMetadataAccumulate Mediator for metadata accumulation
       * @return {{[p: string]: any}} Union of the metadata.
       */
      static async unionMetadata(metadatas, bindings, context, mediatorRdfMetadataAccumulate) {
        let accumulatedMetadata = (await mediatorRdfMetadataAccumulate.mediate({ mode: "initialize", context })).metadata;
        for (const appendingMetadata of metadatas) {
          accumulatedMetadata = {
            ...appendingMetadata,
            ...(await mediatorRdfMetadataAccumulate.mediate({
              mode: "append",
              accumulatedMetadata,
              appendingMetadata,
              context
            })).metadata
          };
        }
        accumulatedMetadata.state = new utils_metadata_1.MetadataValidationState();
        const invalidateListener = () => accumulatedMetadata.state.invalidate();
        for (const metadata of metadatas) {
          metadata.state.addInvalidateListener(invalidateListener);
        }
        if (bindings) {
          const variables = metadatas.map((metadata) => metadata.variables);
          accumulatedMetadata.variables = _ActorQueryOperationUnion.unionVariables(variables);
        }
        return accumulatedMetadata;
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const outputsRaw = await Promise.all(operation.input.map((subOperation) => this.mediatorQueryOperation.mediate({ operation: subOperation, context })));
        let outputType;
        for (const output of outputsRaw) {
          if (outputType === void 0) {
            outputType = output.type;
          } else if (outputType !== output.type) {
            throw new Error(`Unable to union ${outputType} and ${output.type}`);
          }
        }
        if (outputType === "bindings" || operation.input.length === 0) {
          const outputs = outputsRaw.map(utils_query_operation_1.getSafeBindings);
          const bindingsStream = new asynciterator_1.UnionIterator(outputs.map((output) => output.bindingsStream), { autoStart: false });
          const metadata = () => Promise.all(outputs.map((output) => output.metadata())).then((subMeta) => _ActorQueryOperationUnion.unionMetadata(subMeta, true, context, this.mediatorRdfMetadataAccumulate));
          return { type: "bindings", bindingsStream, metadata };
        }
        if (outputType === "quads") {
          const outputs = outputsRaw.map(utils_query_operation_1.getSafeQuads);
          const quadStream = new asynciterator_1.UnionIterator(outputs.map((output) => output.quadStream), { autoStart: false });
          const metadata = () => Promise.all(outputs.map((output) => output.metadata())).then((subMeta) => _ActorQueryOperationUnion.unionMetadata(subMeta, false, context, this.mediatorRdfMetadataAccumulate));
          return { type: "quads", quadStream, metadata };
        }
        throw new Error(`Unable to union ${outputType}`);
      }
    };
    exports.ActorQueryOperationUnion = ActorQueryOperationUnion;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-union/lib/index.js
var require_lib225 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-union/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUnion(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/PathVariableObjectIterator.js
var require_PathVariableObjectIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/PathVariableObjectIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PathVariableObjectIterator = void 0;
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var PathVariableObjectIterator = class extends asynciterator_1.BufferedIterator {
      constructor(algebraFactory, subject, predicate, graph, context, mediatorQueryOperation, emitFirstSubject, maxRunningOperations = 16) {
        super({ autoStart: false });
        this.algebraFactory = algebraFactory;
        this.subject = subject;
        this.predicate = predicate;
        this.graph = graph;
        this.context = context;
        this.mediatorQueryOperation = mediatorQueryOperation;
        this.maxRunningOperations = maxRunningOperations;
        this.termHashes = /* @__PURE__ */ new Map();
        this.runningOperations = [];
        this.pendingOperations = [];
        this.started = false;
        this._push(this.subject, emitFirstSubject);
      }
      getProperty(propertyName, callback) {
        if (!this.started && propertyName === "metadata") {
          this.startNextOperation(false).catch((error) => this.emit("error", error));
        }
        return super.getProperty(propertyName, callback);
      }
      _end(destroy) {
        for (const it of this.runningOperations) {
          it.destroy();
        }
        super._end(destroy);
      }
      _push(item, pushAsResult = true) {
        let termString;
        if (pushAsResult) {
          termString = (0, rdf_string_1.termToString)(item);
          if (this.termHashes.has(termString)) {
            return false;
          }
        }
        const variable = this.algebraFactory.dataFactory.variable("b");
        this.pendingOperations.push({
          variable,
          operation: this.algebraFactory.createPath(item, this.predicate, variable, this.graph)
        });
        if (termString) {
          this.termHashes.set(termString, item);
          super._push(item);
        }
        return true;
      }
      async startNextOperation(fillBuffer) {
        this.started = true;
        const pendingOperation = this.pendingOperations.pop();
        const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: pendingOperation.operation, context: this.context }));
        const runningOperation = results.bindingsStream.map((bindings) => bindings.get(pendingOperation.variable));
        if (!runningOperation.done) {
          this.runningOperations.push(runningOperation);
          runningOperation.on("error", (error) => this.destroy(error));
          runningOperation.on("readable", () => {
            if (fillBuffer) {
              this._fillBufferAsync();
            }
            this.readable = true;
          });
          runningOperation.on("end", () => {
            this.runningOperations.splice(this.runningOperations.indexOf(runningOperation), 1);
            if (fillBuffer) {
              this._fillBufferAsync();
            }
            this.readable = true;
          });
        }
        if (!this.getProperty("metadata")) {
          this.setProperty("metadata", results.metadata);
        }
      }
      _read(count2, done) {
        const self2 = this;
        (async function() {
          while (self2.runningOperations.length < self2.maxRunningOperations) {
            if (self2.pendingOperations.length === 0) {
              break;
            }
            await self2.startNextOperation(true);
          }
          let lastCount = 0;
          let item;
          let pushSucceeded = true;
          while (!pushSucceeded || lastCount !== (lastCount = count2)) {
            pushSucceeded = true;
            for (let i = 0; i < self2.runningOperations.length && count2 > 0; i++) {
              if ((item = self2.runningOperations[i].read()) !== null) {
                if (self2._push(item)) {
                  count2--;
                } else {
                  pushSucceeded = false;
                }
              }
            }
          }
          self2.closeIfNeeded();
        })().then(() => {
          done();
        }, (error) => this.destroy(error));
      }
      closeIfNeeded() {
        if (this.runningOperations.length === 0 && this.pendingOperations.length === 0) {
          this.close();
        }
      }
    };
    exports.PathVariableObjectIterator = PathVariableObjectIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/ActorAbstractPath.js
var require_ActorAbstractPath = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/ActorAbstractPath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractPath = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var PathVariableObjectIterator_1 = require_PathVariableObjectIterator();
    var ActorAbstractPath = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args, predicateType) {
        super(args, "path");
        this.predicateType = predicateType;
      }
      async testOperation(operation, _context) {
        if (operation.predicate.type !== this.predicateType) {
          return (0, core_1.failTest)(`This Actor only supports ${this.predicateType} Path operations.`);
        }
        return (0, core_1.passTestVoid)();
      }
      // Generates a variable that does not yet occur in the path
      generateVariable(dataFactory, path, name) {
        if (!name) {
          return this.generateVariable(dataFactory, path, "b");
        }
        if (path && (path.subject.value === name || path.object.value === name)) {
          return this.generateVariable(dataFactory, path, `${name}b`);
        }
        return dataFactory.variable(name);
      }
      // Such connectivity matching does not introduce duplicates (it does not incorporate any count of the number
      // of ways the connection can be made) even if the repeated path itself would otherwise result in duplicates.
      // https://www.w3.org/TR/sparql11-query/#propertypaths
      async isPathArbitraryLengthDistinct(algebraFactory, context, path) {
        if (!context.get(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey)) {
          context = context.set(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey, true);
          return { context, operation: (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({
            operation: algebraFactory.createDistinct(path),
            context
          })) };
        }
        context = context.set(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey, false);
        return { context, operation: void 0 };
      }
      async predicateStarGraphVariable(subject, object, predicate, graph, context, algebraFactory, bindingsFactory) {
        const sources = this.getPathSources(predicate);
        const predVar = this.generateVariable(algebraFactory.dataFactory, algebraFactory.createPath(subject, predicate, object, graph));
        const findGraphs = algebraFactory.createUnion([
          this.assignPatternSources(algebraFactory, algebraFactory.createPattern(subject, predVar, object, graph), sources),
          this.assignPatternSources(algebraFactory, algebraFactory.createPattern(object, predVar, subject, graph), sources)
        ]);
        const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ context, operation: findGraphs }));
        const passedGraphs = /* @__PURE__ */ new Set();
        const bindingsStream = new asynciterator_1.MultiTransformIterator(results.bindingsStream, {
          multiTransform: (bindings) => {
            const graphValue = bindings.get(graph);
            if (passedGraphs.has(graphValue.value)) {
              return new asynciterator_1.EmptyIterator();
            }
            passedGraphs.add(graphValue.value);
            return new asynciterator_1.TransformIterator(async () => {
              const it = new asynciterator_1.BufferedIterator();
              await this.getObjectsPredicateStar(algebraFactory, subject, predicate, graphValue, context, {}, it, { count: 0 });
              return it.map((item) => bindingsFactory.bindings([
                [object, item],
                [graph, graphValue]
              ]));
            }, { maxBufferSize: 128 });
          },
          autoStart: false
        });
        return {
          bindingsStream,
          metadata: results.metadata
        };
      }
      /**
       * Returns an iterator with Bindings of the query subject predicate* ?o or subject predicate+ ?o
       * If graph is a variable, it will also be in those bindings
       * @param {Term} subject Term of where we start the predicate* search.
       * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
       * @param {Variable} object Variable of the zeroOrMore-query.
       * @param {Term} graph The graph in which we search for the pattern. (Possibly a variable)
       * @param {ActionContext} context The context to pass to sub-opertations
       * @param emitFirstSubject If the path operation is predicate*, otherwise it is predicate+.
       * @param algebraFactory The algebra factory.
       * @param bindingsFactory The data factory.
       * @return {Promise<AsyncIterator<Bindings>} Iterator to where all bindings of query should have been pushed.
       */
      async getObjectsPredicateStarEval(subject, predicate, object, graph, context, emitFirstSubject, algebraFactory, bindingsFactory) {
        if (graph.termType === "Variable") {
          return this.predicateStarGraphVariable(subject, object, predicate, graph, context, algebraFactory, bindingsFactory);
        }
        const it = new PathVariableObjectIterator_1.PathVariableObjectIterator(algebraFactory, subject, predicate, graph, context, this.mediatorQueryOperation, emitFirstSubject);
        const bindingsStream = it.map((item) => bindingsFactory.bindings([[object, item]]));
        return {
          bindingsStream,
          async metadata() {
            const metadata = await new Promise((resolve) => {
              it.getProperty("metadata", (metadataInner) => resolve(metadataInner()));
            });
            metadata.cardinality.value++;
            return metadata;
          }
        };
      }
      /**
       * Pushes all terms to iterator `it` that are a solution of object predicate* ?o.
       * @param algebraFactory The algebra factory.
       * @param {Term} object Term of where we start the predicate* search.
       * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
       * @param {Term} graph The graph in which we search for the pattern.
       * @param {ActionContext} context
       * @param {Record<string, Term>} termHashes Remembers the objects we've already searched for.
       * @param {BufferedIterator<Term>} it Iterator to push terms to.
       * @param {any} counter Counts how many searches are in progress to close it when needed (when counter == 0).
       * @return {Promise<IPathResultStream['metadata']>} The results metadata.
       */
      async getObjectsPredicateStar(algebraFactory, object, predicate, graph, context, termHashes, it, counter) {
        const termString = (0, rdf_string_1.termToString)(object);
        if (termHashes[termString]) {
          return;
        }
        it._push(object);
        termHashes[termString] = object;
        counter.count++;
        const thisVariable = this.generateVariable(algebraFactory.dataFactory);
        const path = algebraFactory.createPath(object, predicate, thisVariable, graph);
        const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: path, context }));
        results.bindingsStream.on("data", async (bindings) => {
          const result = bindings.get(thisVariable);
          await this.getObjectsPredicateStar(algebraFactory, result, predicate, graph, context, termHashes, it, counter);
        });
        results.bindingsStream.on("end", () => {
          if (--counter.count === 0) {
            it.close();
          }
        });
        return results.metadata;
      }
      /**
       * Pushes all terms to iterator `it` that are a solution of ?s predicate* ?o.
       * @param {string} subjectVar String representation of subjectVariable
       * @param {string} objectVar String representation of objectVariable
       * @param {Term} subjectVal Term of where we start the predicate* search.
       * @param {Term} objectVal Found solution for an object, start for the new step.
       * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
       * @param {Term} graph The graph in which we search for the pattern.
       * @param {ActionContext} context
       * @param {{[id: string]: Promise<Term[]>}} termHashesGlobal
       * Remembers solutions for when objectVal is already been calculated, can be reused when same objectVal occurs
       * @param {{[id: string]: Term}} termHashesCurrentSubject
       * Remembers the pairs we've already searched for, can stop searching if so.
       * @param {BufferedIterator<Bindings>} it Iterator to push terms to.
       * @param {any} counter Counts how many searches are in progress to close it when needed (when counter == 0).
       * @param algebraFactory The algebra factory.
       * @param bindingsFactory The bindings factory.
       * @return {Promise<void>} All solutions of query should have been pushed to it by then.
       */
      // Let the iterator `it` emit all bindings of size 2, with subjectStringVariable as value subjectVal
      // and objectStringVariable as value all nodes reachable through predicate* beginning at objectVal
      async getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, objectVal, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter, algebraFactory, bindingsFactory) {
        const termString = (0, rdf_string_1.termToString)(objectVal) + (0, rdf_string_1.termToString)(graph);
        if (termHashesCurrentSubject[termString]) {
          return;
        }
        counter.count++;
        termHashesCurrentSubject[termString] = true;
        it._push(bindingsFactory.bindings([
          [subjectVar, subjectVal],
          [objectVar, objectVal]
        ]));
        if (termString in termHashesGlobal) {
          const objects = await termHashesGlobal[termString];
          for (const object of objects) {
            await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, object, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter, algebraFactory, bindingsFactory);
          }
          if (--counter.count === 0) {
            it.close();
          }
          return;
        }
        const promise = new Promise(async (resolve, reject) => {
          const objectsArray = [];
          const thisVariable = this.generateVariable(algebraFactory.dataFactory);
          const path = algebraFactory.createPath(objectVal, predicate, thisVariable, graph);
          const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: path, context }));
          results.bindingsStream.on("data", async (bindings) => {
            const result = bindings.get(thisVariable);
            objectsArray.push(result);
            await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, result, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter, algebraFactory, bindingsFactory);
          });
          results.bindingsStream.on("error", reject);
          results.bindingsStream.on("end", () => {
            if (--counter.count === 0) {
              it.close();
            }
            resolve(objectsArray);
          });
        });
        termHashesGlobal[termString] = promise;
      }
      /**
       * Find all sources recursively contained in the given path operation.
       * @param operation
       */
      getPathSources(operation) {
        switch (operation.type) {
          case sparqlalgebrajs_1.Algebra.types.ALT:
          case sparqlalgebrajs_1.Algebra.types.SEQ:
            return operation.input.flatMap((subOp) => this.getPathSources(subOp));
          case sparqlalgebrajs_1.Algebra.types.INV:
          case sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH:
          case sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH:
          case sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH:
            return this.getPathSources(operation.path);
          case sparqlalgebrajs_1.Algebra.types.LINK:
          case sparqlalgebrajs_1.Algebra.types.NPS: {
            const source = (0, utils_query_operation_1.getOperationSource)(operation);
            if (!source) {
              throw new Error(`Could not find a required source on a link path operation`);
            }
            return [source];
          }
        }
      }
      assignPatternSources(algebraFactory, pattern, sources) {
        if (sources.length === 0) {
          throw new Error(`Attempted to assign zero sources to a pattern during property path handling`);
        }
        if (sources.length === 1) {
          return (0, utils_query_operation_1.assignOperationSource)(pattern, sources[0]);
        }
        return algebraFactory.createUnion(sources.map((source) => (0, utils_query_operation_1.assignOperationSource)(pattern, source)), true);
      }
    };
    exports.ActorAbstractPath = ActorAbstractPath;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/index.js
var require_lib226 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-abstract-path/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorAbstractPath(), exports);
    __exportStar(require_PathVariableObjectIterator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-alt/lib/ActorQueryOperationPathAlt.js
var require_ActorQueryOperationPathAlt = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-alt/lib/ActorQueryOperationPathAlt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathAlt = void 0;
    var actor_abstract_path_1 = require_lib226();
    var actor_query_operation_union_1 = require_lib225();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathAlt = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ALT);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const predicate = operation.predicate;
        const subOperations = (await Promise.all(predicate.input.map((subPredicate) => this.mediatorQueryOperation.mediate({
          context,
          operation: algebraFactory.createPath(operation.subject, subPredicate, operation.object, operation.graph)
        })))).map(utils_query_operation_1.getSafeBindings);
        const bindingsStream = new asynciterator_1.UnionIterator(subOperations.map((op) => op.bindingsStream), { autoStart: false });
        const metadata = () => Promise.all(subOperations.map((output) => output.metadata())).then((subMeta) => actor_query_operation_union_1.ActorQueryOperationUnion.unionMetadata(subMeta, true, context, this.mediatorRdfMetadataAccumulate));
        return {
          type: "bindings",
          bindingsStream,
          metadata
        };
      }
    };
    exports.ActorQueryOperationPathAlt = ActorQueryOperationPathAlt;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-alt/lib/index.js
var require_lib227 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-alt/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathAlt(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-inv/lib/ActorQueryOperationPathInv.js
var require_ActorQueryOperationPathInv = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-inv/lib/ActorQueryOperationPathInv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathInv = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathInv = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.INV);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const predicate = operation.predicate;
        const invPath = algebraFactory.createPath(operation.object, predicate.path, operation.subject, operation.graph);
        return this.mediatorQueryOperation.mediate({ operation: invPath, context });
      }
    };
    exports.ActorQueryOperationPathInv = ActorQueryOperationPathInv;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-inv/lib/index.js
var require_lib228 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-inv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathInv(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-link/lib/ActorQueryOperationPathLink.js
var require_ActorQueryOperationPathLink = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-link/lib/ActorQueryOperationPathLink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathLink = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathLink = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.LINK);
      }
      async runOperation(operationOriginal, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const predicate = operationOriginal.predicate;
        const operation = Object.assign(algebraFactory.createPattern(operationOriginal.subject, predicate.iri, operationOriginal.object, operationOriginal.graph), { metadata: predicate.metadata });
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationPathLink = ActorQueryOperationPathLink;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-link/lib/index.js
var require_lib229 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-link/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathLink(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-nps/lib/ActorQueryOperationPathNps.js
var require_ActorQueryOperationPathNps = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-nps/lib/ActorQueryOperationPathNps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathNps = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathNps = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.NPS);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const predicate = operation.predicate;
        const blank = this.generateVariable(dataFactory, operation);
        const pattern = Object.assign(algebraFactory.createPattern(operation.subject, blank, operation.object, operation.graph), { metadata: predicate.metadata });
        const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: pattern, context }));
        const bindingsStream = output.bindingsStream.map((bindings) => predicate.iris.some((iri) => iri.equals(bindings.get(blank))) ? null : bindings.delete(blank));
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
    };
    exports.ActorQueryOperationPathNps = ActorQueryOperationPathNps;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-nps/lib/index.js
var require_lib230 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-nps/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathNps(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-clear/lib/ActorQueryOperationClear.js
var require_ActorQueryOperationClear = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-clear/lib/ActorQueryOperationClear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationClear = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationClear = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "clear");
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        let graphs;
        if (operation.source === "DEFAULT") {
          graphs = dataFactory.defaultGraph();
        } else if (typeof operation.source === "string") {
          graphs = operation.source;
        } else {
          graphs = [operation.source];
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          deleteGraphs: {
            graphs,
            requireExistence: !operation.silent,
            dropGraphs: false
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationClear = ActorQueryOperationClear;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-clear/lib/index.js
var require_lib231 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-clear/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationClear(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/ActorQueryOperationUpdateCompositeUpdate.js
var require_ActorQueryOperationUpdateCompositeUpdate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/ActorQueryOperationUpdateCompositeUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUpdateCompositeUpdate = void 0;
    var bus_query_operation_1 = require_lib9();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationUpdateCompositeUpdate = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "compositeupdate");
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operationOriginal, context) {
        const execute = () => (async () => {
          for (const operation of operationOriginal.updates) {
            const subResult = (0, utils_query_operation_1.getSafeVoid)(await this.mediatorQueryOperation.mediate({ operation, context }));
            await subResult.execute();
          }
        })();
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationUpdateCompositeUpdate = ActorQueryOperationUpdateCompositeUpdate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/index.js
var require_lib232 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUpdateCompositeUpdate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-create/lib/ActorQueryOperationCreate.js
var require_ActorQueryOperationCreate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-create/lib/ActorQueryOperationCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationCreate = void 0;
    var bus_query_operation_1 = require_lib9();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationCreate = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "create");
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operation, context) {
        const { execute } = await this.mediatorUpdateQuads.mediate({
          createGraphs: {
            graphs: [operation.source],
            requireNonExistence: !operation.silent
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationCreate = ActorQueryOperationCreate;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-create/lib/index.js
var require_lib233 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-create/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationCreate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-drop/lib/ActorQueryOperationDrop.js
var require_ActorQueryOperationDrop = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-drop/lib/ActorQueryOperationDrop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationDrop = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationDrop = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "drop");
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        let graphs;
        if (operation.source === "DEFAULT") {
          graphs = dataFactory.defaultGraph();
        } else if (typeof operation.source === "string") {
          graphs = operation.source;
        } else {
          graphs = [operation.source];
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          deleteGraphs: {
            graphs,
            requireExistence: !operation.silent,
            dropGraphs: true
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationDrop = ActorQueryOperationDrop;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-drop/lib/index.js
var require_lib234 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-drop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationDrop(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-load/lib/ActorQueryOperationLoad.js
var require_ActorQueryOperationLoad = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-load/lib/ActorQueryOperationLoad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationLoad = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationLoad = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "load");
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        let subContext = context;
        if (operation.silent) {
          subContext = subContext.set(context_entries_1.KeysInitQuery.lenient, true);
        }
        const { querySource } = await this.mediatorQuerySourceIdentify.mediate({
          querySourceUnidentified: { value: operation.source.value },
          context: subContext
        });
        const output = (0, utils_query_operation_1.getSafeQuads)(await this.mediatorQueryOperation.mediate({
          operation: algebraFactory.createConstruct((0, utils_query_operation_1.assignOperationSource)(algebraFactory.createPattern(dataFactory.variable("s"), dataFactory.variable("p"), dataFactory.variable("o")), querySource), [algebraFactory.createPattern(dataFactory.variable("s"), dataFactory.variable("p"), dataFactory.variable("o"))]),
          context: subContext
        }));
        let quadStream = output.quadStream;
        if (operation.destination) {
          quadStream = quadStream.map((quad) => dataFactory.quad(quad.subject, quad.predicate, quad.object, operation.destination));
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          quadStreamInsert: quadStream,
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationLoad = ActorQueryOperationLoad;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-load/lib/index.js
var require_lib235 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-load/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationLoad(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-join/lib/ActorQueryOperationJoin.js
var require_ActorQueryOperationJoin = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-join/lib/ActorQueryOperationJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationJoin = void 0;
    var bus_query_operation_1 = require_lib9();
    var bus_rdf_join_1 = require_lib180();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var ActorQueryOperationJoin = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "join");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operationOriginal, context) {
        const entries3 = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: (0, utils_query_operation_1.getSafeBindings)(output),
          operation
        }));
        if ((await Promise.all(entries3.map((entry) => entry.output.metadata()))).some((entry) => entry.cardinality.value === 0 && entry.cardinality.type === "exact")) {
          for (const entry of entries3) {
            entry.output.bindingsStream.close();
          }
          return {
            bindingsStream: new asynciterator_1.ArrayIterator([], { autoStart: false }),
            metadata: async () => ({
              state: new utils_metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 0 },
              variables: bus_rdf_join_1.ActorRdfJoin.joinVariables(new rdf_data_factory_1.DataFactory(), await bus_rdf_join_1.ActorRdfJoin.getMetadatas(entries3))
            }),
            type: "bindings"
          };
        }
        return this.mediatorJoin.mediate({ type: "inner", entries: entries3, context });
      }
    };
    exports.ActorQueryOperationJoin = ActorQueryOperationJoin;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-join/lib/index.js
var require_lib236 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationJoin(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-leftjoin/lib/ActorQueryOperationLeftJoin.js
var require_ActorQueryOperationLeftJoin = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-leftjoin/lib/ActorQueryOperationLeftJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationLeftJoin = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_expression_evaluator_1 = require_lib6();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationLeftJoin = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "leftjoin");
        this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operationOriginal, context) {
        const entries3 = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: (0, utils_query_operation_1.getSafeBindings)(output),
          operation
        }));
        const joined = await this.mediatorJoin.mediate({ type: "optional", entries: entries3, context });
        if (operationOriginal.expression) {
          const rightMetadata = await entries3[1].output.metadata();
          const expressionVariables = rightMetadata.variables;
          const evaluator = await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: operationOriginal.expression, context });
          const bindingsStream = joined.bindingsStream.transform({
            autoStart: false,
            // eslint-disable-next-line ts/no-misused-promises
            transform: async (bindings, done, push) => {
              if (!expressionVariables.every((variable) => bindings.has(variable.variable.value))) {
                push(bindings);
                return done();
              }
              try {
                const result = await evaluator.evaluateAsEBV(bindings);
                if (result) {
                  push(bindings);
                }
              } catch (error) {
                if ((0, utils_expression_evaluator_1.isExpressionError)(error)) {
                  this.logWarn(context, "Error occurred while filtering.", () => ({ error, bindings: (0, utils_bindings_factory_1.bindingsToString)(bindings) }));
                } else {
                  bindingsStream.emit("error", error);
                }
              }
              done();
            }
          });
          joined.bindingsStream = bindingsStream;
        }
        return joined;
      }
    };
    exports.ActorQueryOperationLeftJoin = ActorQueryOperationLeftJoin;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-leftjoin/lib/index.js
var require_lib237 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-leftjoin/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationLeftJoin(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-minus/lib/ActorQueryOperationMinus.js
var require_ActorQueryOperationMinus = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-minus/lib/ActorQueryOperationMinus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationMinus = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var ActorQueryOperationMinus = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "minus");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operationOriginal, context) {
        const entries3 = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: (0, utils_query_operation_1.getSafeBindings)(output),
          operation
        }));
        return this.mediatorJoin.mediate({ type: "minus", entries: entries3, context });
      }
    };
    exports.ActorQueryOperationMinus = ActorQueryOperationMinus;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-minus/lib/index.js
var require_lib238 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-minus/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationMinus(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-seq/lib/ActorQueryOperationPathSeq.js
var require_ActorQueryOperationPathSeq = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-seq/lib/ActorQueryOperationPathSeq.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathSeq = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathSeq = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.SEQ);
      }
      async runOperation(operationOriginal, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const predicate = operationOriginal.predicate;
        let joiner = operationOriginal.subject;
        const generatedVariableNames = [];
        const entries3 = await Promise.all(predicate.input.map((subPredicate, i) => {
          const nextJoiner = i === predicate.input.length - 1 ? operationOriginal.object : this.generateVariable(dataFactory, operationOriginal, `b${i}`);
          const operation = algebraFactory.createPath(joiner, subPredicate, nextJoiner, operationOriginal.graph);
          const output = this.mediatorQueryOperation.mediate({
            context,
            operation
          });
          joiner = nextJoiner;
          if (i < predicate.input.length - 1) {
            generatedVariableNames.push(nextJoiner);
          }
          return { output, operation };
        }).map(async ({ output, operation }) => ({
          output: (0, utils_query_operation_1.getSafeBindings)(await output),
          operation
        })));
        const join3 = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorJoin.mediate({ type: "inner", entries: entries3, context }));
        const bindingsStream = join3.bindingsStream.transform({
          transform(item, next, push) {
            for (const generatedVariableName of generatedVariableNames) {
              item = item.delete(generatedVariableName);
            }
            push(item);
            next();
          }
        });
        return {
          type: "bindings",
          bindingsStream,
          async metadata() {
            const joinMetadata = await join3.metadata();
            const variables = joinMetadata.variables.filter((variable) => !generatedVariableNames.some((generatedVariableName) => generatedVariableName.value === variable.variable.value));
            return { ...joinMetadata, variables };
          }
        };
      }
    };
    exports.ActorQueryOperationPathSeq = ActorQueryOperationPathSeq;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-seq/lib/index.js
var require_lib239 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-seq/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathSeq(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/ActorRdfJoinMultiSmallest.js
var require_ActorRdfJoinMultiSmallest = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/ActorRdfJoinMultiSmallest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiSmallest = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiSmallest = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "multi-smallest",
          limitEntries: 3,
          limitEntriesMin: true,
          canHandleUndefs: true,
          isLeaf: false
        });
      }
      /**
       * Order the given join entries using the join-entries-sort bus.
       * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
       * @param context The action context.
       * @return {IJoinEntryWithMetadata[]} The sorted join entries.
       */
      async sortJoinEntries(entries3, context) {
        return (await this.mediatorJoinEntriesSort.mediate({ entries: entries3, context })).entries;
      }
      async getOutput(action, sideData) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const entries3 = sideData.sortedEntries;
        const smallestEntry1 = entries3[0];
        const smallestEntry2 = entries3[1];
        entries3.splice(0, 2);
        const firstEntry = {
          output: (0, utils_query_operation_1.getSafeBindings)(await this.mediatorJoin.mediate({ type: action.type, entries: [smallestEntry1, smallestEntry2], context: action.context })),
          operation: algebraFactory.createJoin([smallestEntry1.operation, smallestEntry2.operation], false)
        };
        entries3.push(firstEntry);
        return {
          result: await this.mediatorJoin.mediate({
            type: action.type,
            entries: entries3,
            context: action.context
          })
        };
      }
      async getJoinCoefficients(action, sideData) {
        let { metadatas } = sideData;
        metadatas = [...metadatas];
        const sortedEntries = await this.sortJoinEntries(action.entries.map((entry, i) => ({ ...entry, metadata: metadatas[i] })), action.context);
        metadatas = sortedEntries.map((entry) => entry.metadata);
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value * metadatas.slice(2).reduce((acc, metadata) => acc * metadata.cardinality.value, 1),
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1] + metadatas.slice(2).reduce((sum, metadata, i) => sum + requestInitialTimes.slice(2)[i] + metadata.cardinality.value * requestItemTimes.slice(2)[i], 0)
        }, { ...sideData, sortedEntries });
      }
    };
    exports.ActorRdfJoinMultiSmallest = ActorRdfJoinMultiSmallest;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/index.js
var require_lib240 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiSmallest(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/MaxAggregator.js
var require_MaxAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/MaxAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var MaxAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, orderByEvaluator, throwError) {
        super(evaluator, distinct, throwError);
        this.orderByEvaluator = orderByEvaluator;
        this.state = void 0;
      }
      putTerm(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);
        }
        if (this.state === void 0) {
          this.state = term;
        } else if (this.orderByEvaluator.orderTypes(this.state, term) === -1) {
          this.state = term;
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return this.state;
      }
    };
    exports.MaxAggregator = MaxAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/ActorBindingsAggregatorFactoryMax.js
var require_ActorBindingsAggregatorFactoryMax = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/ActorBindingsAggregatorFactoryMax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryMax = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var core_1 = require_lib();
    var MaxAggregator_1 = require_MaxAggregator();
    var ActorBindingsAggregatorFactoryMax = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
        this.mediatorTermComparatorFactory = args.mediatorTermComparatorFactory;
      }
      async test(action) {
        if (action.expr.aggregator !== "max") {
          return (0, core_1.failTest)("This actor only supports the 'max' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ expr, context }) {
        return new MaxAggregator_1.MaxAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct, await this.mediatorTermComparatorFactory.mediate({ context }));
      }
    };
    exports.ActorBindingsAggregatorFactoryMax = ActorBindingsAggregatorFactoryMax;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/index.js
var require_lib241 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-max/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryMax(), exports);
    __exportStar(require_MaxAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/MinAggregator.js
var require_MinAggregator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/MinAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MinAggregator = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var MinAggregator = class extends bus_bindings_aggregator_factory_1.AggregateEvaluator {
      constructor(evaluator, distinct, orderByEvaluator, throwError) {
        super(evaluator, distinct, throwError);
        this.orderByEvaluator = orderByEvaluator;
        this.state = void 0;
      }
      putTerm(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);
        }
        if (this.state === void 0) {
          this.state = term;
        } else if (this.orderByEvaluator.orderTypes(this.state, term) === 1) {
          this.state = term;
        }
      }
      termResult() {
        if (this.state === void 0) {
          return this.emptyValue();
        }
        return this.state;
      }
    };
    exports.MinAggregator = MinAggregator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/ActorBindingsAggregatorFactoryMin.js
var require_ActorBindingsAggregatorFactoryMin = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/ActorBindingsAggregatorFactoryMin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorBindingsAggregatorFactoryMin = void 0;
    var bus_bindings_aggregator_factory_1 = require_lib195();
    var core_1 = require_lib();
    var MinAggregator_1 = require_MinAggregator();
    var ActorBindingsAggregatorFactoryMin = class extends bus_bindings_aggregator_factory_1.ActorBindingsAggregatorFactory {
      constructor(args) {
        super(args);
        this.mediatorTermComparatorFactory = args.mediatorTermComparatorFactory;
      }
      async test(action) {
        if (action.expr.aggregator !== "min") {
          return (0, core_1.failTest)("This actor only supports the 'min' aggregator.");
        }
        return (0, core_1.passTestVoid)();
      }
      async run({ context, expr }) {
        return new MinAggregator_1.MinAggregator(await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }), expr.distinct, await this.mediatorTermComparatorFactory.mediate({ context }));
      }
    };
    exports.ActorBindingsAggregatorFactoryMin = ActorBindingsAggregatorFactoryMin;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/index.js
var require_lib242 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-bindings-aggregator-factory-min/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorBindingsAggregatorFactoryMin(), exports);
    __exportStar(require_MinAggregator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/SortIterator.js
var require_SortIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/SortIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SortIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var SortIterator = class extends asynciterator_1.TransformIterator {
      constructor(source, sort2, options) {
        super(source, options);
        const window2 = options && options.window;
        this.windowLength = Number.isFinite(window2) && window2 > 0 ? window2 : Number.POSITIVE_INFINITY;
        this.sort = sort2;
        this.sorted = [];
      }
      // Reads the smallest item in the current sorting window
      _read(count2, done) {
        let item;
        let { length } = this.sorted;
        while (length !== this.windowLength) {
          item = this.source.read();
          if (item === null) {
            break;
          }
          let left = 0;
          let right = length - 1;
          let mid;
          let order;
          while (left <= right) {
            mid = Math.trunc((left + right) / 2);
            order = this.sort(item, this.sorted[mid]);
            if (order < 0) {
              left = mid + 1;
            } else if (order > 0) {
              right = mid - 1;
            } else {
              left = mid;
              right = -1;
            }
          }
          this.sorted.splice(left, 0, item);
          length++;
        }
        if (length === this.windowLength) {
          this._push(this.sorted.pop());
        }
        done();
      }
      // Flushes remaining data after the source has ended
      _flush(done) {
        let { length } = this.sorted;
        while (length--) {
          this._push(this.sorted.pop());
        }
        done();
      }
    };
    exports.SortIterator = SortIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/ActorQueryOperationOrderBy.js
var require_ActorQueryOperationOrderBy = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/ActorQueryOperationOrderBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationOrderBy = void 0;
    var bus_query_operation_1 = require_lib9();
    var core_1 = require_lib();
    var utils_expression_evaluator_1 = require_lib6();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var SortIterator_1 = require_SortIterator();
    var ActorQueryOperationOrderBy = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "orderby");
        this.window = args.window ?? Number.POSITIVE_INFINITY;
        this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;
        this.mediatorTermComparatorFactory = args.mediatorTermComparatorFactory;
      }
      async testOperation() {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const output = (0, utils_query_operation_1.getSafeBindings)(outputRaw);
        const options = { window: this.window };
        let { bindingsStream } = output;
        const orderByEvaluator = await this.mediatorTermComparatorFactory.mediate({ context });
        for (let i = operation.expressions.length - 1; i >= 0; i--) {
          let expr = operation.expressions[i];
          const isAscending = this.isAscending(expr);
          expr = this.extractSortExpression(expr);
          const evaluator = await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr, context });
          const transform = async (bindings, next, push) => {
            try {
              const result = await evaluator.evaluate(bindings);
              push({ bindings, result });
            } catch (error) {
              if (!(0, utils_expression_evaluator_1.isExpressionError)(error)) {
                bindingsStream.emit("error", error);
              }
              push({ bindings, result: void 0 });
            }
            next();
          };
          const transformedStream = bindingsStream.transform({ transform });
          const sortedStream = new SortIterator_1.SortIterator(transformedStream, (left, right) => {
            let compare = orderByEvaluator.orderTypes(left.result, right.result);
            if (!isAscending) {
              compare *= -1;
            }
            return compare;
          }, options);
          bindingsStream = sortedStream.map(({ bindings }) => bindings);
        }
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
      // Remove descending operator if necessary
      extractSortExpression(expr) {
        const { expressionType, operator } = expr;
        if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {
          return expr;
        }
        return operator === "desc" ? expr.args[0] : expr;
      }
      isAscending(expr) {
        const { expressionType, operator } = expr;
        if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {
          return true;
        }
        return operator !== "desc";
      }
    };
    exports.ActorQueryOperationOrderBy = ActorQueryOperationOrderBy;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/index.js
var require_lib243 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-orderby/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationOrderBy(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-filter-pushdown/lib/ActorOptimizeQueryOperationFilterPushdown.js
var require_ActorOptimizeQueryOperationFilterPushdown = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-filter-pushdown/lib/ActorOptimizeQueryOperationFilterPushdown.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationFilterPushdown = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationFilterPushdown = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        let operation = action.operation;
        const self2 = this;
        if (this.splitConjunctive) {
          operation = sparqlalgebrajs_1.Util.mapOperation(operation, {
            filter(op, factory) {
              if (op.expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR && op.expression.operator === "&&") {
                self2.logDebug(action.context, `Split conjunctive filter into ${op.expression.args.length} nested filters`);
                return {
                  recurse: true,
                  result: op.expression.args.reduce((operation2, expression) => factory.createFilter(operation2, expression), op.input)
                };
              }
              return {
                recurse: true,
                result: op
              };
            }
          }, algebraFactory);
        }
        const sources = this.getSources(operation);
        const sourceShapes = new Map(await Promise.all(sources.map(async (source) => [source, await source.source.getSelectorShape(action.context)])));
        let repeat = true;
        let iterations = 0;
        while (repeat && iterations < this.maxIterations) {
          repeat = false;
          operation = sparqlalgebrajs_1.Util.mapOperation(operation, {
            filter(op, factory) {
              if (!self2.shouldAttemptPushDown(op, sources, sourceShapes)) {
                return {
                  recurse: true,
                  result: op
                };
              }
              const variables = self2.getExpressionVariables(op.expression);
              const [isModified, result] = self2.filterPushdown(op.expression, variables, op.input, factory, action.context);
              if (isModified) {
                repeat = true;
              }
              return {
                recurse: true,
                result
              };
            }
          });
          iterations++;
        }
        if (iterations > 1) {
          self2.logDebug(action.context, `Pushed down filters in ${iterations} iterations`);
        }
        if (this.mergeConjunctive) {
          operation = sparqlalgebrajs_1.Util.mapOperation(operation, {
            filter(op, factory) {
              if (op.input.type === sparqlalgebrajs_1.Algebra.types.FILTER) {
                const { nestedExpressions, input } = self2.getNestedFilterExpressions(op);
                self2.logDebug(action.context, `Merge ${nestedExpressions.length} nested filters into conjunctive filter`);
                return {
                  recurse: true,
                  result: factory.createFilter(input, nestedExpressions.slice(1).reduce((previous, current) => factory.createOperatorExpression("&&", [previous, current]), nestedExpressions[0]))
                };
              }
              return {
                recurse: true,
                result: op
              };
            }
          });
        }
        return { operation, context: action.context };
      }
      /**
       * Check if the given filter operation must be attempted to push down, based on the following criteria:
       * - Always push down if aggressive mode is enabled
       * - Push down if the filter is extremely selective
       * - Push down if federated and at least one accepts the filter
       * @param operation The filter operation
       * @param sources The query sources in the operation
       * @param sourceShapes A mapping of sources to selector shapes.
       */
      shouldAttemptPushDown(operation, sources, sourceShapes) {
        if (this.aggressivePushdown) {
          return true;
        }
        const expression = operation.expression;
        if (expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR && expression.operator === "=" && (expression.args[0].expressionType === "term" && expression.args[0].term.termType !== "Variable" && expression.args[1].expressionType === "term" && expression.args[1].term.termType === "Variable" || expression.args[0].expressionType === "term" && expression.args[0].term.termType === "Variable" && expression.args[1].expressionType === "term" && expression.args[1].term.termType !== "Variable")) {
          return true;
        }
        if (sources.some((source) => (0, utils_query_operation_1.doesShapeAcceptOperation)(sourceShapes.get(source), operation))) {
          return true;
        }
        return false;
      }
      /**
       * Collected all sources that are defined within the given operation of children recursively.
       * @param operation An operation.
       */
      getSources(operation) {
        const sources = /* @__PURE__ */ new Set();
        const sourceAdder = (subOperation) => {
          const src = (0, utils_query_operation_1.getOperationSource)(subOperation);
          if (src) {
            sources.add(src);
          }
          return false;
        };
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.PATTERN]: sourceAdder,
          [sparqlalgebrajs_1.Algebra.types.LINK]: sourceAdder,
          [sparqlalgebrajs_1.Algebra.types.NPS]: sourceAdder,
          [sparqlalgebrajs_1.Algebra.types.SERVICE]: sourceAdder
        });
        return [...sources];
      }
      /**
       * Get all variables inside the given expression.
       * @param expression An expression.
       * @return An array of variables, or undefined if the expression is unsupported for pushdown.
       */
      getExpressionVariables(expression) {
        switch (expression.expressionType) {
          case sparqlalgebrajs_1.Algebra.expressionTypes.AGGREGATE:
          case sparqlalgebrajs_1.Algebra.expressionTypes.WILDCARD:
            throw new Error(`Getting expression variables is not supported for ${expression.expressionType}`);
          case sparqlalgebrajs_1.Algebra.expressionTypes.EXISTENCE:
            return sparqlalgebrajs_1.Util.inScopeVariables(expression.input);
          case sparqlalgebrajs_1.Algebra.expressionTypes.NAMED:
            return [];
          case sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR:
            return (0, rdf_terms_1.uniqTerms)(expression.args.flatMap((arg) => this.getExpressionVariables(arg)));
          case sparqlalgebrajs_1.Algebra.expressionTypes.TERM:
            if (expression.term.termType === "Variable") {
              return [expression.term];
            }
            return [];
        }
      }
      getOverlappingOperations(operation, expressionVariables) {
        const fullyOverlapping = [];
        const partiallyOverlapping = [];
        const notOverlapping = [];
        for (const input of operation.input) {
          const inputVariables = sparqlalgebrajs_1.Util.inScopeVariables(input);
          if (this.variablesSubSetOf(expressionVariables, inputVariables)) {
            fullyOverlapping.push(input);
          } else if (this.variablesIntersect(expressionVariables, inputVariables)) {
            partiallyOverlapping.push(input);
          } else {
            notOverlapping.push(input);
          }
        }
        return {
          fullyOverlapping,
          partiallyOverlapping,
          notOverlapping
        };
      }
      /**
       * Recursively push down the given expression into the given operation if possible.
       * Different operators have different semantics for choosing whether or not to push down,
       * and how this pushdown is done.
       * For every passed operator, it is checked whether or not the filter will have any effect on the operation.
       * If not, the filter is voided.
       * @param expression An expression to push down.
       * @param expressionVariables The variables inside the given expression.
       * @param operation The operation to push down into.
       * @param factory An algebra factory.
       * @param context The action context.
       * @return A tuple indicating if the operation was modified and the modified operation.
       */
      filterPushdown(expression, expressionVariables, operation, factory, context) {
        if (this.isExpressionFalse(expression)) {
          return [true, factory.createUnion([])];
        }
        if (expression.type === sparqlalgebrajs_1.Algebra.types.EXPRESSION && expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.EXISTENCE) {
          return [false, factory.createFilter(operation, expression)];
        }
        switch (operation.type) {
          case sparqlalgebrajs_1.Algebra.types.EXTEND:
            if (!this.variablesIntersect([operation.variable], expressionVariables)) {
              return [true, factory.createExtend(this.filterPushdown(expression, expressionVariables, operation.input, factory, context)[1], operation.variable, operation.expression)];
            }
            return [false, factory.createFilter(operation, expression)];
          case sparqlalgebrajs_1.Algebra.types.FILTER: {
            const [isModified, result] = this.filterPushdown(expression, expressionVariables, operation.input, factory, context);
            return [isModified, factory.createFilter(result, operation.expression)];
          }
          case sparqlalgebrajs_1.Algebra.types.JOIN: {
            if (operation.input.length === 0) {
              return [false, factory.createFilter(operation, expression)];
            }
            const { fullyOverlapping, partiallyOverlapping, notOverlapping } = this.getOverlappingOperations(operation, expressionVariables);
            const joins = [];
            let isModified = false;
            if (fullyOverlapping.length > 0) {
              isModified = true;
              joins.push(factory.createJoin(fullyOverlapping.map((input) => this.filterPushdown(expression, expressionVariables, input, factory, context)[1])));
            }
            if (partiallyOverlapping.length > 0) {
              joins.push(factory.createFilter(factory.createJoin(partiallyOverlapping, false), expression));
            }
            if (notOverlapping.length > 0) {
              joins.push(...notOverlapping);
            }
            if (joins.length > 1) {
              isModified = true;
            }
            if (isModified) {
              this.logDebug(context, `Push down filter across join entries with ${fullyOverlapping.length} fully overlapping, ${partiallyOverlapping.length} partially overlapping, and ${notOverlapping.length} not overlapping`);
            }
            return [isModified, joins.length === 1 ? joins[0] : factory.createJoin(joins)];
          }
          case sparqlalgebrajs_1.Algebra.types.NOP:
            return [true, operation];
          case sparqlalgebrajs_1.Algebra.types.PROJECT:
            if (this.variablesIntersect(operation.variables, expressionVariables)) {
              return [true, factory.createProject(this.filterPushdown(expression, expressionVariables, operation.input, factory, context)[1], operation.variables)];
            }
            return [true, operation];
          case sparqlalgebrajs_1.Algebra.types.UNION: {
            const { fullyOverlapping, partiallyOverlapping, notOverlapping } = this.getOverlappingOperations(operation, expressionVariables);
            const unions = [];
            let isModified = false;
            if (fullyOverlapping.length > 0) {
              isModified = true;
              unions.push(factory.createUnion(fullyOverlapping.map((input) => this.filterPushdown(expression, expressionVariables, input, factory, context)[1])));
            }
            if (partiallyOverlapping.length > 0) {
              unions.push(factory.createFilter(factory.createUnion(partiallyOverlapping, false), expression));
            }
            if (notOverlapping.length > 0) {
              unions.push(...notOverlapping);
            }
            if (unions.length > 1) {
              isModified = true;
            }
            if (isModified) {
              this.logDebug(context, `Push down filter across union entries with ${fullyOverlapping.length} fully overlapping, ${partiallyOverlapping.length} partially overlapping, and ${notOverlapping.length} not overlapping`);
            }
            return [isModified, unions.length === 1 ? unions[0] : factory.createUnion(unions)];
          }
          case sparqlalgebrajs_1.Algebra.types.VALUES:
            if (this.variablesIntersect(operation.variables, expressionVariables)) {
              return [false, factory.createFilter(operation, expression)];
            }
            return [true, operation];
          case sparqlalgebrajs_1.Algebra.types.LEFT_JOIN: {
            if (this.pushIntoLeftJoins) {
              const rightVariables = sparqlalgebrajs_1.Util.inScopeVariables(operation.input[1]);
              if (!this.variablesIntersect(expressionVariables, rightVariables)) {
                this.logDebug(context, `Push down filter into left join`);
                return [true, factory.createLeftJoin(this.filterPushdown(expression, expressionVariables, operation.input[0], factory, context)[1], operation.input[1], operation.expression)];
              }
            }
            return [false, factory.createFilter(operation, expression)];
          }
          case sparqlalgebrajs_1.Algebra.types.PATTERN: {
            if (this.pushEqualityIntoPatterns) {
              const pushableResult = this.getEqualityExpressionPushableIntoPattern(expression);
              if (pushableResult) {
                let isModified = false;
                const originalMetadata = operation.metadata;
                operation = (0, rdf_terms_1.mapTermsNested)(operation, (value) => {
                  if (value.equals(pushableResult.variable)) {
                    isModified = true;
                    return pushableResult.term;
                  }
                  return value;
                });
                operation.type = sparqlalgebrajs_1.Algebra.types.PATTERN;
                operation.metadata = originalMetadata;
                if (isModified) {
                  this.logDebug(context, `Push down filter into pattern for ?${pushableResult.variable.value}`);
                  return [true, factory.createJoin([
                    operation,
                    factory.createValues([pushableResult.variable], [{ [`?${pushableResult.variable.value}`]: pushableResult.term }])
                  ])];
                }
              }
            }
            return [false, factory.createFilter(operation, expression)];
          }
          case sparqlalgebrajs_1.Algebra.types.PATH: {
            if (this.pushEqualityIntoPatterns) {
              const pushableResult = this.getEqualityExpressionPushableIntoPattern(expression);
              if (pushableResult && (operation.subject.equals(pushableResult.variable) || operation.object.equals(pushableResult.variable))) {
                this.logDebug(context, `Push down filter into path for ?${pushableResult.variable.value}`);
                const originalMetadata = operation.metadata;
                operation = factory.createPath(operation.subject.equals(pushableResult.variable) ? pushableResult.term : operation.subject, operation.predicate, operation.object.equals(pushableResult.variable) ? pushableResult.term : operation.object);
                operation.metadata = originalMetadata;
                return [true, factory.createJoin([
                  operation,
                  factory.createValues([pushableResult.variable], [{ [`?${pushableResult.variable.value}`]: pushableResult.term }])
                ])];
              }
            }
            return [false, factory.createFilter(operation, expression)];
          }
          case sparqlalgebrajs_1.Algebra.types.MINUS:
          case sparqlalgebrajs_1.Algebra.types.ALT:
          case sparqlalgebrajs_1.Algebra.types.ASK:
          case sparqlalgebrajs_1.Algebra.types.BGP:
          case sparqlalgebrajs_1.Algebra.types.CONSTRUCT:
          case sparqlalgebrajs_1.Algebra.types.DESCRIBE:
          case sparqlalgebrajs_1.Algebra.types.DISTINCT:
          case sparqlalgebrajs_1.Algebra.types.EXPRESSION:
          case sparqlalgebrajs_1.Algebra.types.FROM:
          case sparqlalgebrajs_1.Algebra.types.GRAPH:
          case sparqlalgebrajs_1.Algebra.types.GROUP:
          case sparqlalgebrajs_1.Algebra.types.INV:
          case sparqlalgebrajs_1.Algebra.types.LINK:
          case sparqlalgebrajs_1.Algebra.types.NPS:
          case sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH:
          case sparqlalgebrajs_1.Algebra.types.ORDER_BY:
          case sparqlalgebrajs_1.Algebra.types.REDUCED:
          case sparqlalgebrajs_1.Algebra.types.SEQ:
          case sparqlalgebrajs_1.Algebra.types.SERVICE:
          case sparqlalgebrajs_1.Algebra.types.SLICE:
          case sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH:
          case sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH:
          case sparqlalgebrajs_1.Algebra.types.COMPOSITE_UPDATE:
          case sparqlalgebrajs_1.Algebra.types.DELETE_INSERT:
          case sparqlalgebrajs_1.Algebra.types.LOAD:
          case sparqlalgebrajs_1.Algebra.types.CLEAR:
          case sparqlalgebrajs_1.Algebra.types.CREATE:
          case sparqlalgebrajs_1.Algebra.types.DROP:
          case sparqlalgebrajs_1.Algebra.types.ADD:
          case sparqlalgebrajs_1.Algebra.types.MOVE:
          case sparqlalgebrajs_1.Algebra.types.COPY:
            return [false, factory.createFilter(operation, expression)];
        }
      }
      /**
       * Check if the given expression is a simple equals operation with one variable and one non-literal
       * (or literal with canonical lexical form) term that can be pushed into a pattern.
       * @param expression The current expression.
       * @return The variable and term to fill into the pattern, or undefined.
       */
      getEqualityExpressionPushableIntoPattern(expression) {
        if (expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR && expression.operator === "=") {
          if (expression.args[0].expressionType === "term" && expression.args[0].term.termType !== "Variable" && (expression.args[0].term.termType !== "Literal" || this.isLiteralWithCanonicalLexicalForm(expression.args[0].term)) && expression.args[1].expressionType === "term" && expression.args[1].term.termType === "Variable") {
            return {
              variable: expression.args[1].term,
              term: expression.args[0].term
            };
          }
          if (expression.args[0].expressionType === "term" && expression.args[0].term.termType === "Variable" && expression.args[1].expressionType === "term" && expression.args[1].term.termType !== "Variable" && (expression.args[1].term.termType !== "Literal" || this.isLiteralWithCanonicalLexicalForm(expression.args[1].term))) {
            return {
              variable: expression.args[0].term,
              term: expression.args[1].term
            };
          }
        }
      }
      /**
       * Check if the given term is a literal with datatype that where all values
       * can only have one possible lexical representation.
       * In other words, no variants of values exist that should be considered equal.
       * For example: "01"^xsd:number and "1"^xsd:number will return false.
       * @param term An RDF term.
       * @protected
       */
      isLiteralWithCanonicalLexicalForm(term) {
        if (term.termType === "Literal") {
          switch (term.datatype.value) {
            case "http://www.w3.org/2001/XMLSchema#string":
            case "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString":
            case "http://www.w3.org/2001/XMLSchema#normalizedString":
            case "http://www.w3.org/2001/XMLSchema#anyURI":
            case "http://www.w3.org/2001/XMLSchema#base64Binary":
            case "http://www.w3.org/2001/XMLSchema#language":
            case "http://www.w3.org/2001/XMLSchema#Name":
            case "http://www.w3.org/2001/XMLSchema#NCName":
            case "http://www.w3.org/2001/XMLSchema#NMTOKEN":
            case "http://www.w3.org/2001/XMLSchema#token":
            case "http://www.w3.org/2001/XMLSchema#hexBinary":
              return true;
          }
        }
        return false;
      }
      /**
       * Check if there is an overlap between the two given lists of variables.
       * @param varsA A list of variables.
       * @param varsB A list of variables.
       */
      variablesIntersect(varsA, varsB) {
        return varsA.some((varA) => varsB.some((varB) => varA.equals(varB)));
      }
      /**
       * Check if all variables from the first list are included in the second list.
       * The second list may contain other variables as well.
       * @param varsNeedles A list of variables to search for.
       * @param varsHaystack A list of variables to search in.
       */
      variablesSubSetOf(varsNeedles, varsHaystack) {
        return varsNeedles.length <= varsHaystack.length && varsNeedles.every((varA) => varsHaystack.some((varB) => varA.equals(varB)));
      }
      /**
       * Check if an expression is simply 'false'.
       * @param expression An expression.
       */
      isExpressionFalse(expression) {
        return expression.term && expression.term.termType === "Literal" && expression.term.value === "false";
      }
      /**
       * Get all directly nested filter expressions.
       * As soon as a non-filter is found, it is returned as the input field.
       * @param op A filter expression.
       */
      getNestedFilterExpressions(op) {
        if (op.input.type === sparqlalgebrajs_1.Algebra.types.FILTER) {
          const childData = this.getNestedFilterExpressions(op.input);
          return { nestedExpressions: [op.expression, ...childData.nestedExpressions], input: childData.input };
        }
        return { nestedExpressions: [op.expression], input: op.input };
      }
    };
    exports.ActorOptimizeQueryOperationFilterPushdown = ActorOptimizeQueryOperationFilterPushdown;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-filter-pushdown/lib/index.js
var require_lib244 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-filter-pushdown/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationFilterPushdown(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/ActorDereferenceHttpBase.js
var require_ActorDereferenceHttpBase = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/ActorDereferenceHttpBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceHttpBase = exports.mediaTypesToAcceptString = void 0;
    var bus_dereference_1 = require_lib43();
    var bus_http_1 = require_lib172();
    var core_1 = require_lib();
    var stream_to_string_1 = require_dist2();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var REGEX_MEDIATYPE = /^[^ ;]*/u;
    function mediaTypesToAcceptString(mediaTypes, maxLength) {
      const wildcard = "*/*;q=0.1";
      const parts = [];
      const sortedMediaTypes = Object.entries(mediaTypes).map(([mediaType, priority]) => ({ mediaType, priority })).sort((left, right) => right.priority === left.priority ? left.mediaType.localeCompare(right.mediaType) : right.priority - left.priority);
      let partsLength = sortedMediaTypes.length - 1;
      for (const { mediaType, priority } of sortedMediaTypes) {
        const part = mediaType + (priority === 1 ? "" : `;q=${priority.toFixed(3).replace(/0*$/u, "")}`);
        if (partsLength + part.length > maxLength) {
          while (partsLength + wildcard.length > maxLength) {
            const last3 = parts.pop() ?? "";
            partsLength -= last3.length + 1;
          }
          parts.push(wildcard);
          break;
        }
        parts.push(part);
        partsLength += part.length;
      }
      return parts.length === 0 ? "*/*" : parts.join(",");
    }
    exports.mediaTypesToAcceptString = mediaTypesToAcceptString;
    var ActorDereferenceHttpBase = class extends bus_dereference_1.ActorDereference {
      constructor(args) {
        super(args);
      }
      async test({ url }) {
        if (!/^https?:/u.test(url)) {
          return (0, core_1.failTest)(`Cannot retrieve ${url} because it is not an HTTP(S) URL.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        var _a, _b;
        let exists = true;
        const headers = new Headers(action.headers);
        headers.append("Accept", mediaTypesToAcceptString(await ((_a = action.mediaTypes) == null ? void 0 : _a.call(action)) ?? {}, this.getMaxAcceptHeaderLength()));
        let httpResponse;
        const requestTimeStart = Date.now();
        try {
          httpResponse = await this.mediatorHttp.mediate({
            context: action.context,
            init: { headers, method: action.method },
            input: action.url
          });
        } catch (error) {
          return this.handleDereferenceErrors(action, error);
        }
        const url = (0, relative_to_absolute_iri_1.resolve)(httpResponse.url, action.url);
        const requestTime = Date.now() - requestTimeStart;
        if (httpResponse.status !== 200) {
          exists = false;
          const bodyString = httpResponse.body ? await (0, stream_to_string_1.stringify)(bus_http_1.ActorHttp.toNodeReadable(httpResponse.body)) : "empty response";
          if (!action.acceptErrors) {
            const error = new Error(`Could not retrieve ${action.url} (HTTP status ${httpResponse.status}):
${bodyString}`);
            return this.handleDereferenceErrors(action, error, httpResponse.headers, requestTime);
          }
        }
        const mediaType = (_b = REGEX_MEDIATYPE.exec(httpResponse.headers.get("content-type") ?? "")) == null ? void 0 : _b[0];
        return {
          url,
          data: exists ? bus_http_1.ActorHttp.toNodeReadable(httpResponse.body) : (0, bus_dereference_1.emptyReadable)(),
          exists,
          requestTime,
          headers: httpResponse.headers,
          mediaType: mediaType === "text/plain" ? void 0 : mediaType
        };
      }
    };
    exports.ActorDereferenceHttpBase = ActorDereferenceHttpBase;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/ActorDereferenceHttp-browser.js
var require_ActorDereferenceHttp_browser = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/ActorDereferenceHttp-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorDereferenceHttp = void 0;
    var ActorDereferenceHttpBase_1 = require_ActorDereferenceHttpBase();
    var ActorDereferenceHttp = class extends ActorDereferenceHttpBase_1.ActorDereferenceHttpBase {
      getMaxAcceptHeaderLength() {
        return this.maxAcceptHeaderLengthBrowser;
      }
    };
    exports.ActorDereferenceHttp = ActorDereferenceHttp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/index.js
var require_lib245 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-dereference-http/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorDereferenceHttp_browser(), exports);
    __exportStar(require_ActorDereferenceHttpBase(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/ActorHttpProxy.js
var require_ActorHttpProxy = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/ActorHttpProxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpProxy = void 0;
    var bus_http_1 = require_lib172();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorHttpProxy = class extends bus_http_1.ActorHttp {
      constructor(args) {
        super(args);
      }
      async test(action) {
        const proxyHandler = action.context.get(context_entries_1.KeysHttpProxy.httpProxyHandler);
        if (!proxyHandler) {
          return (0, core_1.failTest)(`Actor ${this.name} could not find a proxy handler in the context.`);
        }
        if (!await proxyHandler.getProxy(action)) {
          return (0, core_1.failTest)(`Actor ${this.name} could not determine a proxy for the given request.`);
        }
        return (0, core_1.passTest)({ time: Number.POSITIVE_INFINITY });
      }
      async run(action) {
        const requestedUrl = typeof action.input === "string" ? action.input : action.input.url;
        const proxyHandler = action.context.get(context_entries_1.KeysHttpProxy.httpProxyHandler);
        const output = await this.mediatorHttp.mediate({
          ...await proxyHandler.getProxy(action),
          context: action.context.delete(context_entries_1.KeysHttpProxy.httpProxyHandler)
        });
        Object.defineProperty(output, "url", {
          configurable: true,
          enumerable: true,
          get: () => output.headers.get("x-final-url") ?? requestedUrl
        });
        return output;
      }
    };
    exports.ActorHttpProxy = ActorHttpProxy;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/ProxyHandlerStatic.js
var require_ProxyHandlerStatic = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/ProxyHandlerStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProxyHandlerStatic = void 0;
    var ProxyHandlerStatic = class {
      constructor(prefixUrl) {
        this.prefixUrl = prefixUrl;
      }
      async getProxy(request) {
        return {
          init: request.init,
          input: this.modifyInput(request.input)
        };
      }
      modifyInput(input) {
        if (typeof input === "string") {
          return this.prefixUrl + input;
        }
        return new Request(this.prefixUrl + input.url, input);
      }
    };
    exports.ProxyHandlerStatic = ProxyHandlerStatic;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/index.js
var require_lib246 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-proxy/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpProxy(), exports);
    __exportStar(require_ProxyHandlerStatic(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-identify/lib/ActorContextPreprocessQuerySourceIdentify.js
var require_ActorContextPreprocessQuerySourceIdentify = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-identify/lib/ActorContextPreprocessQuerySourceIdentify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessQuerySourceIdentify = void 0;
    var bus_context_preprocess_1 = require_lib10();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var lru_cache_1 = require_commonjs();
    var ActorContextPreprocessQuerySourceIdentify = class extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
        this.cache = this.cacheSize ? new lru_cache_1.LRUCache({ max: this.cacheSize }) : void 0;
        const cache = this.cache;
        if (cache) {
          this.httpInvalidator.addInvalidateListener(({ url }) => url ? cache.delete(url) : cache.clear());
        }
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let context = action.context;
        if (context.has(context_entries_1.KeysInitQuery.querySourcesUnidentified)) {
          const querySourcesUnidentified = action.context.get(context_entries_1.KeysInitQuery.querySourcesUnidentified);
          const querySourcesUnidentifiedExpanded = await Promise.all(querySourcesUnidentified.map((querySource) => this.expandSource(querySource)));
          const querySources = await Promise.all(querySourcesUnidentifiedExpanded.map(async (querySourceUnidentified) => this.identifySource(querySourceUnidentified, action.context)));
          const statisticDereferenceLinks = action.context.get(context_entries_1.KeysStatistics.dereferencedLinks);
          if (statisticDereferenceLinks) {
            for (const querySource of querySources) {
              statisticDereferenceLinks.updateStatistic({
                url: querySource.source.referenceValue,
                metadata: {
                  seed: true
                }
              }, querySource.source);
            }
          }
          context = action.context.delete(context_entries_1.KeysInitQuery.querySourcesUnidentified).set(context_entries_1.KeysQueryOperation.querySources, querySources);
        }
        return { context };
      }
      async expandSource(querySource) {
        if (typeof querySource === "string" || "match" in querySource) {
          return { value: querySource };
        }
        return {
          ...querySource,
          context: (await this.mediatorContextPreprocess.mediate({
            context: core_1.ActionContext.ensureActionContext(querySource.context ?? {})
          })).context
        };
      }
      identifySource(querySourceUnidentified, context) {
        let sourcePromise;
        if (typeof querySourceUnidentified.value === "string" && this.cache) {
          sourcePromise = this.cache.get(querySourceUnidentified.value);
        }
        if (!sourcePromise) {
          sourcePromise = this.mediatorQuerySourceIdentify.mediate({ querySourceUnidentified, context }).then(({ querySource }) => querySource);
          if (typeof querySourceUnidentified.value === "string" && this.cache) {
            this.cache.set(querySourceUnidentified.value, sourcePromise);
          }
        }
        return sourcePromise;
      }
    };
    exports.ActorContextPreprocessQuerySourceIdentify = ActorContextPreprocessQuerySourceIdentify;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-identify/lib/index.js
var require_lib247 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-context-preprocess-query-source-identify/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessQuerySourceIdentify(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-hypermedia/lib/ActorRdfUpdateQuadsHypermedia.js
var require_ActorRdfUpdateQuadsHypermedia = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-hypermedia/lib/ActorRdfUpdateQuadsHypermedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuadsHypermedia = void 0;
    var bus_rdf_update_quads_1 = require_lib91();
    var core_1 = require_lib();
    var lru_cache_1 = require_commonjs();
    var ActorRdfUpdateQuadsHypermedia = class extends bus_rdf_update_quads_1.ActorRdfUpdateQuadsDestination {
      constructor(args) {
        super(args);
        this.cache = this.cacheSize ? new lru_cache_1.LRUCache({ max: this.cacheSize }) : void 0;
        const cache = this.cache;
        if (cache) {
          this.httpInvalidator.addInvalidateListener(({ url }) => url ? cache.delete(url) : cache.clear());
        }
      }
      async test(action) {
        const url = (0, bus_rdf_update_quads_1.getContextDestinationUrl)((0, bus_rdf_update_quads_1.getContextDestination)(action.context));
        if (!url) {
          return (0, core_1.failTest)(`Actor ${this.name} can only update quads against a single destination URL.`);
        }
        return (0, core_1.passTestVoid)();
      }
      getDestination(context) {
        const dataDestination = (0, bus_rdf_update_quads_1.getContextDestination)(context);
        let url = (0, bus_rdf_update_quads_1.getContextDestinationUrl)(dataDestination);
        if (this.cache && this.cache.has(url)) {
          return this.cache.get(url);
        }
        const ret = (async () => {
          var _a;
          let metadata;
          let exists;
          try {
            const dereferenceRdfOutput = await this.mediatorDereferenceRdf.mediate({ context, url, acceptErrors: true });
            exists = dereferenceRdfOutput.exists;
            url = dereferenceRdfOutput.url;
            const rdfMetadataOuput = await this.mediatorMetadata.mediate({ context, url, quads: dereferenceRdfOutput.data, triples: (_a = dereferenceRdfOutput.metadata) == null ? void 0 : _a.triples });
            metadata = (await this.mediatorMetadataExtract.mediate({
              context,
              url,
              metadata: rdfMetadataOuput.metadata,
              headers: dereferenceRdfOutput.headers,
              requestTime: dereferenceRdfOutput.requestTime
            })).metadata;
          } catch {
            metadata = {};
            exists = false;
          }
          const { destination } = await this.mediatorRdfUpdateHypermedia.mediate({
            context,
            url,
            metadata,
            exists,
            forceDestinationType: (0, bus_rdf_update_quads_1.getDataDestinationType)(dataDestination)
          });
          return destination;
        })();
        if (this.cache) {
          this.cache.set(url, ret);
        }
        return ret;
      }
    };
    exports.ActorRdfUpdateQuadsHypermedia = ActorRdfUpdateQuadsHypermedia;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-hypermedia/lib/index.js
var require_lib248 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-update-quads-hypermedia/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateQuadsHypermedia(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActionObserverHttp.js
var require_ActionObserverHttp = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActionObserverHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserverHttp = void 0;
    var core_1 = require_lib();
    var ActionObserverHttp = class extends core_1.ActionObserver {
      /* eslint-disable max-len */
      /**
       * @param args - @defaultNested {<npmd:@comunica/bus-http/^4.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus>} bus
       */
      constructor(args) {
        super(args);
        this.requests = 0;
        this.bus.subscribeObserver(this);
        this.httpInvalidator.addInvalidateListener(() => {
          this.requests = 0;
        });
      }
      /* eslint-enable max-len */
      onRun(actor, _action, _output) {
        if (this.observedActors.includes(actor.name)) {
          this.requests++;
        }
      }
    };
    exports.ActionObserverHttp = ActionObserverHttp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActorQueryResultSerializeSparqlJson.js
var require_ActorQueryResultSerializeSparqlJson = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActorQueryResultSerializeSparqlJson.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlJson = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var core_1 = require_lib();
    var asynciterator_1 = require_asynciterator();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeSparqlJson = class _ActorQueryResultSerializeSparqlJson extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/sparql-results+json": 0.8
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/sparql-results+json": "http://www.w3.org/ns/formats/SPARQL_Results_JSON"
       *     }} mediaTypeFormats
       *   \ @defaultNested {true} emitMetadata
       *   \ @defaultNested {<default_observer> a <caqrssj:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      /**
       * Converts an RDF term to its JSON representation.
       * @param {RDF.Term} value An RDF term.
       * @return {any} A JSON object.
       */
      static bindingToJsonBindings(value) {
        if (value.termType === "Literal") {
          const literal = value;
          const jsonValue = { value: literal.value, type: "literal" };
          const { language, datatype } = literal;
          if (language) {
            jsonValue["xml:lang"] = language;
          } else if (datatype && datatype.value !== "http://www.w3.org/2001/XMLSchema#string") {
            jsonValue.datatype = datatype.value;
          }
          return jsonValue;
        }
        if (value.termType === "BlankNode") {
          return { value: value.value, type: "bnode" };
        }
        if (value.termType === "Quad") {
          return {
            value: {
              subject: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.subject),
              predicate: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.predicate),
              object: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.object)
            },
            type: "triple"
          };
        }
        return { value: value.value, type: "uri" };
      }
      async testHandleChecked(action, _context) {
        if (!["bindings", "boolean"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings streams or booleans.");
        }
        return (0, core_1.passTestVoid)();
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        const head2 = {};
        if (action.type === "bindings") {
          const metadata = await action.metadata();
          if (metadata.variables.length > 0) {
            head2.vars = metadata.variables.map((variable) => variable.variable.value);
          }
        }
        data.push(`{"head": ${JSON.stringify(head2)},
`);
        if (action.type === "bindings") {
          const resultStream = action.bindingsStream;
          data.push('"results": { "bindings": [\n');
          let first3 = true;
          function* end(cb) {
            yield cb();
          }
          data.wrap(
            // JSON SPARQL results spec does not allow unbound variables and blank node bindings
            (0, asynciterator_1.wrap)(resultStream).map((bindings) => {
              const res = `${first3 ? "" : ",\n"}${JSON.stringify(Object.fromEntries([...bindings].map(([key, value]) => [key.value, _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value)])))}`;
              first3 = false;
              return res;
            }).append((0, asynciterator_1.wrap)(end(() => `
]}${this.emitMetadata ? `,
"metadata": { "httpRequests": ${this.httpObserver.requests} }` : ""}}
`)))
          );
        } else {
          data.wrap((0, asynciterator_1.wrap)(action.execute().then((value) => [`"boolean":${value}
}
`])));
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlJson = ActorQueryResultSerializeSparqlJson;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/index.js
var require_lib249 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActionObserverHttp(), exports);
    __exportStar(require_ActorQueryResultSerializeSparqlJson(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/ActionObserverHttp.js
var require_ActionObserverHttp2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/ActionObserverHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserverHttp = void 0;
    var core_1 = require_lib();
    var ActionObserverHttp = class extends core_1.ActionObserver {
      /* eslint-disable max-len */
      /**
       * @param args - @defaultNested {<npmd:@comunica/bus-http/^4.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus>} bus
       */
      constructor(args) {
        super(args);
        this.requests = 0;
        this.bus.subscribeObserver(this);
        this.httpInvalidator.addInvalidateListener(() => {
          this.requests = 0;
        });
      }
      /* eslint-enable max-len */
      onRun(actor, _action, _output) {
        if (this.observedActors.includes(actor.name)) {
          this.requests++;
        }
      }
    };
    exports.ActionObserverHttp = ActionObserverHttp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/ActorQueryResultSerializeStats.js
var require_ActorQueryResultSerializeStats = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/ActorQueryResultSerializeStats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeStats = void 0;
    var bus_query_result_serialize_1 = require_lib33();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var asynciterator_1 = require_asynciterator();
    var readable_stream_1 = require_browser2();
    var ActorQueryResultSerializeStats = class extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {{ "stats": 0.5 }} mediaTypePriorities
       *   \ @defaultNested {{ "stats": "https://comunica.linkeddatafragments.org/#results_stats" }} mediaTypeFormats
       *   \ @defaultNested {<default_observer> a <caqrsst:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(action, _context) {
        if (!["bindings", "quads"].includes(action.type)) {
          return (0, core_1.failTest)("This actor can only handle bindings streams or quad streams.");
        }
        return (0, core_1.passTestVoid)();
      }
      pushHeader(data) {
        const header = [
          "Result",
          "Delay (ms)",
          "HTTP requests"
        ].join(",");
        data.push(`${header}
`);
      }
      createStat(startTime, result) {
        const row = [
          result,
          this.delay(startTime),
          this.httpObserver.requests
        ].join(",");
        return `${row}
`;
      }
      createSpecialLine(label, startTime) {
        const line = [
          label,
          this.delay(startTime),
          this.httpObserver.requests
        ].join(",");
        return `${line}
`;
      }
      async runHandle(action, _mediaType, _context) {
        const data = new readable_stream_1.Readable();
        const resultStream = action.type === "bindings" ? action.bindingsStream : action.quadStream;
        const startTime = action.context.getSafe(context_entries_1.KeysInitQuery.queryTimestampHighResolution);
        let result = 1;
        function* end(cb) {
          yield cb();
        }
        const stream = (0, asynciterator_1.wrap)(resultStream).map(() => this.createStat(startTime, result++)).prepend([this.createSpecialLine("PLANNING", startTime)]).append((0, asynciterator_1.wrap)(end(() => this.createSpecialLine("TOTAL", startTime))));
        this.pushHeader(data);
        data.wrap(stream);
        return { data };
      }
      now() {
        return performance.now();
      }
      delay(startTime) {
        return this.now() - startTime;
      }
    };
    exports.ActorQueryResultSerializeStats = ActorQueryResultSerializeStats;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/index.js
var require_lib250 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-result-serialize-stats/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActionObserverHttp2(), exports);
    __exportStar(require_ActorQueryResultSerializeStats(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-source-identify-hypermedia/lib/ActorQuerySourceIdentifyHypermedia.js
var require_ActorQuerySourceIdentifyHypermedia = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-source-identify-hypermedia/lib/ActorQuerySourceIdentifyHypermedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyHypermedia = void 0;
    var core_1 = require_lib();
    var ActorQuerySourceIdentifyHypermedia = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query source hypermedia identification failed: none of the configured actors were able to identify ${action.url}} busFailMessage
       * @param sourceType The source type.
       */
      /* eslint-enable max-len */
      constructor(args, sourceType) {
        super(args);
        this.sourceType = sourceType;
      }
      async test(action) {
        if (action.forceSourceType && this.sourceType !== action.forceSourceType) {
          return (0, core_1.failTest)(`Actor ${this.name} is not able to handle source type ${action.forceSourceType}.`);
        }
        return this.testMetadata(action);
      }
    };
    exports.ActorQuerySourceIdentifyHypermedia = ActorQuerySourceIdentifyHypermedia;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-source-identify-hypermedia/lib/index.js
var require_lib251 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-source-identify-hypermedia/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyHypermedia(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/ActorQuerySourceIdentify.js
var require_ActorQuerySourceIdentify = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/ActorQuerySourceIdentify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentify = void 0;
    var core_1 = require_lib();
    var ActorQuerySourceIdentify = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query source identification failed: none of the configured actors were able to identify ${action.querySourceUnidentified.value}} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQuerySourceIdentify = ActorQuerySourceIdentify;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/Utils.js
var require_Utils3 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterMatchingQuotedQuads = exports.quadsOrderToBindingsOrder = exports.quadsMetadataToBindingsMetadata = exports.setMetadata = exports.getDuplicateElementLinks = exports.getVariables = exports.isTermVariable = exports.quadsToBindings = void 0;
    var utils_iterator_1 = require_lib179();
    var utils_metadata_1 = require_lib8();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var QuadTermUtil_1 = require_QuadTermUtil();
    function quadsToBindings(quads, pattern, dataFactory, bindingsFactory, unionDefaultGraph) {
      const variables = getVariables(pattern);
      const filterNonDefaultQuads = pattern.graph.termType === "Variable" && !unionDefaultGraph;
      const duplicateElementLinks = getDuplicateElementLinks(pattern);
      const elementVariables = (0, rdf_terms_1.reduceTermsNested)(pattern, (acc, term, keys2) => {
        if (term.termType === "Variable") {
          acc[keys2.join("_")] = term.value;
        }
        return acc;
      }, {});
      let filteredOutput = quads;
      if (filterNonDefaultQuads) {
        filteredOutput = filteredOutput.filter((quad) => quad.graph.termType !== "DefaultGraph");
      }
      if (duplicateElementLinks) {
        filteredOutput = filteredOutput.filter((quad) => {
          for (const keyLeft in duplicateElementLinks) {
            const keysLeft = keyLeft.split("_");
            const valueLeft = (0, rdf_terms_1.getValueNestedPath)(quad, keysLeft);
            for (const keysRight of duplicateElementLinks[keyLeft]) {
              if (!valueLeft.equals((0, rdf_terms_1.getValueNestedPath)(quad, keysRight))) {
                return false;
              }
            }
          }
          return true;
        });
      }
      const it = new utils_iterator_1.ClosableIterator(filteredOutput.map((quad) => bindingsFactory.bindings(Object.keys(elementVariables).map((key) => {
        const keys2 = key.split("_");
        const variable = elementVariables[key];
        const term = (0, rdf_terms_1.getValueNestedPath)(quad, keys2);
        return [dataFactory.variable(variable), term];
      }))), {
        onClose: () => quads.destroy()
      });
      setMetadata(dataFactory, it, quads, elementVariables, variables, filterNonDefaultQuads || Boolean(duplicateElementLinks));
      return it;
    }
    exports.quadsToBindings = quadsToBindings;
    function isTermVariable(term) {
      return term.termType === "Variable";
    }
    exports.isTermVariable = isTermVariable;
    function getVariables(pattern) {
      return (0, rdf_terms_1.uniqTerms)((0, rdf_terms_1.getTermsNested)(pattern).filter(isTermVariable));
    }
    exports.getVariables = getVariables;
    function getDuplicateElementLinks(pattern) {
      const variableElements = {};
      let duplicateVariables = false;
      (0, rdf_terms_1.forEachTermsNested)(pattern, (value, keys2) => {
        if (value.termType === "Variable") {
          const val = (0, rdf_string_1.termToString)(value);
          const length = (variableElements[val] || (variableElements[val] = [])).push(keys2);
          duplicateVariables = duplicateVariables || length > 1;
        }
      });
      if (!duplicateVariables) {
        return;
      }
      const duplicateElementLinks = {};
      for (const variable in variableElements) {
        const elements = variableElements[variable];
        const remainingElements = elements.slice(1);
        if (remainingElements.length > 0) {
          duplicateElementLinks[elements[0].join("_")] = remainingElements;
        }
      }
      return duplicateElementLinks;
    }
    exports.getDuplicateElementLinks = getDuplicateElementLinks;
    function setMetadata(dataFactory, bindings, quads, elementVariables, variables, forceEstimateCardinality) {
      const getMetadataCb = (metadataRaw) => {
        if (forceEstimateCardinality) {
          metadataRaw.cardinality.type = "estimate";
        }
        bindings.setProperty("metadata", quadsMetadataToBindingsMetadata(dataFactory, (0, utils_metadata_1.validateMetadataQuads)(metadataRaw), elementVariables, variables));
        if (metadataRaw.state) {
          metadataRaw.state.addInvalidateListener(() => {
            setMetadata(dataFactory, bindings, quads, elementVariables, variables, forceEstimateCardinality);
          });
        }
      };
      const metadata = quads.getProperty("metadata");
      if (metadata) {
        getMetadataCb(metadata);
      } else {
        quads.getProperty("metadata", getMetadataCb);
      }
    }
    exports.setMetadata = setMetadata;
    function quadsMetadataToBindingsMetadata(dataFactory, metadataQuads, elementVariables, variables) {
      return {
        ...metadataQuads,
        order: metadataQuads.order ? quadsOrderToBindingsOrder(dataFactory, metadataQuads.order, elementVariables) : void 0,
        availableOrders: metadataQuads.availableOrders ? metadataQuads.availableOrders.map((orderDef) => ({
          cost: orderDef.cost,
          terms: quadsOrderToBindingsOrder(dataFactory, orderDef.terms, elementVariables)
        })) : void 0,
        variables: variables.map((variable) => ({ variable, canBeUndef: false }))
      };
    }
    exports.quadsMetadataToBindingsMetadata = quadsMetadataToBindingsMetadata;
    function quadsOrderToBindingsOrder(dataFactory, quadsOrder, elementVariables) {
      const mappedVariables = {};
      return quadsOrder.map((entry) => {
        const variableName = elementVariables[entry.term];
        if (!variableName) {
          return;
        }
        if (mappedVariables[variableName]) {
          return;
        }
        mappedVariables[variableName] = true;
        return {
          term: dataFactory.variable(variableName),
          direction: entry.direction
        };
      }).filter(Boolean);
    }
    exports.quadsOrderToBindingsOrder = quadsOrderToBindingsOrder;
    function filterMatchingQuotedQuads(pattern, it) {
      if ((0, rdf_terms_1.someTerms)(pattern, (term) => term.termType === "Quad")) {
        it = it.filter((quad) => (0, QuadTermUtil_1.matchPatternMappings)(quad, pattern));
      }
      return it;
    }
    exports.filterMatchingQuotedQuads = filterMatchingQuotedQuads;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/index.js
var require_lib252 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-source-identify/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentify(), exports);
    __exportStar(require_Utils3(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/QuerySourceQpf.js
var require_QuerySourceQpf = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/QuerySourceQpf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuerySourceQpf = void 0;
    var bus_query_source_identify_1 = require_lib252();
    var context_entries_1 = require_lib3();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var rdf_terms_1 = require_rdf_terms();
    var QuerySourceQpf = class {
      constructor(mediatorMetadata, mediatorMetadataExtract, mediatorDereferenceRdf, dataFactory, algebraFactory, bindingsFactory, subjectUri, predicateUri, objectUri, graphUri, url, metadata, bindingsRestricted, initialQuads) {
        this.referenceValue = url;
        this.mediatorMetadata = mediatorMetadata;
        this.mediatorMetadataExtract = mediatorMetadataExtract;
        this.mediatorDereferenceRdf = mediatorDereferenceRdf;
        this.dataFactory = dataFactory;
        this.algebraFactory = algebraFactory;
        this.bindingsFactory = bindingsFactory;
        this.subjectUri = subjectUri;
        this.predicateUri = predicateUri;
        this.objectUri = objectUri;
        this.graphUri = graphUri;
        this.url = url;
        this.bindingsRestricted = bindingsRestricted;
        this.cachedQuads = {};
        this.searchForm = this.getSearchForm(metadata);
        this.defaultGraph = metadata.defaultGraph ? this.dataFactory.namedNode(metadata.defaultGraph) : void 0;
        if (initialQuads) {
          let wrappedQuads = (0, asynciterator_1.wrap)(initialQuads);
          if (this.defaultGraph) {
            wrappedQuads = this.reverseMapQuadsToDefaultGraph(wrappedQuads);
          }
          metadata = { ...metadata, state: new utils_metadata_1.MetadataValidationState() };
          wrappedQuads.setProperty("metadata", metadata);
          this.cacheQuads(wrappedQuads, this.dataFactory.variable(""), this.dataFactory.variable(""), this.dataFactory.variable(""), this.dataFactory.variable(""));
        }
        this.selectorShape = this.bindingsRestricted ? {
          type: "operation",
          operation: {
            operationType: "pattern",
            pattern: this.algebraFactory.createPattern(this.dataFactory.variable("s"), this.dataFactory.variable("p"), this.dataFactory.variable("o"), this.dataFactory.variable("g"))
          },
          variablesOptional: [
            this.dataFactory.variable("s"),
            this.dataFactory.variable("p"),
            this.dataFactory.variable("o"),
            this.dataFactory.variable("g")
          ],
          filterBindings: true
        } : {
          type: "operation",
          operation: {
            operationType: "pattern",
            pattern: this.algebraFactory.createPattern(this.dataFactory.variable("s"), this.dataFactory.variable("p"), this.dataFactory.variable("o"), this.dataFactory.variable("g"))
          },
          variablesOptional: [
            this.dataFactory.variable("s"),
            this.dataFactory.variable("p"),
            this.dataFactory.variable("o"),
            this.dataFactory.variable("g")
          ]
        };
      }
      async getSelectorShape() {
        return this.selectorShape;
      }
      queryBindings(operation, context, options) {
        if (operation.type !== "pattern") {
          throw new Error(`Attempted to pass non-pattern operation '${operation.type}' to QuerySourceQpf`);
        }
        const unionDefaultGraph = Boolean(context.get(context_entries_1.KeysQueryOperation.unionDefaultGraph));
        let it = this.match(operation.subject, operation.predicate, operation.object, operation.graph, unionDefaultGraph, context, options);
        it = (0, bus_query_source_identify_1.filterMatchingQuotedQuads)(operation, it);
        return (0, bus_query_source_identify_1.quadsToBindings)(it, operation, this.dataFactory, this.bindingsFactory, unionDefaultGraph);
      }
      /**
       * Get a first QPF search form.
       * @param {{[p: string]: any}} metadata A metadata object.
       * @return {ISearchForm} A search form, or null if none could be found.
       */
      getSearchForm(metadata) {
        if (!metadata.searchForms || !metadata.searchForms.values) {
          return;
        }
        const { searchForms } = metadata;
        for (const searchForm of searchForms.values) {
          if (this.graphUri && this.subjectUri in searchForm.mappings && this.predicateUri in searchForm.mappings && this.objectUri in searchForm.mappings && this.graphUri in searchForm.mappings && Object.keys(searchForm.mappings).length === 4) {
            return searchForm;
          }
          if (this.subjectUri in searchForm.mappings && this.predicateUri in searchForm.mappings && this.objectUri in searchForm.mappings && Object.keys(searchForm.mappings).length === 3) {
            return searchForm;
          }
        }
      }
      /**
       * Create a QPF fragment IRI for the given quad pattern.
       * @param {ISearchForm} searchForm A search form.
       * @param {Term} subject A term.
       * @param {Term} predicate A term.
       * @param {Term} object A term.
       * @param {Term} graph A term.
       * @return {string} A URI.
       */
      createFragmentUri(searchForm, subject, predicate, object, graph) {
        const entries3 = {};
        const input = [
          { uri: this.subjectUri, term: subject },
          { uri: this.predicateUri, term: predicate },
          { uri: this.objectUri, term: object },
          { uri: this.graphUri, term: graph }
        ];
        for (const entry of input) {
          if (entry.uri && (this.bindingsRestricted || entry.term.termType !== "Variable" && (entry.term.termType !== "Quad" || (0, rdf_terms_1.everyTermsNested)(entry.term, (value) => value.termType !== "Variable")))) {
            entries3[entry.uri] = (0, rdf_string_1.termToString)(entry.term);
          }
        }
        return searchForm.getUri(entries3);
      }
      match(subject, predicate, object, graph, unionDefaultGraph, context, options) {
        let modifiedGraph = false;
        if (graph.termType === "DefaultGraph") {
          if (this.defaultGraph) {
            modifiedGraph = true;
            graph = this.defaultGraph;
          } else if (Object.keys(this.searchForm.mappings).length === 4 && !this.defaultGraph) {
            if (unionDefaultGraph) {
              graph = this.dataFactory.variable("g");
            } else {
              const quads2 = new asynciterator_1.ArrayIterator([], { autoStart: false });
              quads2.setProperty("metadata", {
                state: new utils_metadata_1.MetadataValidationState(),
                requestTime: 0,
                cardinality: { type: "exact", value: 0 },
                first: null,
                next: null,
                last: null
              });
              return quads2;
            }
          } else if (Object.keys(this.searchForm.mappings).length === 3) {
            graph = this.dataFactory.variable("g");
          }
        }
        if (!(options == null ? void 0 : options.filterBindings)) {
          const cached = this.getCachedQuads(subject, predicate, object, graph);
          if (cached) {
            return cached;
          }
        }
        const self2 = this;
        let quads;
        const dataStreamPromise = async function() {
          var _a;
          let url = self2.createFragmentUri(self2.searchForm, subject, predicate, object, graph);
          if (options == null ? void 0 : options.filterBindings) {
            url = await self2.getBindingsRestrictedLink(subject, predicate, object, graph, url, options.filterBindings);
          }
          const dereferenceRdfOutput = await self2.mediatorDereferenceRdf.mediate({ context, url });
          url = dereferenceRdfOutput.url;
          const rdfMetadataOuput = await self2.mediatorMetadata.mediate({ context, url, quads: dereferenceRdfOutput.data, triples: (_a = dereferenceRdfOutput.metadata) == null ? void 0 : _a.triples });
          const { metadata } = await self2.mediatorMetadataExtract.mediate({
            context,
            url,
            metadata: rdfMetadataOuput.metadata,
            requestTime: dereferenceRdfOutput.requestTime
          });
          quads.setProperty("metadata", { ...metadata, state: new utils_metadata_1.MetadataValidationState(), subsetOf: self2.url });
          return rdfMetadataOuput.data;
        }();
        quads = new asynciterator_1.TransformIterator(async () => {
          const dataStream = await dataStreamPromise;
          const actualDefaultGraph = this.dataFactory.defaultGraph();
          let filteredOutput = (0, asynciterator_1.wrap)(dataStream).transform({
            filter(quad) {
              if ((0, rdf_terms_1.matchPattern)(quad, subject, predicate, object, graph)) {
                return true;
              }
              return modifiedGraph && (0, rdf_terms_1.matchPattern)(quad, subject, predicate, object, actualDefaultGraph);
            }
          });
          if (modifiedGraph || graph.termType === "Variable") {
            filteredOutput = this.reverseMapQuadsToDefaultGraph(filteredOutput);
          }
          return filteredOutput;
        }, { autoStart: false });
        if (options == null ? void 0 : options.filterBindings) {
          return quads;
        }
        this.cacheQuads(quads, subject, predicate, object, graph);
        return this.getCachedQuads(subject, predicate, object, graph);
      }
      /**
       * If we add bindings for brTPF, append it to the URL.
       * We have to hardcode this because brTPF doesn't expose a URL template for passing bindings.
       * @param subject The subject.
       * @param predicate The predicate.
       * @param object The object.
       * @param graph The graph.
       * @param url The original QPF URL.
       * @param filterBindings The bindings to restrict with.
       * @param filterBindings.bindings The bindings stream.
       * @param filterBindings.metadata The bindings metadata.
       * @protected
       */
      async getBindingsRestrictedLink(subject, predicate, object, graph, url, filterBindings) {
        const values2 = [];
        for (const binding of await filterBindings.bindings.toArray()) {
          const value = ["("];
          for (const variable of filterBindings.metadata.variables) {
            const term = binding.get(variable.variable);
            value.push(term ? (0, rdf_string_ttl_1.termToString)(term) : "UNDEF");
            value.push(" ");
          }
          value.push(")");
          values2.push(value.join(""));
        }
        if (values2.length === 0) {
          values2.push("(<ex:comunica:unknown>)");
        }
        const valuesUrl = encodeURIComponent(`(${filterBindings.metadata.variables.map((variable) => `?${variable.variable.value}`).join(" ")}) { ${values2.join(" ")} }`);
        return `${url}&values=${valuesUrl}`;
      }
      reverseMapQuadsToDefaultGraph(quads) {
        const actualDefaultGraph = this.dataFactory.defaultGraph();
        return quads.map((quad) => (0, rdf_terms_1.mapTerms)(quad, (term, key) => key === "graph" && term.equals(this.defaultGraph) ? actualDefaultGraph : term));
      }
      getPatternId(subject, predicate, object, graph) {
        return JSON.stringify({
          s: subject.termType === "Variable" ? "" : _termToString(subject),
          p: predicate.termType === "Variable" ? "" : _termToString(predicate),
          o: object.termType === "Variable" ? "" : _termToString(object),
          g: graph.termType === "Variable" ? "" : _termToString(graph)
        });
      }
      cacheQuads(quads, subject, predicate, object, graph) {
        const patternId = this.getPatternId(subject, predicate, object, graph);
        this.cachedQuads[patternId] = quads.clone();
      }
      getCachedQuads(subject, predicate, object, graph) {
        const patternId = this.getPatternId(subject, predicate, object, graph);
        const quads = this.cachedQuads[patternId];
        if (quads) {
          return quads.clone();
        }
      }
      queryQuads(_operation, _context) {
        throw new Error("queryQuads is not implemented in QuerySourceQpf");
      }
      queryBoolean(_operation, _context) {
        throw new Error("queryBoolean is not implemented in QuerySourceQpf");
      }
      queryVoid(_operation, _context) {
        throw new Error("queryVoid is not implemented in QuerySourceQpf");
      }
    };
    exports.QuerySourceQpf = QuerySourceQpf;
    function _termToString(term) {
      return term.termType === "DefaultGraph" ? (
        // Any character that cannot be present in a URL will do
        "|"
      ) : (0, rdf_string_1.termToString)(term);
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/ActorQuerySourceIdentifyHypermediaQpf.js
var require_ActorQuerySourceIdentifyHypermediaQpf = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/ActorQuerySourceIdentifyHypermediaQpf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyHypermediaQpf = void 0;
    var bus_query_source_identify_hypermedia_1 = require_lib251();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var QuerySourceQpf_1 = require_QuerySourceQpf();
    var ActorQuerySourceIdentifyHypermediaQpf = class extends bus_query_source_identify_hypermedia_1.ActorQuerySourceIdentifyHypermedia {
      constructor(args) {
        super(args, "qpf");
      }
      async test(action) {
        if (action.forceSourceType && (action.forceSourceType !== "qpf" && action.forceSourceType !== "brtpf")) {
          return (0, core_1.failTest)(`Actor ${this.name} is not able to handle source type ${action.forceSourceType}.`);
        }
        return this.testMetadata(action);
      }
      async testMetadata(action) {
        const { searchForm } = await this.createSource(action.url, action.metadata, action.context, action.forceSourceType === "brtpf");
        if (!searchForm) {
          return (0, core_1.failTest)("Illegal state: found no TPF/QPF search form anymore in metadata.");
        }
        if (action.handledDatasets && action.handledDatasets[searchForm.dataset]) {
          return (0, core_1.failTest)(`Actor ${this.name} can only be applied for the first page of a QPF dataset.`);
        }
        return (0, core_1.passTest)({ filterFactor: 1 });
      }
      /**
       * Look for the search form
       * @param {IActionRdfResolveHypermedia} action the metadata to look for the form.
       * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.
       */
      async run(action) {
        this.logInfo(action.context, `Identified as qpf source: ${action.url}`);
        const source = await this.createSource(action.url, action.metadata, action.context, action.forceSourceType === "brtpf", action.quads);
        return { source, dataset: source.searchForm.dataset };
      }
      async createSource(url, metadata, context, bindingsRestricted, quads) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        return new QuerySourceQpf_1.QuerySourceQpf(this.mediatorMetadata, this.mediatorMetadataExtract, this.mediatorDereferenceRdf, dataFactory, algebraFactory, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory), this.subjectUri, this.predicateUri, this.objectUri, this.graphUri, url, metadata, bindingsRestricted, quads);
      }
    };
    exports.ActorQuerySourceIdentifyHypermediaQpf = ActorQuerySourceIdentifyHypermediaQpf;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/index.js
var require_lib253 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-qpf/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyHypermediaQpf(), exports);
    __exportStar(require_QuerySourceQpf(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/QuerySourceSparql.js
var require_QuerySourceSparql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/QuerySourceSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuerySourceSparql = void 0;
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var fetch_sparql_endpoint_1 = require_fetch_sparql_endpoint();
    var lru_cache_1 = require_commonjs();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var QuerySourceSparql = class _QuerySourceSparql {
      constructor(url, context, mediatorHttp, bindMethod, dataFactory, algebraFactory, bindingsFactory, forceHttpGet, cacheSize, countTimeout, cardinalityCountQueries, cardinalityEstimateConstruction, defaultGraph, unionDefaultGraph, datasets) {
        this.referenceValue = url;
        this.url = url;
        this.context = context;
        this.mediatorHttp = mediatorHttp;
        this.bindMethod = bindMethod;
        this.dataFactory = dataFactory;
        this.algebraFactory = algebraFactory;
        this.bindingsFactory = bindingsFactory;
        this.endpointFetcher = new fetch_sparql_endpoint_1.SparqlEndpointFetcher({
          method: forceHttpGet ? "GET" : "POST",
          fetch: (input, init) => this.mediatorHttp.mediate({ input, init, context: this.lastSourceContext }),
          prefixVariableQuestionMark: true,
          dataFactory
        });
        this.cache = cacheSize > 0 ? new lru_cache_1.LRUCache({ max: cacheSize }) : void 0;
        this.countTimeout = countTimeout;
        this.cardinalityCountQueries = cardinalityCountQueries;
        this.cardinalityEstimateConstruction = cardinalityEstimateConstruction;
        this.defaultGraph = defaultGraph;
        this.unionDefaultGraph = unionDefaultGraph ?? false;
        this.datasets = datasets;
      }
      async getSelectorShape() {
        return _QuerySourceSparql.SELECTOR_SHAPE;
      }
      queryBindings(operationIn, context, options) {
        let operationPromise;
        if (options == null ? void 0 : options.joinBindings) {
          operationPromise = _QuerySourceSparql.addBindingsToOperation(this.algebraFactory, this.bindMethod, operationIn, options.joinBindings);
        } else {
          operationPromise = Promise.resolve(operationIn);
        }
        const bindings = new asynciterator_1.TransformIterator(async () => {
          const operation = await operationPromise;
          const variables = sparqlalgebrajs_1.Util.inScopeVariables(operation);
          const queryString = context.get(context_entries_1.KeysInitQuery.queryString);
          const queryFormat = context.getSafe(context_entries_1.KeysInitQuery.queryFormat);
          const selectQuery = !(options == null ? void 0 : options.joinBindings) && queryString && queryFormat.language === "sparql" ? queryString : _QuerySourceSparql.operationToSelectQuery(this.algebraFactory, operation, variables);
          const undefVariables = _QuerySourceSparql.getOperationUndefs(operation);
          return this.queryBindingsRemote(this.url, selectQuery, variables, context, undefVariables);
        }, { autoStart: false });
        this.attachMetadata(bindings, context, operationPromise);
        return bindings;
      }
      queryQuads(operation, context) {
        this.lastSourceContext = this.context.merge(context);
        const rawStream = this.endpointFetcher.fetchTriples(this.url, context.get(context_entries_1.KeysInitQuery.queryString) ?? _QuerySourceSparql.operationToQuery(operation));
        this.lastSourceContext = void 0;
        const quads = (0, asynciterator_1.wrap)(rawStream, { autoStart: false, maxBufferSize: Number.POSITIVE_INFINITY });
        this.attachMetadata(quads, context, Promise.resolve(operation.input));
        return quads;
      }
      queryBoolean(operation, context) {
        this.lastSourceContext = this.context.merge(context);
        const promise = this.endpointFetcher.fetchAsk(this.url, context.get(context_entries_1.KeysInitQuery.queryString) ?? _QuerySourceSparql.operationToQuery(operation));
        this.lastSourceContext = void 0;
        return promise;
      }
      queryVoid(operation, context) {
        this.lastSourceContext = this.context.merge(context);
        const promise = this.endpointFetcher.fetchUpdate(this.url, context.get(context_entries_1.KeysInitQuery.queryString) ?? _QuerySourceSparql.operationToQuery(operation));
        this.lastSourceContext = void 0;
        return promise;
      }
      attachMetadata(target, context, operationPromise) {
        let variablesCount = [];
        new Promise(async (resolve, reject) => {
          var _a, _b;
          try {
            const operation = await operationPromise;
            const variablesScoped = sparqlalgebrajs_1.Util.inScopeVariables(operation);
            const countQuery = this.operationToNormalizedCountQuery(operation);
            const undefVariables = _QuerySourceSparql.getOperationUndefs(operation);
            variablesCount = variablesScoped.map((variable) => ({
              variable,
              canBeUndef: undefVariables.some((undefVariable) => undefVariable.equals(variable))
            }));
            const cachedCardinality = (_a = this.cache) == null ? void 0 : _a.get(countQuery);
            if (cachedCardinality) {
              return resolve(cachedCardinality);
            }
            if (this.cardinalityEstimateConstruction) {
              const localEstimate = await this.estimateOperationCardinality(operation);
              if (Number.isFinite(localEstimate.value)) {
                (_b = this.cache) == null ? void 0 : _b.set(countQuery, localEstimate);
                return resolve(localEstimate);
              }
            }
            if (!this.cardinalityCountQueries) {
              return resolve({ type: "estimate", value: Number.POSITIVE_INFINITY, dataset: this.url });
            }
            const timeoutHandler = setTimeout(() => resolve({
              type: "estimate",
              value: Number.POSITIVE_INFINITY,
              dataset: this.url
            }), this.countTimeout);
            const varCount = this.dataFactory.variable("count");
            const bindingsStream = await this.queryBindingsRemote(this.url, countQuery, [varCount], context, []);
            bindingsStream.on("data", (bindings) => {
              var _a2;
              clearTimeout(timeoutHandler);
              const count2 = bindings.get(varCount);
              const cardinality = {
                type: "estimate",
                value: Number.POSITIVE_INFINITY,
                dataset: this.url
              };
              if (count2) {
                const cardinalityValue = Number.parseInt(count2.value, 10);
                if (!Number.isNaN(cardinalityValue)) {
                  cardinality.type = "exact";
                  cardinality.value = cardinalityValue;
                  (_a2 = this.cache) == null ? void 0 : _a2.set(countQuery, cardinality);
                }
              }
              return resolve(cardinality);
            });
            bindingsStream.on("error", () => {
              clearTimeout(timeoutHandler);
              resolve({ type: "estimate", value: Number.POSITIVE_INFINITY, dataset: this.url });
            });
            bindingsStream.on("end", () => {
              clearTimeout(timeoutHandler);
              resolve({ type: "estimate", value: Number.POSITIVE_INFINITY, dataset: this.url });
            });
          } catch (error) {
            return reject(error);
          }
        }).then((cardinality) => {
          target.setProperty("metadata", {
            state: new utils_metadata_1.MetadataValidationState(),
            cardinality,
            variables: variablesCount
          });
        }).catch(() => target.setProperty("metadata", {
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: { type: "estimate", value: Number.POSITIVE_INFINITY, dataset: this.url },
          variables: variablesCount
        }));
      }
      /**
       * Convert an algebra operation into a query string, and if the operation is a simple triple pattern,
       * then also replace any variables with s, p, and o to increase the chance of cache hits.
       * @param {Algebra.Operation} operation The operation to convert into a query string.
       * @returns {string} Query string for a COUNT query over the operation.
       */
      operationToNormalizedCountQuery(operation) {
        const normalizedOperation = operation.type === sparqlalgebrajs_1.Algebra.types.PATTERN ? this.algebraFactory.createPattern(operation.subject.termType === "Variable" ? this.dataFactory.variable("s") : operation.subject, operation.predicate.termType === "Variable" ? this.dataFactory.variable("p") : operation.predicate, operation.object.termType === "Variable" ? this.dataFactory.variable("o") : operation.object) : operation;
        const operationString = _QuerySourceSparql.operationToCountQuery(this.dataFactory, this.algebraFactory, normalizedOperation);
        return operationString;
      }
      /**
       * Performs local cardinality estimation for the specified SPARQL algebra operation, which should
       * result in better estimation performance at the expense of accuracy.
       * @param {Algebra.Operation} operation A query operation.
       */
      async estimateOperationCardinality(operation) {
        const dataset = {
          getCardinality: (operation2) => {
            var _a;
            const queryString = this.operationToNormalizedCountQuery(operation2);
            const cachedCardinality = (_a = this.cache) == null ? void 0 : _a.get(queryString);
            if (cachedCardinality) {
              return cachedCardinality;
            }
            if (this.datasets) {
              const cardinalities = this.datasets.filter((ds) => this.unionDefaultGraph || this.defaultGraph && ds.uri.endsWith(this.defaultGraph)).map((ds) => (0, utils_query_operation_1.estimateCardinality)(operation2, ds));
              const cardinality = {
                type: cardinalities.some((card) => card.type === "estimate") ? "estimate" : "exact",
                value: cardinalities.length > 0 ? cardinalities.reduce((acc, card) => acc + card.value, 0) : 0,
                dataset: this.url
              };
              return cardinality;
            }
          },
          source: this.url,
          uri: this.url
        };
        return (0, utils_query_operation_1.estimateCardinality)(operation, dataset);
      }
      /**
       * Create an operation that includes the bindings from the given bindings stream.
       * @param algebraFactory The algebra factory.
       * @param bindMethod A method for adding bindings to an operation.
       * @param operation The operation to bind to.
       * @param addBindings The bindings to add.
       * @param addBindings.bindings The bindings stream.
       * @param addBindings.metadata The bindings metadata.
       */
      static async addBindingsToOperation(algebraFactory, bindMethod, operation, addBindings) {
        const bindings = await addBindings.bindings.toArray();
        switch (bindMethod) {
          case "values":
            return algebraFactory.createJoin([
              algebraFactory.createValues(addBindings.metadata.variables.map((v) => v.variable), bindings.map((binding) => Object.fromEntries([...binding].map(([key, value]) => [`?${key.value}`, value])))),
              operation
            ], false);
          case "union": {
            throw new Error('Not implemented yet: "union" case');
          }
          case "filter": {
            throw new Error('Not implemented yet: "filter" case');
          }
        }
      }
      /**
       * Convert an operation to a select query for this pattern.
       * @param algebraFactory The algebra factory.
       * @param {Algebra.Operation} operation A query operation.
       * @param {RDF.Variable[]} variables The variables in scope for the operation.
       * @return {string} A select query string.
       */
      static operationToSelectQuery(algebraFactory, operation, variables) {
        return _QuerySourceSparql.operationToQuery(algebraFactory.createProject(operation, variables));
      }
      /**
       * Convert an operation to a count query for the number of matching triples for this pattern.
       * @param dataFactory The data factory.
       * @param algebraFactory The algebra factory.
       * @param {Algebra.Operation} operation A query operation.
       * @return {string} A count query string.
       */
      static operationToCountQuery(dataFactory, algebraFactory, operation) {
        return _QuerySourceSparql.operationToQuery(algebraFactory.createProject(algebraFactory.createExtend(algebraFactory.createGroup(operation, [], [algebraFactory.createBoundAggregate(dataFactory.variable("var0"), "count", algebraFactory.createWildcardExpression(), false)]), dataFactory.variable("count"), algebraFactory.createTermExpression(dataFactory.variable("var0"))), [dataFactory.variable("count")]));
      }
      /**
       * Convert an operation to a query for this pattern.
       * @param {Algebra.Operation} operation A query operation.
       * @return {string} A query string.
       */
      static operationToQuery(operation) {
        return (0, sparqlalgebrajs_1.toSparql)(operation, { sparqlStar: true });
      }
      /**
       * Check if the given operation may produce undefined values.
       * @param operation
       */
      static getOperationUndefs(operation) {
        const variables = [];
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          leftjoin(subOperation) {
            const left = sparqlalgebrajs_1.Util.inScopeVariables(subOperation.input[0]);
            const right = sparqlalgebrajs_1.Util.inScopeVariables(subOperation.input[1]);
            for (const varRight of right) {
              if (!left.some((varLeft) => varLeft.equals(varRight))) {
                variables.push(varRight);
              }
            }
            return false;
          },
          values(values2) {
            for (const variable of values2.variables) {
              if (values2.bindings.some((bindings) => !(`?${variable.value}` in bindings))) {
                variables.push(variable);
              }
            }
            return false;
          },
          union(union) {
            const scopedVariables = union.input.map(sparqlalgebrajs_1.Util.inScopeVariables);
            for (const variable of (0, rdf_terms_1.uniqTerms)(scopedVariables.flat())) {
              if (!scopedVariables.every((input) => input.some((inputVar) => inputVar.equals(variable)))) {
                variables.push(variable);
              }
            }
            return true;
          }
        });
        return (0, rdf_terms_1.uniqTerms)(variables);
      }
      /**
       * Send a SPARQL query to a SPARQL endpoint and retrieve its bindings as a stream.
       * @param {string} endpoint A SPARQL endpoint URL.
       * @param {string} query A SPARQL query string.
       * @param {RDF.Variable[]} variables The expected variables.
       * @param {IActionContext} context The source context.
       * @param undefVariables Variables that may have undefs.
       * @return {BindingsStream} A stream of bindings.
       */
      async queryBindingsRemote(endpoint, query, variables, context, undefVariables) {
        const undefVariablesIndex = /* @__PURE__ */ new Set();
        for (const undefVariable of undefVariables) {
          undefVariablesIndex.add(undefVariable.value);
        }
        this.lastSourceContext = this.context.merge(context);
        const rawStream = await this.endpointFetcher.fetchBindings(endpoint, query);
        this.lastSourceContext = void 0;
        return (0, asynciterator_1.wrap)(rawStream, { autoStart: false, maxBufferSize: Number.POSITIVE_INFINITY }).map((rawData) => this.bindingsFactory.bindings(variables.map((variable) => {
          var _a;
          const value = rawData[`?${variable.value}`];
          if (!undefVariablesIndex.has(variable.value) && !value) {
            (_a = core_1.Actor.getContextLogger(this.context)) == null ? void 0 : _a.warn(`The endpoint ${endpoint} failed to provide a binding for ${variable.value}.`);
          }
          return [variable, value];
        }).filter(([_, v]) => Boolean(v))));
      }
      toString() {
        return `QuerySourceSparql(${this.url})`;
      }
    };
    exports.QuerySourceSparql = QuerySourceSparql;
    QuerySourceSparql.SELECTOR_SHAPE = {
      type: "disjunction",
      children: [
        {
          type: "operation",
          operation: { operationType: "wildcard" },
          joinBindings: true
        }
      ]
    };
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/ActorQuerySourceIdentifyHypermediaSparql.js
var require_ActorQuerySourceIdentifyHypermediaSparql = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/ActorQuerySourceIdentifyHypermediaSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyHypermediaSparql = void 0;
    var bus_query_source_identify_hypermedia_1 = require_lib251();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var QuerySourceSparql_1 = require_QuerySourceSparql();
    var ActorQuerySourceIdentifyHypermediaSparql = class extends bus_query_source_identify_hypermedia_1.ActorQuerySourceIdentifyHypermedia {
      constructor(args) {
        super(args, "sparql");
      }
      async testMetadata(action) {
        if (!action.forceSourceType && !this.forceSourceType && !action.metadata.sparqlService && !(this.checkUrlSuffix && (action.url.endsWith("/sparql") || action.url.endsWith("/sparql/")))) {
          return (0, core_1.failTest)(`Actor ${this.name} could not detect a SPARQL service description or URL ending on /sparql.`);
        }
        return (0, core_1.passTest)({ filterFactor: 1 });
      }
      async run(action) {
        var _a;
        this.logInfo(action.context, `Identified ${action.url} as sparql source with service URL: ${action.metadata.sparqlService || action.url}`);
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const isSingularSource = ((_a = action.context.get(context_entries_1.KeysQueryOperation.querySources)) == null ? void 0 : _a.length) === 1;
        const source = new QuerySourceSparql_1.QuerySourceSparql(
          action.forceSourceType ?? this.forceSourceType ? action.url : action.metadata.sparqlService || action.url,
          action.context,
          this.mediatorHttp,
          this.bindMethod,
          dataFactory,
          algebraFactory,
          await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory),
          this.forceHttpGet,
          this.cacheSize,
          this.countTimeout,
          // Cardinalities can be infinity when we're querying just a single source.
          this.cardinalityCountQueries && !isSingularSource,
          this.cardinalityEstimateConstruction,
          action.metadata.defaultGraph,
          action.metadata.unionDefaultGraph,
          action.metadata.datasets
        );
        return { source };
      }
    };
    exports.ActorQuerySourceIdentifyHypermediaSparql = ActorQuerySourceIdentifyHypermediaSparql;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/index.js
var require_lib254 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-sparql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyHypermediaSparql(), exports);
    __exportStar(require_QuerySourceSparql(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/QuerySourceRdfJs.js
var require_QuerySourceRdfJs = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/QuerySourceRdfJs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuerySourceRdfJs = void 0;
    var bus_query_source_identify_1 = require_lib252();
    var context_entries_1 = require_lib3();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var QuerySourceRdfJs = class _QuerySourceRdfJs {
      constructor(source, dataFactory, bindingsFactory) {
        this.source = source;
        this.referenceValue = source;
        this.dataFactory = dataFactory;
        this.bindingsFactory = bindingsFactory;
        const AF = new sparqlalgebrajs_1.Factory(this.dataFactory);
        this.selectorShape = {
          type: "operation",
          operation: {
            operationType: "pattern",
            pattern: AF.createPattern(this.dataFactory.variable("s"), this.dataFactory.variable("p"), this.dataFactory.variable("o"))
          },
          variablesOptional: [
            this.dataFactory.variable("s"),
            this.dataFactory.variable("p"),
            this.dataFactory.variable("o")
          ]
        };
        this.dummyDefaultGraph = this.dataFactory.variable("__comunica:defaultGraph");
      }
      static nullifyVariables(term, quotedTripleFiltering) {
        return !term || term.termType === "Variable" || !quotedTripleFiltering && term.termType === "Quad" && (0, rdf_terms_1.someTermsNested)(term, (value) => value.termType === "Variable") ? void 0 : term;
      }
      static hasDuplicateVariables(pattern) {
        const variables = (0, rdf_terms_1.filterTermsNested)(pattern, (term) => term.termType === "Variable");
        return variables.length > 1 && (0, rdf_terms_1.uniqTerms)(variables).length < variables.length;
      }
      async getSelectorShape() {
        return this.selectorShape;
      }
      queryBindings(operation, context) {
        var _a;
        if (operation.type !== "pattern") {
          throw new Error(`Attempted to pass non-pattern operation '${operation.type}' to QuerySourceRdfJs`);
        }
        const unionDefaultGraph = Boolean(context.get(context_entries_1.KeysQueryOperation.unionDefaultGraph));
        if (operation.graph.termType === "DefaultGraph" && unionDefaultGraph) {
          operation.graph = this.dummyDefaultGraph;
        }
        if (this.source.matchBindings) {
          const rawStream2 = this.source.matchBindings(this.bindingsFactory, operation.subject, operation.predicate, operation.object, operation.graph);
          let it2 = rawStream2 instanceof asynciterator_1.AsyncIterator ? rawStream2 : (0, asynciterator_1.wrap)(rawStream2, { autoStart: false });
          let forceEstimateCardinality = false;
          if (operation.graph.termType === "Variable" && !unionDefaultGraph) {
            forceEstimateCardinality = true;
            const variable = operation.graph;
            it2 = it2.filter((bindings) => bindings.get(variable).termType !== "DefaultGraph");
          }
          if (operation.graph.equals(this.dummyDefaultGraph)) {
            it2 = it2.map((bindings) => bindings.delete(this.dummyDefaultGraph));
            operation.graph = this.dataFactory.defaultGraph();
          }
          if (!it2.getProperty("metadata")) {
            const variables = (0, bus_query_source_identify_1.getVariables)(operation).map((variable) => ({ variable, canBeUndef: false }));
            this.setMetadata(it2, operation, context, forceEstimateCardinality, { variables }).catch((error) => it2.destroy(error));
          }
          return it2;
        }
        const quotedTripleFiltering = Boolean((_a = this.source.features) == null ? void 0 : _a.quotedTripleFiltering);
        const rawStream = this.source.match(_QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering));
        let it = rawStream instanceof asynciterator_1.AsyncIterator ? rawStream : (0, asynciterator_1.wrap)(rawStream, { autoStart: false });
        if (!quotedTripleFiltering) {
          it = (0, bus_query_source_identify_1.filterMatchingQuotedQuads)(operation, it);
        }
        if (!it.getProperty("metadata")) {
          this.setMetadata(it, operation, context).catch((error) => it.destroy(error));
        }
        if (operation.graph.equals(this.dummyDefaultGraph)) {
          operation.graph = this.dataFactory.defaultGraph();
        }
        return (0, bus_query_source_identify_1.quadsToBindings)(it, operation, this.dataFactory, this.bindingsFactory, Boolean(context.get(context_entries_1.KeysQueryOperation.unionDefaultGraph)));
      }
      async setMetadata(it, operation, context, forceEstimateCardinality = false, extraMetadata = {}) {
        var _a;
        const quotedTripleFiltering = Boolean((_a = this.source.features) == null ? void 0 : _a.quotedTripleFiltering);
        const unionDefaultGraph = Boolean(context.get(context_entries_1.KeysQueryOperation.unionDefaultGraph));
        if (operation.graph.termType === "DefaultGraph" && unionDefaultGraph) {
          operation.graph = this.dummyDefaultGraph;
        }
        let cardinality;
        if (this.source.countQuads) {
          cardinality = await this.source.countQuads(_QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering));
        } else {
          let i = 0;
          cardinality = await new Promise((resolve, reject) => {
            const matches = this.source.match(_QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering), _QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering));
            matches.on("error", reject);
            matches.on("end", () => resolve(i));
            matches.on("data", () => i++);
          });
        }
        const wouldRequirePostFiltering = !quotedTripleFiltering && (0, rdf_terms_1.someTerms)(operation, (term) => term.termType === "Quad") || _QuerySourceRdfJs.hasDuplicateVariables(operation);
        it.setProperty("metadata", {
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: {
            type: wouldRequirePostFiltering || forceEstimateCardinality ? "estimate" : "exact",
            value: cardinality
          },
          // Force requestTime to zero, since this will be free for future calls, as we're fully indexed at this stage.
          requestTime: 0,
          ...extraMetadata
        });
      }
      queryQuads(_operation, _context) {
        throw new Error("queryQuads is not implemented in QuerySourceRdfJs");
      }
      queryBoolean(_operation, _context) {
        throw new Error("queryBoolean is not implemented in QuerySourceRdfJs");
      }
      queryVoid(_operation, _context) {
        throw new Error("queryVoid is not implemented in QuerySourceRdfJs");
      }
      toString() {
        return `QuerySourceRdfJs(${this.source.constructor.name})`;
      }
    };
    exports.QuerySourceRdfJs = QuerySourceRdfJs;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/ActorQuerySourceIdentifyRdfJs.js
var require_ActorQuerySourceIdentifyRdfJs = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/ActorQuerySourceIdentifyRdfJs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyRdfJs = void 0;
    var bus_query_source_identify_1 = require_lib252();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var QuerySourceRdfJs_1 = require_QuerySourceRdfJs();
    var ActorQuerySourceIdentifyRdfJs = class extends bus_query_source_identify_1.ActorQuerySourceIdentify {
      constructor(args) {
        super(args);
      }
      async test(action) {
        const source = action.querySourceUnidentified;
        if (source.type !== void 0 && source.type !== "rdfjs") {
          return (0, core_1.failTest)(`${this.name} requires a single query source with rdfjs type to be present in the context.`);
        }
        if (typeof source.value === "string" || !("match" in source.value)) {
          return (0, core_1.failTest)(`${this.name} received an invalid rdfjs query source.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        return {
          querySource: {
            source: new QuerySourceRdfJs_1.QuerySourceRdfJs(action.querySourceUnidentified.value, dataFactory, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory)),
            context: action.querySourceUnidentified.context ?? new core_1.ActionContext()
          }
        };
      }
    };
    exports.ActorQuerySourceIdentifyRdfJs = ActorQuerySourceIdentifyRdfJs;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/IRdfJsSourceExtended.js
var require_IRdfJsSourceExtended = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/IRdfJsSourceExtended.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/index.js
var require_lib255 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-rdfjs/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyRdfJs(), exports);
    __exportStar(require_IRdfJsSourceExtended(), exports);
    __exportStar(require_QuerySourceRdfJs(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/BlankNode.js
var require_BlankNode3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/BlankNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNode = void 0;
    var BlankNode = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNode = BlankNode;
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/DefaultGraph.js
var require_DefaultGraph3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/DefaultGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGraph = void 0;
    var DefaultGraph = class {
      constructor() {
        this.termType = "DefaultGraph";
        this.value = "";
      }
      equals(other) {
        return !!other && other.termType === "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph;
    DefaultGraph.INSTANCE = new DefaultGraph();
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/NamedNode.js
var require_NamedNode3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/NamedNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedNode = void 0;
    var NamedNode = class {
      constructor(value) {
        this.termType = "NamedNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "NamedNode" && other.value === this.value;
      }
    };
    exports.NamedNode = NamedNode;
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Literal.js
var require_Literal3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Literal = void 0;
    var NamedNode_1 = require_NamedNode3();
    var Literal = class _Literal {
      constructor(value, languageOrDatatype) {
        this.termType = "Literal";
        this.value = value;
        if (typeof languageOrDatatype === "string") {
          this.language = languageOrDatatype;
          this.datatype = _Literal.RDF_LANGUAGE_STRING;
          this.direction = "";
        } else if (languageOrDatatype) {
          if ("termType" in languageOrDatatype) {
            this.language = "";
            this.datatype = languageOrDatatype;
            this.direction = "";
          } else {
            this.language = languageOrDatatype.language;
            this.datatype = languageOrDatatype.direction ? _Literal.RDF_DIRECTIONAL_LANGUAGE_STRING : _Literal.RDF_LANGUAGE_STRING;
            this.direction = languageOrDatatype.direction || "";
          }
        } else {
          this.language = "";
          this.datatype = _Literal.XSD_STRING;
          this.direction = "";
        }
      }
      equals(other) {
        return !!other && other.termType === "Literal" && other.value === this.value && other.language === this.language && (other.direction === this.direction || !other.direction && this.direction === "") && this.datatype.equals(other.datatype);
      }
    };
    exports.Literal = Literal;
    Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    Literal.RDF_DIRECTIONAL_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString");
    Literal.XSD_STRING = new NamedNode_1.NamedNode("http://www.w3.org/2001/XMLSchema#string");
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Quad.js
var require_Quad3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Quad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quad = void 0;
    var Quad = class {
      constructor(subject, predicate, object, graph) {
        this.termType = "Quad";
        this.value = "";
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
      }
      equals(other) {
        return !!other && (other.termType === "Quad" || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Quad = Quad;
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Variable.js
var require_Variable4 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Variable2 = class {
      constructor(value) {
        this.termType = "Variable";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "Variable" && other.value === this.value;
      }
    };
    exports.Variable = Variable2;
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/DataFactory.js
var require_DataFactory3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/lib/DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFactory = void 0;
    var BlankNode_1 = require_BlankNode3();
    var DefaultGraph_1 = require_DefaultGraph3();
    var Literal_1 = require_Literal3();
    var NamedNode_1 = require_NamedNode3();
    var Quad_1 = require_Quad3();
    var Variable_1 = require_Variable4();
    var dataFactoryCounter = 0;
    var DataFactory = class {
      constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
      }
      /**
       * @param value The IRI for the named node.
       * @return A new instance of NamedNode.
       * @see NamedNode
       */
      namedNode(value) {
        return new NamedNode_1.NamedNode(value);
      }
      /**
       * @param value The optional blank node identifier.
       * @return A new instance of BlankNode.
       *         If the `value` parameter is undefined a new identifier
       *         for the blank node is generated for each call.
       * @see BlankNode
       */
      blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
      }
      /**
       * @param value              The literal value.
       * @param languageOrDatatype The optional language, datatype, or directional language.
       *                           If `languageOrDatatype` is a NamedNode,
       *                           then it is used for the value of `NamedNode.datatype`.
       *                           If `languageOrDatatype` is a NamedNode, it is used for the value
       *                           of `NamedNode.language`.
       *                           Otherwise, it is used as a directional language,
       *                           from which the language is set to `languageOrDatatype.language`
       *                           and the direction to `languageOrDatatype.direction`.
       * @return A new instance of Literal.
       * @see Literal
       */
      literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
      }
      /**
       * This method is optional.
       * @param value The variable name
       * @return A new instance of Variable.
       * @see Variable
       */
      variable(value) {
        return new Variable_1.Variable(value);
      }
      /**
       * @return An instance of DefaultGraph.
       */
      defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
      }
      /**
       * @param subject   The quad subject term.
       * @param predicate The quad predicate term.
       * @param object    The quad object term.
       * @param graph     The quad graph term.
       * @return A new instance of Quad.
       * @see Quad
       */
      quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
      }
      /**
       * Create a deep copy of the given term using this data factory.
       * @param original An RDF term.
       * @return A deep copy of the given term.
       */
      fromTerm(original) {
        switch (original.termType) {
          case "NamedNode":
            return this.namedNode(original.value);
          case "BlankNode":
            return this.blankNode(original.value);
          case "Literal":
            if (original.language) {
              return this.literal(original.value, original.language);
            }
            if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
              return this.literal(original.value, this.fromTerm(original.datatype));
            }
            return this.literal(original.value);
          case "Variable":
            return this.variable(original.value);
          case "DefaultGraph":
            return this.defaultGraph();
          case "Quad":
            return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
      }
      /**
       * Create a deep copy of the given quad using this data factory.
       * @param original An RDF quad.
       * @return A deep copy of the given quad.
       */
      fromQuad(original) {
        return this.fromTerm(original);
      }
      /**
       * Reset the internal blank node counter.
       */
      resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
      }
    };
    exports.DataFactory = DataFactory;
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/index.js
var require_rdf_data_factory3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-data-factory/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNode3(), exports);
    __exportStar(require_DataFactory3(), exports);
    __exportStar(require_DefaultGraph3(), exports);
    __exportStar(require_Literal3(), exports);
    __exportStar(require_NamedNode3(), exports);
    __exportStar(require_Quad3(), exports);
    __exportStar(require_Variable4(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/lib/QuadTermUtil.js
var require_QuadTermUtil2 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/lib/QuadTermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRIPLE_TERM_NAMES = exports.QUAD_TERM_NAMES = void 0;
    exports.getTerms = getTerms;
    exports.getTermsNested = getTermsNested;
    exports.getNamedTerms = getNamedTerms;
    exports.collectNamedTerms = collectNamedTerms;
    exports.forEachTerms = forEachTerms;
    exports.forEachTermsNested = forEachTermsNested;
    exports.filterTerms = filterTerms;
    exports.filterTermsNested = filterTermsNested;
    exports.filterQuadTermNames = filterQuadTermNames;
    exports.filterQuadTermNamesNested = filterQuadTermNamesNested;
    exports.mapTerms = mapTerms;
    exports.mapTermsNested = mapTermsNested;
    exports.reduceTerms = reduceTerms;
    exports.reduceTermsNested = reduceTermsNested;
    exports.everyTerms = everyTerms;
    exports.everyTermsNested = everyTermsNested;
    exports.someTerms = someTerms;
    exports.someTermsNested = someTermsNested;
    exports.getValueNestedPath = getValueNestedPath;
    exports.matchTerm = matchTerm;
    exports.matchPattern = matchPattern;
    exports.matchPatternComplete = matchPatternComplete;
    exports.matchPatternMappings = matchPatternMappings;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var DF = new rdf_data_factory_1.DataFactory();
    exports.QUAD_TERM_NAMES = ["subject", "predicate", "object", "graph"];
    exports.TRIPLE_TERM_NAMES = ["subject", "predicate", "object"];
    function getTerms(quad, ignoreDefaultGraph) {
      if (ignoreDefaultGraph && quad.graph.termType === "DefaultGraph") {
        return [quad.subject, quad.predicate, quad.object];
      }
      return [quad.subject, quad.predicate, quad.object, quad.graph];
    }
    function getTermsNested(quad, ignoreDefaultGraph) {
      const terms = [];
      for (const term of getTerms(quad, ignoreDefaultGraph)) {
        if (term.termType === "Quad") {
          getTermsNested(term, ignoreDefaultGraph).forEach((subTerm) => terms.push(subTerm));
        } else {
          terms.push(term);
        }
      }
      return terms;
    }
    function getNamedTerms(quad) {
      return [
        { key: "subject", value: quad.subject },
        { key: "predicate", value: quad.predicate },
        { key: "object", value: quad.object },
        { key: "graph", value: quad.graph }
      ];
    }
    function collectNamedTerms(namedTerms, defaultCb, dataFactory) {
      const elements = {};
      namedTerms.forEach((namedTerm) => elements[namedTerm.key] = namedTerm.value);
      if (defaultCb) {
        elements.subject = elements.subject || defaultCb("subject");
        elements.predicate = elements.predicate || defaultCb("predicate");
        elements.object = elements.object || defaultCb("object");
        elements.graph = elements.graph || defaultCb("graph");
      }
      return (dataFactory || DF).quad(elements.subject, elements.predicate, elements.object, elements.graph);
    }
    function forEachTerms(quad, cb) {
      cb(quad.subject, "subject");
      cb(quad.predicate, "predicate");
      cb(quad.object, "object");
      cb(quad.graph, "graph");
    }
    function forEachTermsNested(quad, cb, keys2 = []) {
      if (quad.subject.termType === "Quad") {
        forEachTermsNested(quad.subject, cb, [...keys2, "subject"]);
      } else {
        cb(quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        forEachTermsNested(quad.predicate, cb, [...keys2, "predicate"]);
      } else {
        cb(quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        forEachTermsNested(quad.object, cb, [...keys2, "object"]);
      } else {
        cb(quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        forEachTermsNested(quad.graph, cb, [...keys2, "graph"]);
      } else {
        cb(quad.graph, [...keys2, "graph"]);
      }
    }
    function filterTerms(quad, filter3) {
      const terms = [];
      if (filter3(quad.subject, "subject")) {
        terms.push(quad.subject);
      }
      if (filter3(quad.predicate, "predicate")) {
        terms.push(quad.predicate);
      }
      if (filter3(quad.object, "object")) {
        terms.push(quad.object);
      }
      if (filter3(quad.graph, "graph")) {
        terms.push(quad.graph);
      }
      return terms;
    }
    function filterTermsNested(quad, filter3, keys2 = []) {
      let terms = [];
      if (quad.subject.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.subject, filter3, [...keys2, "subject"])];
      } else {
        if (filter3(quad.subject, [...keys2, "subject"])) {
          terms.push(quad.subject);
        }
      }
      if (quad.predicate.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.predicate, filter3, [...keys2, "predicate"])];
      } else {
        if (filter3(quad.predicate, [...keys2, "predicate"])) {
          terms.push(quad.predicate);
        }
      }
      if (quad.object.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.object, filter3, [...keys2, "object"])];
      } else {
        if (filter3(quad.object, [...keys2, "object"])) {
          terms.push(quad.object);
        }
      }
      if (quad.graph.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.graph, filter3, [...keys2, "graph"])];
      } else {
        if (filter3(quad.graph, [...keys2, "graph"])) {
          terms.push(quad.graph);
        }
      }
      return terms;
    }
    function filterQuadTermNames(quad, filter3) {
      const names = [];
      if (filter3(quad.subject, "subject")) {
        names.push("subject");
      }
      if (filter3(quad.predicate, "predicate")) {
        names.push("predicate");
      }
      if (filter3(quad.object, "object")) {
        names.push("object");
      }
      if (filter3(quad.graph, "graph")) {
        names.push("graph");
      }
      return names;
    }
    function filterQuadTermNamesNested(quad, filter3, keys2 = []) {
      let names = [];
      const keysS = [...keys2, "subject"];
      if (quad.subject.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.subject, filter3, keysS)];
      } else {
        if (filter3(quad.subject, keysS)) {
          names.push(keysS);
        }
      }
      const keysP = [...keys2, "predicate"];
      if (quad.predicate.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.predicate, filter3, keysP)];
      } else {
        if (filter3(quad.predicate, keysP)) {
          names.push(keysP);
        }
      }
      const keysO = [...keys2, "object"];
      if (quad.object.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.object, filter3, keysO)];
      } else {
        if (filter3(quad.object, keysO)) {
          names.push(keysO);
        }
      }
      const keysG = [...keys2, "graph"];
      if (quad.graph.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.graph, filter3, keysG)];
      } else {
        if (filter3(quad.graph, keysG)) {
          names.push(keysG);
        }
      }
      return names;
    }
    function mapTerms(quad, mapper, dataFactory) {
      return (dataFactory || DF).quad(mapper(quad.subject, "subject"), mapper(quad.predicate, "predicate"), mapper(quad.object, "object"), mapper(quad.graph, "graph"));
    }
    function mapTermsNested(quad, mapper, dataFactory, keys2 = []) {
      return (dataFactory || DF).quad(quad.subject.termType === "Quad" ? mapTermsNested(quad.subject, mapper, dataFactory, [...keys2, "subject"]) : mapper(quad.subject, [...keys2, "subject"]), quad.predicate.termType === "Quad" ? mapTermsNested(quad.predicate, mapper, dataFactory, [...keys2, "predicate"]) : mapper(quad.predicate, [...keys2, "predicate"]), quad.object.termType === "Quad" ? mapTermsNested(quad.object, mapper, dataFactory, [...keys2, "object"]) : mapper(quad.object, [...keys2, "object"]), quad.graph.termType === "Quad" ? mapTermsNested(quad.graph, mapper, dataFactory, [...keys2, "graph"]) : mapper(quad.graph, [...keys2, "graph"]));
    }
    function reduceTerms(quad, reducer, initialValue) {
      let value = initialValue;
      value = reducer(value, quad.subject, "subject");
      value = reducer(value, quad.predicate, "predicate");
      value = reducer(value, quad.object, "object");
      return reducer(value, quad.graph, "graph");
    }
    function reduceTermsNested(quad, reducer, initialValue, keys2 = []) {
      let value = initialValue;
      if (quad.subject.termType === "Quad") {
        value = reduceTermsNested(quad.subject, reducer, value, [...keys2, "subject"]);
      } else {
        value = reducer(value, quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        value = reduceTermsNested(quad.predicate, reducer, value, [...keys2, "predicate"]);
      } else {
        value = reducer(value, quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        value = reduceTermsNested(quad.object, reducer, value, [...keys2, "object"]);
      } else {
        value = reducer(value, quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        value = reduceTermsNested(quad.graph, reducer, value, [...keys2, "graph"]);
      } else {
        value = reducer(value, quad.graph, [...keys2, "graph"]);
      }
      return value;
    }
    function everyTerms(quad, checker) {
      return checker(quad.subject, "subject") && checker(quad.predicate, "predicate") && checker(quad.object, "object") && checker(quad.graph, "graph");
    }
    function everyTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? everyTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) && (quad.predicate.termType === "Quad" ? everyTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) && (quad.object.termType === "Quad" ? everyTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) && (quad.graph.termType === "Quad" ? everyTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    function someTerms(quad, checker) {
      return checker(quad.subject, "subject") || checker(quad.predicate, "predicate") || checker(quad.object, "object") || checker(quad.graph, "graph");
    }
    function someTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? someTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) || (quad.predicate.termType === "Quad" ? someTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) || (quad.object.termType === "Quad" ? someTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) || (quad.graph.termType === "Quad" ? someTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    function getValueNestedPath(term, keys2) {
      if (keys2.length === 0) {
        return term;
      }
      if (term.termType === "Quad") {
        return getValueNestedPath(term[keys2[0]], keys2.slice(1));
      }
      throw new Error(`Tried to get ${keys2[0]} from term of type ${term.termType}`);
    }
    function matchTerm(termA, termB) {
      return !termB || termB.termType === "Variable" || termB.termType === "Quad" && termA.termType === "Quad" && matchPatternComplete(termA, termB) || termB.equals(termA);
    }
    function matchPattern(quad, subject, predicate, object, graph) {
      return matchTerm(quad.subject, subject) && matchTerm(quad.predicate, predicate) && matchTerm(quad.object, object) && matchTerm(quad.graph, graph);
    }
    function matchPatternComplete(quad, pattern) {
      return matchPattern(quad, pattern.subject, pattern.predicate, pattern.object, pattern.graph);
    }
    function matchPatternMappings(quad, pattern, opt = {}) {
      const map2 = {};
      function match(_pattern, _quad) {
        return everyTerms(_pattern, (t1, key) => {
          var _a, _b;
          const t2 = _quad[key];
          switch (t1.termType) {
            case "Variable":
              return opt.skipVarMapping && t2.termType === "Variable" || ((_b = (_a = map2[t1.value]) === null || _a === void 0 ? void 0 : _a.equals(t2)) !== null && _b !== void 0 ? _b : (map2[t1.value] = t2, true));
            case "Quad":
              return t2.termType === "Quad" && match(t1, t2);
            default:
              return t1.equals(t2);
          }
        });
      }
      return match(pattern, quad) && (opt.returnMappings ? map2 : true);
    }
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-string/lib/TermUtil.js
var require_TermUtil5 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-string/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = termToString;
    exports.getLiteralValue = getLiteralValue;
    exports.getLiteralType = getLiteralType;
    exports.getLiteralLanguage = getLiteralLanguage;
    exports.getLiteralDirection = getLiteralDirection;
    exports.stringToTerm = stringToTerm;
    exports.quadToStringQuad = quadToStringQuad;
    exports.stringQuadToQuad = stringQuadToQuad;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return "_:" + term.value;
        case "Literal":
          const literalValue = term;
          return '"' + literalValue.value + '"' + (literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString" ? "^^" + literalValue.datatype.value : "") + (literalValue.language ? "@" + literalValue.language : "") + (literalValue.direction ? "--" + literalValue.direction : "");
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : " " + termToString(term.graph)}>>`;
        case "Variable":
          return "?" + term.value;
        case "DefaultGraph":
          return term.value;
      }
    }
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1];
    }
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      if (match[1]) {
        let ret = match[1].toLowerCase();
        const doubleDashPos = ret.indexOf("--");
        if (doubleDashPos >= 0) {
          ret = ret.slice(0, doubleDashPos);
        }
        return ret;
      }
      return "";
    }
    function getLiteralDirection(literalValue) {
      const doubleDashPos = literalValue.indexOf("--", literalValue.lastIndexOf('"'));
      if (doubleDashPos >= 0) {
        const direction = literalValue.slice(doubleDashPos + 2, literalValue.length);
        if (direction === "ltr" || direction === "rtl") {
          return direction;
        }
        throw new Error(literalValue + " is not a literal with a valid direction");
      }
      return "";
    }
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || !value.length) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.substr(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.substr(1));
        case '"':
          const language = getLiteralLanguage(value);
          const direction = getLiteralDirection(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language ? { language, direction } : type);
        case "<":
        default:
          if (value[0] === "<" && value.length > 4 && value[1] === "<" && value[value.length - 1] === ">" && value[value.length - 2] === ">") {
            const terms = value.slice(2, -2).trim();
            let stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            let inQuote = false;
            for (let i = 0; i < terms.length; i++) {
              const char = terms[i];
              if (char === "<")
                ignoreTags++;
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error("Found closing tag without opening tag in " + value);
                } else {
                  ignoreTags--;
                }
              }
              if (char === '"') {
                let escaped = false;
                let j = i;
                while (j-- > 0 && terms[j] === "\\") {
                  escaped = !escaped;
                }
                if (!escaped) {
                  inQuote = !inQuote;
                }
              }
              if (char === " " && !inQuote && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i));
                while (terms[i + 1] === " ") {
                  i += 1;
                }
                lastIndex = i + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error("Found opening tag without closing tag in " + value);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error("Nested quad syntax error " + value);
            }
            stringTerms = stringTerms.map((term) => term.startsWith("<") && !term.includes(" ") ? term.slice(1, -1) : term);
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          return dataFactory.namedNode(value);
      }
    }
    function quadToStringQuad(q) {
      return {
        subject: termToString(q.subject),
        predicate: termToString(q.predicate),
        object: termToString(q.object),
        graph: termToString(q.graph)
      };
    }
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-string/index.js
var require_rdf_string3 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralDirection = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil5();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralDirection", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralDirection;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/lib/TermUtil.js
var require_TermUtil6 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TERM_TYPES = void 0;
    exports.uniqTerms = uniqTerms;
    exports.getTermsOfType = getTermsOfType;
    exports.getNamedNodes = getNamedNodes;
    exports.getBlankNodes = getBlankNodes;
    exports.getLiterals = getLiterals;
    exports.getVariables = getVariables;
    exports.getDefaultGraphs = getDefaultGraphs;
    exports.getQuads = getQuads;
    var rdf_string_1 = require_rdf_string3();
    exports.TERM_TYPES = ["NamedNode", "BlankNode", "Literal", "Variable", "DefaultGraph", "Quad"];
    function uniqTerms(terms) {
      const hash2 = {};
      return terms.filter((term) => {
        const termString = (0, rdf_string_1.termToString)(term);
        return !(termString in hash2) && (hash2[termString] = true);
      });
    }
    function getTermsOfType(terms, termType) {
      return terms.filter((term) => term.termType === termType);
    }
    function getNamedNodes(terms) {
      return getTermsOfType(terms, "NamedNode");
    }
    function getBlankNodes(terms) {
      return getTermsOfType(terms, "BlankNode");
    }
    function getLiterals(terms) {
      return getTermsOfType(terms, "Literal");
    }
    function getVariables(terms) {
      return getTermsOfType(terms, "Variable");
    }
    function getDefaultGraphs(terms) {
      return getTermsOfType(terms, "DefaultGraph");
    }
    function getQuads(terms) {
      return getTermsOfType(terms, "Quad");
    }
  }
});

// ../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/index.js
var require_rdf_terms2 = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/node_modules/rdf-terms/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QuadTermUtil2(), exports);
    __exportStar(require_TermUtil6(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberRecordFullTerms.js
var require_TermDictionaryNumberRecordFullTerms = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberRecordFullTerms.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryNumberRecordFullTerms = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_string_1 = require_rdf_string3();
    var TermDictionaryNumberRecordFullTerms = class {
      constructor(dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.lastId = 0;
        this.dictionary = {};
        this.reverseDictionary = {};
        this.features = { quotedTriples: false };
        this.dataFactory = dataFactory;
      }
      encode(term) {
        const key = (0, rdf_string_1.termToString)(term);
        let encoded = this.dictionary[key];
        if (encoded === void 0) {
          encoded = this.lastId++;
          this.dictionary[key] = encoded;
          this.reverseDictionary[encoded] = term;
        }
        return encoded;
      }
      encodeOptional(term) {
        const key = (0, rdf_string_1.termToString)(term);
        return this.dictionary[key];
      }
      decode(encoding) {
        const string = this.reverseDictionary[encoding];
        if (string === void 0) {
          throw new Error(`The value ${encoding} is not present in this dictionary`);
        }
        return string;
      }
      *encodings() {
        for (const key of Object.keys(this.reverseDictionary)) {
          yield Number.parseInt(key, 10);
        }
      }
      findQuotedTriples(quotedTriplePattern) {
        throw new Error("findQuotedTriples is not supported");
      }
      findQuotedTriplesEncoded(quotedTriplePattern) {
        throw new Error("findQuotedTriplesEncoded is not supported");
      }
    };
    exports.TermDictionaryNumberRecordFullTerms = TermDictionaryNumberRecordFullTerms;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/OrderUtils.js
var require_OrderUtils = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/OrderUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QUAD_TERM_NAMES_INVERSE = void 0;
    exports.getBestIndex = getBestIndex;
    exports.getComponentOrderScore = getComponentOrderScore;
    exports.orderQuadComponents = orderQuadComponents;
    exports.encodeOptionalTerms = encodeOptionalTerms;
    exports.quadToPattern = quadToPattern;
    exports.quadHasVariables = quadHasVariables;
    exports.arePatternsQuoted = arePatternsQuoted;
    var rdf_terms_1 = require_rdf_terms2();
    exports.QUAD_TERM_NAMES_INVERSE = Object.fromEntries(rdf_terms_1.QUAD_TERM_NAMES.map((value, key) => [value, key]));
    function getBestIndex(componentOrders, quadPattern) {
      if (componentOrders.length === 1 || quadPattern.every((term) => term !== void 0)) {
        return 0;
      }
      const definedQuadComponentNames = [];
      for (let quadComponentId = 0; quadComponentId < rdf_terms_1.QUAD_TERM_NAMES.length; quadComponentId++) {
        if (quadPattern[quadComponentId]) {
          definedQuadComponentNames.push(rdf_terms_1.QUAD_TERM_NAMES[quadComponentId]);
        }
      }
      const scoredIndexes = componentOrders.map((componentOrder, index) => {
        const score = getComponentOrderScore(componentOrder, definedQuadComponentNames);
        return { score, index };
      });
      return scoredIndexes.sort((scoredLeft, scoredRight) => scoredRight.score - scoredLeft.score)[0].index;
    }
    function getComponentOrderScore(componentOrder, partialComponentOrder) {
      return componentOrder.map((order, i) => partialComponentOrder.includes(order) ? componentOrder.length - i : 0).reduce((acc, add) => acc + add, 0);
    }
    function orderQuadComponents(desiredComponentOrder, quadPattern) {
      return desiredComponentOrder.map((desiredComponent) => {
        const desiredComponentIndex = exports.QUAD_TERM_NAMES_INVERSE[desiredComponent];
        return quadPattern[desiredComponentIndex];
      });
    }
    function encodeOptionalTerms(terms, dictionary) {
      const encodedTerms = terms.map((term) => {
        if (term) {
          if (term.termType === "Quad" && quadHasVariables(term)) {
            return;
          }
          const encodedTerm = dictionary.encodeOptional(term);
          if (encodedTerm === void 0) {
            return "none";
          }
          return encodedTerm;
        }
        return term;
      });
      if (encodedTerms.includes("none")) {
        return void 0;
      }
      return encodedTerms;
    }
    function quadToPattern(subject, predicate, object, graph, quotedPatterns) {
      let requireQuotedTripleFiltering = false;
      const quadPatternTerms = [subject || void 0, predicate || void 0, object || void 0, graph || void 0].map((term) => {
        if (term) {
          if (term.termType === "Variable") {
            return;
          }
          if (term.termType === "Quad") {
            if (quotedPatterns) {
              return term;
            }
            requireQuotedTripleFiltering = true;
            return;
          }
        }
        return term;
      });
      return [quadPatternTerms, requireQuotedTripleFiltering];
    }
    function quadHasVariables(currentTerm) {
      for (const component of rdf_terms_1.QUAD_TERM_NAMES) {
        const subTerm = currentTerm[component];
        if (subTerm.termType === "Variable" || subTerm.termType === "Quad" && quadHasVariables(subTerm)) {
          return true;
        }
      }
      return false;
    }
    function arePatternsQuoted(terms) {
      return terms.map((term) => (term == null ? void 0 : term.termType) === "Quad" && quadHasVariables(term));
    }
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMap.js
var require_RdfStoreIndexNestedMap = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedMap = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedMap = class {
      constructor(options) {
        this.features = {
          quotedTripleFiltering: false
        };
        this.dictionary = options.dictionary;
        this.nestedMap = /* @__PURE__ */ new Map();
      }
      set(terms, value) {
        const map0 = this.nestedMap;
        let map1 = map0.get(terms[0]);
        if (!map1) {
          map1 = /* @__PURE__ */ new Map();
          map0.set(terms[0], map1);
        }
        let map2 = map1.get(terms[1]);
        if (!map2) {
          map2 = /* @__PURE__ */ new Map();
          map1.set(terms[1], map2);
        }
        let map3 = map2.get(terms[2]);
        if (!map3) {
          map3 = /* @__PURE__ */ new Map();
          map2.set(terms[2], map3);
        }
        const contained = map3.has(terms[3]);
        if (!contained) {
          map3.set(terms[3], value);
        }
        return !contained;
      }
      remove(terms) {
        const map0 = this.nestedMap;
        const map1 = map0.get(terms[0]);
        if (!map1) {
          return false;
        }
        const map2 = map1.get(terms[1]);
        if (!map2) {
          return false;
        }
        const map3 = map2.get(terms[2]);
        if (!map3) {
          return false;
        }
        const ret = map3.delete(terms[3]);
        if (ret && map3.size === 0) {
          map2.delete(terms[2]);
          if (map2.size === 0) {
            map1.delete(terms[1]);
            if (map1.size === 0) {
              map0.delete(terms[0]);
            }
          }
        }
        return ret;
      }
      get(key) {
        const encoded = (0, OrderUtils_1.encodeOptionalTerms)(key, this.dictionary);
        if (!encoded || encoded.includes(void 0)) {
          return void 0;
        }
        return this.getEncoded(encoded);
      }
      getEncoded(ids) {
        const map1 = this.nestedMap.get(ids[0]);
        if (!map1) {
          return void 0;
        }
        const map2 = map1.get(ids[1]);
        if (!map2) {
          return void 0;
        }
        const map3 = map2.get(ids[2]);
        if (!map3) {
          return void 0;
        }
        return map3.get(ids[3]);
      }
      *find(terms) {
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        let partialQuad0;
        let partialQuad1;
        let partialQuad2;
        let partialQuad3;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = id0 !== void 0 ? map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          partialQuad0 = term0 || this.dictionary.decode(key1);
          const map1Keys = id1 !== void 0 ? map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            partialQuad1 = term1 || this.dictionary.decode(key2);
            const map2Keys = id2 !== void 0 ? map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              partialQuad2 = term2 || this.dictionary.decode(key3);
              const map3Keys = id3 !== void 0 ? map3.has(id3) ? [id3] : [] : map3.keys();
              for (const key4 of map3Keys) {
                partialQuad3 = term3 || this.dictionary.decode(key4);
                yield [partialQuad0, partialQuad1, partialQuad2, partialQuad3];
              }
            }
          }
        }
      }
      // The code below is nearly identical. We duplicate because abstraction would result in a significant performance hit.
      *findEncoded(ids, terms) {
        const [id0, id1, id2, id3] = ids;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = id0 !== void 0 ? map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          const map1Keys = id1 !== void 0 ? map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            const map2Keys = id2 !== void 0 ? map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              const map3Keys = id3 !== void 0 ? map3.has(id3) ? [id3] : [] : map3.keys();
              for (const key4 of map3Keys) {
                yield [key1, key2, key3, key4];
              }
            }
          }
        }
      }
      count(terms) {
        let count2 = 0;
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return 0;
        }
        const id0 = ids[0];
        const id1 = ids[1];
        const id2 = ids[2];
        const id3 = ids[3];
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = id0 !== void 0 ? map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          const map1Keys = id1 !== void 0 ? map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            const map2Keys = id2 !== void 0 ? map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              if (id3 !== void 0) {
                if (map3.has(id3)) {
                  count2++;
                }
              } else {
                count2 += map3.size;
              }
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedMap = RdfStoreIndexNestedMap;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuotedIndexed.js
var require_TermDictionaryQuotedIndexed = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuotedIndexed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryQuotedIndexed = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var RdfStoreIndexNestedMap_1 = require_RdfStoreIndexNestedMap();
    var OrderUtils_1 = require_OrderUtils();
    var TermDictionaryQuotedIndexed = class _TermDictionaryQuotedIndexed {
      constructor(rawTermDictionary, dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.quotedTriplesDictionary = [];
        this.features = { quotedTriples: true };
        this.plainTermDictionary = rawTermDictionary;
        const subIndexOpts = {
          // Not required
          indexCombinations: [],
          // Not required
          indexConstructor: void 0,
          dictionary: this,
          dataFactory
        };
        this.quotedTriplesReverseDictionaries = [
          new RdfStoreIndexNestedMap_1.RdfStoreIndexNestedMap(subIndexOpts),
          new RdfStoreIndexNestedMap_1.RdfStoreIndexNestedMap(subIndexOpts),
          new RdfStoreIndexNestedMap_1.RdfStoreIndexNestedMap(subIndexOpts)
        ];
        this.dataFactory = dataFactory;
      }
      encode(term) {
        if (term.termType === "Quad") {
          return this.encodeQuotedTriple(term, false);
        }
        return this.plainTermDictionary.encode(term);
      }
      encodeQuotedTriple(quad, optional) {
        if (quad.graph.termType !== "DefaultGraph") {
          throw new Error("Encoding of quoted quads outside of the default graph is not allowed");
        }
        const encodedTripleOptional = (0, OrderUtils_1.encodeOptionalTerms)([quad.subject, quad.predicate, quad.object, quad.graph], this);
        const id = encodedTripleOptional && encodedTripleOptional.every((encoded) => encoded !== void 0) ? this.quotedTriplesReverseDictionaries[0].getEncoded(encodedTripleOptional) : void 0;
        if (id !== void 0 || optional) {
          return id === void 0 ? void 0 : _TermDictionaryQuotedIndexed.BITMASK | id;
        }
        const encodedTriple = [
          this.encode(quad.subject),
          this.encode(quad.predicate),
          this.encode(quad.object)
        ];
        const encodingBase = this.quotedTriplesDictionary.length + 1;
        this.quotedTriplesDictionary.push(encodedTriple);
        const encodedGraph = this.encode(this.dataFactory.defaultGraph());
        this.quotedTriplesReverseDictionaries[0].set([
          encodedTriple[0],
          encodedTriple[1],
          encodedTriple[2],
          encodedGraph
        ], encodingBase);
        this.quotedTriplesReverseDictionaries[1].set([
          encodedTriple[1],
          encodedTriple[2],
          encodedTriple[0],
          encodedGraph
        ], encodingBase);
        this.quotedTriplesReverseDictionaries[2].set([
          encodedTriple[2],
          encodedTriple[0],
          encodedTriple[1],
          encodedGraph
        ], encodingBase);
        return _TermDictionaryQuotedIndexed.BITMASK | encodingBase;
      }
      encodeOptional(term) {
        if (term.termType === "Quad") {
          return this.encodeQuotedTriple(term, true);
        }
        return this.plainTermDictionary.encodeOptional(term);
      }
      decode(encoding) {
        if (_TermDictionaryQuotedIndexed.BITMASK & encoding) {
          const encodingBase = (~_TermDictionaryQuotedIndexed.BITMASK & encoding) - 1;
          if (encodingBase >= this.quotedTriplesDictionary.length) {
            throw new Error(`The value ${encoding} is not present in the quoted triples range of the dictionary`);
          }
          const encodedTerms = this.quotedTriplesDictionary[encodingBase];
          return this.dataFactory.quad(this.decode(encodedTerms[0]), this.decode(encodedTerms[1]), this.decode(encodedTerms[2]));
        }
        return this.plainTermDictionary.decode(encoding);
      }
      *encodings() {
        for (const encoding of this.plainTermDictionary.encodings()) {
          yield encoding;
        }
        for (const encoding of this.quotedTriplesDictionary.keys()) {
          yield _TermDictionaryQuotedIndexed.BITMASK | 1 + encoding;
        }
      }
      *findQuotedTriples(quotedTriplePattern) {
        for (const termEncoded of this.findQuotedTriplesEncoded(quotedTriplePattern)) {
          yield this.decode(termEncoded);
        }
      }
      *findQuotedTriplesEncoded(quotedTriplePattern) {
        const [patternIn, requireQuotedTripleFiltering] = (0, OrderUtils_1.quadToPattern)(quotedTriplePattern.subject, quotedTriplePattern.predicate, quotedTriplePattern.object, quotedTriplePattern.graph, true);
        for (const termS of this.patternToIterable(patternIn[0])) {
          for (const termP of this.patternToIterable(patternIn[1])) {
            for (const termO of this.patternToIterable(patternIn[2])) {
              for (const termG of this.patternToIterable(patternIn[3])) {
                if (termS && termP || !termP && !termO) {
                  const pattern = [termS, termP, termO, termG];
                  for (const termEncoded of this.quotedTriplesReverseDictionaries[0].findEncoded(pattern, patternIn)) {
                    yield _TermDictionaryQuotedIndexed.BITMASK | this.quotedTriplesReverseDictionaries[0].getEncoded(termEncoded);
                  }
                } else if (!termS && termP) {
                  const pattern = [termP, termO, termS, termG];
                  for (const termEncoded of this.quotedTriplesReverseDictionaries[1].findEncoded(pattern, patternIn)) {
                    yield _TermDictionaryQuotedIndexed.BITMASK | this.quotedTriplesReverseDictionaries[1].getEncoded(termEncoded);
                  }
                } else {
                  const pattern = [termO, termS, termP, termG];
                  for (const termEncoded of this.quotedTriplesReverseDictionaries[2].findEncoded(pattern, patternIn)) {
                    yield _TermDictionaryQuotedIndexed.BITMASK | this.quotedTriplesReverseDictionaries[2].getEncoded(termEncoded);
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Helper function to convert a term to an iterator over encoded terms.
       * @param patternTerm A term.
       * @protected
       */
      *patternToIterable(patternTerm) {
        if ((patternTerm == null ? void 0 : patternTerm.termType) === "Quad") {
          yield* this.findQuotedTriplesEncoded(patternTerm);
          return;
        }
        if (patternTerm === void 0) {
          yield void 0;
          return;
        }
        const enc = this.encodeOptional(patternTerm);
        if (enc === void 0) {
          return;
        }
        yield enc;
      }
    };
    exports.TermDictionaryQuotedIndexed = TermDictionaryQuotedIndexed;
    TermDictionaryQuotedIndexed.BITMASK = 1 << 31;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapQuoted.js
var require_RdfStoreIndexNestedMapQuoted = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapQuoted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedMapQuoted = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedMap_1 = require_RdfStoreIndexNestedMap();
    var RdfStoreIndexNestedMapQuoted = class extends RdfStoreIndexNestedMap_1.RdfStoreIndexNestedMap {
      constructor(options) {
        super(options);
        this.features = {
          quotedTripleFiltering: true
        };
      }
      *getQuotedPatternKeys(map2, term) {
        for (const quotedTripleEncoded of this.dictionary.findQuotedTriplesEncoded(term)) {
          if (map2.has(quotedTripleEncoded)) {
            yield quotedTripleEncoded;
          }
        }
      }
      *find(terms) {
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let partialQuad0;
        let partialQuad1;
        let partialQuad2;
        let partialQuad3;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          partialQuad0 = !quotedTerm0 && term0 ? term0 : this.dictionary.decode(key1);
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            partialQuad1 = !quotedTerm1 && term1 ? term1 : this.dictionary.decode(key2);
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              partialQuad2 = !quotedTerm2 && term2 ? term2 : this.dictionary.decode(key3);
              const map3Keys = term3 !== void 0 ? quotedTerm3 ? this.getQuotedPatternKeys(map3, term3) : map3.has(id3) ? [id3] : [] : map3.keys();
              for (const key4 of map3Keys) {
                partialQuad3 = !quotedTerm3 && term3 ? term3 : this.dictionary.decode(key4);
                yield [partialQuad0, partialQuad1, partialQuad2, partialQuad3];
              }
            }
          }
        }
      }
      // The code below is nearly identical. We duplicate because abstraction would result in a significant performance hit.
      *findEncoded(ids, terms) {
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              const map3Keys = term3 !== void 0 ? quotedTerm3 ? this.getQuotedPatternKeys(map3, term3) : map3.has(id3) ? [id3] : [] : map3.keys();
              for (const key4 of map3Keys) {
                yield [
                  Number.parseInt(key1, 10),
                  Number.parseInt(key2, 10),
                  Number.parseInt(key3, 10),
                  Number.parseInt(key4, 10)
                ];
              }
            }
          }
        }
      }
      count(terms) {
        let count2 = 0;
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return 0;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedMap;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : map0.has(id0) ? [id0] : [] : map0.keys();
        for (const key1 of map0Keys) {
          map1 = map0.get(key1);
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : map1.has(id1) ? [id1] : [] : map1.keys();
          for (const key2 of map1Keys) {
            map2 = map1.get(key2);
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : map2.has(id2) ? [id2] : [] : map2.keys();
            for (const key3 of map2Keys) {
              map3 = map2.get(key3);
              if (term3 !== void 0) {
                if (quotedTerm3) {
                  count2 += [...this.getQuotedPatternKeys(map3, term3)].length;
                } else if (map3.has(id3)) {
                  count2++;
                }
              } else {
                count2 += map3.size;
              }
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedMapQuoted = RdfStoreIndexNestedMapQuoted;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/RdfStore.js
var require_RdfStore = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/RdfStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStore = void 0;
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_terms_1 = require_rdf_terms2();
    var DatasetCoreWrapper_1 = require_DatasetCoreWrapper();
    var TermDictionaryNumberRecordFullTerms_1 = require_TermDictionaryNumberRecordFullTerms();
    var TermDictionaryQuotedIndexed_1 = require_TermDictionaryQuotedIndexed();
    var RdfStoreIndexNestedMapQuoted_1 = require_RdfStoreIndexNestedMapQuoted();
    var OrderUtils_1 = require_OrderUtils();
    var RdfStore = class _RdfStore {
      constructor(options) {
        this.features = { quotedTripleFiltering: true };
        this._size = 0;
        this.options = options;
        this.dataFactory = options.dataFactory;
        this.dictionary = options.dictionary;
        this.indexesWrapped = _RdfStore.constructIndexesWrapped(options);
        this.indexesWrappedComponentOrders = this.indexesWrapped.map((indexThis) => indexThis.componentOrder);
      }
      /**
       * Create an RDF store with default settings.
       * Concretely, this store stores triples in GSPO, GPOS, and GOSP order,
       * and makes use of in-memory number dictionary encoding.
       */
      static createDefault() {
        return new _RdfStore({
          indexCombinations: _RdfStore.DEFAULT_INDEX_COMBINATIONS,
          indexConstructor: (subOptions) => new RdfStoreIndexNestedMapQuoted_1.RdfStoreIndexNestedMapQuoted(subOptions),
          dictionary: new TermDictionaryQuotedIndexed_1.TermDictionaryQuotedIndexed(new TermDictionaryNumberRecordFullTerms_1.TermDictionaryNumberRecordFullTerms()),
          dataFactory: new rdf_data_factory_1.DataFactory()
        });
      }
      /**
       * Internal helper to create index objects.
       * @param options The RDF store options object.
       */
      static constructIndexesWrapped(options) {
        const indexes = [];
        if (options.indexCombinations.length === 0) {
          throw new Error("At least one index combination is required");
        }
        for (const componentOrder of options.indexCombinations) {
          if (!_RdfStore.isCombinationValid(componentOrder)) {
            throw new Error(`Invalid index combination: ${componentOrder}`);
          }
          indexes.push({
            index: options.indexConstructor(options),
            componentOrder,
            componentOrderInverse: Object.fromEntries(componentOrder.map((value, key) => [value, key]))
          });
        }
        return indexes;
      }
      /**
       * Check if a given quad term order is valid.
       * @param combination A quad term order.
       */
      static isCombinationValid(combination) {
        for (const quadTermName of rdf_terms_1.QUAD_TERM_NAMES) {
          if (!combination.includes(quadTermName)) {
            return false;
          }
        }
        return combination.length === 4;
      }
      /**
       * The number of quads in this store.
       */
      get size() {
        return this._size;
      }
      /**
       * Add a quad to the store.
       * @param quad An RDF quad.
       * @return boolean If the quad was not yet present in the index.
       */
      addQuad(quad) {
        const quadEncoded = [
          this.dictionary.encode(quad.subject),
          this.dictionary.encode(quad.predicate),
          this.dictionary.encode(quad.object),
          this.dictionary.encode(quad.graph)
        ];
        let newQuad = false;
        for (const indexWrapped of this.indexesWrapped) {
          newQuad = indexWrapped.index.set((0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, quadEncoded), true);
        }
        if (newQuad) {
          this._size++;
          return true;
        }
        return false;
      }
      /**
       * Remove a quad from the store.
       * @param quad An RDF quad.
       * @return boolean If the quad was present in the index.
       */
      removeQuad(quad) {
        const quadEncoded = [
          this.dictionary.encodeOptional(quad.subject),
          this.dictionary.encodeOptional(quad.predicate),
          this.dictionary.encodeOptional(quad.object),
          this.dictionary.encodeOptional(quad.graph)
        ];
        if (quadEncoded.includes(void 0)) {
          return false;
        }
        let wasPresent = false;
        for (const indexWrapped of this.indexesWrapped) {
          wasPresent = indexWrapped.index.remove((0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, quadEncoded));
          if (!wasPresent) {
            break;
          }
        }
        if (wasPresent) {
          this._size--;
          return true;
        }
        return false;
      }
      /**
       * Removes all streamed quads.
       * @param stream A stream of quads
       */
      remove(stream) {
        stream.on("data", (quad) => this.removeQuad(quad));
        return stream;
      }
      /**
       * All quads matching the pattern will be removed.
       * @param subject The optional subject.
       * @param predicate The optional predicate.
       * @param object The optional object.
       * @param graph The optional graph.
       */
      removeMatches(subject, predicate, object, graph) {
        return this.remove(this.match(subject, predicate, object, graph));
      }
      /**
       * Deletes the given named graph.
       * @param graph The graph term or string to match.
       */
      deleteGraph(graph) {
        if (typeof graph === "string") {
          graph = this.dataFactory.namedNode(graph);
        }
        return this.removeMatches(void 0, void 0, void 0, graph);
      }
      /**
       * Import the given stream of quads into the store.
       * @param stream A stream of RDF quads.
       */
      import(stream) {
        stream.on("data", (quad) => this.addQuad(quad));
        return stream;
      }
      /**
       * Returns a generator producing all quads matching the pattern.
       * @param subject The optional subject.
       * @param predicate The optional predicate.
       * @param object The optional object.
       * @param graph The optional graph.
       */
      *readQuads(subject, predicate, object, graph) {
        const indexesSupportQuotedPatterns = Boolean(this.dictionary.features.quotedTriples) && Object.values(this.indexesWrapped).every((wrapped) => wrapped.index.features.quotedTripleFiltering);
        const [quadComponents, requireQuotedTripleFiltering] = (0, OrderUtils_1.quadToPattern)(subject, predicate, object, graph, indexesSupportQuotedPatterns);
        const indexWrapped = this.indexesWrapped[(0, OrderUtils_1.getBestIndex)(this.indexesWrappedComponentOrders, quadComponents)];
        const quadComponentsOrdered = (0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, quadComponents);
        for (const decomposedQuad of indexWrapped.index.find(quadComponentsOrdered)) {
          const quad = this.dataFactory.quad(decomposedQuad[indexWrapped.componentOrderInverse.subject], decomposedQuad[indexWrapped.componentOrderInverse.predicate], decomposedQuad[indexWrapped.componentOrderInverse.object], decomposedQuad[indexWrapped.componentOrderInverse.graph]);
          if (requireQuotedTripleFiltering) {
            if ((0, rdf_terms_1.matchPattern)(quad, subject, predicate, object, graph)) {
              yield quad;
            }
          } else {
            yield quad;
          }
        }
      }
      /**
       * Returns an array containing all quads matching the pattern.
       * @param subject The optional subject.
       * @param predicate The optional predicate.
       * @param object The optional object.
       * @param graph The optional graph.
       */
      getQuads(subject, predicate, object, graph) {
        return [...this.readQuads(subject, predicate, object, graph)];
      }
      /**
       * Returns a stream that produces all quads matching the pattern.
       * @param subject The optional subject.
       * @param predicate The optional predicate.
       * @param object The optional object.
       * @param graph The optional graph.
       */
      match(subject, predicate, object, graph) {
        return (0, asynciterator_1.wrap)(this.readQuads(subject, predicate, object, graph));
      }
      /**
       * Returns a generator producing all quads matching the pattern.
       * @param subject The subject, which can be a variable.
       * @param predicate The predicate, which can be a variable.
       * @param object The object, which can be a variable.
       * @param graph The graph, which can be a variable.
       */
      *readBindings(bindingsFactory, subject, predicate, object, graph) {
        const indexesSupportQuotedPatterns = Boolean(this.dictionary.features.quotedTriples) && Object.values(this.indexesWrapped).every((wrapped) => wrapped.index.features.quotedTripleFiltering);
        const [quadComponents, requireQuotedTripleFiltering] = (0, OrderUtils_1.quadToPattern)(subject, predicate, object, graph, indexesSupportQuotedPatterns);
        const indexWrapped = this.indexesWrapped[(0, OrderUtils_1.getBestIndex)(this.indexesWrappedComponentOrders, quadComponents)];
        const quadComponentsOrdered = (0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, quadComponents);
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(quadComponentsOrdered, this.dictionary);
        if (!ids) {
          return;
        }
        const terms = (0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, [subject, predicate, object, graph]);
        const variableIndexes = [];
        for (let i = 0; i < terms.length; i++) {
          if (terms[i].termType === "Variable" || terms[i].termType === "Quad") {
            variableIndexes.push(i);
          }
        }
        let shouldFilterIndexes = false;
        const filterIndexes = terms.map((variable, i) => {
          const equalVariables = [];
          for (let j = i + 1; j < terms.length; j++) {
            if (variable.equals(terms[j])) {
              equalVariables.push(j);
              shouldFilterIndexes = true;
            }
          }
          return equalVariables;
        });
        for (const decomposedQuadEncoded of indexWrapped.index.findEncoded(ids, quadComponentsOrdered)) {
          let skipBinding = false;
          let checkForBindingConflicts = false;
          const bindingsEntries = [];
          for (const i of variableIndexes) {
            if (shouldFilterIndexes) {
              const filterI = filterIndexes[i];
              if (filterI) {
                for (const j of filterI) {
                  if (decomposedQuadEncoded[i] !== decomposedQuadEncoded[j]) {
                    skipBinding = true;
                    break;
                  }
                }
              }
              if (skipBinding) {
                break;
              }
            }
            const decodedTerm = this.dictionary.decode(decomposedQuadEncoded[i]);
            if (terms[i].termType === "Quad") {
              if (decodedTerm.termType === "Quad") {
                const additionalBindings = (0, rdf_terms_1.matchPatternMappings)(decodedTerm, terms[i], { returnMappings: true });
                if (additionalBindings) {
                  checkForBindingConflicts = true;
                  for (const [key, value] of Object.entries(additionalBindings)) {
                    const variable = this.dataFactory.variable(key);
                    if (bindingsEntries.some((entry) => entry[0].equals(variable) && !entry[1].equals(value))) {
                      skipBinding = true;
                      break;
                    }
                    bindingsEntries.push([variable, value]);
                  }
                  continue;
                }
              }
              skipBinding = true;
              break;
            }
            if (checkForBindingConflicts && bindingsEntries.some((entry) => entry[0].equals(terms[i]) && !entry[1].equals(decodedTerm))) {
              skipBinding = true;
              break;
            }
            bindingsEntries.push([terms[i], decodedTerm]);
          }
          if (!skipBinding) {
            yield bindingsFactory.bindings(bindingsEntries);
          }
        }
      }
      /**
       * Returns an array containing all bindings matching the pattern.
       * @param bindingsFactory The factory that will be used to create bindings.
       * @param subject The subject, which can be a variable.
       * @param predicate The predicate, which can be a variable.
       * @param object The object, which can be a variable.
       * @param graph The graph, which can be a variable.
       */
      getBindings(bindingsFactory, subject, predicate, object, graph) {
        return [...this.readBindings(bindingsFactory, subject, predicate, object, graph)];
      }
      /**
       * Returns a stream that produces all quads matching the pattern.
       * @param bindingsFactory The factory that will be used to create bindings.
       * @param subject The subject, which can be a variable.
       * @param predicate The predicate, which can be a variable.
       * @param object The object, which can be a variable.
       * @param graph The graph, which can be a variable.
       */
      matchBindings(bindingsFactory, subject, predicate, object, graph) {
        return (0, asynciterator_1.wrap)(this.readBindings(bindingsFactory, subject, predicate, object, graph));
      }
      /**
       * Returns the exact cardinality of the quads matching the pattern.
       * @param subject The optional subject.
       * @param predicate The optional predicate.
       * @param object The optional object.
       * @param graph The optional graph.
       */
      countQuads(subject, predicate, object, graph) {
        const indexesSupportQuotedPatterns = Boolean(this.dictionary.features.quotedTriples) && Object.values(this.indexesWrapped).every((wrapped) => wrapped.index.features.quotedTripleFiltering);
        const [quadComponents] = (0, OrderUtils_1.quadToPattern)(subject, predicate, object, graph, indexesSupportQuotedPatterns);
        if (quadComponents.every((quadComponent) => quadComponent === void 0)) {
          return this.size;
        }
        const indexWrapped = this.indexesWrapped[(0, OrderUtils_1.getBestIndex)(this.indexesWrappedComponentOrders, quadComponents)];
        const quadComponentsOrdered = (0, OrderUtils_1.orderQuadComponents)(indexWrapped.componentOrder, quadComponents);
        return indexWrapped.index.count(quadComponentsOrdered);
      }
      /**
       * Wrap this store inside a DatasetCore interface.
       * Any mutations in either this store or the wrapper will propagate to each other.
       */
      asDataset() {
        return new DatasetCoreWrapper_1.DatasetCoreWrapper(this);
      }
    };
    exports.RdfStore = RdfStore;
    RdfStore.DEFAULT_INDEX_COMBINATIONS = [
      ["graph", "subject", "predicate", "object"],
      ["graph", "predicate", "object", "subject"],
      ["graph", "object", "subject", "predicate"]
    ];
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dataset/DatasetCoreWrapper.js
var require_DatasetCoreWrapper = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dataset/DatasetCoreWrapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DatasetCoreWrapper = void 0;
    var RdfStore_1 = require_RdfStore();
    var DatasetCoreWrapper = class _DatasetCoreWrapper {
      constructor(store) {
        this.store = store;
      }
      get size() {
        return this.store.size;
      }
      add(quad) {
        this.store.addQuad(quad);
        return this;
      }
      delete(quad) {
        this.store.removeQuad(quad);
        return this;
      }
      has(quad) {
        for (const result of this.store.readQuads(quad.subject, quad.predicate, quad.object, quad.graph)) {
          return true;
        }
        return false;
      }
      match(subject, predicate, object, graph) {
        const newStore = new RdfStore_1.RdfStore(this.store.options);
        for (const quad of this.store.readQuads(subject, predicate, object, graph)) {
          newStore.addQuad(quad);
        }
        return new _DatasetCoreWrapper(newStore);
      }
      [Symbol.iterator]() {
        return this.store.readQuads();
      }
    };
    exports.DatasetCoreWrapper = DatasetCoreWrapper;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/ITermDictionary.js
var require_ITermDictionary = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/ITermDictionary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberMap.js
var require_TermDictionaryNumberMap = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryNumberMap = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_string_1 = require_rdf_string3();
    var TermDictionaryNumberMap = class {
      constructor(dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.lastId = 0;
        this.dictionary = /* @__PURE__ */ new Map();
        this.reverseDictionary = /* @__PURE__ */ new Map();
        this.features = { quotedTriples: false };
        this.dataFactory = dataFactory;
      }
      encode(term) {
        const key = (0, rdf_string_1.termToString)(term);
        let encoded = this.dictionary.get(key);
        if (encoded === void 0) {
          encoded = this.lastId++;
          this.dictionary.set(key, encoded);
          this.reverseDictionary.set(encoded, key);
        }
        return encoded;
      }
      encodeOptional(term) {
        const key = (0, rdf_string_1.termToString)(term);
        return this.dictionary.get(key);
      }
      decode(encoding) {
        const string = this.reverseDictionary.get(encoding);
        if (string === void 0) {
          throw new Error(`The value ${encoding} is not present in this dictionary`);
        }
        return (0, rdf_string_1.stringToTerm)(string, this.dataFactory);
      }
      encodings() {
        return this.reverseDictionary.keys();
      }
      findQuotedTriples(quotedTriplePattern) {
        throw new Error("findQuotedTriples is not supported");
      }
      findQuotedTriplesEncoded(quotedTriplePattern) {
        throw new Error("findQuotedTriplesEncoded is not supported");
      }
    };
    exports.TermDictionaryNumberMap = TermDictionaryNumberMap;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberRecord.js
var require_TermDictionaryNumberRecord = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryNumberRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryNumberRecord = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_string_1 = require_rdf_string3();
    var TermDictionaryNumberRecord = class {
      constructor(dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.lastId = 0;
        this.dictionary = {};
        this.reverseDictionary = {};
        this.features = { quotedTriples: false };
        this.dataFactory = dataFactory;
      }
      encode(term) {
        const key = (0, rdf_string_1.termToString)(term);
        let encoded = this.dictionary[key];
        if (encoded === void 0) {
          encoded = this.lastId++;
          this.dictionary[key] = encoded;
          this.reverseDictionary[encoded] = key;
        }
        return encoded;
      }
      encodeOptional(term) {
        const key = (0, rdf_string_1.termToString)(term);
        return this.dictionary[key];
      }
      decode(encoding) {
        const string = this.reverseDictionary[encoding];
        if (string === void 0) {
          throw new Error(`The value ${encoding} is not present in this dictionary`);
        }
        return (0, rdf_string_1.stringToTerm)(string, this.dataFactory);
      }
      *encodings() {
        for (const key of Object.keys(this.reverseDictionary)) {
          yield Number.parseInt(key, 10);
        }
      }
      findQuotedTriples(quotedTriplePattern) {
        throw new Error("findQuotedTriples is not supported");
      }
      findQuotedTriplesEncoded(quotedTriplePattern) {
        throw new Error("findQuotedTriplesEncoded is not supported");
      }
    };
    exports.TermDictionaryNumberRecord = TermDictionaryNumberRecord;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuoted.js
var require_TermDictionaryQuoted = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuoted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryQuoted = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_terms_1 = require_rdf_terms2();
    var TermDictionaryQuoted = class _TermDictionaryQuoted {
      constructor(plainTermDictionary, quotedTriplesDictionary, dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.features = { quotedTriples: true };
        this.plainTermDictionary = plainTermDictionary;
        this.quotedTriplesDictionary = quotedTriplesDictionary;
        this.dataFactory = dataFactory;
      }
      encode(term) {
        if (term.termType === "Quad") {
          return _TermDictionaryQuoted.BITMASK | 1 + this.quotedTriplesDictionary.encode(term);
        }
        return this.plainTermDictionary.encode(term);
      }
      encodeOptional(term) {
        if (term.termType === "Quad") {
          const encoding = this.quotedTriplesDictionary.encodeOptional(term);
          if (encoding === void 0) {
            return encoding;
          }
          return _TermDictionaryQuoted.BITMASK | 1 + encoding;
        }
        return this.plainTermDictionary.encodeOptional(term);
      }
      decode(encoding) {
        if (_TermDictionaryQuoted.BITMASK & encoding) {
          const encodingBase = (~_TermDictionaryQuoted.BITMASK & encoding) - 1;
          return this.quotedTriplesDictionary.decode(encodingBase);
        }
        return this.plainTermDictionary.decode(encoding);
      }
      *encodings() {
        for (const encoding of this.plainTermDictionary.encodings()) {
          yield encoding;
        }
        for (const encoding of this.quotedTriplesDictionary.encodings()) {
          yield _TermDictionaryQuoted.BITMASK | 1 + encoding;
        }
      }
      *findQuotedTriples(quotedTriplePattern) {
        for (const termEncoded of this.findQuotedTriplesEncoded(quotedTriplePattern)) {
          yield this.decode(termEncoded);
        }
      }
      *findQuotedTriplesEncoded(quotedTriplePattern) {
        for (let encodedQuotedTriple of this.quotedTriplesDictionary.encodings()) {
          encodedQuotedTriple = _TermDictionaryQuoted.BITMASK | 1 + encodedQuotedTriple;
          const quotedTriple = this.decode(encodedQuotedTriple);
          if ((0, rdf_terms_1.matchPattern)(quotedTriple, quotedTriplePattern.subject, quotedTriplePattern.predicate, quotedTriplePattern.object, quotedTriplePattern.graph)) {
            yield encodedQuotedTriple;
          }
        }
      }
    };
    exports.TermDictionaryQuoted = TermDictionaryQuoted;
    TermDictionaryQuoted.BITMASK = 1 << 31;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuotedReferential.js
var require_TermDictionaryQuotedReferential = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionaryQuotedReferential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionaryQuotedReferential = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_terms_1 = require_rdf_terms2();
    var OrderUtils_1 = require_OrderUtils();
    var TermDictionaryQuotedReferential = class _TermDictionaryQuotedReferential {
      constructor(plainTermDictionary, dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.quotedTriplesDictionary = [];
        this.quotedTriplesReverseDictionary = {};
        this.features = { quotedTriples: true };
        this.plainTermDictionary = plainTermDictionary;
        this.dataFactory = dataFactory;
      }
      encode(term) {
        if (term.termType === "Quad") {
          return this.encodeQuotedTriple(term, false);
        }
        return this.plainTermDictionary.encode(term);
      }
      encodeQuotedTriple(quad, optional) {
        var _a;
        if (quad.graph.termType !== "DefaultGraph") {
          throw new Error("Encoding of quoted quads outside of the default graph is not allowed");
        }
        const encodedTripleOptional = (_a = (0, OrderUtils_1.encodeOptionalTerms)([quad.subject, quad.predicate, quad.object, void 0], this)) == null ? void 0 : _a.slice(0, 3);
        const id = encodedTripleOptional && encodedTripleOptional.every((encoded) => encoded !== void 0) ? this.quotedTriplesReverseDictionary[encodedTripleOptional.join(_TermDictionaryQuotedReferential.SEPARATOR)] : void 0;
        if (id !== void 0 || optional) {
          return id === void 0 ? void 0 : _TermDictionaryQuotedReferential.BITMASK | id;
        }
        const encodedTriple = [
          this.encode(quad.subject),
          this.encode(quad.predicate),
          this.encode(quad.object)
        ];
        const encodingBase = this.quotedTriplesDictionary.length + 1;
        this.quotedTriplesDictionary.push(encodedTriple);
        this.quotedTriplesReverseDictionary[encodedTriple.join(_TermDictionaryQuotedReferential.SEPARATOR)] = encodingBase;
        return _TermDictionaryQuotedReferential.BITMASK | encodingBase;
      }
      encodeOptional(term) {
        if (term.termType === "Quad") {
          return this.encodeQuotedTriple(term, true);
        }
        return this.plainTermDictionary.encodeOptional(term);
      }
      decode(encoding) {
        if (_TermDictionaryQuotedReferential.BITMASK & encoding) {
          const encodingBase = (~_TermDictionaryQuotedReferential.BITMASK & encoding) - 1;
          if (encodingBase >= this.quotedTriplesDictionary.length) {
            throw new Error(`The value ${encoding} is not present in the quoted triples range of the dictionary`);
          }
          const encodedTerms = this.quotedTriplesDictionary[encodingBase];
          return this.dataFactory.quad(this.decode(encodedTerms[0]), this.decode(encodedTerms[1]), this.decode(encodedTerms[2]));
        }
        return this.plainTermDictionary.decode(encoding);
      }
      *encodings() {
        for (const encoding of this.plainTermDictionary.encodings()) {
          yield encoding;
        }
        for (const encoding of this.quotedTriplesDictionary.keys()) {
          yield _TermDictionaryQuotedReferential.BITMASK | 1 + encoding;
        }
      }
      *findQuotedTriples(quotedTriplePattern) {
        for (const termEncoded of this.findQuotedTriplesEncoded(quotedTriplePattern)) {
          yield this.decode(termEncoded);
        }
      }
      *findQuotedTriplesEncoded(quotedTriplePattern) {
        for (let encodedQuotedTriple of this.quotedTriplesDictionary.keys()) {
          encodedQuotedTriple = _TermDictionaryQuotedReferential.BITMASK | 1 + encodedQuotedTriple;
          const quotedTriple = this.decode(encodedQuotedTriple);
          if ((0, rdf_terms_1.matchPattern)(quotedTriple, quotedTriplePattern.subject, quotedTriplePattern.predicate, quotedTriplePattern.object, quotedTriplePattern.graph)) {
            yield encodedQuotedTriple;
          }
        }
      }
    };
    exports.TermDictionaryQuotedReferential = TermDictionaryQuotedReferential;
    TermDictionaryQuotedReferential.BITMASK = 1 << 31;
    TermDictionaryQuotedReferential.SEPARATOR = "_";
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionarySymbol.js
var require_TermDictionarySymbol = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/dictionary/TermDictionarySymbol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermDictionarySymbol = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory3();
    var rdf_string_1 = require_rdf_string3();
    var TermDictionarySymbol = class {
      constructor(dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.features = { quotedTriples: false };
        this.dataFactory = dataFactory;
      }
      encode(term) {
        return Symbol.for(`rdf::${(0, rdf_string_1.termToString)(term)}`);
      }
      encodeOptional(term) {
        return this.encode(term);
      }
      decode(encoding) {
        const string = Symbol.keyFor(encoding);
        if (string === void 0) {
          throw new Error(`The value ${String(encoding)} is not present in this dictionary`);
        }
        return (0, rdf_string_1.stringToTerm)(string.slice(5), this.dataFactory);
      }
      encodings() {
        throw new Error("encodings is not supported");
      }
      findQuotedTriples(quotedTriplePattern) {
        throw new Error("findQuotedTriples is not supported");
      }
      findQuotedTriplesEncoded(quotedTriplePattern) {
        throw new Error("findQuotedTriplesEncoded is not supported");
      }
    };
    exports.TermDictionarySymbol = TermDictionarySymbol;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/IRdfStoreIndex.js
var require_IRdfStoreIndex = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/IRdfStoreIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapRecursive.js
var require_RdfStoreIndexNestedMapRecursive = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapRecursive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedMapRecursive = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedMapRecursive = class {
      constructor(options) {
        this.features = {
          quotedTripleFiltering: false
        };
        this.dictionary = options.dictionary;
        this.nestedMap = /* @__PURE__ */ new Map();
      }
      set(terms, value) {
        let map2 = this.nestedMap;
        let contained = false;
        for (const [i, term] of terms.entries()) {
          const mapActual = map2;
          let nextMap = mapActual.get(term);
          if (!nextMap) {
            nextMap = i === terms.length - 1 ? value : /* @__PURE__ */ new Map();
            mapActual.set(term, nextMap);
          } else if (i === terms.length - 1) {
            contained = true;
          }
          map2 = nextMap;
        }
        return !contained;
      }
      remove(terms) {
        const map0 = this.nestedMap;
        const map1 = map0.get(terms[0]);
        if (!map1) {
          return false;
        }
        const map2 = map1.get(terms[1]);
        if (!map2) {
          return false;
        }
        const map3 = map2.get(terms[2]);
        if (!map3) {
          return false;
        }
        const ret = map3.delete(terms[3]);
        if (ret && map3.size === 0) {
          map2.delete(terms[2]);
          if (map2.size === 0) {
            map1.delete(terms[1]);
            if (map1.size === 0) {
              map0.delete(terms[0]);
            }
          }
        }
        return ret;
      }
      get(key) {
        const encoded = (0, OrderUtils_1.encodeOptionalTerms)(key, this.dictionary);
        if (!encoded || encoded.includes(void 0)) {
          return void 0;
        }
        return this.getEncoded(encoded);
      }
      getEncoded(ids) {
        const map1 = this.nestedMap.get(ids[0]);
        if (!map1) {
          return void 0;
        }
        const map2 = map1.get(ids[1]);
        if (!map2) {
          return void 0;
        }
        const map3 = map2.get(ids[2]);
        if (!map3) {
          return void 0;
        }
        return map3.get(ids[3]);
      }
      *find(terms) {
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return;
        }
        for (const termsEncoded of this.findEncoded(ids, terms)) {
          yield [
            ids[0] !== void 0 ? terms[0] : this.dictionary.decode(termsEncoded[0]),
            ids[1] !== void 0 ? terms[1] : this.dictionary.decode(termsEncoded[1]),
            ids[2] !== void 0 ? terms[2] : this.dictionary.decode(termsEncoded[2]),
            ids[3] !== void 0 ? terms[3] : this.dictionary.decode(termsEncoded[3])
          ];
        }
      }
      *findEncoded(ids, terms) {
        return yield* this.findEncodedInner(0, ids, terms, this.nestedMap, []);
      }
      *findEncodedInner(index, ids, terms, map2, partialQuad) {
        if (index === ids.length) {
          yield [...partialQuad];
        } else {
          const id = ids[index];
          const currentTerm = terms[index];
          if (!currentTerm) {
            for (const [key, subMap] of map2.entries()) {
              partialQuad[index] = key;
              yield* this.findEncodedInner(index + 1, ids, terms, subMap, partialQuad);
            }
          } else {
            const encodedTerm = id;
            if (encodedTerm !== void 0) {
              const subMap = map2.get(encodedTerm);
              if (subMap) {
                partialQuad[index] = id;
                yield* this.findEncodedInner(index + 1, ids, terms, subMap, partialQuad);
              }
            }
          }
        }
      }
      count(terms) {
        return this.countInner(0, terms, this.nestedMap);
      }
      countInner(index, terms, map2) {
        const currentTerm = terms[index];
        let count2 = 0;
        if (!currentTerm) {
          if (index === terms.length - 1) {
            return map2.size;
          }
          for (const subMap of map2.values()) {
            count2 += this.countInner(index + 1, terms, subMap);
          }
        } else {
          const encodedTerm = this.dictionary.encodeOptional(currentTerm);
          if (encodedTerm !== void 0) {
            if (index === terms.length - 1) {
              if (map2.has(encodedTerm)) {
                return 1;
              }
              return 0;
            }
            const subMap = map2.get(encodedTerm);
            if (subMap) {
              count2 += this.countInner(index + 1, terms, subMap);
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedMapRecursive = RdfStoreIndexNestedMapRecursive;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapRecursiveQuoted.js
var require_RdfStoreIndexNestedMapRecursiveQuoted = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedMapRecursiveQuoted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedMapRecursiveQuoted = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedMapRecursive_1 = require_RdfStoreIndexNestedMapRecursive();
    var RdfStoreIndexNestedMapRecursiveQuoted = class extends RdfStoreIndexNestedMapRecursive_1.RdfStoreIndexNestedMapRecursive {
      constructor(options) {
        super(options);
        this.features = {
          quotedTripleFiltering: true
        };
      }
      *findEncoded(ids, terms) {
        return yield* this.findEncodedInnerQuoted(0, ids, terms, (0, OrderUtils_1.arePatternsQuoted)(terms), this.nestedMap, []);
      }
      *findEncodedInnerQuoted(index, ids, terms, isQuotedPattern, map2, partialQuad) {
        if (index === ids.length) {
          yield [...partialQuad];
        } else {
          const id = ids[index];
          const currentTerm = terms[index];
          if (!currentTerm) {
            for (const [key, subMap] of map2.entries()) {
              partialQuad[index] = key;
              yield* this.findEncodedInnerQuoted(index + 1, ids, terms, isQuotedPattern, subMap, partialQuad);
            }
          } else if (isQuotedPattern[index]) {
            const quotedTriplesEncoded = this.dictionary.findQuotedTriplesEncoded(currentTerm);
            for (const quotedTripleEncoded of quotedTriplesEncoded) {
              const subMap = map2.get(quotedTripleEncoded);
              if (subMap) {
                partialQuad[index] = quotedTripleEncoded;
                yield* this.findEncodedInnerQuoted(index + 1, ids, terms, isQuotedPattern, subMap, partialQuad);
              }
            }
          } else {
            const encodedTerm = id;
            if (encodedTerm !== void 0) {
              const subMap = map2.get(encodedTerm);
              if (subMap) {
                partialQuad[index] = id;
                yield* this.findEncodedInnerQuoted(index + 1, ids, terms, isQuotedPattern, subMap, partialQuad);
              }
            }
          }
        }
      }
      countInner(index, terms, map2) {
        const currentTerm = terms[index];
        let count2 = 0;
        if (!currentTerm) {
          if (index === terms.length - 1) {
            return map2.size;
          }
          for (const subMap of map2.values()) {
            count2 += this.countInner(index + 1, terms, subMap);
          }
        } else if (currentTerm.termType === "Quad" && (0, OrderUtils_1.quadHasVariables)(currentTerm)) {
          const quotedTriplesEncoded = this.dictionary.findQuotedTriplesEncoded(currentTerm);
          for (const quotedTripleEncoded of quotedTriplesEncoded) {
            if (index === terms.length - 1) {
              if (map2.has(quotedTripleEncoded)) {
                count2++;
              }
            } else {
              const subMap = map2.get(quotedTripleEncoded);
              if (subMap) {
                count2 += this.countInner(index + 1, terms, subMap);
              }
            }
          }
        } else {
          const encodedTerm = this.dictionary.encodeOptional(currentTerm);
          if (encodedTerm !== void 0) {
            if (index === terms.length - 1) {
              if (map2.has(encodedTerm)) {
                return 1;
              }
              return 0;
            }
            const subMap = map2.get(encodedTerm);
            if (subMap) {
              count2 += this.countInner(index + 1, terms, subMap);
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedMapRecursiveQuoted = RdfStoreIndexNestedMapRecursiveQuoted;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedRecord.js
var require_RdfStoreIndexNestedRecord = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedRecord = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedRecord = class {
      constructor(options) {
        this.features = {
          quotedTripleFiltering: false
        };
        this.dictionary = options.dictionary;
        this.nestedRecords = {};
      }
      set(terms, value) {
        const map0 = this.nestedRecords;
        const map1 = map0[terms[0]] || (map0[terms[0]] = {});
        const map2 = map1[terms[1]] || (map1[terms[1]] = {});
        const map3 = map2[terms[2]] || (map2[terms[2]] = {});
        if (map3[terms[3]]) {
          return false;
        }
        map3[terms[3]] = value;
        return true;
      }
      remove(terms) {
        const map0 = this.nestedRecords;
        const map1 = map0[terms[0]];
        if (!map1) {
          return false;
        }
        const map2 = map1[terms[1]];
        if (!map2) {
          return false;
        }
        const map3 = map2[terms[2]];
        if (!map3) {
          return false;
        }
        if (!map3[terms[3]]) {
          return false;
        }
        delete map3[terms[3]];
        if (Object.keys(map3).length === 0) {
          delete map2[terms[2]];
          if (Object.keys(map2).length === 0) {
            delete map1[terms[1]];
            if (Object.keys(map1).length === 0) {
              delete map0[terms[0]];
            }
          }
        }
        return true;
      }
      get(key) {
        const encoded = (0, OrderUtils_1.encodeOptionalTerms)(key, this.dictionary);
        if (!encoded || encoded.includes(void 0)) {
          return void 0;
        }
        return this.getEncoded(encoded);
      }
      getEncoded(ids) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.nestedRecords[ids[0]]) == null ? void 0 : _a[ids[1]]) == null ? void 0 : _b[ids[2]]) == null ? void 0 : _c[ids[3]];
      }
      *find(terms) {
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        let partialQuad0;
        let partialQuad1;
        let partialQuad2;
        let partialQuad3;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = id0 !== void 0 ? id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          partialQuad0 = term0 || this.dictionary.decode(Number.parseInt(key1, 10));
          const map1Keys = id1 !== void 0 ? id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            partialQuad1 = term1 || this.dictionary.decode(Number.parseInt(key2, 10));
            const map2Keys = id2 !== void 0 ? id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              partialQuad2 = term2 || this.dictionary.decode(Number.parseInt(key3, 10));
              const map3Keys = id3 !== void 0 ? id3 in map3 ? [id3] : [] : Object.keys(map3);
              for (const key4 of map3Keys) {
                partialQuad3 = term3 || this.dictionary.decode(Number.parseInt(key4, 10));
                yield [partialQuad0, partialQuad1, partialQuad2, partialQuad3];
              }
            }
          }
        }
      }
      // The code below is nearly identical. We duplicate because abstraction would result in a significant performance hit.
      *findEncoded(ids, terms) {
        const [id0, id1, id2, id3] = ids;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = id0 !== void 0 ? id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          const map1Keys = id1 !== void 0 ? id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            const map2Keys = id2 !== void 0 ? id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              const map3Keys = id3 !== void 0 ? id3 in map3 ? [id3] : [] : Object.keys(map3);
              for (const key4 of map3Keys) {
                yield [
                  Number.parseInt(key1, 10),
                  Number.parseInt(key2, 10),
                  Number.parseInt(key3, 10),
                  Number.parseInt(key4, 10)
                ];
              }
            }
          }
        }
      }
      count(terms) {
        let count2 = 0;
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return 0;
        }
        const id0 = ids[0];
        const id1 = ids[1];
        const id2 = ids[2];
        const id3 = ids[3];
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = id0 !== void 0 ? id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          const map1Keys = id1 !== void 0 ? id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            const map2Keys = id2 !== void 0 ? id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              if (id3 !== void 0) {
                if (id3 in map3) {
                  count2++;
                }
              } else {
                count2 += Object.keys(map3).length;
              }
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedRecord = RdfStoreIndexNestedRecord;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedRecordQuoted.js
var require_RdfStoreIndexNestedRecordQuoted = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/index/RdfStoreIndexNestedRecordQuoted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfStoreIndexNestedRecordQuoted = void 0;
    var OrderUtils_1 = require_OrderUtils();
    var RdfStoreIndexNestedRecord_1 = require_RdfStoreIndexNestedRecord();
    var RdfStoreIndexNestedRecordQuoted = class extends RdfStoreIndexNestedRecord_1.RdfStoreIndexNestedRecord {
      constructor(options) {
        super(options);
        this.features = {
          quotedTripleFiltering: true
        };
      }
      *getQuotedPatternKeys(map2, term) {
        for (const quotedTripleEncoded of this.dictionary.findQuotedTriplesEncoded(term)) {
          if (quotedTripleEncoded in map2) {
            yield quotedTripleEncoded;
          }
        }
      }
      *find(terms) {
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let partialQuad0;
        let partialQuad1;
        let partialQuad2;
        let partialQuad3;
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          partialQuad0 = !quotedTerm0 && term0 ? term0 : this.dictionary.decode(Number.parseInt(key1, 10));
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            partialQuad1 = !quotedTerm1 && term1 ? term1 : this.dictionary.decode(Number.parseInt(key2, 10));
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              partialQuad2 = !quotedTerm2 && term2 ? term2 : this.dictionary.decode(Number.parseInt(key3, 10));
              const map3Keys = term3 !== void 0 ? quotedTerm3 ? this.getQuotedPatternKeys(map3, term3) : id3 in map3 ? [id3] : [] : Object.keys(map3);
              for (const key4 of map3Keys) {
                partialQuad3 = !quotedTerm3 && term3 ? term3 : this.dictionary.decode(Number.parseInt(key4, 10));
                yield [partialQuad0, partialQuad1, partialQuad2, partialQuad3];
              }
            }
          }
        }
      }
      // The code below is nearly identical. We duplicate because abstraction would result in a significant performance hit.
      *findEncoded(ids, terms) {
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              const map3Keys = term3 !== void 0 ? quotedTerm3 ? this.getQuotedPatternKeys(map3, term3) : id3 in map3 ? [id3] : [] : Object.keys(map3);
              for (const key4 of map3Keys) {
                yield [
                  Number.parseInt(key1, 10),
                  Number.parseInt(key2, 10),
                  Number.parseInt(key3, 10),
                  Number.parseInt(key4, 10)
                ];
              }
            }
          }
        }
      }
      count(terms) {
        let count2 = 0;
        const ids = (0, OrderUtils_1.encodeOptionalTerms)(terms, this.dictionary);
        if (!ids) {
          return 0;
        }
        const [id0, id1, id2, id3] = ids;
        const [term0, term1, term2, term3] = terms;
        const [quotedTerm0, quotedTerm1, quotedTerm2, quotedTerm3] = (0, OrderUtils_1.arePatternsQuoted)(terms);
        let map1;
        let map2;
        let map3;
        const map0 = this.nestedRecords;
        const map0Keys = term0 !== void 0 ? quotedTerm0 ? this.getQuotedPatternKeys(map0, term0) : id0 in map0 ? [id0] : [] : Object.keys(map0);
        for (const key1 of map0Keys) {
          map1 = map0[key1];
          const map1Keys = term1 !== void 0 ? quotedTerm1 ? this.getQuotedPatternKeys(map1, term1) : id1 in map1 ? [id1] : [] : Object.keys(map1);
          for (const key2 of map1Keys) {
            map2 = map1[key2];
            const map2Keys = term2 !== void 0 ? quotedTerm2 ? this.getQuotedPatternKeys(map2, term2) : id2 in map2 ? [id2] : [] : Object.keys(map2);
            for (const key3 of map2Keys) {
              map3 = map2[key3];
              if (term3 !== void 0) {
                if (quotedTerm3) {
                  count2 += [...this.getQuotedPatternKeys(map3, term3)].length;
                } else if (id3 in map3) {
                  count2++;
                }
              } else {
                count2 += Object.keys(map3).length;
              }
            }
          }
        }
        return count2;
      }
    };
    exports.RdfStoreIndexNestedRecordQuoted = RdfStoreIndexNestedRecordQuoted;
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/IRdfStoreOptions.js
var require_IRdfStoreOptions = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/IRdfStoreOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdf-stores/lib/PatternTerm.js
var require_PatternTerm = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/lib/PatternTerm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../lipdjs/node_modules/rdf-stores/index.js
var require_rdf_stores = __commonJS({
  "../../lipdjs/node_modules/rdf-stores/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_DatasetCoreWrapper(), exports);
    __exportStar(require_ITermDictionary(), exports);
    __exportStar(require_TermDictionaryNumberMap(), exports);
    __exportStar(require_TermDictionaryNumberRecord(), exports);
    __exportStar(require_TermDictionaryNumberRecordFullTerms(), exports);
    __exportStar(require_TermDictionaryQuoted(), exports);
    __exportStar(require_TermDictionaryQuotedIndexed(), exports);
    __exportStar(require_TermDictionaryQuotedReferential(), exports);
    __exportStar(require_TermDictionarySymbol(), exports);
    __exportStar(require_IRdfStoreIndex(), exports);
    __exportStar(require_RdfStoreIndexNestedMap(), exports);
    __exportStar(require_RdfStoreIndexNestedMapQuoted(), exports);
    __exportStar(require_RdfStoreIndexNestedMapRecursive(), exports);
    __exportStar(require_RdfStoreIndexNestedMapRecursiveQuoted(), exports);
    __exportStar(require_RdfStoreIndexNestedRecord(), exports);
    __exportStar(require_RdfStoreIndexNestedRecordQuoted(), exports);
    __exportStar(require_IRdfStoreOptions(), exports);
    __exportStar(require_OrderUtils(), exports);
    __exportStar(require_PatternTerm(), exports);
    __exportStar(require_RdfStore(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-store-stream/index.js
var require_rdf_store_stream = __commonJS({
  "../../lipdjs/node_modules/rdf-store-stream/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.storeStream = storeStream;
    var rdf_stores_1 = require_rdf_stores();
    function storeStream(stream) {
      const store = rdf_stores_1.RdfStore.createDefault();
      return new Promise((resolve, reject) => store.import(stream).on("error", reject).once("end", () => resolve(store)));
    }
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-none/lib/ActorQuerySourceIdentifyHypermediaNone.js
var require_ActorQuerySourceIdentifyHypermediaNone = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-none/lib/ActorQuerySourceIdentifyHypermediaNone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyHypermediaNone = void 0;
    var actor_query_source_identify_rdfjs_1 = require_lib255();
    var bus_query_source_identify_hypermedia_1 = require_lib251();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var rdf_store_stream_1 = require_rdf_store_stream();
    var ActorQuerySourceIdentifyHypermediaNone = class extends bus_query_source_identify_hypermedia_1.ActorQuerySourceIdentifyHypermedia {
      constructor(args) {
        super(args, "file");
      }
      async testMetadata(_action) {
        return (0, core_1.passTest)({ filterFactor: 0 });
      }
      async run(action) {
        this.logInfo(action.context, `Identified as file source: ${action.url}`);
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const source = new actor_query_source_identify_rdfjs_1.QuerySourceRdfJs(await (0, rdf_store_stream_1.storeStream)(action.quads), dataFactory, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory));
        source.toString = () => `QuerySourceRdfJs(${action.url})`;
        source.referenceValue = action.url;
        return { source };
      }
    };
    exports.ActorQuerySourceIdentifyHypermediaNone = ActorQuerySourceIdentifyHypermediaNone;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-none/lib/index.js
var require_lib256 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia-none/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyHypermediaNone(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-expression-evaluator-factory/lib/ActorExpressionEvaluatorFactory.js
var require_ActorExpressionEvaluatorFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-expression-evaluator-factory/lib/ActorExpressionEvaluatorFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorExpressionEvaluatorFactory = void 0;
    var core_1 = require_lib();
    var ActorExpressionEvaluatorFactory = class extends core_1.Actor {
      /**
       * @param args -
       * \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       * \ @defaultNested {Creation of Expression Evaluator failed} busFailMessage
       */
      constructor(args) {
        super(args);
        this.mediatorQueryOperation = args.mediatorQueryOperation;
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
        this.mediatorMergeBindingsContext = args.mediatorMergeBindingsContext;
      }
    };
    exports.ActorExpressionEvaluatorFactory = ActorExpressionEvaluatorFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-expression-evaluator-factory/lib/index.js
var require_lib257 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-expression-evaluator-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorExpressionEvaluatorFactory(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/AlgebraTransformer.js
var require_AlgebraTransformer = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/AlgebraTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlgebraTransformer = void 0;
    var context_entries_1 = require_lib3();
    var ExprEval = require_lib6();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var AlgebraTransformer = class _AlgebraTransformer extends ExprEval.TermTransformer {
      constructor(context, mediatorFunctionFactory) {
        super(context.getSafe(context_entries_1.KeysExpressionEvaluator.superTypeProvider));
        this.context = context;
        this.mediatorFunctionFactory = mediatorFunctionFactory;
      }
      async transformAlgebra(expr) {
        const types = sparqlalgebrajs_1.Algebra.expressionTypes;
        switch (expr.expressionType) {
          case types.TERM:
            return this.transformTerm(expr);
          case types.OPERATOR:
            return await this.transformOperator(expr);
          case types.NAMED:
            return await this.transformNamed(expr);
          case types.EXISTENCE:
            return _AlgebraTransformer.transformExistence(expr);
          case types.AGGREGATE:
            return _AlgebraTransformer.transformAggregate(expr);
          case types.WILDCARD:
            return _AlgebraTransformer.transformWildcard(expr);
        }
      }
      static transformWildcard(term) {
        return new ExprEval.NamedNode(term.wildcard.value);
      }
      async getOperator(operator, expr) {
        const operatorFunc = await this.mediatorFunctionFactory.mediate({
          functionName: operator,
          arguments: expr.args,
          context: this.context
        });
        const operatorArgs = await Promise.all(expr.args.map((arg) => this.transformAlgebra(arg)));
        if (!operatorFunc.checkArity(operatorArgs)) {
          throw new ExprEval.InvalidArity(operatorArgs, operator);
        }
        return new ExprEval.Operator(operator, operatorArgs, operatorFunc.apply);
      }
      async transformOperator(expr) {
        return this.getOperator(expr.operator.toLowerCase(), expr);
      }
      async transformNamed(expr) {
        return this.getOperator(expr.name.value, expr);
      }
      static transformAggregate(expr) {
        const name = expr.aggregator;
        return new ExprEval.Aggregate(name, expr);
      }
      static transformExistence(expr) {
        return new ExprEval.Existence(expr);
      }
    };
    exports.AlgebraTransformer = AlgebraTransformer;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/InternalEvaluator.js
var require_InternalEvaluator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/InternalEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InternalEvaluator = void 0;
    var context_entries_1 = require_lib3();
    var types_1 = require_lib4();
    var Eval = require_lib6();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var AlgebraTransformer_1 = require_AlgebraTransformer();
    var InternalEvaluator = class {
      constructor(context, mediatorFunctionFactory, mediatorQueryOperation, bindingsFactory) {
        this.context = context;
        this.mediatorQueryOperation = mediatorQueryOperation;
        this.bindingsFactory = bindingsFactory;
        this.subEvaluators = {
          [types_1.ExpressionType.Term]: (expr, _mapping) => this.term(expr),
          [types_1.ExpressionType.Variable]: (expr, mapping) => this.variable(expr, mapping),
          [types_1.ExpressionType.Operator]: (expr, mapping) => this.evalFunction(expr, mapping),
          [types_1.ExpressionType.Existence]: (expr, mapping) => this.evalExistence(expr, mapping),
          [types_1.ExpressionType.Aggregate]: (_expr, _mapping) => this.evalAggregate()
        };
        this.transformer = new AlgebraTransformer_1.AlgebraTransformer(context, mediatorFunctionFactory);
      }
      async evaluatorExpressionEvaluation(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        return evaluator.bind(this)(expr, mapping);
      }
      term(expr) {
        return expr;
      }
      variable(expr, mapping) {
        const term = mapping.get(Eval.expressionToVar(this.context.getSafe(context_entries_1.KeysInitQuery.dataFactory), expr));
        if (!term) {
          throw new Eval.UnboundVariableError(expr.name, mapping);
        }
        return this.transformer.transformRDFTermUnsafe(term);
      }
      async evalFunction(expr, mapping) {
        return expr.apply({
          args: expr.args,
          mapping,
          exprEval: this
        });
      }
      async evalExistence(expr, mapping) {
        const dataFactory = this.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = (0, utils_query_operation_1.materializeOperation)(expr.expression.input, mapping, algebraFactory, this.bindingsFactory);
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation, context: this.context });
        const output = (0, utils_query_operation_1.getSafeBindings)(outputRaw);
        return await new Promise((resolve, reject) => {
          output.bindingsStream.on("end", () => {
            resolve(false);
          });
          output.bindingsStream.on("error", reject);
          output.bindingsStream.on("data", () => {
            output.bindingsStream.close();
            resolve(true);
          });
        }).then((exists) => expr.expression.not ? !exists : exists).then((exists) => new Eval.BooleanLiteral(exists));
      }
      evalAggregate() {
        throw new Eval.NoAggregator();
      }
    };
    exports.InternalEvaluator = InternalEvaluator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/ExpressionEvaluator.js
var require_ExpressionEvaluator2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/ExpressionEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpressionEvaluator = void 0;
    var context_entries_1 = require_lib3();
    var InternalEvaluator_1 = require_InternalEvaluator();
    var ExpressionEvaluator = class {
      constructor(context, expr, mediatorFunctionFactory, mediatorQueryOperation, bindingsFactory) {
        this.context = context;
        this.expr = expr;
        this.mediatorFunctionFactory = mediatorFunctionFactory;
        this.mediatorQueryOperation = mediatorQueryOperation;
        this.bindingsFactory = bindingsFactory;
        this.internalEvaluator = new InternalEvaluator_1.InternalEvaluator(context, mediatorFunctionFactory, mediatorQueryOperation, bindingsFactory);
      }
      async evaluate(mapping) {
        const result = await this.internalEvaluator.evaluatorExpressionEvaluation(this.expr, mapping);
        return result.toRDF(this.context.getSafe(context_entries_1.KeysInitQuery.dataFactory));
      }
      async evaluateAsEBV(mapping) {
        const result = await this.internalEvaluator.evaluatorExpressionEvaluation(this.expr, mapping);
        return result.coerceEBV();
      }
      evaluateAsEvaluatorExpression(mapping) {
        return this.evaluatorExpressionEvaluation(this.expr, mapping);
      }
      evaluatorExpressionEvaluation(expr, mapping) {
        return this.internalEvaluator.evaluatorExpressionEvaluation(expr, mapping);
      }
    };
    exports.ExpressionEvaluator = ExpressionEvaluator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/ActorExpressionEvaluatorFactoryDefault.js
var require_ActorExpressionEvaluatorFactoryDefault = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/ActorExpressionEvaluatorFactoryDefault.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorExpressionEvaluatorFactoryDefault = void 0;
    var bus_expression_evaluator_factory_1 = require_lib257();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_expression_evaluator_1 = require_lib6();
    var AlgebraTransformer_1 = require_AlgebraTransformer();
    var ExpressionEvaluator_1 = require_ExpressionEvaluator2();
    var ActorExpressionEvaluatorFactoryDefault = class extends bus_expression_evaluator_factory_1.ActorExpressionEvaluatorFactory {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const fullContext = (0, utils_expression_evaluator_1.prepareEvaluatorActionContext)(action.context);
        return new ExpressionEvaluator_1.ExpressionEvaluator(fullContext, await new AlgebraTransformer_1.AlgebraTransformer(fullContext, this.mediatorFunctionFactory).transformAlgebra(action.algExpr), this.mediatorFunctionFactory, this.mediatorQueryOperation, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory)));
      }
    };
    exports.ActorExpressionEvaluatorFactoryDefault = ActorExpressionEvaluatorFactoryDefault;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/index.js
var require_lib258 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-expression-evaluator-factory-default/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorExpressionEvaluatorFactoryDefault(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/GroupsState.js
var require_GroupsState = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/GroupsState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GroupsState = void 0;
    var context_entries_1 = require_lib3();
    var utils_bindings_factory_1 = require_lib187();
    var GroupsState = class {
      constructor(pattern, mediatorBindingsAggregatorFactory, context, bindingsFactory, variables) {
        this.pattern = pattern;
        this.mediatorBindingsAggregatorFactory = mediatorBindingsAggregatorFactory;
        this.context = context;
        this.bindingsFactory = bindingsFactory;
        this.variables = variables;
        this.groups = /* @__PURE__ */ new Map();
        this.groupsInitializer = /* @__PURE__ */ new Map();
        this.groupVariables = new Set(this.pattern.variables.map((x) => x.value));
        this.waitCounter = 1;
        this.resultHasBeenCalled = false;
      }
      /**
       * - Consumes a stream binding
       * - Find the corresponding group and create one if need be
       * - Feeds the binding to the group's aggregators
       *
       * @param {Bindings} bindings - The Bindings to consume
       */
      consumeBindings(bindings) {
        const check = this.resultCheck();
        if (check) {
          return check;
        }
        this.waitCounter++;
        const grouper = bindings.filter((_, variable) => this.groupVariables.has(variable.value));
        const groupHash = this.hashBindings(grouper);
        let groupInitializer = this.groupsInitializer.get(groupHash);
        let res;
        if (groupInitializer) {
          const groupInitializerDefined = groupInitializer;
          res = (async () => {
            const group = await groupInitializerDefined;
            await Promise.all(this.pattern.aggregates.map(async (aggregate) => {
              const variable = aggregate.variable.value;
              await group.aggregators[variable].putBindings(bindings);
            }));
          })().then(async () => {
            await this.subtractWaitCounterAndCollect();
          });
        } else {
          groupInitializer = (async () => {
            const aggregators = {};
            await Promise.all(this.pattern.aggregates.map(async (aggregate) => {
              const key = aggregate.variable.value;
              aggregators[key] = await this.mediatorBindingsAggregatorFactory.mediate({ expr: aggregate, context: this.context });
              await aggregators[key].putBindings(bindings);
            }));
            const group = { aggregators, bindings: grouper };
            this.groups.set(groupHash, group);
            await this.subtractWaitCounterAndCollect();
            return group;
          })();
          this.groupsInitializer.set(groupHash, groupInitializer);
          res = groupInitializer;
        }
        return res;
      }
      async subtractWaitCounterAndCollect() {
        if (--this.waitCounter === 0) {
          await this.handleResultCollection();
        }
      }
      async handleResultCollection() {
        const dataFactory = this.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        let rows = await Promise.all([...this.groups].map(async ([_, group]) => {
          const { bindings: groupBindings, aggregators } = group;
          let returnBindings = groupBindings;
          for (const variable in aggregators) {
            const value = await aggregators[variable].result();
            if (value) {
              returnBindings = returnBindings.set(dataFactory.variable(variable), value);
            }
          }
          return returnBindings;
        }));
        if (rows.length === 0 && this.groupVariables.size === 0) {
          const single = [];
          await Promise.all(this.pattern.aggregates.map(async (aggregate) => {
            const key = aggregate.variable;
            const aggregator = await this.mediatorBindingsAggregatorFactory.mediate({ expr: aggregate, context: this.context });
            const value = await aggregator.result();
            if (value !== void 0) {
              single.push([key, value]);
            }
          }));
          rows = [this.bindingsFactory.bindings(single)];
        }
        this.waitResolver(rows);
      }
      resultCheck() {
        if (this.resultHasBeenCalled) {
          return Promise.reject(new Error("Calling any function after calling collectResult is invalid."));
        }
      }
      /**
       * Collect the result of the final state. This returns a Bindings per group,
       * and a (possibly empty) Bindings in case no Bindings have been consumed yet.
       * You can only call this method once, after calling this method,
       * calling any function on this will result in an error being thrown.
       */
      async collectResults() {
        const check = this.resultCheck();
        if (check) {
          return check;
        }
        this.resultHasBeenCalled = true;
        const res = new Promise((resolve) => {
          this.waitResolver = resolve;
        });
        await this.subtractWaitCounterAndCollect();
        return res;
      }
      /**
       * @param {Bindings} bindings - Bindings to hash
       */
      hashBindings(bindings) {
        return (0, utils_bindings_factory_1.bindingsToCompactString)(bindings, this.variables);
      }
    };
    exports.GroupsState = GroupsState;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/ActorQueryOperationGroup.js
var require_ActorQueryOperationGroup = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/ActorQueryOperationGroup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationGroup = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var GroupsState_1 = require_GroupsState();
    var ActorQueryOperationGroup = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "group");
        this.mediatorBindingsAggregatorFactory = args.mediatorBindingsAggregatorFactory;
      }
      async testOperation() {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const { input, aggregates } = operation;
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: input, context });
        const output = (0, utils_query_operation_1.getSafeBindings)(outputRaw);
        const variables = [
          ...operation.variables,
          ...aggregates.map((agg) => agg.variable)
        ].map((variable) => ({ variable, canBeUndef: false }));
        const variablesInner = (await output.metadata()).variables.map((v) => v.variable);
        const bindingsStream = new asynciterator_1.TransformIterator(() => new Promise((resolve, reject) => {
          const groups = new GroupsState_1.GroupsState(operation, this.mediatorBindingsAggregatorFactory, context, bindingsFactory, variablesInner);
          output.bindingsStream.on("end", async () => {
            try {
              const bindingsStreamInner = new asynciterator_1.ArrayIterator(await groups.collectResults(), { autoStart: false });
              resolve(bindingsStreamInner);
            } catch (error) {
              reject(error);
            }
          });
          output.bindingsStream.on("error", reject);
          output.bindingsStream.on("data", (bindings) => {
            groups.consumeBindings(bindings).catch(reject);
          });
        }), { autoStart: false });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({ ...await output.metadata(), variables })
        };
      }
    };
    exports.ActorQueryOperationGroup = ActorQueryOperationGroup;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/index.js
var require_lib259 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-group/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationGroup(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-nop/lib/ActorQueryOperationNop.js
var require_ActorQueryOperationNop = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-nop/lib/ActorQueryOperationNop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationNop = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var ActorQueryOperationNop = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "nop");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        return {
          bindingsStream: new asynciterator_1.SingletonIterator(bindingsFactory.bindings()),
          metadata: () => Promise.resolve({
            state: new utils_metadata_1.MetadataValidationState(),
            cardinality: { type: "exact", value: 1 },
            variables: []
          }),
          type: "bindings"
        };
      }
    };
    exports.ActorQueryOperationNop = ActorQueryOperationNop;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-nop/lib/index.js
var require_lib260 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-nop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationNop(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-service/lib/ActorQueryOperationService.js
var require_ActorQueryOperationService = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-service/lib/ActorQueryOperationService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationService = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var ActorQueryOperationService = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "service");
      }
      async testOperation(operation, _context) {
        if (operation.name.termType !== "NamedNode") {
          return (0, core_1.failTest)(`${this.name} can only query services by IRI, while a ${operation.name.termType} was given.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const { querySource } = await this.mediatorQuerySourceIdentify.mediate({
          querySourceUnidentified: {
            value: operation.name.value,
            type: this.forceSparqlEndpoint ? "sparql" : void 0
          },
          context
        });
        let output;
        try {
          output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({
            operation: (0, utils_query_operation_1.assignOperationSource)(operation.input, querySource),
            context
          }));
        } catch (error) {
          if (operation.silent) {
            const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
            const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
            output = {
              bindingsStream: new asynciterator_1.SingletonIterator(bindingsFactory.bindings()),
              type: "bindings",
              metadata: async () => ({
                state: new utils_metadata_1.MetadataValidationState(),
                cardinality: { type: "exact", value: 1 },
                variables: []
              })
            };
            this.logWarn(context, `An error occurred when executing a SERVICE clause: ${error.message}`);
          } else {
            throw error;
          }
        }
        return output;
      }
    };
    exports.ActorQueryOperationService = ActorQueryOperationService;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-service/lib/index.js
var require_lib261 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-service/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationService(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-values/lib/ActorQueryOperationValues.js
var require_ActorQueryOperationValues = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-values/lib/ActorQueryOperationValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationValues = void 0;
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var ActorQueryOperationValues = class extends bus_query_operation_1.ActorQueryOperationTyped {
      constructor(args) {
        super(args, "values");
      }
      async testOperation(_operation, _context) {
        return (0, core_1.passTestVoid)();
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const bindingsStream = new asynciterator_1.ArrayIterator(operation.bindings.map((x) => bindingsFactory.bindings(Object.entries(x).map(([key, value]) => [dataFactory.variable(key.slice(1)), value]))));
        const metadata = () => Promise.resolve({
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: { type: "exact", value: operation.bindings.length },
          variables: operation.variables.map((variable) => ({
            variable,
            canBeUndef: operation.bindings.some((bindings) => !(`?${variable.value}` in bindings))
          }))
        });
        return { type: "bindings", bindingsStream, metadata };
      }
    };
    exports.ActorQueryOperationValues = ActorQueryOperationValues;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-values/lib/index.js
var require_lib262 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-values/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationValues(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-one-or-more/lib/ActorQueryOperationPathOneOrMore.js
var require_ActorQueryOperationPathOneOrMore = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-one-or-more/lib/ActorQueryOperationPathOneOrMore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathOneOrMore = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathOneOrMore = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const distinct = await this.isPathArbitraryLengthDistinct(algebraFactory, context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const predicate = operation.predicate;
        if (operation.subject.termType !== "Variable" && operation.object.termType === "Variable") {
          const objectVar = operation.object;
          const starEval = await this.getObjectsPredicateStarEval(operation.subject, predicate.path, objectVar, operation.graph, context, false, algebraFactory, bindingsFactory);
          const variables = (operation.graph.termType === "Variable" ? [objectVar, operation.graph] : [objectVar]).map((variable2) => ({ variable: variable2, canBeUndef: false }));
          return {
            type: "bindings",
            bindingsStream: starEval.bindingsStream,
            metadata: async () => ({ ...await starEval.metadata(), variables })
          };
        }
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const single = algebraFactory.createDistinct(algebraFactory.createPath(operation.subject, operation.predicate.path, operation.object, operation.graph));
          const results2 = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ context, operation: single }));
          const subjectVar = operation.subject;
          const objectVar = operation.object;
          const termHashes = {};
          const bindingsStream2 = new asynciterator_1.MultiTransformIterator(results2.bindingsStream, {
            multiTransform: (bindings) => {
              const subject = bindings.get(subjectVar);
              const object = bindings.get(objectVar);
              const graph = operation.graph.termType === "Variable" ? bindings.get(operation.graph) : operation.graph;
              return new asynciterator_1.TransformIterator(async () => {
                const it = new asynciterator_1.BufferedIterator();
                await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subject, object, predicate.path, graph, context, termHashes, {}, it, { count: 0 }, algebraFactory, bindingsFactory);
                return it.map((item) => {
                  if (operation.graph.termType === "Variable") {
                    item = item.set(operation.graph, graph);
                  }
                  return item;
                });
              }, { autoStart: false, maxBufferSize: 128 });
            },
            autoStart: false
          });
          const variables = (operation.graph.termType === "Variable" ? [subjectVar, objectVar, operation.graph] : [subjectVar, objectVar]).map((variable2) => ({ variable: variable2, canBeUndef: false }));
          return {
            type: "bindings",
            bindingsStream: bindingsStream2,
            metadata: async () => ({ ...await results2.metadata(), variables })
          };
        }
        if (operation.subject.termType === "Variable" && operation.object.termType !== "Variable") {
          return this.mediatorQueryOperation.mediate({
            context,
            operation: algebraFactory.createPath(operation.object, algebraFactory.createOneOrMorePath(algebraFactory.createInv(predicate.path)), operation.subject, operation.graph)
          });
        }
        const variable = this.generateVariable(dataFactory);
        const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({
          context,
          operation: algebraFactory.createPath(operation.subject, predicate, variable, operation.graph)
        }));
        const bindingsStream = results.bindingsStream.map((item) => {
          if (operation.object.equals(item.get(variable))) {
            return operation.graph.termType === "Variable" ? bindingsFactory.bindings([[operation.graph, item.get(operation.graph)]]) : bindingsFactory.bindings();
          }
          return null;
        });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({
            ...await results.metadata(),
            variables: (operation.graph.termType === "Variable" ? [operation.graph] : []).map((variable2) => ({ variable: variable2, canBeUndef: false }))
          })
        };
      }
    };
    exports.ActorQueryOperationPathOneOrMore = ActorQueryOperationPathOneOrMore;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-one-or-more/lib/index.js
var require_lib263 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-one-or-more/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathOneOrMore(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/ActorQueryOperationPathZeroOrMore.js
var require_ActorQueryOperationPathZeroOrMore = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/ActorQueryOperationPathZeroOrMore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathZeroOrMore = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathZeroOrMore = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const distinct = await this.isPathArbitraryLengthDistinct(algebraFactory, context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const predicate = operation.predicate;
        const sources = this.getPathSources(predicate);
        const sVar = operation.subject.termType === "Variable";
        const oVar = operation.object.termType === "Variable";
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const predVar = this.generateVariable(dataFactory, operation);
          const single = this.assignPatternSources(algebraFactory, algebraFactory.createPattern(operation.subject, predVar, operation.object, operation.graph), sources);
          const results = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ context, operation: single }));
          const subjectVar = operation.subject;
          const objectVar = operation.object;
          const entities = /* @__PURE__ */ new Set();
          const termHashes = {};
          const bindingsStream = new asynciterator_1.MultiTransformIterator(results.bindingsStream, {
            multiTransform: (bindings) => {
              const subject2 = bindings.get(subjectVar);
              const object = bindings.get(objectVar);
              const graph = operation.graph.termType === "Variable" ? bindings.get(operation.graph) : operation.graph;
              const subjectGraphHash = (0, rdf_string_1.termToString)(subject2) + (0, rdf_string_1.termToString)(graph);
              const objectGraphHash = (0, rdf_string_1.termToString)(object) + (0, rdf_string_1.termToString)(graph);
              return new asynciterator_1.TransformIterator(async () => {
                if (entities.has(subjectGraphHash) && entities.has(objectGraphHash)) {
                  return new asynciterator_1.EmptyIterator();
                }
                const it = new asynciterator_1.BufferedIterator();
                const counter = { count: 0 };
                if (!entities.has(subjectGraphHash)) {
                  entities.add(subjectGraphHash);
                  await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subject2, subject2, predicate.path, graph, context, termHashes, {}, it, counter, algebraFactory, bindingsFactory);
                }
                if (!entities.has(objectGraphHash)) {
                  entities.add(objectGraphHash);
                  await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, object, object, predicate.path, graph, context, termHashes, {}, it, counter, algebraFactory, bindingsFactory);
                }
                return it.map((item) => {
                  if (operation.graph.termType === "Variable") {
                    item = item.set(operation.graph, graph);
                  }
                  return item;
                });
              }, { autoStart: false, maxBufferSize: 128 });
            },
            autoStart: false
          });
          const variables2 = (operation.graph.termType === "Variable" ? [subjectVar, operation.object, operation.graph] : [subjectVar, operation.object]).map((variable) => ({ variable, canBeUndef: false }));
          return {
            type: "bindings",
            bindingsStream,
            metadata: async () => ({ ...await results.metadata(), variables: variables2 })
          };
        }
        if (!sVar && !oVar) {
          const variable = this.generateVariable(dataFactory);
          const starEval2 = await this.getObjectsPredicateStarEval(operation.subject, predicate.path, variable, operation.graph, context, true, algebraFactory, bindingsFactory);
          const bindingsStream = starEval2.bindingsStream.map((item) => {
            if (operation.object.equals(item.get(variable))) {
              return operation.graph.termType === "Variable" ? bindingsFactory.bindings([[operation.graph, item.get(operation.graph)]]) : bindingsFactory.bindings();
            }
            return null;
          });
          return {
            type: "bindings",
            bindingsStream,
            metadata: async () => ({
              ...await starEval2.metadata(),
              variables: (operation.graph.termType === "Variable" ? [operation.graph] : []).map((variable2) => ({ variable: variable2, canBeUndef: false }))
            })
          };
        }
        const subject = sVar ? operation.object : operation.subject;
        const value = sVar ? operation.subject : operation.object;
        const pred = sVar ? algebraFactory.createInv(predicate.path) : predicate.path;
        const starEval = await this.getObjectsPredicateStarEval(subject, pred, value, operation.graph, context, true, algebraFactory, bindingsFactory);
        const variables = (operation.graph.termType === "Variable" ? [value, operation.graph] : [value]).map((variable) => ({ variable, canBeUndef: false }));
        return {
          type: "bindings",
          bindingsStream: starEval.bindingsStream,
          metadata: async () => ({ ...await starEval.metadata(), variables })
        };
      }
    };
    exports.ActorQueryOperationPathZeroOrMore = ActorQueryOperationPathZeroOrMore;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/index.js
var require_lib264 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathZeroOrMore(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/ActorQueryOperationPathZeroOrOne.js
var require_ActorQueryOperationPathZeroOrOne = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/ActorQueryOperationPathZeroOrOne.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathZeroOrOne = void 0;
    var actor_abstract_path_1 = require_lib226();
    var context_entries_1 = require_lib3();
    var utils_bindings_factory_1 = require_lib187();
    var utils_metadata_1 = require_lib8();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathZeroOrOne = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const predicate = operation.predicate;
        const sources = this.getPathSources(predicate);
        const extra = [];
        if (operation.subject.termType !== "Variable" && operation.object.termType !== "Variable" && operation.subject.equals(operation.object)) {
          return {
            type: "bindings",
            bindingsStream: new asynciterator_1.SingletonIterator(bindingsFactory.bindings()),
            metadata: () => Promise.resolve({
              state: new utils_metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 1 },
              variables: []
            })
          };
        }
        const distinct = await this.isPathArbitraryLengthDistinct(algebraFactory, context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const bindingsOne = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({
          context,
          operation: algebraFactory.createPath(operation.subject, predicate.path, operation.object, operation.graph)
        }));
        let bindingsStream;
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const varP = this.generateVariable(dataFactory, operation);
          const bindingsZero = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({
            context,
            operation: algebraFactory.createFilter(this.assignPatternSources(algebraFactory, algebraFactory.createPattern(operation.subject, varP, operation.object, operation.graph), sources), algebraFactory.createOperatorExpression("=", [
              algebraFactory.createTermExpression(operation.subject),
              algebraFactory.createTermExpression(operation.object)
            ]))
          })).bindingsStream.map((bindings) => bindings.delete(varP));
          bindingsStream = new asynciterator_1.UnionIterator([
            bindingsZero,
            bindingsOne.bindingsStream
          ], { autoStart: false });
        } else {
          if (operation.subject.termType === "Variable") {
            extra.push(bindingsFactory.bindings([[operation.subject, operation.object]]));
          }
          if (operation.object.termType === "Variable") {
            extra.push(bindingsFactory.bindings([[operation.object, operation.subject]]));
          }
          bindingsStream = bindingsOne.bindingsStream.prepend(extra);
        }
        const metadata = async () => {
          const innerMetadata = await bindingsOne.metadata();
          return {
            ...innerMetadata,
            cardinality: {
              ...innerMetadata.cardinality,
              // Add one to cardinality because we allow *ZERO* or more.
              value: innerMetadata.cardinality.value + 1
            }
          };
        };
        return {
          type: "bindings",
          bindingsStream,
          metadata
        };
      }
    };
    exports.ActorQueryOperationPathZeroOrOne = ActorQueryOperationPathZeroOrOne;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/index.js
var require_lib265 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathZeroOrOne(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/ActorQueryOperationUpdateDeleteInsert.js
var require_ActorQueryOperationUpdateDeleteInsert = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/ActorQueryOperationUpdateDeleteInsert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUpdateDeleteInsert = void 0;
    var actor_query_operation_construct_1 = require_lib217();
    var bus_query_operation_1 = require_lib9();
    var context_entries_1 = require_lib3();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var ActorQueryOperationUpdateDeleteInsert = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "deleteinsert");
        this.blankNodeCounter = 0;
      }
      async testOperation(operation, context) {
        return (0, utils_query_operation_1.testReadOnly)(context);
      }
      async runOperation(operation, context) {
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
        const whereBindings = operation.where ? (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation: operation.where, context })).bindingsStream : new asynciterator_1.ArrayIterator([bindingsFactory.bindings()], { autoStart: false });
        let quadStreamInsert;
        let quadStreamDelete;
        if (operation.insert) {
          quadStreamInsert = new actor_query_operation_construct_1.BindingsToQuadsIterator(dataFactory, operation.insert.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, dataFactory, this.blankNodeCounter)), whereBindings.clone());
          this.blankNodeCounter++;
        }
        if (operation.delete) {
          quadStreamDelete = new actor_query_operation_construct_1.BindingsToQuadsIterator(dataFactory, operation.delete.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, dataFactory, this.blankNodeCounter)), whereBindings.clone());
          this.blankNodeCounter++;
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          quadStreamInsert,
          quadStreamDelete,
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationUpdateDeleteInsert = ActorQueryOperationUpdateDeleteInsert;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/index.js
var require_lib266 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUpdateDeleteInsert(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-process/lib/ActorQueryProcess.js
var require_ActorQueryProcess = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-process/lib/ActorQueryProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryProcess = void 0;
    var core_1 = require_lib();
    var ActorQueryProcess = class extends core_1.Actor {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *   \ @defaultNested {Query processing failed: none of the configured actor were process to the query "${action.query}"} busFailMessage
       */
      /* eslint-enable max-len */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryProcess = ActorQueryProcess;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-query-process/lib/index.js
var require_lib267 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-query-process/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryProcess(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-sequential/lib/ActorQueryProcessSequential.js
var require_ActorQueryProcessSequential = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-sequential/lib/ActorQueryProcessSequential.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryProcessSequential = void 0;
    var bus_query_process_1 = require_lib267();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryProcessSequential = class extends bus_query_process_1.ActorQueryProcess {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.context.get(context_entries_1.KeysInitQuery.explain) ?? action.context.get(new core_1.ActionContextKey("explain"))) {
          return (0, core_1.failTest)(`${this.name} is not able to explain queries.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let { operation, context } = await this.parse(action.query, action.context);
        ({ operation, context } = await this.optimize(operation, context));
        const output = await this.evaluate(operation, context);
        return { result: output };
      }
      async parse(query, context) {
        context = (await this.mediatorContextPreprocess.mediate({ context, initialize: true })).context;
        let operation;
        if (typeof query === "string") {
          context = context.set(context_entries_1.KeysInitQuery.queryString, query);
          const baseIRI = context.get(context_entries_1.KeysInitQuery.baseIRI);
          const queryFormat = context.get(context_entries_1.KeysInitQuery.queryFormat);
          const queryParseOutput = await this.mediatorQueryParse.mediate({ context, query, queryFormat, baseIRI });
          operation = queryParseOutput.operation;
          if (queryParseOutput.baseIRI) {
            context = context.set(context_entries_1.KeysInitQuery.baseIRI, queryParseOutput.baseIRI);
          }
        } else {
          operation = query;
        }
        if (context.has(context_entries_1.KeysInitQuery.initialBindings)) {
          const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
          const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
          const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);
          operation = (0, utils_query_operation_1.materializeOperation)(operation, context.get(context_entries_1.KeysInitQuery.initialBindings), algebraFactory, bindingsFactory, { strictTargetVariables: true });
          context = context.delete(context_entries_1.KeysInitQuery.queryString);
        }
        return { operation, context };
      }
      async optimize(operation, context) {
        context = context.set(context_entries_1.KeysInitQuery.query, operation);
        ({ operation, context } = await this.mediatorOptimizeQueryOperation.mediate({ context, operation }));
        context = context.set(context_entries_1.KeysInitQuery.query, operation);
        return { operation, context };
      }
      async evaluate(operation, context) {
        const output = await this.mediatorQueryOperation.mediate({ context, operation });
        output.context = context;
        return output;
      }
    };
    exports.ActorQueryProcessSequential = ActorQueryProcessSequential;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-sequential/lib/index.js
var require_lib268 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-sequential/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryProcessSequential(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/LinkedRdfSourcesAsyncRdfIterator.js
var require_LinkedRdfSourcesAsyncRdfIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/LinkedRdfSourcesAsyncRdfIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkedRdfSourcesAsyncRdfIterator = void 0;
    var context_entries_1 = require_lib3();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var LinkedRdfSourcesAsyncRdfIterator = class extends asynciterator_1.BufferedIterator {
      constructor(cacheSize, operation, queryBindingsOptions, context, firstUrl, maxIterators, sourceStateGetter, options) {
        super({ autoStart: false, ...options });
        this.started = false;
        this.currentIterators = [];
        this.iteratorsPendingCreation = 0;
        this.iteratorsPendingTermination = 0;
        this.accumulatedMetadata = Promise.resolve(void 0);
        this._reading = false;
        this.cacheSize = cacheSize;
        this.operation = operation;
        this.queryBindingsOptions = queryBindingsOptions;
        this.context = context;
        this.firstUrl = firstUrl;
        this.maxIterators = maxIterators;
        this.sourceStateGetter = sourceStateGetter;
        if (this.maxIterators <= 0) {
          throw new Error(`LinkedRdfSourcesAsyncRdfIterator.maxIterators must be larger than zero, but got ${this.maxIterators}`);
        }
      }
      /**
       * Start filling the buffer of this iterator.
       */
      kickstart() {
        if (!this.started) {
          this._fillBufferAsync();
        }
      }
      getProperty(propertyName, callback) {
        if (propertyName === "metadata" && !this.started) {
          if (!this.preflightMetadata) {
            this.preflightMetadata = new Promise((resolve, reject) => {
              this.sourceStateGetter({ url: this.firstUrl }, {}).then((sourceState) => {
                const bindingsStream = sourceState.source.queryBindings(this.operation, this.context);
                bindingsStream.getProperty("metadata", (metadata) => {
                  metadata.state = new utils_metadata_1.MetadataValidationState();
                  bindingsStream.destroy();
                  this.accumulateMetadata(sourceState.metadata, metadata).then((accumulatedMetadata) => {
                    const returnMetadata = { ...sourceState.metadata, ...metadata, ...accumulatedMetadata };
                    resolve(returnMetadata);
                  }).catch(() => {
                    resolve({
                      ...sourceState.metadata,
                      state: new utils_metadata_1.MetadataValidationState()
                    });
                  });
                });
              }).catch(reject);
            });
          }
          this.preflightMetadata.then((metadata) => this.setProperty("metadata", metadata)).catch((e) => this.emit("error", e));
        }
        return super.getProperty(propertyName, callback);
      }
      _end(destroy) {
        for (const it of this.currentIterators) {
          it.destroy();
        }
        super._end(destroy);
      }
      _read(count2, done) {
        if (this.started) {
          for (const iterator of this.currentIterators) {
            while (count2 > 0) {
              const read = iterator.read();
              if (read === null) {
                break;
              } else {
                count2--;
                this._push(read);
              }
            }
            if (count2 <= 0) {
              break;
            }
          }
          if (count2 >= 0 && this.canStartNewIterator()) {
            this.sourceStateGetter({ url: this.firstUrl }, {}).then((sourceState) => {
              this.startIteratorsForNextUrls(sourceState.handledDatasets, false);
              done();
            });
          } else {
            done();
          }
        } else {
          this.started = true;
          this.sourceStateGetter({ url: this.firstUrl }, {}).then((sourceState) => {
            this.startIterator(sourceState);
            done();
          }).catch((error) => setTimeout(() => this.destroy(error)));
        }
      }
      canStartNewIterator() {
        return this.currentIterators.length + this.iteratorsPendingCreation + this.iteratorsPendingTermination < this.maxIterators && (!this.canStartNewIteratorConsiderReadable() || !this.readable);
      }
      canStartNewIteratorConsiderReadable() {
        return true;
      }
      areIteratorsRunning() {
        return this.currentIterators.length + this.iteratorsPendingCreation + this.iteratorsPendingTermination > 0;
      }
      /**
       * Start a new iterator for the given source.
       * Once the iterator is done, it will either determine a new source, or it will close the linked iterator.
       * @param {ISourceState} startSource The start source state.
       */
      startIterator(startSource) {
        try {
          const iterator = startSource.source.queryBindings(this.operation, this.context, this.queryBindingsOptions);
          this.currentIterators.push(iterator);
          let receivedEndEvent = false;
          let receivedMetadata = false;
          iterator._destination = this;
          iterator.on("error", (error) => this.destroy(error));
          iterator.on("readable", () => this._fillBuffer());
          iterator.on("end", () => {
            this.currentIterators.splice(this.currentIterators.indexOf(iterator), 1);
            receivedEndEvent = true;
            if (!receivedMetadata) {
              this.iteratorsPendingTermination++;
            }
            if (receivedMetadata) {
              this.startIteratorsForNextUrls(startSource.handledDatasets, true);
            }
          });
          iterator.getProperty("metadata", (metadata) => {
            this.accumulatedMetadata = this.accumulatedMetadata.then((previousMetadata) => (async () => {
              if (!previousMetadata) {
                previousMetadata = startSource.metadata;
              }
              return this.accumulateMetadata(previousMetadata, metadata);
            })().then((accumulatedMetadata) => {
              const returnMetadata = { ...startSource.metadata, ...metadata, ...accumulatedMetadata };
              returnMetadata.state = new utils_metadata_1.MetadataValidationState();
              this.updateMetadata(returnMetadata);
              if (this.preflightMetadata) {
                this.preflightMetadata.then((metadataIn) => metadataIn.state.invalidate()).catch(() => {
                });
              }
              this.getSourceLinks(returnMetadata, startSource).then((nextUrls) => Promise.all(nextUrls)).then(async (nextUrls) => {
                const linkQueue = await this.getLinkQueue();
                for (const nextUrl of nextUrls) {
                  linkQueue.push(nextUrl, startSource.link);
                }
                receivedMetadata = true;
                if (receivedEndEvent) {
                  this.iteratorsPendingTermination--;
                }
                this.startIteratorsForNextUrls(startSource.handledDatasets, true);
              }).catch((error) => this.destroy(error));
              return returnMetadata;
            })).catch((error) => {
              this.destroy(error);
              return {};
            });
          });
        } catch (syncError) {
          this.destroy(syncError);
        }
      }
      updateMetadata(metadataNew) {
        const metadataToInvalidate = this.getProperty("metadata");
        this.setProperty("metadata", metadataNew);
        metadataToInvalidate == null ? void 0 : metadataToInvalidate.state.invalidate();
      }
      isRunning() {
        return !this.done;
      }
      /**
       * Check if a next URL is in the queue.
       * If yes, start a new iterator.
       * If no, close this iterator.
       * @param handledDatasets
       * @param canClose
       */
      startIteratorsForNextUrls(handledDatasets, canClose) {
        this.getLinkQueue().then((linkQueue) => {
          while (this.canStartNewIterator() && this.isRunning()) {
            const nextLink = linkQueue.pop();
            if (nextLink) {
              this.iteratorsPendingCreation++;
              this.sourceStateGetter(nextLink, handledDatasets).then((nextSourceState) => {
                const statisticDereferenceLinks = this.context.get(context_entries_1.KeysStatistics.dereferencedLinks);
                if (statisticDereferenceLinks) {
                  statisticDereferenceLinks.updateStatistic({
                    url: nextSourceState.link.url,
                    metadata: { ...nextSourceState.metadata, ...nextSourceState.link.metadata }
                  }, nextSourceState.source);
                }
                this.iteratorsPendingCreation--;
                this.startIterator(nextSourceState);
              }).catch((error) => this.emit("error", error));
            } else {
              break;
            }
          }
          if (canClose && this.isCloseable(linkQueue, true)) {
            this.close();
          }
        }).catch((error) => this.destroy(error));
      }
      isCloseable(linkQueue, _requireQueueEmpty) {
        return linkQueue.isEmpty() && !this.areIteratorsRunning();
      }
    };
    exports.LinkedRdfSourcesAsyncRdfIterator = LinkedRdfSourcesAsyncRdfIterator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/MediatedLinkedRdfSourcesAsyncRdfIterator.js
var require_MediatedLinkedRdfSourcesAsyncRdfIterator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/MediatedLinkedRdfSourcesAsyncRdfIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatedLinkedRdfSourcesAsyncRdfIterator = void 0;
    var context_entries_1 = require_lib3();
    var LinkedRdfSourcesAsyncRdfIterator_1 = require_LinkedRdfSourcesAsyncRdfIterator();
    var MediatedLinkedRdfSourcesAsyncRdfIterator = class extends LinkedRdfSourcesAsyncRdfIterator_1.LinkedRdfSourcesAsyncRdfIterator {
      constructor(cacheSize, operation, queryBindingsOptions, context, forceSourceType, firstUrl, maxIterators, sourceStateGetter, aggregatedStore, mediatorMetadataAccumulate, mediatorRdfResolveHypermediaLinks, mediatorRdfResolveHypermediaLinksQueue, dataFactory, algebraFactory) {
        super(
          cacheSize,
          operation,
          queryBindingsOptions,
          context,
          firstUrl,
          maxIterators,
          sourceStateGetter,
          // Buffersize must be infinite for an aggregated store because it must keep filling until there are no more
          // derived iterators in the aggregated store.
          aggregatedStore ? { maxBufferSize: Number.POSITIVE_INFINITY } : void 0
        );
        this.wasForcefullyClosed = false;
        this.forceSourceType = forceSourceType;
        this.mediatorMetadataAccumulate = mediatorMetadataAccumulate;
        this.mediatorRdfResolveHypermediaLinks = mediatorRdfResolveHypermediaLinks;
        this.mediatorRdfResolveHypermediaLinksQueue = mediatorRdfResolveHypermediaLinksQueue;
        this.handledUrls = { [firstUrl]: true };
        this.aggregatedStore = aggregatedStore;
        this.dataFactory = dataFactory;
        this.algebraFactory = algebraFactory;
      }
      // Mark the aggregated store as ended once we trigger the closing or destroying of this iterator.
      // We don't override _end, because that would mean that we have to wait
      // until the buffer of this iterator must be fully consumed, which will not always be the case.
      close() {
        if (!this.aggregatedStore) {
          super.close();
          return;
        }
        this.getLinkQueue().then((linkQueue) => {
          if (this.isCloseable(linkQueue, false)) {
            if (this.aggregatedStore) {
              setTimeout(() => this.aggregatedStore.end());
            }
            super.close();
          } else {
            this.wasForcefullyClosed = true;
          }
        }).catch((error) => super.destroy(error));
      }
      destroy(cause) {
        if (!this.aggregatedStore) {
          super.destroy(cause);
          return;
        }
        this.getLinkQueue().then((linkQueue) => {
          if (cause ?? this.isCloseable(linkQueue, false)) {
            if (this.aggregatedStore) {
              setTimeout(() => this.aggregatedStore.end());
            }
            super.destroy(cause);
          } else {
            this.wasForcefullyClosed = true;
          }
        }).catch((error) => super.destroy(error));
      }
      isCloseable(linkQueue, requireQueueEmpty) {
        return (requireQueueEmpty ? linkQueue.isEmpty() : this.wasForcefullyClosed || linkQueue.isEmpty()) && !this.areIteratorsRunning();
      }
      canStartNewIterator() {
        return !this.wasForcefullyClosed && // eslint-disable-next-line ts/prefer-nullish-coalescing
        (this.aggregatedStore && this.aggregatedStore.hasRunningIterators()) || super.canStartNewIterator();
      }
      canStartNewIteratorConsiderReadable() {
        return !this.aggregatedStore;
      }
      isRunning() {
        return this.aggregatedStore && this.aggregatedStore.hasRunningIterators() || !this.done;
      }
      getLinkQueue() {
        if (!this.linkQueue) {
          this.linkQueue = this.mediatorRdfResolveHypermediaLinksQueue.mediate({ firstUrl: this.firstUrl, context: this.context }).then((result) => result.linkQueue);
        }
        return this.linkQueue;
      }
      async getSourceLinks(metadata, startSource) {
        try {
          const { links } = await this.mediatorRdfResolveHypermediaLinks.mediate({ context: this.context, metadata });
          const traversalTracker = this.context.get(context_entries_1.KeysStatistics.discoveredLinks);
          if (traversalTracker) {
            for (const link of links) {
              traversalTracker.updateStatistic({ url: link.url, metadata: { ...link.metadata } }, startSource.link);
            }
          }
          return links.filter((link) => {
            if (this.handledUrls[link.url]) {
              return false;
            }
            this.handledUrls[link.url] = true;
            return true;
          });
        } catch {
          return [];
        }
      }
      startIterator(startSource) {
        var _a;
        if (this.aggregatedStore && !this.aggregatedStore.containedSources.has(startSource.link.url)) {
          (_a = this.aggregatedStore) == null ? void 0 : _a.containedSources.add(startSource.link.url);
          const stream = startSource.source.queryBindings(this.algebraFactory.createPattern(this.dataFactory.variable("s"), this.dataFactory.variable("p"), this.dataFactory.variable("o"), this.dataFactory.variable("g")), this.context.set(context_entries_1.KeysQueryOperation.unionDefaultGraph, true)).map((bindings) => this.dataFactory.quad(bindings.get("s"), bindings.get("p"), bindings.get("o"), bindings.get("g")));
          this.aggregatedStore.import(stream).on("end", () => {
            super.startIterator(startSource);
          });
        } else {
          super.startIterator(startSource);
        }
      }
      async accumulateMetadata(accumulatedMetadata, appendingMetadata) {
        return (await this.mediatorMetadataAccumulate.mediate({
          mode: "append",
          accumulatedMetadata,
          appendingMetadata,
          context: this.context
        })).metadata;
      }
      updateMetadata(metadataNew) {
        var _a;
        super.updateMetadata(metadataNew);
        (_a = this.aggregatedStore) == null ? void 0 : _a.setBaseMetadata(metadataNew, true);
      }
    };
    exports.MediatedLinkedRdfSourcesAsyncRdfIterator = MediatedLinkedRdfSourcesAsyncRdfIterator;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/BlankNode.js
var require_BlankNode4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/BlankNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNode = void 0;
    var BlankNode = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNode = BlankNode;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/DefaultGraph.js
var require_DefaultGraph4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/DefaultGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGraph = void 0;
    var DefaultGraph = class {
      constructor() {
        this.termType = "DefaultGraph";
        this.value = "";
      }
      equals(other) {
        return !!other && other.termType === "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph;
    DefaultGraph.INSTANCE = new DefaultGraph();
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/NamedNode.js
var require_NamedNode4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/NamedNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedNode = void 0;
    var NamedNode = class {
      constructor(value) {
        this.termType = "NamedNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "NamedNode" && other.value === this.value;
      }
    };
    exports.NamedNode = NamedNode;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Literal.js
var require_Literal4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Literal = void 0;
    var NamedNode_1 = require_NamedNode4();
    var Literal = class _Literal {
      constructor(value, languageOrDatatype) {
        this.termType = "Literal";
        this.value = value;
        if (typeof languageOrDatatype === "string") {
          this.language = languageOrDatatype;
          this.datatype = _Literal.RDF_LANGUAGE_STRING;
          this.direction = "";
        } else if (languageOrDatatype) {
          if ("termType" in languageOrDatatype) {
            this.language = "";
            this.datatype = languageOrDatatype;
            this.direction = "";
          } else {
            this.language = languageOrDatatype.language;
            this.datatype = languageOrDatatype.direction ? _Literal.RDF_DIRECTIONAL_LANGUAGE_STRING : _Literal.RDF_LANGUAGE_STRING;
            this.direction = languageOrDatatype.direction || "";
          }
        } else {
          this.language = "";
          this.datatype = _Literal.XSD_STRING;
          this.direction = "";
        }
      }
      equals(other) {
        return !!other && other.termType === "Literal" && other.value === this.value && other.language === this.language && (other.direction === this.direction || !other.direction && this.direction === "") && this.datatype.equals(other.datatype);
      }
    };
    exports.Literal = Literal;
    Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    Literal.RDF_DIRECTIONAL_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString");
    Literal.XSD_STRING = new NamedNode_1.NamedNode("http://www.w3.org/2001/XMLSchema#string");
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Quad.js
var require_Quad4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Quad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quad = void 0;
    var Quad = class {
      constructor(subject, predicate, object, graph) {
        this.termType = "Quad";
        this.value = "";
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
      }
      equals(other) {
        return !!other && (other.termType === "Quad" || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Quad = Quad;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Variable.js
var require_Variable5 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Variable2 = class {
      constructor(value) {
        this.termType = "Variable";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "Variable" && other.value === this.value;
      }
    };
    exports.Variable = Variable2;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/DataFactory.js
var require_DataFactory4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/lib/DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFactory = void 0;
    var BlankNode_1 = require_BlankNode4();
    var DefaultGraph_1 = require_DefaultGraph4();
    var Literal_1 = require_Literal4();
    var NamedNode_1 = require_NamedNode4();
    var Quad_1 = require_Quad4();
    var Variable_1 = require_Variable5();
    var dataFactoryCounter = 0;
    var DataFactory = class {
      constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
      }
      /**
       * @param value The IRI for the named node.
       * @return A new instance of NamedNode.
       * @see NamedNode
       */
      namedNode(value) {
        return new NamedNode_1.NamedNode(value);
      }
      /**
       * @param value The optional blank node identifier.
       * @return A new instance of BlankNode.
       *         If the `value` parameter is undefined a new identifier
       *         for the blank node is generated for each call.
       * @see BlankNode
       */
      blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
      }
      /**
       * @param value              The literal value.
       * @param languageOrDatatype The optional language, datatype, or directional language.
       *                           If `languageOrDatatype` is a NamedNode,
       *                           then it is used for the value of `NamedNode.datatype`.
       *                           If `languageOrDatatype` is a NamedNode, it is used for the value
       *                           of `NamedNode.language`.
       *                           Otherwise, it is used as a directional language,
       *                           from which the language is set to `languageOrDatatype.language`
       *                           and the direction to `languageOrDatatype.direction`.
       * @return A new instance of Literal.
       * @see Literal
       */
      literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
      }
      /**
       * This method is optional.
       * @param value The variable name
       * @return A new instance of Variable.
       * @see Variable
       */
      variable(value) {
        return new Variable_1.Variable(value);
      }
      /**
       * @return An instance of DefaultGraph.
       */
      defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
      }
      /**
       * @param subject   The quad subject term.
       * @param predicate The quad predicate term.
       * @param object    The quad object term.
       * @param graph     The quad graph term.
       * @return A new instance of Quad.
       * @see Quad
       */
      quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
      }
      /**
       * Create a deep copy of the given term using this data factory.
       * @param original An RDF term.
       * @return A deep copy of the given term.
       */
      fromTerm(original) {
        switch (original.termType) {
          case "NamedNode":
            return this.namedNode(original.value);
          case "BlankNode":
            return this.blankNode(original.value);
          case "Literal":
            if (original.language) {
              return this.literal(original.value, original.language);
            }
            if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
              return this.literal(original.value, this.fromTerm(original.datatype));
            }
            return this.literal(original.value);
          case "Variable":
            return this.variable(original.value);
          case "DefaultGraph":
            return this.defaultGraph();
          case "Quad":
            return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
      }
      /**
       * Create a deep copy of the given quad using this data factory.
       * @param original An RDF quad.
       * @return A deep copy of the given quad.
       */
      fromQuad(original) {
        return this.fromTerm(original);
      }
      /**
       * Reset the internal blank node counter.
       */
      resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
      }
    };
    exports.DataFactory = DataFactory;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/index.js
var require_rdf_data_factory4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-data-factory/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNode4(), exports);
    __exportStar(require_DataFactory4(), exports);
    __exportStar(require_DefaultGraph4(), exports);
    __exportStar(require_Literal4(), exports);
    __exportStar(require_NamedNode4(), exports);
    __exportStar(require_Quad4(), exports);
    __exportStar(require_Variable5(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-string/lib/TermUtil.js
var require_TermUtil7 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-string/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = termToString;
    exports.getLiteralValue = getLiteralValue;
    exports.getLiteralType = getLiteralType;
    exports.getLiteralLanguage = getLiteralLanguage;
    exports.getLiteralDirection = getLiteralDirection;
    exports.stringToTerm = stringToTerm;
    exports.quadToStringQuad = quadToStringQuad;
    exports.stringQuadToQuad = stringQuadToQuad;
    var rdf_data_factory_1 = require_rdf_data_factory4();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return "_:" + term.value;
        case "Literal":
          const literalValue = term;
          return '"' + literalValue.value + '"' + (literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString" ? "^^" + literalValue.datatype.value : "") + (literalValue.language ? "@" + literalValue.language : "") + (literalValue.direction ? "--" + literalValue.direction : "");
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : " " + termToString(term.graph)}>>`;
        case "Variable":
          return "?" + term.value;
        case "DefaultGraph":
          return term.value;
      }
    }
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1];
    }
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      if (match[1]) {
        let ret = match[1].toLowerCase();
        const doubleDashPos = ret.indexOf("--");
        if (doubleDashPos >= 0) {
          ret = ret.slice(0, doubleDashPos);
        }
        return ret;
      }
      return "";
    }
    function getLiteralDirection(literalValue) {
      const doubleDashPos = literalValue.indexOf("--", literalValue.lastIndexOf('"'));
      if (doubleDashPos >= 0) {
        const direction = literalValue.slice(doubleDashPos + 2, literalValue.length);
        if (direction === "ltr" || direction === "rtl") {
          return direction;
        }
        throw new Error(literalValue + " is not a literal with a valid direction");
      }
      return "";
    }
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || !value.length) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.substr(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.substr(1));
        case '"':
          const language = getLiteralLanguage(value);
          const direction = getLiteralDirection(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language ? { language, direction } : type);
        case "<":
        default:
          if (value[0] === "<" && value.length > 4 && value[1] === "<" && value[value.length - 1] === ">" && value[value.length - 2] === ">") {
            const terms = value.slice(2, -2).trim();
            let stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            let inQuote = false;
            for (let i = 0; i < terms.length; i++) {
              const char = terms[i];
              if (char === "<")
                ignoreTags++;
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error("Found closing tag without opening tag in " + value);
                } else {
                  ignoreTags--;
                }
              }
              if (char === '"') {
                let escaped = false;
                let j = i;
                while (j-- > 0 && terms[j] === "\\") {
                  escaped = !escaped;
                }
                if (!escaped) {
                  inQuote = !inQuote;
                }
              }
              if (char === " " && !inQuote && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i));
                while (terms[i + 1] === " ") {
                  i += 1;
                }
                lastIndex = i + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error("Found opening tag without closing tag in " + value);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error("Nested quad syntax error " + value);
            }
            stringTerms = stringTerms.map((term) => term.startsWith("<") && !term.includes(" ") ? term.slice(1, -1) : term);
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          return dataFactory.namedNode(value);
      }
    }
    function quadToStringQuad(q) {
      return {
        subject: termToString(q.subject),
        predicate: termToString(q.predicate),
        object: termToString(q.object),
        graph: termToString(q.graph)
      };
    }
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-string/index.js
var require_rdf_string4 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralDirection = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil7();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralDirection", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralDirection;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/lib/QuadTermUtil.js
var require_QuadTermUtil3 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/lib/QuadTermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRIPLE_TERM_NAMES = exports.QUAD_TERM_NAMES = void 0;
    exports.getTerms = getTerms;
    exports.getTermsNested = getTermsNested;
    exports.getNamedTerms = getNamedTerms;
    exports.collectNamedTerms = collectNamedTerms;
    exports.forEachTerms = forEachTerms;
    exports.forEachTermsNested = forEachTermsNested;
    exports.filterTerms = filterTerms;
    exports.filterTermsNested = filterTermsNested;
    exports.filterQuadTermNames = filterQuadTermNames;
    exports.filterQuadTermNamesNested = filterQuadTermNamesNested;
    exports.mapTerms = mapTerms;
    exports.mapTermsNested = mapTermsNested;
    exports.reduceTerms = reduceTerms;
    exports.reduceTermsNested = reduceTermsNested;
    exports.everyTerms = everyTerms;
    exports.everyTermsNested = everyTermsNested;
    exports.someTerms = someTerms;
    exports.someTermsNested = someTermsNested;
    exports.getValueNestedPath = getValueNestedPath;
    exports.matchTerm = matchTerm;
    exports.matchPattern = matchPattern;
    exports.matchPatternComplete = matchPatternComplete;
    exports.matchPatternMappings = matchPatternMappings;
    var rdf_data_factory_1 = require_rdf_data_factory4();
    var DF = new rdf_data_factory_1.DataFactory();
    exports.QUAD_TERM_NAMES = ["subject", "predicate", "object", "graph"];
    exports.TRIPLE_TERM_NAMES = ["subject", "predicate", "object"];
    function getTerms(quad, ignoreDefaultGraph) {
      if (ignoreDefaultGraph && quad.graph.termType === "DefaultGraph") {
        return [quad.subject, quad.predicate, quad.object];
      }
      return [quad.subject, quad.predicate, quad.object, quad.graph];
    }
    function getTermsNested(quad, ignoreDefaultGraph) {
      const terms = [];
      for (const term of getTerms(quad, ignoreDefaultGraph)) {
        if (term.termType === "Quad") {
          getTermsNested(term, ignoreDefaultGraph).forEach((subTerm) => terms.push(subTerm));
        } else {
          terms.push(term);
        }
      }
      return terms;
    }
    function getNamedTerms(quad) {
      return [
        { key: "subject", value: quad.subject },
        { key: "predicate", value: quad.predicate },
        { key: "object", value: quad.object },
        { key: "graph", value: quad.graph }
      ];
    }
    function collectNamedTerms(namedTerms, defaultCb, dataFactory) {
      const elements = {};
      namedTerms.forEach((namedTerm) => elements[namedTerm.key] = namedTerm.value);
      if (defaultCb) {
        elements.subject = elements.subject || defaultCb("subject");
        elements.predicate = elements.predicate || defaultCb("predicate");
        elements.object = elements.object || defaultCb("object");
        elements.graph = elements.graph || defaultCb("graph");
      }
      return (dataFactory || DF).quad(elements.subject, elements.predicate, elements.object, elements.graph);
    }
    function forEachTerms(quad, cb) {
      cb(quad.subject, "subject");
      cb(quad.predicate, "predicate");
      cb(quad.object, "object");
      cb(quad.graph, "graph");
    }
    function forEachTermsNested(quad, cb, keys2 = []) {
      if (quad.subject.termType === "Quad") {
        forEachTermsNested(quad.subject, cb, [...keys2, "subject"]);
      } else {
        cb(quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        forEachTermsNested(quad.predicate, cb, [...keys2, "predicate"]);
      } else {
        cb(quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        forEachTermsNested(quad.object, cb, [...keys2, "object"]);
      } else {
        cb(quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        forEachTermsNested(quad.graph, cb, [...keys2, "graph"]);
      } else {
        cb(quad.graph, [...keys2, "graph"]);
      }
    }
    function filterTerms(quad, filter3) {
      const terms = [];
      if (filter3(quad.subject, "subject")) {
        terms.push(quad.subject);
      }
      if (filter3(quad.predicate, "predicate")) {
        terms.push(quad.predicate);
      }
      if (filter3(quad.object, "object")) {
        terms.push(quad.object);
      }
      if (filter3(quad.graph, "graph")) {
        terms.push(quad.graph);
      }
      return terms;
    }
    function filterTermsNested(quad, filter3, keys2 = []) {
      let terms = [];
      if (quad.subject.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.subject, filter3, [...keys2, "subject"])];
      } else {
        if (filter3(quad.subject, [...keys2, "subject"])) {
          terms.push(quad.subject);
        }
      }
      if (quad.predicate.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.predicate, filter3, [...keys2, "predicate"])];
      } else {
        if (filter3(quad.predicate, [...keys2, "predicate"])) {
          terms.push(quad.predicate);
        }
      }
      if (quad.object.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.object, filter3, [...keys2, "object"])];
      } else {
        if (filter3(quad.object, [...keys2, "object"])) {
          terms.push(quad.object);
        }
      }
      if (quad.graph.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.graph, filter3, [...keys2, "graph"])];
      } else {
        if (filter3(quad.graph, [...keys2, "graph"])) {
          terms.push(quad.graph);
        }
      }
      return terms;
    }
    function filterQuadTermNames(quad, filter3) {
      const names = [];
      if (filter3(quad.subject, "subject")) {
        names.push("subject");
      }
      if (filter3(quad.predicate, "predicate")) {
        names.push("predicate");
      }
      if (filter3(quad.object, "object")) {
        names.push("object");
      }
      if (filter3(quad.graph, "graph")) {
        names.push("graph");
      }
      return names;
    }
    function filterQuadTermNamesNested(quad, filter3, keys2 = []) {
      let names = [];
      const keysS = [...keys2, "subject"];
      if (quad.subject.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.subject, filter3, keysS)];
      } else {
        if (filter3(quad.subject, keysS)) {
          names.push(keysS);
        }
      }
      const keysP = [...keys2, "predicate"];
      if (quad.predicate.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.predicate, filter3, keysP)];
      } else {
        if (filter3(quad.predicate, keysP)) {
          names.push(keysP);
        }
      }
      const keysO = [...keys2, "object"];
      if (quad.object.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.object, filter3, keysO)];
      } else {
        if (filter3(quad.object, keysO)) {
          names.push(keysO);
        }
      }
      const keysG = [...keys2, "graph"];
      if (quad.graph.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.graph, filter3, keysG)];
      } else {
        if (filter3(quad.graph, keysG)) {
          names.push(keysG);
        }
      }
      return names;
    }
    function mapTerms(quad, mapper, dataFactory) {
      return (dataFactory || DF).quad(mapper(quad.subject, "subject"), mapper(quad.predicate, "predicate"), mapper(quad.object, "object"), mapper(quad.graph, "graph"));
    }
    function mapTermsNested(quad, mapper, dataFactory, keys2 = []) {
      return (dataFactory || DF).quad(quad.subject.termType === "Quad" ? mapTermsNested(quad.subject, mapper, dataFactory, [...keys2, "subject"]) : mapper(quad.subject, [...keys2, "subject"]), quad.predicate.termType === "Quad" ? mapTermsNested(quad.predicate, mapper, dataFactory, [...keys2, "predicate"]) : mapper(quad.predicate, [...keys2, "predicate"]), quad.object.termType === "Quad" ? mapTermsNested(quad.object, mapper, dataFactory, [...keys2, "object"]) : mapper(quad.object, [...keys2, "object"]), quad.graph.termType === "Quad" ? mapTermsNested(quad.graph, mapper, dataFactory, [...keys2, "graph"]) : mapper(quad.graph, [...keys2, "graph"]));
    }
    function reduceTerms(quad, reducer, initialValue) {
      let value = initialValue;
      value = reducer(value, quad.subject, "subject");
      value = reducer(value, quad.predicate, "predicate");
      value = reducer(value, quad.object, "object");
      return reducer(value, quad.graph, "graph");
    }
    function reduceTermsNested(quad, reducer, initialValue, keys2 = []) {
      let value = initialValue;
      if (quad.subject.termType === "Quad") {
        value = reduceTermsNested(quad.subject, reducer, value, [...keys2, "subject"]);
      } else {
        value = reducer(value, quad.subject, [...keys2, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        value = reduceTermsNested(quad.predicate, reducer, value, [...keys2, "predicate"]);
      } else {
        value = reducer(value, quad.predicate, [...keys2, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        value = reduceTermsNested(quad.object, reducer, value, [...keys2, "object"]);
      } else {
        value = reducer(value, quad.object, [...keys2, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        value = reduceTermsNested(quad.graph, reducer, value, [...keys2, "graph"]);
      } else {
        value = reducer(value, quad.graph, [...keys2, "graph"]);
      }
      return value;
    }
    function everyTerms(quad, checker) {
      return checker(quad.subject, "subject") && checker(quad.predicate, "predicate") && checker(quad.object, "object") && checker(quad.graph, "graph");
    }
    function everyTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? everyTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) && (quad.predicate.termType === "Quad" ? everyTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) && (quad.object.termType === "Quad" ? everyTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) && (quad.graph.termType === "Quad" ? everyTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    function someTerms(quad, checker) {
      return checker(quad.subject, "subject") || checker(quad.predicate, "predicate") || checker(quad.object, "object") || checker(quad.graph, "graph");
    }
    function someTermsNested(quad, checker, keys2 = []) {
      return (quad.subject.termType === "Quad" ? someTermsNested(quad.subject, checker, [...keys2, "subject"]) : checker(quad.subject, [...keys2, "subject"])) || (quad.predicate.termType === "Quad" ? someTermsNested(quad.predicate, checker, [...keys2, "predicate"]) : checker(quad.predicate, [...keys2, "predicate"])) || (quad.object.termType === "Quad" ? someTermsNested(quad.object, checker, [...keys2, "object"]) : checker(quad.object, [...keys2, "object"])) || (quad.graph.termType === "Quad" ? someTermsNested(quad.graph, checker, [...keys2, "graph"]) : checker(quad.graph, [...keys2, "graph"]));
    }
    function getValueNestedPath(term, keys2) {
      if (keys2.length === 0) {
        return term;
      }
      if (term.termType === "Quad") {
        return getValueNestedPath(term[keys2[0]], keys2.slice(1));
      }
      throw new Error(`Tried to get ${keys2[0]} from term of type ${term.termType}`);
    }
    function matchTerm(termA, termB) {
      return !termB || termB.termType === "Variable" || termB.termType === "Quad" && termA.termType === "Quad" && matchPatternComplete(termA, termB) || termB.equals(termA);
    }
    function matchPattern(quad, subject, predicate, object, graph) {
      return matchTerm(quad.subject, subject) && matchTerm(quad.predicate, predicate) && matchTerm(quad.object, object) && matchTerm(quad.graph, graph);
    }
    function matchPatternComplete(quad, pattern) {
      return matchPattern(quad, pattern.subject, pattern.predicate, pattern.object, pattern.graph);
    }
    function matchPatternMappings(quad, pattern, opt = {}) {
      const map2 = {};
      function match(_pattern, _quad) {
        return everyTerms(_pattern, (t1, key) => {
          var _a, _b;
          const t2 = _quad[key];
          switch (t1.termType) {
            case "Variable":
              return opt.skipVarMapping && t2.termType === "Variable" || ((_b = (_a = map2[t1.value]) === null || _a === void 0 ? void 0 : _a.equals(t2)) !== null && _b !== void 0 ? _b : (map2[t1.value] = t2, true));
            case "Quad":
              return t2.termType === "Quad" && match(t1, t2);
            default:
              return t1.equals(t2);
          }
        });
      }
      return match(pattern, quad) && (opt.returnMappings ? map2 : true);
    }
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/lib/TermUtil.js
var require_TermUtil8 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TERM_TYPES = void 0;
    exports.uniqTerms = uniqTerms;
    exports.getTermsOfType = getTermsOfType;
    exports.getNamedNodes = getNamedNodes;
    exports.getBlankNodes = getBlankNodes;
    exports.getLiterals = getLiterals;
    exports.getVariables = getVariables;
    exports.getDefaultGraphs = getDefaultGraphs;
    exports.getQuads = getQuads;
    var rdf_string_1 = require_rdf_string4();
    exports.TERM_TYPES = ["NamedNode", "BlankNode", "Literal", "Variable", "DefaultGraph", "Quad"];
    function uniqTerms(terms) {
      const hash2 = {};
      return terms.filter((term) => {
        const termString = (0, rdf_string_1.termToString)(term);
        return !(termString in hash2) && (hash2[termString] = true);
      });
    }
    function getTermsOfType(terms, termType) {
      return terms.filter((term) => term.termType === termType);
    }
    function getNamedNodes(terms) {
      return getTermsOfType(terms, "NamedNode");
    }
    function getBlankNodes(terms) {
      return getTermsOfType(terms, "BlankNode");
    }
    function getLiterals(terms) {
      return getTermsOfType(terms, "Literal");
    }
    function getVariables(terms) {
      return getTermsOfType(terms, "Variable");
    }
    function getDefaultGraphs(terms) {
      return getTermsOfType(terms, "DefaultGraph");
    }
    function getQuads(terms) {
      return getTermsOfType(terms, "Quad");
    }
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/index.js
var require_rdf_terms3 = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/node_modules/rdf-terms/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QuadTermUtil3(), exports);
    __exportStar(require_TermUtil8(), exports);
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/lib/PendingStreamsIndex.js
var require_PendingStreamsIndex = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/lib/PendingStreamsIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PendingStreamsIndex = void 0;
    var rdf_string_1 = require_rdf_string4();
    var rdf_terms_1 = require_rdf_terms3();
    var PendingStreamsIndex = class _PendingStreamsIndex {
      constructor() {
        this.indexedStreams = /* @__PURE__ */ new Map();
        this.allStreams = [];
      }
      termToString(term) {
        return term && term.termType !== "Variable" ? (0, rdf_string_1.termToString)(term) : _PendingStreamsIndex.ID_VARIABLE;
      }
      /**
       * Add a new pending stream for the given quad pattern.
       * @param pendingStream A pending stream.
       * @param subject A term.
       * @param predicate A term.
       * @param object A term.
       * @param graph A term.
       */
      addPatternListener(pendingStream, subject, predicate, object, graph) {
        this.allStreams.push(pendingStream);
        const key = `${this.termToString(subject)}${_PendingStreamsIndex.ID_SEPARATOR}${this.termToString(predicate)}${_PendingStreamsIndex.ID_SEPARATOR}${this.termToString(object)}${_PendingStreamsIndex.ID_SEPARATOR}${this.termToString(graph)}`;
        let existingListeners = this.indexedStreams.get(key);
        if (!existingListeners) {
          existingListeners = [];
          this.indexedStreams.set(key, existingListeners);
        }
        existingListeners.push(pendingStream);
      }
      /**
       * Find all the pending streams from which their quad pattern match the given quad.
       * @param quad The quad to match patterns to.
       */
      getPendingStreamsForQuad(quad) {
        let keys2 = [(0, rdf_terms_1.getTerms)(quad).map((term) => (0, rdf_string_1.termToString)(term))];
        for (let i = 0; i < rdf_terms_1.QUAD_TERM_NAMES.length; i++) {
          const keysOld = keys2;
          keys2 = [];
          for (const key of keysOld) {
            keys2.push(key);
            const keyModified = [...key];
            keyModified[i] = _PendingStreamsIndex.ID_VARIABLE;
            keys2.push(keyModified);
          }
        }
        const pendingStreams = [];
        for (const key of keys2) {
          const found = this.indexedStreams.get(key.join(_PendingStreamsIndex.ID_SEPARATOR));
          if (found) {
            pendingStreams.push(...found);
          }
        }
        return pendingStreams;
      }
    };
    PendingStreamsIndex.ID_VARIABLE = "?";
    PendingStreamsIndex.ID_SEPARATOR = ":";
    exports.PendingStreamsIndex = PendingStreamsIndex;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/lib/StreamingStore.js
var require_StreamingStore = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/lib/StreamingStore.js"(exports) {
    "use strict";
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n]) i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StreamingStore = void 0;
    var n3_1 = (init_src(), __toCommonJS(src_exports));
    var readable_stream_1 = require_browser2();
    var PendingStreamsIndex_1 = require_PendingStreamsIndex();
    var StreamingStore = class _StreamingStore {
      constructor(store = new n3_1.Store()) {
        this.pendingStreams = new PendingStreamsIndex_1.PendingStreamsIndex();
        this.ended = false;
        this.listeners = [];
        this.store = store;
      }
      addEndListener(listener) {
        this.listeners.push(listener);
      }
      emitEndEvent() {
        for (const listener of this.listeners) {
          listener();
        }
      }
      hasEnded() {
        return this.ended;
      }
      /**
       * Mark this store as ended.
       *
       * This will make sure that all running and future `match` calls will end,
       * and all next `import` calls to this store will throw an error.
       * It will run all the listeners added with `addEndListener`.
       */
      end() {
        this.ended = true;
        for (const pendingStream of this.pendingStreams.allStreams) {
          pendingStream.push(null);
        }
        this.emitEndEvent();
      }
      importToListeners(stream) {
        stream.on("data", (quad) => {
          if (!this.ended && !this.store.countQuads(quad.subject, quad.predicate, quad.object, quad.graph)) {
            for (const pendingStream of this.pendingStreams.getPendingStreamsForQuad(quad)) {
              pendingStream.emit("quad", quad);
              if (pendingStream.isInitialized) {
                pendingStream.push(quad);
              }
            }
          }
        });
      }
      static concatStreams(readables) {
        return __asyncGenerator(this, arguments, function* concatStreams_1() {
          var _a, e_1, _b, _c;
          for (const readable of readables) {
            try {
              for (var _d = true, readable_1 = (e_1 = void 0, __asyncValues(readable)), readable_1_1; readable_1_1 = yield __await(readable_1.next()), _a = readable_1_1.done, !_a; ) {
                _c = readable_1_1.value;
                _d = false;
                try {
                  const chunk = _c;
                  yield yield __await(chunk);
                } finally {
                  _d = true;
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (!_d && !_a && (_b = readable_1.return)) yield __await(_b.call(readable_1));
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          }
        });
      }
      import(stream) {
        if (this.ended) {
          throw new Error("Attempted to import into an ended StreamingStore");
        }
        this.importToListeners(stream);
        return this.store.import(stream);
      }
      match(subject, predicate, object, graph) {
        const storeResult = this.store.match(subject, predicate, object, graph);
        let stream = storeResult;
        if (!this.ended) {
          const pendingStream = new readable_stream_1.PassThrough({ objectMode: true });
          this.pendingStreams.addPatternListener(pendingStream, subject, predicate, object, graph);
          stream = readable_stream_1.Readable.from(_StreamingStore.concatStreams([storeResult, pendingStream]));
          pendingStream.on("quad", (quad) => {
            stream.emit("quad", quad);
          });
          stream._pipeSource = storeResult;
          const readOld = storeResult._read;
          storeResult._read = (size) => {
            pendingStream.isInitialized = true;
            readOld.call(storeResult, size);
          };
        }
        return stream;
      }
      /**
       * The internal store with all imported quads.
       */
      getStore() {
        return this.store;
      }
    };
    exports.StreamingStore = StreamingStore;
  }
});

// ../../lipdjs/node_modules/rdf-streaming-store/index.js
var require_rdf_streaming_store = __commonJS({
  "../../lipdjs/node_modules/rdf-streaming-store/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_PendingStreamsIndex(), exports);
    __exportStar(require_StreamingStore(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/StreamingStoreMetadata.js
var require_StreamingStoreMetadata = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/StreamingStoreMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StreamingStoreMetadata = void 0;
    var utils_iterator_1 = require_lib179();
    var utils_metadata_1 = require_lib8();
    var rdf_streaming_store_1 = require_rdf_streaming_store();
    var StreamingStoreMetadata = class extends rdf_streaming_store_1.StreamingStore {
      constructor(store, metadataAccumulator) {
        super(store);
        this.started = false;
        this.containedSources = /* @__PURE__ */ new Set();
        this.runningIterators = /* @__PURE__ */ new Set();
        this.iteratorCreatedListeners = /* @__PURE__ */ new Set();
        this.baseMetadata = {
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: { type: "exact", value: 0 },
          variables: []
        };
        this.metadataAccumulator = metadataAccumulator;
      }
      import(stream) {
        if (!this.ended) {
          super.import(stream);
        }
        return stream;
      }
      hasRunningIterators() {
        return this.runningIterators.size > 0;
      }
      match(subject, predicate, object, graph) {
        const rawStream = super.match(subject, predicate, object, graph);
        const iterator = new utils_iterator_1.ClosableTransformIterator(rawStream, {
          autoStart: false,
          onClose: () => {
            this.runningIterators.delete(iterator);
          }
        });
        let count2 = this.getStore().countQuads(subject, predicate, object, graph);
        const metadata = {
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: {
            type: "estimate",
            value: count2
          }
        };
        iterator.setProperty("metadata", metadata);
        iterator.setProperty("lastCount", count2);
        rawStream.on("quad", () => {
          iterator.setProperty("lastCount", ++count2);
          this.updateMetadataState(iterator, count2);
        });
        this.runningIterators.add(iterator);
        for (const listener of this.iteratorCreatedListeners) {
          listener();
        }
        return iterator;
      }
      setBaseMetadata(metadata, updateStates) {
        this.baseMetadata = { ...metadata };
        this.baseMetadata.cardinality = { type: "exact", value: 0 };
        if (updateStates) {
          for (const iterator of this.runningIterators) {
            const count2 = iterator.getProperty("lastCount");
            this.updateMetadataState(iterator, count2);
          }
        }
      }
      updateMetadataState(iterator, count2) {
        const metadataNew = {
          state: new utils_metadata_1.MetadataValidationState(),
          cardinality: {
            type: "estimate",
            value: count2
          },
          variables: []
        };
        this.metadataAccumulator(this.baseMetadata, metadataNew).then((accumulatedMetadata) => {
          accumulatedMetadata.state = new utils_metadata_1.MetadataValidationState();
          const metadataToInvalidate = iterator.getProperty("metadata");
          iterator.setProperty("metadata", accumulatedMetadata);
          metadataToInvalidate == null ? void 0 : metadataToInvalidate.state.invalidate();
        }).catch(() => {
        });
      }
      addIteratorCreatedListener(listener) {
        this.iteratorCreatedListeners.add(listener);
      }
      removeIteratorCreatedListener(listener) {
        this.iteratorCreatedListeners.delete(listener);
      }
    };
    exports.StreamingStoreMetadata = StreamingStoreMetadata;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/QuerySourceHypermedia.js
var require_QuerySourceHypermedia = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/QuerySourceHypermedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuerySourceHypermedia = void 0;
    var actor_query_source_identify_rdfjs_1 = require_lib255();
    var context_entries_1 = require_lib3();
    var asynciterator_1 = require_asynciterator();
    var lru_cache_1 = require_commonjs();
    var readable_stream_1 = require_browser2();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var MediatedLinkedRdfSourcesAsyncRdfIterator_1 = require_MediatedLinkedRdfSourcesAsyncRdfIterator();
    var StreamingStoreMetadata_1 = require_StreamingStoreMetadata();
    var QuerySourceHypermedia = class {
      constructor(cacheSize, firstUrl, forceSourceType, maxIterators, aggregateStore, mediators, logWarning, dataFactory, bindingsFactory) {
        this.referenceValue = firstUrl;
        this.cacheSize = cacheSize;
        this.firstUrl = firstUrl;
        this.forceSourceType = forceSourceType;
        this.maxIterators = maxIterators;
        this.mediators = mediators;
        this.aggregateStore = aggregateStore;
        this.logWarning = logWarning;
        this.dataFactory = dataFactory;
        this.bindingsFactory = bindingsFactory;
        this.sourcesState = new lru_cache_1.LRUCache({ max: this.cacheSize });
      }
      async getSelectorShape(context) {
        const source = await this.getSourceCached({ url: this.firstUrl }, {}, context, this.getAggregateStore(context));
        return source.source.getSelectorShape(context);
      }
      queryBindings(operation, context, options) {
        const aggregatedStore = this.getAggregateStore(context);
        if (aggregatedStore && operation.type === "pattern" && aggregatedStore.started) {
          return new actor_query_source_identify_rdfjs_1.QuerySourceRdfJs(aggregatedStore, context.getSafe(context_entries_1.KeysInitQuery.dataFactory), this.bindingsFactory).queryBindings(operation, context);
        }
        if (this.sourcesState.size === 0) {
          this.getSourceCached({ url: this.firstUrl }, {}, context, aggregatedStore).catch((error) => it.destroy(error));
        }
        const dataFactory = context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const it = new MediatedLinkedRdfSourcesAsyncRdfIterator_1.MediatedLinkedRdfSourcesAsyncRdfIterator(this.cacheSize, operation, options, context, this.forceSourceType, this.firstUrl, this.maxIterators, (link, handledDatasets) => this.getSourceCached(link, handledDatasets, context, aggregatedStore), aggregatedStore, this.mediators.mediatorMetadataAccumulate, this.mediators.mediatorRdfResolveHypermediaLinks, this.mediators.mediatorRdfResolveHypermediaLinksQueue, dataFactory, algebraFactory);
        if (aggregatedStore) {
          aggregatedStore.started = true;
          const listener = () => it.kickstart();
          aggregatedStore.addIteratorCreatedListener(listener);
          it.on("end", () => aggregatedStore.removeIteratorCreatedListener(listener));
        }
        return it;
      }
      queryQuads(operation, context) {
        return new asynciterator_1.TransformIterator(async () => {
          const source = await this.getSourceCached({ url: this.firstUrl }, {}, context, this.getAggregateStore(context));
          return source.source.queryQuads(operation, context);
        });
      }
      async queryBoolean(operation, context) {
        const source = await this.getSourceCached({ url: this.firstUrl }, {}, context, this.getAggregateStore(context));
        return await source.source.queryBoolean(operation, context);
      }
      async queryVoid(operation, context) {
        const source = await this.getSourceCached({ url: this.firstUrl }, {}, context, this.getAggregateStore(context));
        return await source.source.queryVoid(operation, context);
      }
      /**
       * Resolve a source for the given URL.
       * @param link A source link.
       * @param handledDatasets A hash of dataset identifiers that have already been handled.
       * @param context The action context.
       * @param aggregatedStore An optional aggregated store.
       */
      async getSource(link, handledDatasets, context, aggregatedStore) {
        var _a, _b;
        if (link.context) {
          context = context.merge(link.context);
        }
        let url = link.url;
        let quads;
        let metadata;
        if (this.forceSourceType === "sparql" && ((_a = context.get(context_entries_1.KeysQueryOperation.querySources)) == null ? void 0 : _a.length) === 1) {
          quads = new readable_stream_1.Readable();
          quads.read = () => null;
          ({ metadata } = await this.mediators.mediatorMetadataAccumulate.mediate({ context, mode: "initialize" }));
        } else {
          try {
            const dereferenceRdfOutput = await this.mediators.mediatorDereferenceRdf.mediate({ context, url });
            url = dereferenceRdfOutput.url;
            const rdfMetadataOutput = await this.mediators.mediatorMetadata.mediate({ context, url, quads: dereferenceRdfOutput.data, triples: (_b = dereferenceRdfOutput.metadata) == null ? void 0 : _b.triples });
            rdfMetadataOutput.data.on("error", () => {
            });
            metadata = (await this.mediators.mediatorMetadataExtract.mediate({
              context,
              url,
              // The problem appears to be conflicting metadata keys here
              metadata: rdfMetadataOutput.metadata,
              headers: dereferenceRdfOutput.headers,
              requestTime: dereferenceRdfOutput.requestTime
            })).metadata;
            quads = rdfMetadataOutput.data;
            if (link.transform) {
              quads = await link.transform(quads);
            }
          } catch (error) {
            quads = new readable_stream_1.Readable();
            quads.read = () => {
              setTimeout(() => quads.emit("error", error));
              return null;
            };
            ({ metadata } = await this.mediators.mediatorMetadataAccumulate.mediate({ context, mode: "initialize" }));
            this.logWarning(`Metadata extraction for ${url} failed: ${error.message}`);
          }
        }
        aggregatedStore == null ? void 0 : aggregatedStore.setBaseMetadata(metadata, false);
        aggregatedStore == null ? void 0 : aggregatedStore.containedSources.add(link.url);
        aggregatedStore == null ? void 0 : aggregatedStore.import(quads);
        const { source, dataset } = await this.mediators.mediatorQuerySourceIdentifyHypermedia.mediate({
          context,
          forceSourceType: link.url === this.firstUrl ? this.forceSourceType : void 0,
          handledDatasets,
          metadata,
          quads,
          url
        });
        if (dataset) {
          handledDatasets[dataset] = true;
        }
        return { link, source, metadata, handledDatasets };
      }
      /**
       * Resolve a source for the given URL.
       * This will first try to retrieve the source from cache.
       * @param link A source ILink.
       * @param handledDatasets A hash of dataset identifiers that have already been handled.
       * @param context The action context.
       * @param aggregatedStore An optional aggregated store.
       */
      getSourceCached(link, handledDatasets, context, aggregatedStore) {
        let source = this.sourcesState.get(link.url);
        if (source) {
          return source;
        }
        source = this.getSource(link, handledDatasets, context, aggregatedStore);
        if (link.url === this.firstUrl || aggregatedStore === void 0) {
          this.sourcesState.set(link.url, source);
        }
        return source;
      }
      getAggregateStore(context) {
        let aggregatedStore;
        if (this.aggregateStore) {
          const aggregatedStores = context.get(context_entries_1.KeysQuerySourceIdentify.hypermediaSourcesAggregatedStores);
          if (aggregatedStores) {
            aggregatedStore = aggregatedStores.get(this.firstUrl);
            if (!aggregatedStore) {
              aggregatedStore = new StreamingStoreMetadata_1.StreamingStoreMetadata(void 0, async (accumulatedMetadata, appendingMetadata) => (await this.mediators.mediatorMetadataAccumulate.mediate({
                mode: "append",
                accumulatedMetadata,
                appendingMetadata,
                context
              })).metadata);
              aggregatedStores.set(this.firstUrl, aggregatedStore);
            }
            return aggregatedStore;
          }
        }
      }
      toString() {
        return `QuerySourceHypermedia(${this.firstUrl})`;
      }
    };
    exports.QuerySourceHypermedia = QuerySourceHypermedia;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/ActorQuerySourceIdentifyHypermedia.js
var require_ActorQuerySourceIdentifyHypermedia2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/ActorQuerySourceIdentifyHypermedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifyHypermedia = void 0;
    var bus_query_source_identify_1 = require_lib252();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var QuerySourceHypermedia_1 = require_QuerySourceHypermedia();
    var ActorQuerySourceIdentifyHypermedia = class extends bus_query_source_identify_1.ActorQuerySourceIdentify {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (typeof action.querySourceUnidentified.value !== "string") {
          return (0, core_1.failTest)(`${this.name} requires a single query source with a URL value to be present in the context.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        var _a;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        return {
          querySource: {
            source: new QuerySourceHypermedia_1.QuerySourceHypermedia(this.cacheSize, action.querySourceUnidentified.value, action.querySourceUnidentified.type, this.maxIterators, this.aggregateTraversalStore && Boolean((_a = action.querySourceUnidentified.context) == null ? void 0 : _a.get(context_entries_1.KeysQuerySourceIdentify.traverse)), {
              mediatorMetadata: this.mediatorMetadata,
              mediatorMetadataExtract: this.mediatorMetadataExtract,
              mediatorMetadataAccumulate: this.mediatorMetadataAccumulate,
              mediatorDereferenceRdf: this.mediatorDereferenceRdf,
              mediatorQuerySourceIdentifyHypermedia: this.mediatorQuerySourceIdentifyHypermedia,
              mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,
              mediatorRdfResolveHypermediaLinksQueue: this.mediatorRdfResolveHypermediaLinksQueue
            }, (warningMessage) => this.logWarn(action.context, warningMessage), dataFactory, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory)),
            context: action.querySourceUnidentified.context ?? new core_1.ActionContext()
          }
        };
      }
    };
    exports.ActorQuerySourceIdentifyHypermedia = ActorQuerySourceIdentifyHypermedia;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/index.js
var require_lib269 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-hypermedia/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifyHypermedia2(), exports);
    __exportStar(require_QuerySourceHypermedia(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-none/lib/ActorRdfJoinNone.js
var require_ActorRdfJoinNone = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-none/lib/ActorRdfJoinNone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinNone = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_metadata_1 = require_lib8();
    var asynciterator_1 = require_asynciterator();
    var ActorRdfJoinNone = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "none",
          limitEntries: 0
        });
      }
      async test(action) {
        if (action.entries.length > 0) {
          return (0, core_1.failTest)(`Actor ${this.name} can only join zero entries`);
        }
        return await this.getJoinCoefficients(action, void 0);
      }
      async getOutput(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory);
        return {
          result: {
            bindingsStream: new asynciterator_1.ArrayIterator([bindingsFactory.bindings()], { autoStart: false }),
            metadata: () => Promise.resolve({
              state: new utils_metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 1 },
              variables: []
            }),
            type: "bindings"
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        return (0, core_1.passTestWithSideData)({
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        }, sideData);
      }
    };
    exports.ActorRdfJoinNone = ActorRdfJoinNone;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-none/lib/index.js
var require_lib270 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-none/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinNone(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/ActorRdfJoinMultiBind.js
var require_ActorRdfJoinMultiBind = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/ActorRdfJoinMultiBind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiBind = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiBind = class _ActorRdfJoinMultiBind extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "bind",
          canHandleUndefs: true,
          isLeaf: false
        });
      }
      /**
       * Create a new bindings stream that takes every binding of the base stream
       * and binds it to the remaining patterns, evaluates those patterns, and emits all their bindings.
       *
       * @param bindOrder The order in which elements should be bound.
       * @param baseStream The base stream.
       * @param operations The operations to bind with each binding of the base stream.
       * @param operationBinder A callback to retrieve the bindings stream of bound operations.
       * @param optional If the original bindings should be emitted when the resulting bindings stream is empty.
       * @return {BindingsStream}
       */
      static createBindStream(bindOrder, baseStream, operations, operationBinder, optional, algebraFactory, bindingsFactory) {
        const autoStartSubBindings = bindOrder === "depth-first";
        const binder = (bindings) => {
          const subOperations = operations.map((operation) => (0, utils_query_operation_1.materializeOperation)(operation, bindings, algebraFactory, bindingsFactory, { bindFilter: true }));
          const bindingsMerger = (subBindings) => subBindings.merge(bindings);
          return new asynciterator_1.TransformIterator(async () => (await operationBinder(subOperations, bindings)).transform({ map: bindingsMerger }), { maxBufferSize: 128, autoStart: autoStartSubBindings });
        };
        switch (bindOrder) {
          case "depth-first":
            return new asynciterator_1.MultiTransformIterator(baseStream, { autoStart: false, multiTransform: binder, optional });
          case "breadth-first":
            return new asynciterator_1.UnionIterator(baseStream.transform({
              map: binder,
              optional
            }), { autoStart: false });
          default:
            throw new Error(`Received request for unknown bind order: ${bindOrder}`);
        }
      }
      async getOutput(action, sideData) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory);
        const entries3 = sideData.entriesSorted;
        this.logDebug(action.context, "First entry for Bind Join: ", () => ({
          entry: entries3[0].operation,
          cardinality: entries3[0].metadata.cardinality,
          order: entries3[0].metadata.order,
          availableOrders: entries3[0].metadata.availableOrders
        }));
        for (const [i, element] of entries3.entries()) {
          if (i !== 0) {
            element.output.bindingsStream.close();
          }
        }
        const smallestStream = entries3[0].output;
        const remainingEntries = [...entries3];
        remainingEntries.splice(0, 1);
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.joinLeftMetadata, entries3[0].metadata).set(context_entries_1.KeysQueryOperation.joinRightMetadatas, remainingEntries.map((entry) => entry.metadata));
        const bindingsStream = _ActorRdfJoinMultiBind.createBindStream(this.bindOrder, smallestStream.bindingsStream, remainingEntries.map((entry) => entry.operation), async (operations, operationBindings) => {
          const operation = operations.length === 1 ? operations[0] : (
            // Flattening should only take place if none of the input operations have associated metadata
            algebraFactory.createJoin(operations, operations.every((op) => !op.metadata))
          );
          const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation, context: subContext == null ? void 0 : subContext.set(context_entries_1.KeysQueryOperation.joinBindings, operationBindings) }));
          return output.bindingsStream;
        }, false, algebraFactory, bindingsFactory);
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: () => this.constructResultMetadata(entries3, entries3.map((entry) => entry.metadata), action.context)
          },
          physicalPlanMetadata: {
            bindIndex: sideData.entriesUnsorted.indexOf(entries3[0]),
            bindOperation: entries3[0].operation,
            bindOperationCardinality: entries3[0].metadata.cardinality,
            bindOrder: this.bindOrder
          }
        };
      }
      canBindWithOperation(operation) {
        let valid = true;
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.EXTEND]() {
            valid = false;
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.GROUP]() {
            valid = false;
            return false;
          }
        });
        return valid;
      }
      async getJoinCoefficients(action, sideData) {
        let { metadatas } = sideData;
        const entriesUnsorted = action.entries.map((entry, i) => ({ ...entry, metadata: metadatas[i] }));
        const entriesTest = await bus_rdf_join_1.ActorRdfJoin.sortJoinEntries(this.mediatorJoinEntriesSort, entriesUnsorted, action.context);
        if (entriesTest.isFailed()) {
          return entriesTest;
        }
        const entriesSorted = entriesTest.get();
        metadatas = entriesSorted.map((entry) => entry.metadata);
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        const remainingEntries = [...entriesSorted];
        const remainingRequestInitialTimes = [...requestInitialTimes];
        const remainingRequestItemTimes = [...requestItemTimes];
        remainingEntries.splice(0, 1);
        remainingRequestInitialTimes.splice(0, 1);
        remainingRequestItemTimes.splice(0, 1);
        if (remainingEntries.some((entry) => !this.canBindWithOperation(entry.operation))) {
          return (0, core_1.failTest)(`Actor ${this.name} can not bind on Extend and Group operations`);
        }
        if (remainingEntries.some((entry) => entry.operationModified)) {
          return (0, core_1.failTest)(`Actor ${this.name} can not be used over remaining entries with modified operations`);
        }
        const isRemoteAccess = requestItemTimes.some((time) => time > 0);
        if (metadatas[0].cardinality.value * this.minMaxCardinalityRatio / (isRemoteAccess ? 1 : 3) > Math.max(...metadatas.map((metadata) => metadata.cardinality.value))) {
          return (0, core_1.failTest)(`Actor ${this.name} can only run if the smallest stream is much smaller than largest stream`);
        }
        const selectivities = await Promise.all(remainingEntries.map(async (entry) => (await this.mediatorJoinSelectivity.mediate({
          entries: [entriesSorted[0], entry],
          context: action.context
        })).selectivity * this.selectivityModifier));
        const cardinalityRemaining = remainingEntries.map((entry, i) => entry.metadata.cardinality.value * selectivities[i]).reduce((sum, element) => sum + element, 0);
        const receiveInitialCostRemaining = remainingRequestInitialTimes.reduce((sum, element) => sum + element, 0);
        const receiveItemCostRemaining = remainingRequestItemTimes.reduce((sum, element) => sum + element, 0);
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value * cardinalityRemaining,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * (requestItemTimes[0] + receiveInitialCostRemaining + cardinalityRemaining * receiveItemCostRemaining)
        }, { ...sideData, entriesUnsorted, entriesSorted });
      }
    };
    exports.ActorRdfJoinMultiBind = ActorRdfJoinMultiBind;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/index.js
var require_lib271 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiBind(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-bind/lib/ActorRdfJoinOptionalBind.js
var require_ActorRdfJoinOptionalBind = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-bind/lib/ActorRdfJoinOptionalBind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinOptionalBind = void 0;
    var actor_rdf_join_inner_multi_bind_1 = require_lib271();
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinOptionalBind = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "optional",
          physicalName: "bind",
          limitEntries: 2,
          canHandleUndefs: true,
          isLeaf: false,
          requiresVariableOverlap: true
        });
      }
      async getOutput(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const bindingsFactory = await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory);
        action.entries[1].output.bindingsStream.close();
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.joinLeftMetadata, await action.entries[0].output.metadata()).set(context_entries_1.KeysQueryOperation.joinRightMetadatas, [await action.entries[1].output.metadata()]);
        const bindingsStream = actor_rdf_join_inner_multi_bind_1.ActorRdfJoinMultiBind.createBindStream(this.bindOrder, action.entries[0].output.bindingsStream, [action.entries[1].operation], async (operations, operationBindings) => {
          const operation = operations[0];
          const output = (0, utils_query_operation_1.getSafeBindings)(await this.mediatorQueryOperation.mediate({ operation, context: subContext == null ? void 0 : subContext.set(context_entries_1.KeysQueryOperation.joinBindings, operationBindings) }));
          return output.bindingsStream;
        }, true, algebraFactory, bindingsFactory);
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context, {}, true)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        const { metadatas } = sideData;
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        if (action.entries[1].operation.type === sparqlalgebrajs_1.Algebra.types.EXTEND || action.entries[1].operation.type === sparqlalgebrajs_1.Algebra.types.GROUP) {
          return (0, core_1.failTest)(`Actor ${this.name} can not bind on Extend and Group operations`);
        }
        const selectivity = (await this.mediatorJoinSelectivity.mediate({
          entries: action.entries,
          context: action.context
        })).selectivity * this.selectivityModifier;
        return (0, core_1.passTestWithSideData)({
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value * selectivity,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * (requestItemTimes[0] + requestInitialTimes[1] + selectivity * metadatas[1].cardinality.value * requestItemTimes[1])
        }, sideData);
      }
    };
    exports.ActorRdfJoinOptionalBind = ActorRdfJoinOptionalBind;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-bind/lib/index.js
var require_lib272 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-optional-bind/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinOptionalBind(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/bus-term-comparator-factory/lib/ActorTermComparatorFactory.js
var require_ActorTermComparatorFactory = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-term-comparator-factory/lib/ActorTermComparatorFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorTermComparatorFactory = void 0;
    var core_1 = require_lib();
    var ActorTermComparatorFactory = class extends core_1.Actor {
      /**
       * @param args -
       *  \ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       *  \ @defaultNested {Creation of term comparator failed} busFailMessage
       */
      constructor(args) {
        super(args);
        this.mediatorQueryOperation = args.mediatorQueryOperation;
        this.mediatorFunctionFactory = args.mediatorFunctionFactory;
        this.mediatorMergeBindingsContext = args.mediatorMergeBindingsContext;
      }
    };
    exports.ActorTermComparatorFactory = ActorTermComparatorFactory;
  }
});

// ../../lipdjs/node_modules/@comunica/bus-term-comparator-factory/lib/index.js
var require_lib273 = __commonJS({
  "../../lipdjs/node_modules/@comunica/bus-term-comparator-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorTermComparatorFactory(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/TermComparatorExpressionEvaluator.js
var require_TermComparatorExpressionEvaluator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/TermComparatorExpressionEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermComparatorExpressionEvaluator = void 0;
    var TermComparatorExpressionEvaluator = class {
      constructor(internalEvaluator, equalityFunction, lessThanFunction) {
        this.internalEvaluator = internalEvaluator;
        this.equalityFunction = equalityFunction;
        this.lessThanFunction = lessThanFunction;
        this._TERM_ORDERING_PRIORITY = {
          Variable: 0,
          BlankNode: 1,
          NamedNode: 2,
          Literal: 3,
          Quad: 4,
          DefaultGraph: 5
        };
      }
      // Determine the relative numerical order of the two given terms.
      // In accordance with https://www.w3.org/TR/sparql11-query/#modOrderBy
      orderTypes(termA, termB) {
        if (termA === termB) {
          return 0;
        }
        if (termA === void 0) {
          return -1;
        }
        if (termB === void 0) {
          return 1;
        }
        if (termA.termType !== termB.termType) {
          return this._TERM_ORDERING_PRIORITY[termA.termType] < this._TERM_ORDERING_PRIORITY[termB.termType] ? -1 : 1;
        }
        if (termA.equals(termB)) {
          return 0;
        }
        if (termA.termType === "Quad" && termB.termType === "Quad") {
          const orderSubject = this.orderTypes(termA.subject, termB.subject);
          if (orderSubject !== 0) {
            return orderSubject;
          }
          const orderPredicate = this.orderTypes(termA.predicate, termB.predicate);
          if (orderPredicate !== 0) {
            return orderPredicate;
          }
          const orderObject = this.orderTypes(termA.object, termB.object);
          if (orderObject !== 0) {
            return orderObject;
          }
          return this.orderTypes(termA.graph, termB.graph);
        }
        if (termA.termType === "Literal") {
          return this.orderLiteralTypes(termA, termB);
        }
        return this.comparePrimitives(termA.value, termB.value);
      }
      orderLiteralTypes(litA, litB) {
        const myLitA = this.internalEvaluator.transformer.transformLiteral(litA);
        const myLitB = this.internalEvaluator.transformer.transformLiteral(litB);
        try {
          if (this.equalityFunction.applyOnTerms([myLitA, myLitB], this.internalEvaluator).typedValue) {
            return 0;
          }
          if (this.lessThanFunction.applyOnTerms([myLitA, myLitB], this.internalEvaluator).typedValue) {
            return -1;
          }
          return 1;
        } catch {
          const compareType = this.comparePrimitives(myLitA.dataType, myLitB.dataType);
          if (compareType !== 0) {
            return compareType;
          }
          return this.comparePrimitives(myLitA.str(), myLitB.str());
        }
      }
      comparePrimitives(valueA, valueB) {
        return valueA === valueB ? 0 : valueA < valueB ? -1 : 1;
      }
    };
    exports.TermComparatorExpressionEvaluator = TermComparatorExpressionEvaluator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/ActorTermComparatorFactoryExpressionEvaluator.js
var require_ActorTermComparatorFactoryExpressionEvaluator = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/ActorTermComparatorFactoryExpressionEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorTermComparatorFactoryExpressionEvaluator = void 0;
    var InternalEvaluator_1 = require_InternalEvaluator();
    var bus_term_comparator_factory_1 = require_lib273();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var Eval = require_lib6();
    var TermComparatorExpressionEvaluator_1 = require_TermComparatorExpressionEvaluator();
    var ActorTermComparatorFactoryExpressionEvaluator = class extends bus_term_comparator_factory_1.ActorTermComparatorFactory {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      /**
       * Context item superTypeProvider can be expected here
       * @param context IActionTermComparatorFactory
       * @param context.context IActionContext
       */
      async run({ context }) {
        context = Eval.prepareEvaluatorActionContext(context);
        return new TermComparatorExpressionEvaluator_1.TermComparatorExpressionEvaluator(new InternalEvaluator_1.InternalEvaluator(context, this.mediatorFunctionFactory, this.mediatorQueryOperation, await utils_bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context, context.getSafe(context_entries_1.KeysInitQuery.dataFactory))), await this.mediatorFunctionFactory.mediate({ functionName: Eval.SparqlOperator.EQUAL, context, requireTermExpression: true }), await this.mediatorFunctionFactory.mediate({ functionName: Eval.SparqlOperator.LT, context, requireTermExpression: true }));
      }
    };
    exports.ActorTermComparatorFactoryExpressionEvaluator = ActorTermComparatorFactoryExpressionEvaluator;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/index.js
var require_lib274 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-term-comparator-factory-expression-evaluator/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorTermComparatorFactoryExpressionEvaluator(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest-filter-bindings/lib/ActorRdfJoinMultiSmallestFilterBindings.js
var require_ActorRdfJoinMultiSmallestFilterBindings = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest-filter-bindings/lib/ActorRdfJoinMultiSmallestFilterBindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiSmallestFilterBindings = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_bindings_factory_1 = require_lib187();
    var utils_iterator_1 = require_lib179();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiSmallestFilterBindings = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "multi-smallest-filter-bindings",
          limitEntries: 2,
          limitEntriesMin: true,
          isLeaf: false
        });
      }
      /**
       * Order the given join entries using the join-entries-sort bus.
       * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
       * @param context The action context.
       * @return {IJoinEntryWithMetadata[]} The sorted join entries.
       */
      async sortJoinEntries(entries3, context) {
        let { entries: entriesSorted } = await this.mediatorJoinEntriesSort.mediate({ entries: entries3, context });
        entriesSorted = entriesSorted.sort((entryLeft, entryRight) => {
          if (entryLeft.operationModified && !entryRight.operationModified) {
            return -1;
          }
          return 0;
        });
        const first3 = entriesSorted.splice(0, 1)[0];
        let second;
        let secondIndex = -1;
        let secondSharedVariables = 0;
        for (const [i, entry] of entriesSorted.entries()) {
          const sharedVariables = first3.metadata.variables.filter((variableFirst) => entry.metadata.variables.some((variableSecond) => variableFirst.variable.equals(variableSecond.variable))).length;
          if (!second || (sharedVariables > secondSharedVariables || sharedVariables === secondSharedVariables && (entry.metadata.variables.length < second.metadata.variables.length || entry.metadata.variables.length === second.metadata.variables.length && entry.metadata.cardinality.value < second.metadata.cardinality.value))) {
            second = entry;
            secondIndex = i;
            secondSharedVariables = sharedVariables;
          }
        }
        if (secondSharedVariables === 0) {
          return (0, core_1.failTest)(`Actor ${this.name} can only join with common variables`);
        }
        const remaining = entriesSorted;
        remaining.splice(secondIndex, 1);
        return (0, core_1.passTest)({ first: first3, second, remaining });
      }
      async getOutput(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const entriesUnsorted = await bus_rdf_join_1.ActorRdfJoin.getEntriesWithMetadatas([...action.entries]);
        const { first: first3, second: secondIn, remaining: remainingIn } = (await this.sortJoinEntries(entriesUnsorted, action.context)).getOrThrow();
        const smallestStream1 = first3.output.bindingsStream;
        first3.output.bindingsStream = smallestStream1.clone();
        const commonVariables = first3.metadata.variables.filter((variableFirst) => secondIn.metadata.variables.some((variableSecond) => variableFirst.variable.equals(variableSecond.variable)));
        const hashes = {};
        const smallestStream1Projected = smallestStream1.clone().map((binding) => binding.filter((value, key) => commonVariables.some((commonVariable) => commonVariable.variable.equals(key)))).filter((binding) => {
          const hash2 = (0, utils_bindings_factory_1.bindingsToString)(binding);
          return !(hash2 in hashes) && (hashes[hash2] = true);
        });
        const chunkedStreams = new utils_iterator_1.ChunkedIterator(smallestStream1Projected, this.blockSize, { autoStart: false });
        const sourceWrapper = (0, utils_query_operation_1.getOperationSource)(secondIn.operation);
        const secondStream = new asynciterator_1.UnionIterator(chunkedStreams.map((chunk) => sourceWrapper.source.queryBindings(secondIn.operation, sourceWrapper.context ? action.context.merge(sourceWrapper.context) : action.context, { filterBindings: { bindings: chunk, metadata: first3.metadata } })));
        const second = {
          output: {
            type: "bindings",
            bindingsStream: secondStream,
            metadata: secondIn.output.metadata
          },
          operation: secondIn.operation,
          operationModified: true
        };
        secondIn.output.bindingsStream.destroy();
        const joinedEntry = {
          output: (0, utils_query_operation_1.getSafeBindings)(await this.mediatorJoin.mediate({
            type: action.type,
            entries: [first3, second],
            context: action.context.set(context_entries_1.KeysRdfJoin.lastPhysicalJoin, this.physicalName)
          })),
          operation: algebraFactory.createJoin([first3.operation, second.operation], false),
          operationModified: true
        };
        const remaining = remainingIn;
        remaining.unshift(joinedEntry);
        return {
          result: await this.mediatorJoin.mediate({
            type: action.type,
            entries: remaining,
            context: action.context
          }),
          physicalPlanMetadata: {
            firstIndex: entriesUnsorted.indexOf(first3),
            secondIndex: entriesUnsorted.indexOf(secondIn)
          }
        };
      }
      async getJoinCoefficients(action, sideData) {
        let { metadatas } = sideData;
        if (action.context.get(context_entries_1.KeysRdfJoin.lastPhysicalJoin) === this.physicalName) {
          return (0, core_1.failTest)(`Actor ${this.name} can not be called recursively`);
        }
        metadatas = [...metadatas];
        const sortedResult = await this.sortJoinEntries(action.entries.map((entry, i) => ({ ...entry, metadata: metadatas[i] })), action.context);
        if (sortedResult.isFailed()) {
          return sortedResult;
        }
        const { first: first3, second, remaining } = sortedResult.get();
        const sourceWrapper = (0, utils_query_operation_1.getOperationSource)(second.operation);
        if (!sourceWrapper) {
          return (0, core_1.failTest)(`Actor ${this.name} can only process if entries[1] has a source`);
        }
        const testingOperation = second.operation;
        const selectorShape = await sourceWrapper.source.getSelectorShape(action.context);
        if (!(0, utils_query_operation_1.doesShapeAcceptOperation)(selectorShape, testingOperation, { filterBindings: true })) {
          return (0, core_1.failTest)(`Actor ${this.name} can only process if entries[1] accept filterBindings`);
        }
        metadatas = [first3.metadata, second.metadata, ...remaining.map((remain) => remain.metadata)];
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        const { selectivity } = await this.mediatorJoinSelectivity.mediate({
          entries: [first3, second],
          context: action.context
        });
        const cardinalityRemaining = remaining.reduce((mul, remain) => mul * remain.metadata.cardinality.value * this.selectivityModifier, 1);
        return (0, core_1.passTestWithSideData)({
          iterations: selectivity * this.selectivityModifier * second.metadata.cardinality.value * cardinalityRemaining,
          persistedItems: first3.metadata.cardinality.value,
          blockingItems: first3.metadata.cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + cardinalityRemaining * requestItemTimes[1]
        }, sideData);
      }
    };
    exports.ActorRdfJoinMultiSmallestFilterBindings = ActorRdfJoinMultiSmallestFilterBindings;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest-filter-bindings/lib/index.js
var require_lib275 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-smallest-filter-bindings/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiSmallestFilterBindings(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-logical/lib/ActorQueryProcessExplainLogical.js
var require_ActorQueryProcessExplainLogical = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-logical/lib/ActorQueryProcessExplainLogical.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryProcessExplainLogical = void 0;
    var bus_query_process_1 = require_lib267();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorQueryProcessExplainLogical = class extends bus_query_process_1.ActorQueryProcess {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if ((action.context.get(context_entries_1.KeysInitQuery.explain) ?? action.context.get(new core_1.ActionContextKey("explain"))) !== "logical") {
          return (0, core_1.failTest)(`${this.name} can only explain in 'logical' mode.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let { operation, context } = await this.queryProcessor.parse(action.query, action.context);
        ({ operation, context } = await this.queryProcessor.optimize(operation, context));
        return {
          result: {
            explain: true,
            type: "logical",
            data: operation
          }
        };
      }
    };
    exports.ActorQueryProcessExplainLogical = ActorQueryProcessExplainLogical;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-logical/lib/index.js
var require_lib276 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-logical/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryProcessExplainLogical(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-parsed/lib/ActorQueryProcessExplainParsed.js
var require_ActorQueryProcessExplainParsed = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-parsed/lib/ActorQueryProcessExplainParsed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryProcessExplainParsed = void 0;
    var bus_query_process_1 = require_lib267();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorQueryProcessExplainParsed = class extends bus_query_process_1.ActorQueryProcess {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if ((action.context.get(context_entries_1.KeysInitQuery.explain) ?? action.context.get(new core_1.ActionContextKey("explain"))) !== "parsed") {
          return (0, core_1.failTest)(`${this.name} can only explain in 'parsed' mode.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const { operation } = await this.queryProcessor.parse(action.query, action.context);
        return {
          result: {
            explain: true,
            type: "parsed",
            data: operation
          }
        };
      }
    };
    exports.ActorQueryProcessExplainParsed = ActorQueryProcessExplainParsed;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-parsed/lib/index.js
var require_lib277 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-parsed/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryProcessExplainParsed(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/MemoryPhysicalQueryPlanLogger.js
var require_MemoryPhysicalQueryPlanLogger = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/MemoryPhysicalQueryPlanLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numberToString = exports.MemoryPhysicalQueryPlanLogger = void 0;
    var rdf_string_1 = require_rdf_string();
    var MemoryPhysicalQueryPlanLogger = class {
      constructor() {
        this.planNodes = /* @__PURE__ */ new Map();
      }
      logOperation(logicalOperator, physicalOperator, node, parentNode, actor, metadata) {
        const planNode = {
          actor,
          logicalOperator,
          physicalOperator,
          rawNode: node,
          children: [],
          metadata
        };
        this.planNodes.set(node, planNode);
        if (this.rootNode) {
          if (!parentNode) {
            throw new Error(`Detected more than one parent-less node`);
          }
          const planParentNode = this.planNodes.get(parentNode);
          if (!planParentNode) {
            throw new Error(`Could not find parent node`);
          }
          planParentNode.children.push(planNode);
        } else {
          if (parentNode) {
            throw new Error(`No root node has been set yet, while a parent is being referenced`);
          }
          this.rootNode = planNode;
        }
      }
      stashChildren(node, filter3) {
        const planNode = this.planNodes.get(node);
        if (!planNode) {
          throw new Error(`Could not find plan node`);
        }
        planNode.children = filter3 ? planNode.children.filter(filter3) : [];
      }
      unstashChild(node, parentNode) {
        const planNode = this.planNodes.get(node);
        if (planNode) {
          const planParentNode = this.planNodes.get(parentNode);
          if (!planParentNode) {
            throw new Error(`Could not find plan parent node`);
          }
          planParentNode.children.push(planNode);
        }
      }
      appendMetadata(node, metadata) {
        const planNode = this.planNodes.get(node);
        if (planNode) {
          planNode.metadata = {
            ...planNode.metadata,
            ...metadata
          };
        }
      }
      toJson() {
        return this.rootNode ? this.planNodeToJson(this.rootNode) : {};
      }
      planNodeToJson(node) {
        var _a;
        const data = {
          logical: node.logicalOperator,
          physical: node.physicalOperator,
          ...this.getLogicalMetadata(node.rawNode),
          ...this.compactMetadata(node.metadata)
        };
        if (node.children.length > 0) {
          data.children = node.children.map((child) => this.planNodeToJson(child));
        }
        if (data.physical === "bind" && data.children) {
          const childrenGrouped = {};
          for (const child of data.children) {
            const lastSubChild = ((_a = child.children) == null ? void 0 : _a.at(-1)) ?? child;
            const key = this.getPlanHash(lastSubChild).join(",");
            if (!childrenGrouped[key]) {
              childrenGrouped[key] = [];
            }
            childrenGrouped[key].push(child);
          }
          const childrenCompact = [];
          for (const children of Object.values(childrenGrouped)) {
            childrenCompact.push({
              occurrences: children.length,
              firstOccurrence: children[0]
            });
          }
          data.childrenCompact = childrenCompact;
          delete data.children;
        }
        return data;
      }
      getPlanHash(node) {
        let entries3 = [`${node.logical}-${node.physical}`];
        if (node.children) {
          entries3 = [
            ...entries3,
            ...node.children.flatMap((child) => this.getPlanHash(child))
          ];
        } else if (node.childrenCompact) {
          entries3 = [
            ...entries3,
            ...node.childrenCompact.flatMap((child) => this.getPlanHash(child.firstOccurrence))
          ];
        }
        return entries3;
      }
      compactMetadata(metadata) {
        return Object.fromEntries(Object.entries(metadata).map(([key, value]) => [key, this.compactMetadataValue(value)]));
      }
      compactMetadataValue(value) {
        return value && typeof value === "object" && "termType" in value ? this.getLogicalMetadata(value) : value;
      }
      getLogicalMetadata(rawNode) {
        var _a;
        const data = {};
        if ("type" in rawNode) {
          const operation = rawNode;
          if ((_a = operation.metadata) == null ? void 0 : _a.scopedSource) {
            data.source = operation.metadata.scopedSource.source.toString();
          }
          switch (operation.type) {
            case "pattern":
              data.pattern = this.quadToString(operation);
              break;
            case "project":
              data.variables = operation.variables.map((variable) => variable.value);
              break;
          }
        }
        return data;
      }
      quadToString(quad) {
        return `${(0, rdf_string_1.termToString)(quad.subject)} ${(0, rdf_string_1.termToString)(quad.predicate)} ${(0, rdf_string_1.termToString)(quad.object)}${quad.graph.termType === "DefaultGraph" ? "" : ` ${(0, rdf_string_1.termToString)(quad.graph)}`}`;
      }
      toCompactString() {
        const node = this.toJson();
        const lines = [];
        const sources = /* @__PURE__ */ new Map();
        if ("logical" in node) {
          this.nodeToCompactString(lines, sources, "", node);
        } else {
          lines.push("Empty");
        }
        if (sources.size > 0) {
          lines.push("");
          lines.push("sources:");
          for (const [key, id] of sources.entries()) {
            lines.push(`  ${id}: ${key}`);
          }
        }
        return lines.join("\n");
      }
      nodeToCompactString(lines, sources, indent2, node, metadata) {
        let sourceId;
        if (node.source) {
          sourceId = sources.get(node.source);
          if (sourceId === void 0) {
            sourceId = sources.size;
            sources.set(node.source, sourceId);
          }
        }
        lines.push(`${indent2}${node.logical}${node.physical ? `(${node.physical})` : ""}${node.pattern ? ` (${node.pattern})` : ""}${node.variables ? ` (${node.variables.join(",")})` : ""}${node.bindOperation ? ` bindOperation:(${node.bindOperation.pattern}) bindCardEst:${node.bindOperationCardinality.type === "estimate" ? "~" : ""}${numberToString(node.bindOperationCardinality.value)}` : ""}${node.cardinality ? ` cardEst:${node.cardinality.type === "estimate" ? "~" : ""}${numberToString(node.cardinality.value)}` : ""}${node.source ? ` src:${sourceId}` : ""}${node.cardinalityReal ? ` cardReal:${node.cardinalityReal}` : ""}${node.timeSelf ? ` timeSelf:${numberToString(node.timeSelf)}ms` : ""}${node.timeLife ? ` timeLife:${numberToString(node.timeLife)}ms` : ""}${metadata ? ` ${metadata}` : ""}`);
        for (const child of node.children ?? []) {
          this.nodeToCompactString(lines, sources, `${indent2}  `, child);
        }
        for (const child of node.childrenCompact ?? []) {
          this.nodeToCompactString(lines, sources, `${indent2}  `, child.firstOccurrence, `compacted-occurrences:${child.occurrences}`);
        }
      }
    };
    exports.MemoryPhysicalQueryPlanLogger = MemoryPhysicalQueryPlanLogger;
    function numberToString(value) {
      return value.toLocaleString("en-US", { minimumFractionDigits: 0, maximumFractionDigits: 3 });
    }
    exports.numberToString = numberToString;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/ActorQueryProcessExplainPhysical.js
var require_ActorQueryProcessExplainPhysical = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/ActorQueryProcessExplainPhysical.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryProcessExplainPhysical = void 0;
    var bus_query_process_1 = require_lib267();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var MemoryPhysicalQueryPlanLogger_1 = require_MemoryPhysicalQueryPlanLogger();
    var ActorQueryProcessExplainPhysical = class extends bus_query_process_1.ActorQueryProcess {
      constructor(args) {
        super(args);
      }
      async test(action) {
        const mode = action.context.get(context_entries_1.KeysInitQuery.explain) ?? action.context.get(new core_1.ActionContextKey("explain"));
        if (mode !== "physical" && mode !== "physical-json") {
          return (0, core_1.failTest)(`${this.name} can only explain in 'physical' or 'physical-json' mode.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        let { operation, context } = await this.queryProcessor.parse(action.query, action.context);
        ({ operation, context } = await this.queryProcessor.optimize(operation, context));
        const physicalQueryPlanLogger = new MemoryPhysicalQueryPlanLogger_1.MemoryPhysicalQueryPlanLogger();
        context = context.set(context_entries_1.KeysInitQuery.physicalQueryPlanLogger, physicalQueryPlanLogger);
        const output = await this.queryProcessor.evaluate(operation, context);
        switch (output.type) {
          case "bindings":
            await output.bindingsStream.toArray();
            break;
          case "quads":
            await output.quadStream.toArray();
            break;
          case "boolean":
            await output.execute();
            break;
          case "void":
            await output.execute();
            break;
        }
        const mode = action.context.get(context_entries_1.KeysInitQuery.explain) ?? action.context.getSafe(new core_1.ActionContextKey("explain"));
        return {
          result: {
            explain: true,
            type: mode,
            data: mode === "physical" ? physicalQueryPlanLogger.toCompactString() : physicalQueryPlanLogger.toJson()
          }
        };
      }
    };
    exports.ActorQueryProcessExplainPhysical = ActorQueryProcessExplainPhysical;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/index.js
var require_lib278 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-process-explain-physical/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryProcessExplainPhysical(), exports);
    __exportStar(require_MemoryPhysicalQueryPlanLogger(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-prune-empty-source-operations/lib/ActorOptimizeQueryOperationPruneEmptySourceOperations.js
var require_ActorOptimizeQueryOperationPruneEmptySourceOperations = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-prune-empty-source-operations/lib/ActorOptimizeQueryOperationPruneEmptySourceOperations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationPruneEmptySourceOperations = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationPruneEmptySourceOperations = class _ActorOptimizeQueryOperationPruneEmptySourceOperations extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if ((0, utils_query_operation_1.getOperationSource)(action.operation)) {
          return (0, core_1.failTest)(`Actor ${this.name} does not work with top-level operation sources.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        let operation = action.operation;
        const collectedOperations = [];
        const self2 = this;
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.UNION](subOperation) {
            self2.collectMultiOperationInputs(subOperation.input, collectedOperations, sparqlalgebrajs_1.Algebra.types.PATTERN);
            return true;
          },
          [sparqlalgebrajs_1.Algebra.types.ALT](subOperation) {
            self2.collectMultiOperationInputs(subOperation.input, collectedOperations, sparqlalgebrajs_1.Algebra.types.LINK);
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.SERVICE]() {
            return false;
          }
        });
        const emptyOperations = /* @__PURE__ */ new Set();
        await Promise.all(collectedOperations.map(async (collectedOperation) => {
          const checkOperation = collectedOperation.type === "link" ? algebraFactory.createPattern(dataFactory.variable("s"), collectedOperation.iri, dataFactory.variable("o")) : collectedOperation;
          if (!await this.hasSourceResults(algebraFactory, (0, utils_query_operation_1.getOperationSource)(collectedOperation), checkOperation, action.context)) {
            emptyOperations.add(collectedOperation);
          }
        }));
        if (emptyOperations.size > 0) {
          this.logDebug(action.context, `Pruning ${emptyOperations.size} source-specific operations`);
          operation = sparqlalgebrajs_1.Util.mapOperation(operation, {
            [sparqlalgebrajs_1.Algebra.types.UNION](subOperation, factory) {
              return self2.mapMultiOperation(subOperation, emptyOperations, (children) => factory.createUnion(children));
            },
            [sparqlalgebrajs_1.Algebra.types.ALT](subOperation, factory) {
              return self2.mapMultiOperation(subOperation, emptyOperations, (children) => factory.createAlt(children));
            }
          }, algebraFactory);
          operation = sparqlalgebrajs_1.Util.mapOperation(operation, {
            [sparqlalgebrajs_1.Algebra.types.PROJECT](subOperation, factory) {
              if (_ActorOptimizeQueryOperationPruneEmptySourceOperations.hasEmptyOperation(subOperation)) {
                return {
                  recurse: false,
                  result: factory.createUnion([])
                };
              }
              return {
                recurse: true,
                result: subOperation
              };
            },
            [sparqlalgebrajs_1.Algebra.types.LEFT_JOIN](subOperation) {
              if (_ActorOptimizeQueryOperationPruneEmptySourceOperations.hasEmptyOperation(subOperation.input[1])) {
                return {
                  recurse: true,
                  result: subOperation.input[0]
                };
              }
              return {
                recurse: true,
                result: subOperation
              };
            }
          }, algebraFactory);
        }
        return { operation, context: action.context };
      }
      static hasEmptyOperation(operation) {
        let emptyOperation = false;
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.UNION](subOperation) {
            if (subOperation.input.every((subSubOperation) => _ActorOptimizeQueryOperationPruneEmptySourceOperations.hasEmptyOperation(subSubOperation))) {
              emptyOperation = true;
            }
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.ALT](subOperation) {
            if (subOperation.input.length === 0) {
              emptyOperation = true;
            }
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.LEFT_JOIN](subOperation) {
            if (_ActorOptimizeQueryOperationPruneEmptySourceOperations.hasEmptyOperation(subOperation.input[0])) {
              emptyOperation = true;
            }
            return false;
          }
        });
        return emptyOperation;
      }
      collectMultiOperationInputs(inputs, collectedOperations, inputType) {
        for (const input of inputs) {
          if ((0, utils_query_operation_1.getOperationSource)(input) && input.type === inputType) {
            collectedOperations.push(input);
          }
        }
      }
      mapMultiOperation(operation, emptyOperations, multiOperationFactory) {
        const nonEmptyInputs = operation.input.filter((input) => !emptyOperations.has(input));
        if (nonEmptyInputs.length === operation.input.length) {
          return { result: operation, recurse: true };
        }
        if (nonEmptyInputs.length === 0) {
          return { result: multiOperationFactory([]), recurse: false };
        }
        if (nonEmptyInputs.length === 1) {
          return { result: nonEmptyInputs[0], recurse: true };
        }
        return { result: multiOperationFactory(nonEmptyInputs), recurse: true };
      }
      /**
       * Check if the given query operation will produce at least one result in the given source.
       * @param algebraFactory The algebra factory.
       * @param source A query source.
       * @param input A query operation.
       * @param context The query context.
       */
      async hasSourceResults(algebraFactory, source, input, context) {
        var _a;
        if (((_a = source.context) == null ? void 0 : _a.get(context_entries_1.KeysQuerySourceIdentify.traverse)) ?? context.get(context_entries_1.KeysQuerySourceIdentify.traverse)) {
          return true;
        }
        if (this.useAskIfSupported) {
          const askOperation = algebraFactory.createAsk(input);
          if ((0, utils_query_operation_1.doesShapeAcceptOperation)(await source.source.getSelectorShape(context), askOperation)) {
            return source.source.queryBoolean(askOperation, context);
          }
        }
        const bindingsStream = source.source.queryBindings(input, context);
        return new Promise((resolve, reject) => {
          bindingsStream.on("error", reject);
          bindingsStream.getProperty("metadata", (metadata) => {
            bindingsStream.destroy();
            resolve(metadata.cardinality.value > 0);
          });
        });
      }
    };
    exports.ActorOptimizeQueryOperationPruneEmptySourceOperations = ActorOptimizeQueryOperationPruneEmptySourceOperations;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-prune-empty-source-operations/lib/index.js
var require_lib279 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-prune-empty-source-operations/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationPruneEmptySourceOperations(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-retry/lib/ActorHttpRetry.js
var require_ActorHttpRetry = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-retry/lib/ActorHttpRetry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpRetry = void 0;
    var bus_http_1 = require_lib172();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var ActorHttpRetry = class _ActorHttpRetry extends bus_http_1.ActorHttp {
      constructor(args) {
        super(args);
        this.activeDelays = {};
        this.httpInvalidator = args.httpInvalidator;
        this.httpInvalidator.addInvalidateListener((action) => this.handleHttpInvalidateEvent(action));
        this.mediatorHttp = args.mediatorHttp;
      }
      async test(action) {
        if (action.context.has(_ActorHttpRetry.keyWrapped)) {
          return (0, core_1.failTest)(`${this.name} can only wrap a request once`);
        }
        const retryCount = action.context.get(context_entries_1.KeysHttp.httpRetryCount);
        if (!retryCount || retryCount < 1) {
          return (0, core_1.failTest)(`${this.name} requires a retry count greater than zero to function`);
        }
        return (0, core_1.passTest)({ time: 0 });
      }
      async run(action) {
        const url = bus_http_1.ActorHttp.getInputUrl(action.input);
        const attemptLimit = action.context.getSafe(context_entries_1.KeysHttp.httpRetryCount) + 1;
        const retryDelayFallback = action.context.get(context_entries_1.KeysHttp.httpRetryDelayFallback) ?? 0;
        const retryDelayLimit = action.context.get(context_entries_1.KeysHttp.httpRetryDelayLimit);
        const retryStatusCodes = action.context.get(context_entries_1.KeysHttp.httpRetryStatusCodes);
        for (let attempt = 1; attempt <= attemptLimit; attempt++) {
          const retryDelay = url.host in this.activeDelays ? this.activeDelays[url.host].date.getTime() - Date.now() : retryDelayFallback;
          if (retryDelayLimit && retryDelay > retryDelayLimit) {
            this.logWarn(action.context, "Requested delay exceeds the limit", () => ({
              url: url.href,
              delay: retryDelay,
              delayDate: this.activeDelays[url.host].date.toISOString(),
              delayLimit: retryDelayLimit,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            break;
          } else if (retryDelay > 0 && attempt > 1) {
            this.logDebug(action.context, "Delaying request", () => ({
              url: url.href,
              delay: retryDelay,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            await _ActorHttpRetry.sleep(retryDelay);
          }
          const response = await this.mediatorHttp.mediate({
            ...action,
            context: action.context.set(_ActorHttpRetry.keyWrapped, true)
          });
          if (response.ok) {
            return response;
          }
          if (retryStatusCodes && retryStatusCodes.includes(response.status)) {
            this.logDebug(action.context, "Status code in force retry list, forcing retry", () => ({
              url: url.href,
              status: response.status,
              statusText: response.statusText,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            continue;
          }
          if (response.status === 504) {
            this.logDebug(action.context, "Received proxy timeout", () => ({
              url: url.href,
              status: response.status,
              statusText: response.statusText,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            continue;
          }
          if (
            // Status codes 429 (Too Many Requests) and 503 (Temporarily Unavailable) can have Retry-After
            response.status === 429 || response.status === 503 || // DBPedia SPARQL endpoint uses 405 instead of 429 and sends a Retry-After with it to indicate rate limits
            response.status === 405 && response.headers.has("retry-after")
          ) {
            const retryAfterHeader = response.headers.get("retry-after");
            if (retryAfterHeader) {
              const retryAfter = _ActorHttpRetry.parseRetryAfterHeader(retryAfterHeader);
              if (retryAfter) {
                if (url.host in this.activeDelays) {
                  clearTimeout(this.activeDelays[url.host].timeout);
                }
                this.activeDelays[url.host] = {
                  date: retryAfter,
                  timeout: setTimeout(() => delete this.activeDelays[url.host], retryAfter.getTime() - Date.now())
                };
              } else {
                this.logDebug(action.context, "Invalid Retry-After header value from server", () => ({
                  url: url.href,
                  status: response.status,
                  statusText: response.statusText,
                  retryAfterHeader,
                  currentAttempt: `${attempt} / ${attemptLimit}`
                }));
              }
            }
            this.logDebug(action.context, "Server temporarily unavailable", () => ({
              url: url.href,
              status: response.status,
              statusText: response.statusText,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            continue;
          }
          if (response.status >= 400 && response.status < 500) {
            this.logDebug(action.context, "Server reported client-side error", () => ({
              url: url.href,
              status: response.status,
              statusText: response.statusText,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            break;
          }
          if (response.status >= 500 && response.status < 600) {
            this.logDebug(action.context, "Server-side error encountered, terminating", () => ({
              url: url.href,
              status: response.status,
              statusText: response.statusText,
              currentAttempt: `${attempt} / ${attemptLimit}`
            }));
            break;
          }
          this.logDebug(action.context, "Request failed", () => ({
            url: url.href,
            status: response.status,
            statusText: response.statusText,
            currentAttempt: `${attempt} / ${attemptLimit}`
          }));
        }
        throw new Error(`Request failed: ${url.href}`);
      }
      /**
       * Sleeps for the specified amount of time, using a timeout
       * @param {number} ms The amount of milliseconds to sleep
       */
      static async sleep(ms) {
        if (ms > 0) {
          await new Promise((resolve) => setTimeout(resolve, ms));
        }
      }
      /**
       * Parses a Retry-After HTTP header value following the specification:
       * https://httpwg.org/specs/rfc9110.html#field.retry-after
       * @param {string} retryAfter The raw header value as string
       * @returns The parsed Date object, or undefined in case of invalid header value
       */
      static parseRetryAfterHeader(retryAfter) {
        if (_ActorHttpRetry.numberRegex.test(retryAfter)) {
          return new Date(Date.now() + Number.parseInt(retryAfter, 10) * 1e3);
        }
        if (_ActorHttpRetry.dateRegex.test(retryAfter)) {
          return new Date(retryAfter);
        }
      }
      /**
       * Handles HTTP cache invalidation events.
       * @param {IActionHttpInvalidate} action The invalidation action
       */
      handleHttpInvalidateEvent(action) {
        const invalidatedHost = action.url ? new URL(action.url).host : void 0;
        for (const host of Object.keys(this.activeDelays)) {
          if (!invalidatedHost || host === invalidatedHost) {
            clearTimeout(this.activeDelays[host].timeout);
            delete this.activeDelays[host];
          }
        }
      }
    };
    exports.ActorHttpRetry = ActorHttpRetry;
    ActorHttpRetry.dateRegex = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), [0-9]{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT$/u;
    ActorHttpRetry.numberRegex = /^[0-9]+$/u;
    ActorHttpRetry.keyWrapped = new core_1.ActionContextKey("urn:comunica:actor-http-retry#wrapped");
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-retry/lib/index.js
var require_lib280 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-retry/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpRetry(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-limit-rate/lib/ActorHttpLimitRate.js
var require_ActorHttpLimitRate = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-limit-rate/lib/ActorHttpLimitRate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpLimitRate = void 0;
    var bus_http_1 = require_lib172();
    var core_1 = require_lib();
    var ActorHttpLimitRate = class _ActorHttpLimitRate extends bus_http_1.ActorHttp {
      constructor(args) {
        super(args);
        this.mediatorHttp = args.mediatorHttp;
        this.httpInvalidator = args.httpInvalidator;
        this.httpInvalidator.addInvalidateListener((action) => this.handleHttpInvalidateEvent(action));
        this.correctionMultiplier = args.correctionMultiplier;
        this.failureMultiplier = args.failureMultiplier;
        this.limitByDefault = args.limitByDefault;
        this.allowOverlap = args.allowOverlap;
        this.hostData = /* @__PURE__ */ new Map();
      }
      async test(action) {
        if (action.context.has(_ActorHttpLimitRate.keyWrapped)) {
          return (0, core_1.failTest)(`${this.name} can only wrap a request once`);
        }
        return (0, core_1.passTest)({ time: 0 });
      }
      async run(action) {
        const requestUrl = bus_http_1.ActorHttp.getInputUrl(action.input);
        let requestHostData = this.hostData.get(requestUrl.host);
        if (!requestHostData) {
          requestHostData = {
            latestRequestTimestamp: 0,
            rateLimited: this.limitByDefault,
            requestInterval: Number.NEGATIVE_INFINITY
          };
          this.hostData.set(requestUrl.host, requestHostData);
        }
        const currentTimestamp = Date.now();
        let currentRequestDelay = 0;
        if (requestHostData.rateLimited) {
          currentRequestDelay = Math.max(0, requestHostData.latestRequestTimestamp + requestHostData.requestInterval - currentTimestamp);
        }
        requestHostData.latestRequestTimestamp = currentTimestamp + (this.allowOverlap ? 0 : 1) * currentRequestDelay;
        if (currentRequestDelay > 0) {
          this.logDebug(action.context, "Delaying request", () => ({
            url: requestUrl.href,
            requestInterval: requestHostData.requestInterval,
            currentDelay: currentRequestDelay
          }));
          await new Promise((resolve) => setTimeout(resolve, currentRequestDelay));
        }
        const registerCompletedRequest = (success) => {
          const requestDuration = (success ? 1 : this.failureMultiplier) * (Date.now() - currentTimestamp - currentRequestDelay);
          if (requestHostData.requestInterval < 0) {
            requestHostData.requestInterval = Math.round(requestDuration * this.correctionMultiplier);
          } else {
            requestHostData.requestInterval += Math.round(this.correctionMultiplier * (requestDuration - requestHostData.requestInterval));
          }
          if (!success && !requestHostData.rateLimited) {
            this.logDebug(action.context, "Marking host as rate-limited", () => ({
              host: requestUrl.host
            }));
            requestHostData.rateLimited = true;
          }
        };
        try {
          const response = await this.mediatorHttp.mediate({
            ...action,
            context: action.context.set(_ActorHttpLimitRate.keyWrapped, true)
          });
          registerCompletedRequest(response.ok);
          return response;
        } catch (error) {
          registerCompletedRequest(false);
          throw error;
        }
      }
      /**
       * Handles HTTP cache invalidation events.
       * @param {IActionHttpInvalidate} action The invalidation action
       */
      handleHttpInvalidateEvent(action) {
        if (action.url) {
          const invalidatedHost = new URL(action.url).host;
          this.hostData.delete(invalidatedHost);
        } else {
          this.hostData.clear();
        }
      }
    };
    exports.ActorHttpLimitRate = ActorHttpLimitRate;
    ActorHttpLimitRate.keyWrapped = new core_1.ActionContextKey("urn:comunica:actor-http-limit-rate#wrapped");
  }
});

// ../../lipdjs/node_modules/@comunica/actor-http-limit-rate/lib/index.js
var require_lib281 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-http-limit-rate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpLimitRate(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-serialized/lib/ActorQuerySourceIdentifySerialized.js
var require_ActorQuerySourceIdentifySerialized = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-serialized/lib/ActorQuerySourceIdentifySerialized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQuerySourceIdentifySerialized = void 0;
    var bus_query_source_identify_1 = require_lib252();
    var core_1 = require_lib();
    var rdf_store_stream_1 = require_rdf_store_stream();
    var readable_stream_1 = require_browser2();
    var ActorQuerySourceIdentifySerialized = class extends bus_query_source_identify_1.ActorQuerySourceIdentify {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (!this.isStringSource(action.querySourceUnidentified)) {
          return (0, core_1.failTest)(`${this.name} requires a single query source with serialized type to be present in the context.`);
        }
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        return await this.mediatorQuerySourceIdentify.mediate({
          querySourceUnidentified: {
            type: "rdfjs",
            value: await this.getRdfSource(action.context, action.querySourceUnidentified),
            context: action.querySourceUnidentified.context
          },
          context: action.context
        });
      }
      /**
       * Parses the string data source through the RDF parse bus, returning the RDF source.
       * @param context The run action context
       * @param source The source from the run action context
       * @returns Parsed RDF source that can be passed to quad pattern resolve mediator as an RDF/JS source
       */
      async getRdfSource(context, source) {
        const textStream = new readable_stream_1.Readable({ objectMode: true });
        textStream._read = () => {
        };
        textStream.push(source.value);
        textStream.push(null);
        const parseAction = {
          context,
          handle: {
            metadata: { baseIRI: source.baseIRI },
            data: textStream,
            context
          },
          handleMediaType: source.mediaType
        };
        const parseResult = await this.mediatorRdfParse.mediate(parseAction);
        return await (0, rdf_store_stream_1.storeStream)(parseResult.handle.data);
      }
      isStringSource(source) {
        if (!("type" in source)) {
          if (!(typeof source.value === "string")) {
            return false;
          }
          return "mediaType" in source;
        }
        return source.type === "serialized";
      }
    };
    exports.ActorQuerySourceIdentifySerialized = ActorQuerySourceIdentifySerialized;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-query-source-identify-serialized/lib/index.js
var require_lib282 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-query-source-identify-serialized/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQuerySourceIdentifySerialized(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind-source/lib/ActorRdfJoinMultiBindSource.js
var require_ActorRdfJoinMultiBindSource = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind-source/lib/ActorRdfJoinMultiBindSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiBindSource = void 0;
    var bus_rdf_join_1 = require_lib180();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_iterator_1 = require_lib179();
    var utils_query_operation_1 = require_lib26();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiBindSource = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "bind-source",
          canHandleUndefs: true
        });
      }
      async getOutput(action, sideData) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const entries3 = sideData.entriesSorted;
        this.logDebug(action.context, "First entry for Bind Join Source: ", () => ({
          entry: entries3[0].operation,
          cardinality: entries3[0].metadata.cardinality,
          order: entries3[0].metadata.order,
          availableOrders: entries3[0].metadata.availableOrders
        }));
        for (const [i, element] of entries3.entries()) {
          if (i !== 0) {
            element.output.bindingsStream.close();
          }
        }
        const smallestStream = entries3[0].output;
        const smallestMetadata = entries3[0].metadata;
        const remainingEntries = [...entries3];
        remainingEntries.splice(0, 1);
        const sourceWrapper = (0, utils_query_operation_1.getOperationSource)(remainingEntries[0].operation);
        const operation = this.createOperationFromEntries(algebraFactory, remainingEntries);
        const chunkedStreams = new utils_iterator_1.ChunkedIterator(smallestStream.bindingsStream, this.blockSize, { autoStart: false });
        const bindingsStream = new asynciterator_1.UnionIterator(chunkedStreams.map((chunk) => sourceWrapper.source.queryBindings(operation, sourceWrapper.context ? action.context.merge(sourceWrapper.context) : action.context, { joinBindings: { bindings: chunk, metadata: smallestMetadata } })));
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: () => this.constructResultMetadata(entries3, entries3.map((entry) => entry.metadata), action.context)
          },
          physicalPlanMetadata: {
            bindIndex: sideData.entriesUnsorted.indexOf(entries3[0])
          }
        };
      }
      async sortJoinEntries(entries3, context) {
        const entriesTest = await bus_rdf_join_1.ActorRdfJoin.sortJoinEntries(this.mediatorJoinEntriesSort, entries3, context);
        if (entriesTest.isFailed()) {
          return entriesTest;
        }
        entries3 = entriesTest.get();
        entries3 = entries3.sort((entryLeft, entryRight) => {
          if (entryLeft.operationModified && !entryRight.operationModified) {
            return -1;
          }
          return 0;
        });
        return (0, core_1.passTest)(entries3);
      }
      async getJoinCoefficients(action, sideData) {
        let { metadatas } = sideData;
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const entriesUnsorted = action.entries.map((entry, i) => ({ ...entry, metadata: metadatas[i] }));
        const entriesTest = await this.sortJoinEntries(entriesUnsorted, action.context);
        if (entriesTest.isFailed()) {
          return entriesTest;
        }
        const entriesSorted = entriesTest.get();
        metadatas = entriesSorted.map((entry) => entry.metadata);
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        const remainingEntries = [...entriesSorted];
        const remainingRequestInitialTimes = [...requestInitialTimes];
        const remainingRequestItemTimes = [...requestItemTimes];
        remainingEntries.splice(0, 1);
        remainingRequestInitialTimes.splice(0, 1);
        remainingRequestItemTimes.splice(0, 1);
        const sources = remainingEntries.map((entry) => (0, utils_query_operation_1.getOperationSource)(entry.operation));
        if (sources.some((source) => !source)) {
          return (0, core_1.failTest)(`Actor ${this.name} can not bind on remaining operations without source annotation`);
        }
        if (sources.some((source) => source !== sources[0])) {
          return (0, core_1.failTest)(`Actor ${this.name} can not bind on remaining operations with non-equal source annotation`);
        }
        const sourceWrapper = sources[0];
        const testingOperation = this.createOperationFromEntries(algebraFactory, remainingEntries);
        const selectorShape = await sourceWrapper.source.getSelectorShape(action.context);
        if (!(0, utils_query_operation_1.doesShapeAcceptOperation)(selectorShape, testingOperation, { joinBindings: true })) {
          return (0, core_1.failTest)(`Actor ${this.name} detected a source that can not handle passing down join bindings`);
        }
        const selectivities = await Promise.all(remainingEntries.map(async (entry) => (await this.mediatorJoinSelectivity.mediate({
          entries: [entriesSorted[0], entry],
          context: action.context
        })).selectivity * this.selectivityModifier));
        const cardinalityRemaining = remainingEntries.map((entry, i) => entry.metadata.cardinality.value * selectivities[i]).reduce((sum, element) => sum + element, 0);
        return (0, core_1.passTestWithSideData)({
          iterations: 1,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + cardinalityRemaining * requestItemTimes[1]
        }, { ...sideData, entriesUnsorted, entriesSorted });
      }
      createOperationFromEntries(algebraFactory, remainingEntries) {
        if (remainingEntries.length === 1) {
          return remainingEntries[0].operation;
        }
        return algebraFactory.createJoin(remainingEntries.map((entry) => entry.operation), true);
      }
    };
    exports.ActorRdfJoinMultiBindSource = ActorRdfJoinMultiBindSource;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind-source/lib/index.js
var require_lib283 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-rdf-join-inner-multi-bind-source/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiBindSource(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/ActorOptimizeQueryOperationJoinConnected.js
var require_ActorOptimizeQueryOperationJoinConnected = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/ActorOptimizeQueryOperationJoinConnected.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationJoinConnected = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationJoinConnected = class _ActorOptimizeQueryOperationJoinConnected extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          join(op, factory) {
            return {
              recurse: false,
              result: _ActorOptimizeQueryOperationJoinConnected.cluster(op, factory)
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
      /**
       * Iteratively cluster join entries based on their overlapping variables.
       * @param op A join operation.
       * @param factory An algebra factory.
       */
      static cluster(op, factory) {
        const initialClusters = op.input.map((subOp) => ({
          inScopeVariables: Object.fromEntries(sparqlalgebrajs_1.Util.inScopeVariables(subOp).map((variable) => [variable.value, true])),
          entries: [subOp]
        }));
        let oldClusters;
        let newClusters = initialClusters;
        do {
          oldClusters = newClusters;
          newClusters = _ActorOptimizeQueryOperationJoinConnected.clusterIteration(oldClusters);
        } while (oldClusters.length !== newClusters.length);
        const subJoins = newClusters.map((cluster) => cluster.entries.length === 1 ? cluster.entries[0] : factory.createJoin(cluster.entries));
        return subJoins.length === 1 ? subJoins[0] : factory.createJoin(subJoins, false);
      }
      /**
       * Perform a single clustering iteration.
       * Clusters will be joined if they have overlapping variables.
       * @param oldCluster
       */
      static clusterIteration(oldCluster) {
        const newClusters = [];
        for (const entry of oldCluster) {
          let joined = false;
          for (const newEntry of newClusters) {
            if (_ActorOptimizeQueryOperationJoinConnected.haveOverlappingVariables(entry.inScopeVariables, newEntry.inScopeVariables)) {
              newEntry.entries = [...newEntry.entries, ...entry.entries];
              newEntry.inScopeVariables = { ...newEntry.inScopeVariables, ...entry.inScopeVariables };
              joined = true;
              break;
            }
          }
          if (!joined) {
            newClusters.push({
              inScopeVariables: entry.inScopeVariables,
              entries: entry.entries
            });
          }
        }
        return newClusters;
      }
      /**
       * Check if the two given variable objects are overlapping.
       * @param variablesA A variables objects.
       * @param variablesB A variables objects.
       */
      static haveOverlappingVariables(variablesA, variablesB) {
        for (const variableA of Object.keys(variablesA)) {
          if (variablesB[variableA]) {
            return true;
          }
        }
        return false;
      }
    };
    exports.ActorOptimizeQueryOperationJoinConnected = ActorOptimizeQueryOperationJoinConnected;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/index.js
var require_lib284 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationJoinConnected(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/ActorOptimizeQueryOperationBgpToJoin.js
var require_ActorOptimizeQueryOperationBgpToJoin = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/ActorOptimizeQueryOperationBgpToJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationBgpToJoin = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationBgpToJoin = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          bgp(op, factory) {
            return {
              recurse: false,
              result: factory.createJoin(op.patterns)
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationBgpToJoin = ActorOptimizeQueryOperationBgpToJoin;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/index.js
var require_lib285 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationBgpToJoin(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/ActorOptimizeQueryOperationJoinBgp.js
var require_ActorOptimizeQueryOperationJoinBgp = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/ActorOptimizeQueryOperationJoinBgp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationJoinBgp = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationJoinBgp = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          join(op, factory) {
            if (op.input.every((subInput) => subInput.type === "bgp")) {
              return {
                recurse: false,
                result: factory.createBgp(op.input.flatMap((subInput) => subInput.patterns))
              };
            }
            return {
              recurse: false,
              result: op
            };
          }
        }, algebraFactory);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationJoinBgp = ActorOptimizeQueryOperationJoinBgp;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/index.js
var require_lib286 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationJoinBgp(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-assign-sources-exhaustive/lib/ActorOptimizeQueryOperationAssignSourcesExhaustive.js
var require_ActorOptimizeQueryOperationAssignSourcesExhaustive = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-assign-sources-exhaustive/lib/ActorOptimizeQueryOperationAssignSourcesExhaustive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationAssignSourcesExhaustive = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var bus_rdf_update_quads_1 = require_lib91();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var utils_query_operation_1 = require_lib26();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationAssignSourcesExhaustive = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(_action) {
        return (0, core_1.passTestVoid)();
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const sources = action.context.get(context_entries_1.KeysQueryOperation.querySources) ?? [];
        if (sources.length === 0) {
          return { operation: action.operation, context: action.context };
        }
        if (sources.length === 1) {
          const sourceWrapper = sources[0];
          const destination = action.context.get(context_entries_1.KeysRdfUpdateQuads.destination);
          if (!destination || sourceWrapper.source.referenceValue === (0, bus_rdf_update_quads_1.getDataDestinationValue)(destination)) {
            try {
              const shape = await sourceWrapper.source.getSelectorShape(action.context);
              if ((0, utils_query_operation_1.doesShapeAcceptOperation)(shape, action.operation)) {
                return {
                  operation: (0, utils_query_operation_1.assignOperationSource)(action.operation, sourceWrapper),
                  context: action.context
                };
              }
            } catch {
            }
          }
        }
        return {
          operation: this.assignExhaustive(algebraFactory, action.operation, sources),
          // We only keep queryString in the context if we only have a single source that accepts the full operation.
          // In that case, the queryString can be sent to the source as-is.
          context: action.context.delete(context_entries_1.KeysInitQuery.queryString)
        };
      }
      /**
       * Assign the given sources to the leaves in the given query operation.
       * Leaves will be wrapped in a union operation and duplicated for every source.
       * The input operation will not be modified.
       * @param algebraFactory The algebra factory.
       * @param operation The input operation.
       * @param sources The sources to assign.
       */
      assignExhaustive(algebraFactory, operation, sources) {
        const self2 = this;
        return sparqlalgebrajs_1.Util.mapOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.PATTERN](subOperation, factory) {
            if (sources.length === 1) {
              return {
                result: (0, utils_query_operation_1.assignOperationSource)(subOperation, sources[0]),
                recurse: false
              };
            }
            return {
              result: factory.createUnion(sources.map((source) => (0, utils_query_operation_1.assignOperationSource)(subOperation, source))),
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.LINK](subOperation, factory) {
            if (sources.length === 1) {
              return {
                result: (0, utils_query_operation_1.assignOperationSource)(subOperation, sources[0]),
                recurse: false
              };
            }
            return {
              result: factory.createAlt(sources.map((source) => (0, utils_query_operation_1.assignOperationSource)(subOperation, source))),
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.NPS](subOperation, factory) {
            if (sources.length === 1) {
              return {
                result: (0, utils_query_operation_1.assignOperationSource)(subOperation, sources[0]),
                recurse: false
              };
            }
            return {
              result: factory.createAlt(sources.map((source) => (0, utils_query_operation_1.assignOperationSource)(subOperation, source))),
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.SERVICE](subOperation) {
            return {
              result: subOperation,
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.CONSTRUCT](subOperation, factory) {
            return {
              result: factory.createConstruct(self2.assignExhaustive(algebraFactory, subOperation.input, sources), subOperation.template),
              recurse: false
            };
          },
          [sparqlalgebrajs_1.Algebra.types.DELETE_INSERT](subOperation, factory) {
            return {
              result: factory.createDeleteInsert(subOperation.delete, subOperation.insert, subOperation.where ? self2.assignExhaustive(algebraFactory, subOperation.where, sources) : void 0),
              recurse: false
            };
          }
        }, algebraFactory);
      }
    };
    exports.ActorOptimizeQueryOperationAssignSourcesExhaustive = ActorOptimizeQueryOperationAssignSourcesExhaustive;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-assign-sources-exhaustive/lib/index.js
var require_lib287 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-assign-sources-exhaustive/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationAssignSourcesExhaustive(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-describe-to-constructs-subject/lib/ActorOptimizeQueryOperationDescribeToConstructsSubject.js
var require_ActorOptimizeQueryOperationDescribeToConstructsSubject = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-describe-to-constructs-subject/lib/ActorOptimizeQueryOperationDescribeToConstructsSubject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationDescribeToConstructsSubject = void 0;
    var bus_optimize_query_operation_1 = require_lib22();
    var context_entries_1 = require_lib3();
    var core_1 = require_lib();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationDescribeToConstructsSubject = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (action.operation.type !== sparqlalgebrajs_1.Algebra.types.DESCRIBE) {
          return (0, core_1.failTest)(`Actor ${this.name} only supports describe operations, but got ${action.operation.type}`);
        }
        return (0, core_1.passTest)(true);
      }
      async run(action) {
        const dataFactory = action.context.getSafe(context_entries_1.KeysInitQuery.dataFactory);
        const algebraFactory = new sparqlalgebrajs_1.Factory(dataFactory);
        const operationOriginal = action.operation;
        const operations = operationOriginal.terms.filter((term) => term.termType !== "Variable").map((term) => {
          const patterns = [
            dataFactory.quad(term, dataFactory.variable("__predicate"), dataFactory.variable("__object"))
          ];
          patterns.forEach((templatePattern) => templatePattern.type = "pattern");
          const templateOperation = {
            type: sparqlalgebrajs_1.Algebra.types.BGP,
            patterns
          };
          return {
            input: templateOperation,
            template: patterns,
            type: "construct"
          };
        });
        if (operations.length !== operationOriginal.terms.length) {
          let variablePatterns = [];
          operationOriginal.terms.filter((term) => term.termType === "Variable").forEach((term, i) => {
            const patterns = [
              dataFactory.quad(term, dataFactory.variable(`__predicate${i}`), dataFactory.variable(`__object${i}`))
            ];
            patterns.forEach((templatePattern) => templatePattern.type = "pattern");
            variablePatterns = [...variablePatterns, ...patterns];
          });
          operations.push({
            input: {
              type: sparqlalgebrajs_1.Algebra.types.JOIN,
              input: [
                operationOriginal.input,
                { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: variablePatterns }
              ]
            },
            template: variablePatterns,
            type: sparqlalgebrajs_1.Algebra.types.CONSTRUCT
          });
        }
        const operation = algebraFactory.createUnion(operations, false);
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationDescribeToConstructsSubject = ActorOptimizeQueryOperationDescribeToConstructsSubject;
  }
});

// ../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-describe-to-constructs-subject/lib/index.js
var require_lib288 = __commonJS({
  "../../lipdjs/node_modules/@comunica/actor-optimize-query-operation-describe-to-constructs-subject/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationDescribeToConstructsSubject(), exports);
  }
});

// ../../lipdjs/node_modules/@comunica/query-sparql/engine-default.js
var require_engine_default = __commonJS({
  "../../lipdjs/node_modules/@comunica/query-sparql/engine-default.js"(exports, module) {
    module.exports = function(variables) {
      function getVariableValue(name) {
        if (!variables || !(name in variables)) {
          throw new Error("Undefined variable: " + name);
        }
        return variables[name];
      }
      const df_719_1 = new (require_lib5()).LoggerVoid();
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_init__4_0_0_components_ActorInit_jsonld_ActorInit_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-init/^4.0.0/components/ActorInit.jsonld#ActorInit_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-context-preprocess/^4.0.0/components/ActorContextPreprocess.jsonld#ActorContextPreprocess_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__4_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-hash-bindings/^4.0.0/components/ActorHashBindings.jsonld#ActorHashBindings_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_quads__4_0_0_components_ActorHashQuads_jsonld_ActorHashQuads_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-hash-quads/^4.0.0/components/ActorHashQuads.jsonld#ActorHashQuads_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-optimize-query-operation/^4.0.0/components/ActorOptimizeQueryOperation.jsonld#ActorOptimizeQueryOperation_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__4_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-parse/^4.0.0/components/ActorQueryParse.jsonld#ActorQueryParse_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-result-serialize/^4.0.0/components/ActorQueryResultSerialize.jsonld#ActorQueryResultSerialize_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify_hypermedia__4_0_0_components_ActorQuerySourceIdentifyHypermedia_jsonld_ActorQuerySourceIdentifyHypermedia_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-source-identify-hypermedia/^4.0.0/components/ActorQuerySourceIdentifyHypermedia.jsonld#ActorQuerySourceIdentifyHypermedia_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference__4_0_0_components_ActorDereference_jsonld_ActorDereference_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-dereference/^4.0.0/components/ActorDereference.jsonld#ActorDereference_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference_rdf__4_0_0_components_ActorDereferenceRdf_jsonld_ActorDereferenceRdf_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-dereference-rdf/^4.0.0/components/ActorDereferenceRdf.jsonld#ActorDereferenceRdf_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__4_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join-entries-sort/^4.0.0/components/ActorRdfJoinEntriesSort.jsonld#ActorRdfJoinEntriesSort_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__4_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join-selectivity/^4.0.0/components/ActorRdfJoinSelectivity.jsonld#ActorRdfJoinSelectivity_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata__4_0_0_components_ActorRdfMetadata_jsonld_ActorRdfMetadata_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-metadata/^4.0.0/components/ActorRdfMetadata.jsonld#ActorRdfMetadata_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__4_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-metadata-accumulate/^4.0.0/components/ActorRdfMetadataAccumulate.jsonld#ActorRdfMetadataAccumulate_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-metadata-extract/^4.0.0/components/ActorRdfMetadataExtract.jsonld#ActorRdfMetadataExtract_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-parse/^4.0.0/components/ActorRdfParse.jsonld#ActorRdfParse_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse_html__4_0_0_components_ActorRdfParseHtml_jsonld_ActorRdfParseHtml_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-parse-html/^4.0.0/components/ActorRdfParseHtml.jsonld#ActorRdfParseHtml_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links__4_0_0_components_ActorRdfResolveHypermediaLinks_jsonld_ActorRdfResolveHypermediaLinks_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-resolve-hypermedia-links/^4.0.0/components/ActorRdfResolveHypermediaLinks.jsonld#ActorRdfResolveHypermediaLinks_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links_queue__4_0_0_components_ActorRdfResolveHypermediaLinksQueue_jsonld_ActorRdfResolveHypermediaLinksQueue_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-resolve-hypermedia-links-queue/^4.0.0/components/ActorRdfResolveHypermediaLinksQueue.jsonld#ActorRdfResolveHypermediaLinksQueue_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-serialize/^4.0.0/components/ActorRdfSerialize.jsonld#ActorRdfSerialize_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_hypermedia__4_0_0_components_ActorRdfUpdateHypermedia_jsonld_ActorRdfUpdateHypermedia_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-update-hypermedia/^4.0.0/components/ActorRdfUpdateHypermedia.jsonld#ActorRdfUpdateHypermedia_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__4_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-update-quads/^4.0.0/components/ActorRdfUpdateQuads.jsonld#ActorRdfUpdateQuads_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-bindings-aggregator-factory/^4.0.0/components/ActorBindingsAggregatorFactory.jsonld#ActorBindingsAggregatorFactory_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_expression_evaluator_factory__4_0_0_components_ActorExpressionEvaluatorFactory_jsonld_ActorExpressionEvaluatorFactory_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-expression-evaluator-factory/^4.0.0/components/ActorExpressionEvaluatorFactory.jsonld#ActorExpressionEvaluatorFactory_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus = new (require_lib7()).BusFunctionFactory({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-function-factory/^4.0.0/components/ActorFunctionFactory.jsonld#ActorFunctionFactory_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http/^4.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_fallback_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http/^4.0.0/components/ActorHttp.jsonld#ActorHttp_fallback_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus = new (require_lib9()).BusQueryOperation({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^4.0.0/components/ActorQueryOperation.jsonld#ActorQueryOperation_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-process/^4.0.0/components/ActorQueryProcess.jsonld#ActorQueryProcess_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify__4_0_0_components_ActorQuerySourceIdentify_jsonld_ActorQuerySourceIdentify_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-source-identify/^4.0.0/components/ActorQuerySourceIdentify.jsonld#ActorQuerySourceIdentify_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join/^4.0.0/components/ActorRdfJoin.jsonld#ActorRdfJoin_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_term_comparator_factory__4_0_0_components_ActorTermComparatorFactory_jsonld_ActorTermComparatorFactory_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-term-comparator-factory/^4.0.0/components/ActorTermComparatorFactory.jsonld#ActorTermComparatorFactory_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http-invalidate/^4.0.0/components/ActorHttpInvalidate.jsonld#ActorHttpInvalidate_default_bus"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_merge_bindings_context__4_0_0_components_ActorMergeBindingsContext_jsonld_ActorMergeBindingsContext_default_bus = new (require_lib()).Bus({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-merge-bindings-context/^4.0.0/components/ActorMergeBindingsContext.jsonld#ActorMergeBindingsContext_default_bus"
      });
      const urn_comunica_default_context_preprocess_actors_convert_shortcuts = new (require_lib11()).ActorContextPreprocessConvertShortcuts({
        "contextKeyShortcuts": { "baseIRI": "@comunica/actor-init-query:baseIRI", "dataFactory": "@comunica/actor-init-query:dataFactory", "datetime": "@comunica/actor-http-memento:datetime", "destination": "@comunica/bus-rdf-update-quads:destination", "distinctConstruct": "@comunica/actor-init-query:distinctConstruct", "explain": "@comunica/actor-init-query:explain", "extensionFunctionCreator": "@comunica/actor-init-query:extensionFunctionCreator", "extensionFunctions": "@comunica/actor-init-query:extensionFunctions", "fetch": "@comunica/bus-http:fetch", "functionArgumentsCache": "@comunica/actor-init-query:functionArgumentsCache", "httpAuth": "@comunica/bus-http:auth", "httpBodyTimeout": "@comunica/bus-http:http-body-timeout", "httpIncludeCredentials": "@comunica/bus-http:include-credentials", "httpProxyHandler": "@comunica/actor-http-proxy:httpProxyHandler", "httpRetryCount": "@comunica/bus-http:http-retry-count", "httpRetryDelayFallback": "@comunica/bus-http:http-retry-delay-fallback", "httpRetryDelayLimit": "@comunica/bus-http:http-retry-delay-limit", "httpTimeout": "@comunica/bus-http:http-timeout", "initialBindings": "@comunica/actor-init-query:initialBindings", "invalidateCache": "@comunica/actor-init-query:invalidateCache", "lenient": "@comunica/actor-init-query:lenient", "log": "@comunica/core:log", "queryFormat": "@comunica/actor-init-query:queryFormat", "queryTimestamp": "@comunica/actor-init-query:queryTimestamp", "queryTimestampHighResolution": "@comunica/actor-init-query:queryTimestampHighResolution", "readOnly": "@comunica/bus-query-operation:readOnly", "recoverBrokenLinks": "@comunica/bus-http-wayback:recover-broken-links", "sources": "@comunica/actor-init-query:querySourcesUnidentified", "traverse": "@comunica/bus-query-source-identify:traverse", "unionDefaultGraph": "@comunica/bus-query-operation:unionDefaultGraph" },
        "name": "urn:comunica:default:context-preprocess/actors#convert-shortcuts",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus,
        "busFailMessage": "Context preprocessing failed"
      });
      const urn_comunica_default_context_preprocess_actors_set_defaults = new (require_lib12()).ActorContextPreprocessSetDefaults({
        "logger": df_719_1,
        "name": "urn:comunica:default:context-preprocess/actors#set-defaults",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus,
        "busFailMessage": "Context preprocessing failed"
      });
      const urn_comunica_default_context_preprocess_actors_source_to_destination = new (require_lib13()).ActorContextPreprocessSourceToDestination({
        "name": "urn:comunica:default:context-preprocess/actors#source-to-destination",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus,
        "busFailMessage": "Context preprocessing failed"
      });
      const urn_comunica_default_context_preprocess_actors_query_source_skolemize = new (require_lib15()).ActorContextPreprocessQuerySourceSkolemize({
        "name": "urn:comunica:default:context-preprocess/actors#query-source-skolemize",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus,
        "busFailMessage": "Context preprocessing failed"
      });
      const urn_comunica_default_context_preprocess_mediators_main = new (require_lib16()).MediatorCombinePipeline({
        "name": "urn:comunica:default:context-preprocess/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus
      });
      const urn_comunica_default_hash_bindings_actors_murmur = new (require_lib18()).ActorHashBindingsMurmur({
        "name": "urn:comunica:default:hash-bindings/actors#murmur",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__4_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus,
        "busFailMessage": "Failed to obtaining hash functions for bindings"
      });
      const urn_comunica_default_hash_bindings_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:hash-bindings/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__4_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus
      });
      const urn_comunica_default_hash_quads_actors_murmur = new (require_lib21()).ActorHashQuadsMurmur({
        "name": "urn:comunica:default:hash-quads/actors#murmur",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_quads__4_0_0_components_ActorHashQuads_jsonld_ActorHashQuads_default_bus,
        "busFailMessage": "Failed to obtaining hash functions for quads"
      });
      const urn_comunica_default_optimize_query_operation_actors_rewrite_copy = new (require_lib23()).ActorOptimizeQueryOperationRewriteCopy({
        "name": "urn:comunica:default:optimize-query-operation/actors#rewrite-copy",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize"
      });
      const urn_comunica_default_optimize_query_operation_actors_rewrite_move = new (require_lib24()).ActorOptimizeQueryOperationRewriteMove({
        "name": "urn:comunica:default:optimize-query-operation/actors#rewrite-move",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize"
      });
      const urn_comunica_default_optimize_query_operation_actors_rewrite_add = new (require_lib25()).ActorOptimizeQueryOperationRewriteAdd({
        "name": "urn:comunica:default:optimize-query-operation/actors#rewrite-add",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize"
      });
      const urn_comunica_default_optimize_query_operation_actors_group_sources = new (require_lib27()).ActorOptimizeQueryOperationGroupSources({
        "name": "urn:comunica:default:optimize-query-operation/actors#group-sources",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize"
      });
      const urn_comunica_default_optimize_query_operation_actors_construct_distinct = new (require_lib28()).ActorOptimizeQueryOperationConstructDistinct({
        "name": "urn:comunica:default:optimize-query-operation/actors#construct-distinct",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize"
      });
      const urn_comunica_default_optimize_query_operation_mediators_main = new (require_lib16()).MediatorCombinePipeline({
        "filterFailures": true,
        "name": "urn:comunica:default:optimize-query-operation/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus
      });
      const urn_comunica_default_query_parse_actors_sparql = new (require_lib30()).ActorQueryParseSparql({
        "prefixes": { "dbpedia": "http://dbpedia.org/resource/", "dbpedia-owl": "http://dbpedia.org/ontology/", "dbpprop": "http://dbpedia.org/property/", "dc": "http://purl.org/dc/terms/", "dc11": "http://purl.org/dc/elements/1.1/", "dcterms": "http://purl.org/dc/terms/", "foaf": "http://xmlns.com/foaf/0.1/", "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#", "owl": "http://www.w3.org/2002/07/owl#", "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdfs": "http://www.w3.org/2000/01/rdf-schema#", "schema": "http://schema.org/", "skos": "http://www.w3.org/2008/05/skos#", "xsd": "http://www.w3.org/2001/XMLSchema#" },
        "name": "urn:comunica:default:query-parse/actors#sparql",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__4_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus,
        "busFailMessage": 'Query parsing failed: none of the configured parsers were able to the query "${action.query}"'
      });
      const urn_comunica_default_query_parse_actors_graphql = new (require_lib31()).ActorQueryParseGraphql({
        "name": "urn:comunica:default:query-parse/actors#graphql",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__4_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus,
        "busFailMessage": 'Query parsing failed: none of the configured parsers were able to the query "${action.query}"'
      });
      const urn_comunica_default_query_parse_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:query-parse/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__4_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus
      });
      const urn_comunica_default_query_result_serialize_actors_json = new (require_lib34()).ActorQueryResultSerializeJson({
        "mediaTypePriorities": { "application/json": 1 },
        "mediaTypeFormats": { "application/json": "https://comunica.linkeddatafragments.org/#results_JSON" },
        "name": "urn:comunica:default:query-result-serialize/actors#json",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_simple = new (require_lib35()).ActorQueryResultSerializeSimple({
        "mediaTypePriorities": { "simple": 0.9 },
        "mediaTypeFormats": { "simple": "https://comunica.linkeddatafragments.org/#results_simple" },
        "name": "urn:comunica:default:query-result-serialize/actors#simple",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_csv = new (require_lib36()).ActorQueryResultSerializeSparqlCsv({
        "mediaTypePriorities": { "text/csv": 0.75 },
        "mediaTypeFormats": { "text/csv": "http://www.w3.org/ns/formats/SPARQL_Results_CSV" },
        "name": "urn:comunica:default:query-result-serialize/actors#csv",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_sparql_tsv = new (require_lib37()).ActorQueryResultSerializeSparqlTsv({
        "mediaTypePriorities": { "text/tab-separated-values": 0.75 },
        "mediaTypeFormats": { "text/tab-separated-values": "http://www.w3.org/ns/formats/SPARQL_Results_TSV" },
        "name": "urn:comunica:default:query-result-serialize/actors#sparql-tsv",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_sparql_xml = new (require_lib38()).ActorQueryResultSerializeSparqlXml({
        "mediaTypePriorities": { "application/sparql-results+xml": 0.8 },
        "mediaTypeFormats": { "application/sparql-results+xml": "http://www.w3.org/ns/formats/SPARQL_Results_XML" },
        "name": "urn:comunica:default:query-result-serialize/actors#sparql-xml",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_table = new (require_lib39()).ActorQueryResultSerializeTable({
        "columnWidth": 50,
        "mediaTypePriorities": { "table": 0.6 },
        "mediaTypeFormats": { "table": "https://comunica.linkeddatafragments.org/#results_table" },
        "name": "urn:comunica:default:query-result-serialize/actors#table",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_tree = new (require_lib40()).ActorQueryResultSerializeTree({
        "mediaTypePriorities": { "tree": 0.5 },
        "mediaTypeFormats": { "tree": "https://comunica.linkeddatafragments.org/#results_tree" },
        "name": "urn:comunica:default:query-result-serialize/actors#tree",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_mediators_serialize = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:query-result-serialize/mediators#serialize",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
      });
      const urn_comunica_default_query_result_serialize_mediators_mediaType = new (require_lib41()).MediatorCombineUnion({
        "field": "mediaTypes",
        "name": "urn:comunica:default:query-result-serialize/mediators#mediaType",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
      });
      const urn_comunica_default_query_result_serialize_mediators_mediaTypeFormat = new (require_lib41()).MediatorCombineUnion({
        "field": "mediaTypeFormats",
        "name": "urn:comunica:default:query-result-serialize/mediators#mediaTypeFormat",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
      });
      const urn_comunica_default_query_source_identify_hypermedia_mediators_main = new (require_lib42()).MediatorNumber({
        "field": "filterFactor",
        "type": "max",
        "ignoreFailures": true,
        "name": "urn:comunica:default:query-source-identify-hypermedia/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify_hypermedia__4_0_0_components_ActorQuerySourceIdentifyHypermedia_jsonld_ActorQuerySourceIdentifyHypermedia_default_bus
      });
      const urn_comunica_default_dereference_actors_fallback = new (require_lib44()).ActorDereferenceFallback({
        "name": "urn:comunica:default:dereference/actors#fallback",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference__4_0_0_components_ActorDereference_jsonld_ActorDereference_default_bus,
        "busFailMessage": "Dereferencing failed: none of the configured actors were able to handle ${action.url}"
      });
      const urn_comunica_default_dereference_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:dereference/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference__4_0_0_components_ActorDereference_jsonld_ActorDereference_default_bus
      });
      const urn_comunica_default_dereference_rdf_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:dereference-rdf/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference_rdf__4_0_0_components_ActorDereferenceRdf_jsonld_ActorDereferenceRdf_default_bus
      });
      const urn_comunica_default_rdf_join_entries_sort_actors_cardinality = new (require_lib46()).ActorRdfJoinEntriesSortCardinality({
        "name": "urn:comunica:default:rdf-join-entries-sort/actors#cardinality",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__4_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus,
        "busFailMessage": "Sorting join entries failed: none of the configured actors were able to sort"
      });
      const urn_comunica_default_rdf_join_entries_sort_mediators_main = new (require_lib42()).MediatorNumber({
        "field": "accuracy",
        "type": "max",
        "ignoreFailures": true,
        "name": "urn:comunica:default:rdf-join-entries-sort/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__4_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus
      });
      const urn_comunica_default_rdf_join_selectivity_actors_variable_counting = new (require_lib48()).ActorRdfJoinSelectivityVariableCounting({
        "name": "urn:comunica:default:rdf-join-selectivity/actors#variable-counting",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__4_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus,
        "busFailMessage": "Determining join selectivity failed: none of the configured actors were able to calculate selectivities"
      });
      const urn_comunica_default_rdf_join_selectivity_mediators_main = new (require_lib42()).MediatorNumber({
        "field": "accuracy",
        "type": "max",
        "ignoreFailures": true,
        "name": "urn:comunica:default:rdf-join-selectivity/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__4_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus
      });
      const urn_comunica_default_rdf_metadata_actors_primary_topic = new (require_lib50()).ActorRdfMetadataPrimaryTopic({
        "metadataToData": false,
        "dataToMetadataOnInvalidMetadataGraph": true,
        "name": "urn:comunica:default:rdf-metadata/actors#primary-topic",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata__4_0_0_components_ActorRdfMetadata_jsonld_ActorRdfMetadata_default_bus,
        "busFailMessage": "Metadata splicing failed: none of the configured actors were able to splice metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_actors_all = new (require_lib51()).ActorRdfMetadataAll({
        "name": "urn:comunica:default:rdf-metadata/actors#all",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata__4_0_0_components_ActorRdfMetadata_jsonld_ActorRdfMetadata_default_bus,
        "busFailMessage": "Metadata splicing failed: none of the configured actors were able to splice metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-metadata/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata__4_0_0_components_ActorRdfMetadata_jsonld_ActorRdfMetadata_default_bus
      });
      const urn_comunica_default_rdf_metadata_accumulate_actors_cardinality = new (require_lib53()).ActorRdfMetadataAccumulateCardinality({
        "name": "urn:comunica:default:rdf-metadata-accumulate/actors#cardinality",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__4_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus,
        "busFailMessage": "Metadata accumulation failed: none of the configured actors were able to accumulate metadata in mode ${action.mode}"
      });
      const urn_comunica_default_rdf_metadata_accumulate_actors_pagesize = new (require_lib54()).ActorRdfMetadataAccumulatePageSize({
        "name": "urn:comunica:default:rdf-metadata-accumulate/actors#pagesize",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__4_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus,
        "busFailMessage": "Metadata accumulation failed: none of the configured actors were able to accumulate metadata in mode ${action.mode}"
      });
      const urn_comunica_default_rdf_metadata_accumulate_actors_requesttime = new (require_lib55()).ActorRdfMetadataAccumulateRequestTime({
        "name": "urn:comunica:default:rdf-metadata-accumulate/actors#requesttime",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__4_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus,
        "busFailMessage": "Metadata accumulation failed: none of the configured actors were able to accumulate metadata in mode ${action.mode}"
      });
      const urn_comunica_default_rdf_metadata_accumulate_mediators_main = new (require_lib41()).MediatorCombineUnion({
        "field": "metadata",
        "name": "urn:comunica:default:rdf-metadata-accumulate/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__4_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
      });
      const urn_comunica_default_rdf_metadata_extract_actors_hydra_controls = new (require_lib57()).ActorRdfMetadataExtractHydraControls({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#hydra-controls",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_hydra_count = new (require_lib58()).ActorRdfMetadataExtractHydraCount({
        "predicates": [
          "http://www.w3.org/ns/hydra/core#totalItems",
          "http://rdfs.org/ns/void#triples"
        ],
        "name": "urn:comunica:default:rdf-metadata-extract/actors#hydra-count",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_hydra_pagesize = new (require_lib59()).ActorRdfMetadataExtractHydraPagesize({
        "predicates": [
          "http://www.w3.org/ns/hydra/core#itemsPerPage"
        ],
        "name": "urn:comunica:default:rdf-metadata-extract/actors#hydra-pagesize",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_request_time = new (require_lib60()).ActorRdfMetadataExtractRequestTime({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#request-time",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_allow_http_methods = new (require_lib61()).ActorRdfMetadataExtractAllowHttpMethods({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#allow-http-methods",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_put_accepted = new (require_lib62()).ActorRdfMetadataExtractPutAccepted({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#put-accepted",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_patch_sparql_update = new (require_lib63()).ActorRdfMetadataExtractPatchSparqlUpdate({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#patch-sparql-update",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_sparql_service = new (require_lib64()).ActorRdfMetadataExtractSparqlService({
        "inferHttpsEndpoint": true,
        "name": "urn:comunica:default:rdf-metadata-extract/actors#sparql-service",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_actors_void = new (require_lib65()).ActorRdfMetadataExtractVoid({
        "name": "urn:comunica:default:rdf-metadata-extract/actors#void",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus,
        "busFailMessage": "Metadata extraction failed: none of the configured actors were able to extract metadata from ${action.url}"
      });
      const urn_comunica_default_rdf_metadata_extract_mediators_main = new (require_lib41()).MediatorCombineUnion({
        "filterFailures": true,
        "field": "metadata",
        "name": "urn:comunica:default:rdf-metadata-extract/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_extract__4_0_0_components_ActorRdfMetadataExtract_jsonld_ActorRdfMetadataExtract_default_bus
      });
      const urn_comunica_default_rdf_parse_actors_n3 = new (require_lib67()).ActorRdfParseN3({
        "mediaTypePriorities": { "application/n-quads": 1, "application/n-triples": 0.8, "application/trig": 0.95, "text/n3": 0.35, "text/turtle": 0.6 },
        "mediaTypeFormats": { "application/n-quads": "http://www.w3.org/ns/formats/N-Quads", "application/n-triples": "http://www.w3.org/ns/formats/N-Triples", "application/trig": "http://www.w3.org/ns/formats/TriG", "text/n3": "http://www.w3.org/ns/formats/N3", "text/turtle": "http://www.w3.org/ns/formats/Turtle" },
        "priorityScale": 1,
        "name": "urn:comunica:default:rdf-parse/actors#n3",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_actors_rdfxml = new (require_lib68()).ActorRdfParseRdfXml({
        "mediaTypePriorities": { "application/rdf+xml": 1 },
        "mediaTypeFormats": { "application/rdf+xml": "http://www.w3.org/ns/formats/RDF_XML" },
        "priorityScale": 0.5,
        "name": "urn:comunica:default:rdf-parse/actors#rdfxml",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_actors_xmlrdfa = new (require_lib75()).ActorRdfParseXmlRdfa({
        "mediaTypePriorities": { "application/xml": 1, "image/svg+xml": 1, "text/xml": 1 },
        "mediaTypeFormats": { "application/xml": "http://www.w3.org/ns/formats/RDFa", "image/svg+xml": "http://www.w3.org/ns/formats/RDFa", "text/xml": "http://www.w3.org/ns/formats/RDFa" },
        "priorityScale": 0.3,
        "name": "urn:comunica:default:rdf-parse/actors#xmlrdfa",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_actors_shaclc = new (require_lib77()).ActorRdfParseShaclc({
        "mediaTypePriorities": { "text/shaclc": 1, "text/shaclc-ext": 0.5 },
        "mediaTypeFormats": { "text/shaclc": "http://www.w3.org/ns/formats/Shaclc", "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended" },
        "priorityScale": 0.1,
        "name": "urn:comunica:default:rdf-parse/actors#shaclc",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_mediators_parse = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-parse/mediators#parse",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus
      });
      const urn_comunica_default_rdf_parse_mediators_mediaType = new (require_lib41()).MediatorCombineUnion({
        "field": "mediaTypes",
        "name": "urn:comunica:default:rdf-parse/mediators#mediaType",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus
      });
      const urn_comunica_default_rdf_parse_actors_html = new (require_lib78()).ActorRdfParseHtml({
        "busRdfParseHtml": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse_html__4_0_0_components_ActorRdfParseHtml_jsonld_ActorRdfParseHtml_default_bus,
        "mediaTypePriorities": { "application/xhtml+xml": 0.9, "text/html": 1 },
        "mediaTypeFormats": { "application/xhtml+xml": "http://www.w3.org/ns/formats/HTML", "text/html": "http://www.w3.org/ns/formats/HTML" },
        "priorityScale": 0.2,
        "name": "urn:comunica:default:rdf-parse/actors#html",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_html_actors_microdata = new (require_lib81()).ActorRdfParseHtmlMicrodata({
        "name": "urn:comunica:default:rdf-parse-html/actors#microdata",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse_html__4_0_0_components_ActorRdfParseHtml_jsonld_ActorRdfParseHtml_default_bus,
        "busFailMessage": "RDF HTML parsing failed: none of the configured parsers were able to parse RDF in HTML"
      });
      const urn_comunica_default_rdf_parse_html_actors_rdfa = new (require_lib82()).ActorRdfParseHtmlRdfa({
        "name": "urn:comunica:default:rdf-parse-html/actors#rdfa",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse_html__4_0_0_components_ActorRdfParseHtml_jsonld_ActorRdfParseHtml_default_bus,
        "busFailMessage": "RDF HTML parsing failed: none of the configured parsers were able to parse RDF in HTML"
      });
      const urn_comunica_default_rdf_resolve_hypermedia_links_actors_next = new (require_lib84()).ActorRdfResolveHypermediaLinksNext({
        "name": "urn:comunica:default:rdf-resolve-hypermedia-links/actors#next",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links__4_0_0_components_ActorRdfResolveHypermediaLinks_jsonld_ActorRdfResolveHypermediaLinks_default_bus,
        "busFailMessage": "Hypermedia link resolution failed: none of the configured actors were able to resolve links from metadata"
      });
      const urn_comunica_default_rdf_resolve_hypermedia_links_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-resolve-hypermedia-links/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links__4_0_0_components_ActorRdfResolveHypermediaLinks_jsonld_ActorRdfResolveHypermediaLinks_default_bus
      });
      const urn_comunica_default_rdf_resolve_hypermedia_links_queue_actors_fifo = new (require_lib86()).ActorRdfResolveHypermediaLinksQueueFifo({
        "name": "urn:comunica:default:rdf-resolve-hypermedia-links-queue/actors#fifo",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links_queue__4_0_0_components_ActorRdfResolveHypermediaLinksQueue_jsonld_ActorRdfResolveHypermediaLinksQueue_default_bus,
        "busFailMessage": "Link queue creation failed: none of the configured actors were able to create a link queue starting from ${action.firstUrl}"
      });
      const urn_comunica_default_rdf_resolve_hypermedia_links_queue_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-resolve-hypermedia-links-queue/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_hypermedia_links_queue__4_0_0_components_ActorRdfResolveHypermediaLinksQueue_jsonld_ActorRdfResolveHypermediaLinksQueue_default_bus
      });
      const urn_comunica_default_rdf_serialize_actors_n3 = new (require_lib88()).ActorRdfSerializeN3({
        "mediaTypePriorities": { "application/n-quads": 1, "application/n-triples": 0.8, "application/trig": 0.95, "text/n3": 0.35, "text/turtle": 0.6 },
        "mediaTypeFormats": { "application/n-quads": "http://www.w3.org/ns/formats/N-Quads", "application/n-triples": "http://www.w3.org/ns/formats/N-Triples", "application/trig": "http://www.w3.org/ns/formats/TriG", "text/n3": "http://www.w3.org/ns/formats/N3", "text/turtle": "http://www.w3.org/ns/formats/Turtle" },
        "name": "urn:comunica:default:rdf-serialize/actors#n3",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus,
        "busFailMessage": "RDF serialization failed: none of the configured serializers were able to handle media type ${action.handleMediaType}"
      });
      const urn_comunica_default_rdf_serialize_actors_jsonld = new (require_lib89()).ActorRdfSerializeJsonLd({
        "jsonStringifyIndentSpaces": 2,
        "mediaTypePriorities": { "application/ld+json": 1 },
        "mediaTypeFormats": { "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD" },
        "priorityScale": 0.9,
        "name": "urn:comunica:default:rdf-serialize/actors#jsonld",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus,
        "busFailMessage": "RDF serialization failed: none of the configured serializers were able to handle media type ${action.handleMediaType}"
      });
      const urn_comunica_default_rdf_serialize_actors_shaclc = new (require_lib90()).ActorRdfSerializeShaclc({
        "mediaTypePriorities": { "text/shaclc": 1, "text/shaclc-ext": 0.5 },
        "mediaTypeFormats": { "text/shaclc": "http://www.w3.org/ns/formats/Shaclc", "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended" },
        "priorityScale": 0.1,
        "name": "urn:comunica:default:rdf-serialize/actors#shaclc",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus,
        "busFailMessage": "RDF serialization failed: none of the configured serializers were able to handle media type ${action.handleMediaType}"
      });
      const urn_comunica_default_rdf_serialize_mediators_serialize = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-serialize/mediators#serialize",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
      });
      const urn_comunica_default_rdf_serialize_mediators_mediaType = new (require_lib41()).MediatorCombineUnion({
        "field": "mediaTypes",
        "name": "urn:comunica:default:rdf-serialize/mediators#mediaType",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
      });
      const urn_comunica_default_rdf_serialize_mediators_mediaTypeFormat = new (require_lib41()).MediatorCombineUnion({
        "field": "mediaTypeFormats",
        "name": "urn:comunica:default:rdf-serialize/mediators#mediaTypeFormat",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__4_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
      });
      const urn_comunica_default_rdf_update_hypermedia_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-update-hypermedia/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_hypermedia__4_0_0_components_ActorRdfUpdateHypermedia_jsonld_ActorRdfUpdateHypermedia_default_bus
      });
      const urn_comunica_default_rdf_update_quads_actors_rdfjs_store = new (require_lib92()).ActorRdfUpdateQuadsRdfJsStore({
        "name": "urn:comunica:default:rdf-update-quads/actors#rdfjs-store",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__4_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus,
        "busFailMessage": "RDF updating failed: none of the configured actors were able to handle an update"
      });
      const urn_comunica_default_rdf_update_quads_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:rdf-update-quads/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__4_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus
      });
      const urn_comunica_default_bindings_aggregator_factory_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:bindings-aggregator-factory/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus
      });
      const urn_comunica_default_expression_evaluator_factory_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:expression-evaluator-factory/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_expression_evaluator_factory__4_0_0_components_ActorExpressionEvaluatorFactory_jsonld_ActorExpressionEvaluatorFactory_default_bus
      });
      const urn_comunica_default_function_factory_actors_expression_function_bnode = new (require_lib93()).ActorFunctionFactoryExpressionBnode({
        "name": "urn:comunica:default:function-factory/actors#expression-function-bnode",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_bound = new (require_lib94()).ActorFunctionFactoryExpressionBound({
        "name": "urn:comunica:default:function-factory/actors#expression-function-bound",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_coalesce = new (require_lib95()).ActorFunctionFactoryExpressionCoalesce({
        "name": "urn:comunica:default:function-factory/actors#expression-function-coalesce",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_concat = new (require_lib96()).ActorFunctionFactoryExpressionConcat({
        "name": "urn:comunica:default:function-factory/actors#expression-function-concat",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_extensions = new (require_lib97()).ActorFunctionFactoryExpressionExtensions({
        "name": "urn:comunica:default:function-factory/actors#expression-function-extensions",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_if = new (require_lib98()).ActorFunctionFactoryExpressionIf({
        "name": "urn:comunica:default:function-factory/actors#expression-function-if",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_logical_and = new (require_lib99()).ActorFunctionFactoryExpressionLogicalAnd({
        "name": "urn:comunica:default:function-factory/actors#expression-function-logical-and",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_logical_or = new (require_lib100()).ActorFunctionFactoryExpressionLogicalOr({
        "name": "urn:comunica:default:function-factory/actors#expression-function-logical-or",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_same_term = new (require_lib101()).ActorFunctionFactoryExpressionSameTerm({
        "name": "urn:comunica:default:function-factory/actors#expression-function-same-term",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_abs = new (require_lib102()).ActorFunctionFactoryTermAbs({
        "name": "urn:comunica:default:function-factory/actors#term-function-abs",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_addition = new (require_lib103()).ActorFunctionFactoryTermAddition({
        "name": "urn:comunica:default:function-factory/actors#term-function-addition",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_ceil = new (require_lib104()).ActorFunctionFactoryTermCeil({
        "name": "urn:comunica:default:function-factory/actors#term-function-ceil",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_contains = new (require_lib105()).ActorFunctionFactoryTermContains({
        "name": "urn:comunica:default:function-factory/actors#term-function-contains",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_datatype = new (require_lib106()).ActorFunctionFactoryTermDatatype({
        "name": "urn:comunica:default:function-factory/actors#term-function-datatype",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_day = new (require_lib107()).ActorFunctionFactoryTermDay({
        "name": "urn:comunica:default:function-factory/actors#term-function-day",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_division = new (require_lib108()).ActorFunctionFactoryTermDivision({
        "name": "urn:comunica:default:function-factory/actors#term-function-division",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_encode_for_uri = new (require_lib109()).ActorFunctionFactoryTermEncodeForUri({
        "name": "urn:comunica:default:function-factory/actors#term-function-encode-for-uri",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_equality = new (require_lib110()).ActorFunctionFactoryTermEquality({
        "name": "urn:comunica:default:function-factory/actors#term-function-equality",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_floor = new (require_lib111()).ActorFunctionFactoryTermFloor({
        "name": "urn:comunica:default:function-factory/actors#term-function-floor",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_hours = new (require_lib112()).ActorFunctionFactoryTermHours({
        "name": "urn:comunica:default:function-factory/actors#term-function-hours",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_iri = new (require_lib113()).ActorFunctionFactoryTermIri({
        "name": "urn:comunica:default:function-factory/actors#term-function-iri",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_is_blank = new (require_lib114()).ActorFunctionFactoryTermIsBlank({
        "name": "urn:comunica:default:function-factory/actors#term-function-is-blank",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_is_iri = new (require_lib115()).ActorFunctionFactoryTermIsIri({
        "name": "urn:comunica:default:function-factory/actors#term-function-is-iri",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_is_literal = new (require_lib116()).ActorFunctionFactoryTermIsLiteral({
        "name": "urn:comunica:default:function-factory/actors#term-function-is-literal",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_is_numeric = new (require_lib117()).ActorFunctionFactoryTermIsNumeric({
        "name": "urn:comunica:default:function-factory/actors#term-function-is-numeric",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_is_triple = new (require_lib118()).ActorFunctionFactoryTermIsTriple({
        "name": "urn:comunica:default:function-factory/actors#term-function-is-triple",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_lang = new (require_lib119()).ActorFunctionFactoryTermLang({
        "name": "urn:comunica:default:function-factory/actors#term-function-lang",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_langmatches = new (require_lib120()).ActorFunctionFactoryTermLangmatches({
        "name": "urn:comunica:default:function-factory/actors#term-function-langmatches",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_lcase = new (require_lib121()).ActorFunctionFactoryTermLcase({
        "name": "urn:comunica:default:function-factory/actors#term-function-lcase",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_md5 = new (require_lib122()).ActorFunctionFactoryTermMd5({
        "name": "urn:comunica:default:function-factory/actors#term-function-md5",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_minutes = new (require_lib123()).ActorFunctionFactoryTermMinutes({
        "name": "urn:comunica:default:function-factory/actors#term-function-minutes",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_month = new (require_lib124()).ActorFunctionFactoryTermMonth({
        "name": "urn:comunica:default:function-factory/actors#term-function-month",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_multiplication = new (require_lib125()).ActorFunctionFactoryTermMultiplication({
        "name": "urn:comunica:default:function-factory/actors#term-function-multiplication",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_not = new (require_lib126()).ActorFunctionFactoryTermNot({
        "name": "urn:comunica:default:function-factory/actors#term-function-not",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_now = new (require_lib127()).ActorFunctionFactoryTermNow({
        "name": "urn:comunica:default:function-factory/actors#term-function-now",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_object = new (require_lib128()).ActorFunctionFactoryTermObject({
        "name": "urn:comunica:default:function-factory/actors#term-function-object",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_predicate = new (require_lib129()).ActorFunctionFactoryTermPredicate({
        "name": "urn:comunica:default:function-factory/actors#term-function-predicate",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_rand = new (require_lib130()).ActorFunctionFactoryTermRand({
        "name": "urn:comunica:default:function-factory/actors#term-function-rand",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_regex = new (require_lib131()).ActorFunctionFactoryTermRegex({
        "name": "urn:comunica:default:function-factory/actors#term-function-regex",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_replace = new (require_lib132()).ActorFunctionFactoryTermReplace({
        "name": "urn:comunica:default:function-factory/actors#term-function-replace",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_round = new (require_lib133()).ActorFunctionFactoryTermRound({
        "name": "urn:comunica:default:function-factory/actors#term-function-round",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_seconds = new (require_lib134()).ActorFunctionFactoryTermSeconds({
        "name": "urn:comunica:default:function-factory/actors#term-function-seconds",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_sha1 = new (require_lib135()).ActorFunctionFactoryTermSha1({
        "name": "urn:comunica:default:function-factory/actors#term-function-sha1",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_sha256 = new (require_lib136()).ActorFunctionFactoryTermSha256({
        "name": "urn:comunica:default:function-factory/actors#term-function-sha256",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_sha384 = new (require_lib137()).ActorFunctionFactoryTermSha384({
        "name": "urn:comunica:default:function-factory/actors#term-function-sha384",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_sha512 = new (require_lib138()).ActorFunctionFactoryTermSha512({
        "name": "urn:comunica:default:function-factory/actors#term-function-sha512",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_after = new (require_lib139()).ActorFunctionFactoryTermStrAfter({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-after",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_before = new (require_lib140()).ActorFunctionFactoryTermStrBefore({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-before",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_dt = new (require_lib141()).ActorFunctionFactoryTermStrDt({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-dt",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_ends = new (require_lib142()).ActorFunctionFactoryTermStrEnds({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-ends",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_lang = new (require_lib143()).ActorFunctionFactoryTermStrLang({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-lang",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_len = new (require_lib144()).ActorFunctionFactoryTermStrLen({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-len",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_starts = new (require_lib145()).ActorFunctionFactoryTermStrStarts({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-starts",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str_uuid = new (require_lib146()).ActorFunctionFactoryTermStrUuid({
        "name": "urn:comunica:default:function-factory/actors#term-function-str-uuid",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_str = new (require_lib147()).ActorFunctionFactoryTermStr({
        "name": "urn:comunica:default:function-factory/actors#term-function-str",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_sub_str = new (require_lib148()).ActorFunctionFactoryTermSubStr({
        "name": "urn:comunica:default:function-factory/actors#term-function-sub-str",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_subject = new (require_lib149()).ActorFunctionFactoryTermSubject({
        "name": "urn:comunica:default:function-factory/actors#term-function-subject",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_subtraction = new (require_lib150()).ActorFunctionFactoryTermSubtraction({
        "name": "urn:comunica:default:function-factory/actors#term-function-subtraction",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_timezone = new (require_lib151()).ActorFunctionFactoryTermTimezone({
        "name": "urn:comunica:default:function-factory/actors#term-function-timezone",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_triple = new (require_lib152()).ActorFunctionFactoryTermTriple({
        "name": "urn:comunica:default:function-factory/actors#term-function-triple",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_tz = new (require_lib153()).ActorFunctionFactoryTermTz({
        "name": "urn:comunica:default:function-factory/actors#term-function-tz",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_ucase = new (require_lib154()).ActorFunctionFactoryTermUcase({
        "name": "urn:comunica:default:function-factory/actors#term-function-ucase",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_unary_minus = new (require_lib155()).ActorFunctionFactoryTermUnaryMinus({
        "name": "urn:comunica:default:function-factory/actors#term-function-unary-minus",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_unary_plus = new (require_lib156()).ActorFunctionFactoryTermUnaryPlus({
        "name": "urn:comunica:default:function-factory/actors#term-function-unary-plus",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_uuid = new (require_lib157()).ActorFunctionFactoryTermUuid({
        "name": "urn:comunica:default:function-factory/actors#term-function-uuid",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_boolean = new (require_lib158()).ActorFunctionFactoryTermXsdToBoolean({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-boolean",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_date = new (require_lib159()).ActorFunctionFactoryTermXsdToDate({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-date",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_datetime = new (require_lib160()).ActorFunctionFactoryTermXsdToDatetime({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-datetime",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_day_time_duration = new (require_lib161()).ActorFunctionFactoryTermXsdToDayTimeDuration({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-day-time-duration",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_decimal = new (require_lib162()).ActorFunctionFactoryTermXsdToDecimal({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-decimal",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_double = new (require_lib163()).ActorFunctionFactoryTermXsdToDouble({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-double",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_duration = new (require_lib164()).ActorFunctionFactoryTermXsdToDuration({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-duration",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_float = new (require_lib165()).ActorFunctionFactoryTermXsdToFloat({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-float",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_integer = new (require_lib166()).ActorFunctionFactoryTermXsdToInteger({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-integer",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_string = new (require_lib167()).ActorFunctionFactoryTermXsdToString({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-string",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_time = new (require_lib168()).ActorFunctionFactoryTermXsdToTime({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-time",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_xsd_to_year_month_duration = new (require_lib169()).ActorFunctionFactoryTermXsdToYearMonthDuration({
        "name": "urn:comunica:default:function-factory/actors#term-function-xsd-to-year-month-duration",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_year = new (require_lib170()).ActorFunctionFactoryTermYear({
        "name": "urn:comunica:default:function-factory/actors#term-function-year",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:function-factory/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus
      });
      const urn_comunica_default_http_actors_fetch = new (require_lib173()).ActorHttpFetch({
        "agentOptions": { "keepAlive": true, "maxSockets": 5 },
        "name": "urn:comunica:default:http/actors#fetch",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus,
        "busFailMessage": "HTTP request failed: none of the configured actors were able to handle ${action.input}"
      });
      const urn_comunica_default_http_mediators_no_fallback = new (require_lib42()).MediatorNumber({
        "field": "time",
        "type": "min",
        "ignoreFailures": true,
        "name": "urn:comunica:default:http/mediators#no-fallback",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus
      });
      const urn_comunica_default_http_mediators_main = new (require_lib42()).MediatorNumber({
        "field": "time",
        "type": "min",
        "ignoreFailures": true,
        "name": "urn:comunica:default:http/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_fallback_bus
      });
      const urn_comunica_default_query_operation_actors_source = new (require_lib174()).ActorQueryOperationSource({
        "name": "urn:comunica:default:query-operation/actors#source",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_mediators_main = new (require_lib42()).MediatorNumber({
        "field": "httpRequests",
        "type": "min",
        "ignoreFailures": true,
        "name": "urn:comunica:default:query-operation/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
      });
      const urn_comunica_default_query_process_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:query-process/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus
      });
      const urn_comunica_default_query_source_identify_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:query-source-identify/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify__4_0_0_components_ActorQuerySourceIdentify_jsonld_ActorQuerySourceIdentify_default_bus
      });
      const urn_comunica_default_rdf_join_mediators_main = new (require_lib175()).MediatorJoinCoefficientsFixed({
        "cpuWeight": 10,
        "memoryWeight": 1,
        "timeWeight": 2,
        "ioWeight": 10,
        "name": "urn:comunica:default:rdf-join/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
      });
      const urn_comunica_default_term_comparator_factory_mediators_main = new (require_lib19()).MediatorRace({
        "name": "urn:comunica:default:term-comparator-factory/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_term_comparator_factory__4_0_0_components_ActorTermComparatorFactory_jsonld_ActorTermComparatorFactory_default_bus
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_context_preprocess_query_source_identify__4_0_0_components_ActorContextPreprocessQuerySourceIdentify_jsonld_IActorContextPreprocessQuerySourceIdentifyArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-context-preprocess-query-source-identify/^4.0.0/components/ActorContextPreprocessQuerySourceIdentify.jsonld#IActorContextPreprocessQuerySourceIdentifyArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const urn_comunica_default_http_invalidate_mediators_main = new (require_lib177()).MediatorAll({
        "name": "urn:comunica:default:http-invalidate/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_rdf_update_quads_hypermedia__4_0_0_components_ActorRdfUpdateQuadsHypermedia_jsonld_IActorRdfUpdateQuadsHypermediaArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-rdf-update-quads-hypermedia/^4.0.0/components/ActorRdfUpdateQuadsHypermedia.jsonld#IActorRdfUpdateQuadsHypermediaArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_http_retry__4_0_0_components_ActorHttpRetry_jsonld_IActorHttpQueueArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-http-retry/^4.0.0/components/ActorHttpRetry.jsonld#IActorHttpQueueArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_http_limit_rate__4_0_0_components_ActorHttpLimitRate_jsonld_IActorHttpLimitRateArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-http-limit-rate/^4.0.0/components/ActorHttpLimitRate.jsonld#IActorHttpLimitRateArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__4_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-sparql-json/^4.0.0/components/ActionObserverHttp.jsonld#IActionObserverHttpArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__4_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator = new (require_lib176()).ActorHttpInvalidateListenable({
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-stats/^4.0.0/components/ActionObserverHttp.jsonld#IActionObserverHttpArgs_default_invalidator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__4_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus,
        "busFailMessage": "HTTP invalidation failed: none of the configured actors were able to invalidate ${action.url}"
      });
      const urn_comunica_default_merge_bindings_context_mediators_main = new (require_lib41()).MediatorCombineUnion({
        "field": "mergeHandlers",
        "name": "urn:comunica:default:merge-bindings-context/mediators#main",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_merge_bindings_context__4_0_0_components_ActorMergeBindingsContext_jsonld_ActorMergeBindingsContext_default_bus
      });
      const urn_comunica_default_rdf_join_entries_sort_actors_selectivity = new (require_lib178()).ActorRdfJoinEntriesSortSelectivity({
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join-entries-sort/actors#selectivity",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__4_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus,
        "busFailMessage": "Sorting join entries failed: none of the configured actors were able to sort"
      });
      const urn_comunica_default_rdf_join_actors_inner_single = new (require_lib181()).ActorRdfJoinSingle({
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-single",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_multi_empty = new (require_lib182()).ActorRdfJoinMultiEmpty({
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-multi-empty",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_hash_def = new (require_lib184()).ActorRdfJoinHash({
        "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
        "canHandleUndefs": false,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-hash-def",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_hash_undef = new (require_lib184()).ActorRdfJoinHash({
        "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
        "canHandleUndefs": true,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-hash-undef",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_symmetric_hash = new (require_lib185()).ActorRdfJoinSymmetricHash({
        "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-symmetric-hash",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_nested_loop = new (require_lib186()).ActorRdfJoinNestedLoop({
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-nested-loop",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_hash_def_nonblocking = new (require_lib188()).ActorRdfJoinOptionalHash({
        "canHandleUndefs": false,
        "blocking": false,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-hash-def-nonblocking",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_hash_def_blocking = new (require_lib188()).ActorRdfJoinOptionalHash({
        "canHandleUndefs": false,
        "blocking": true,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-hash-def-blocking",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_hash_undef_nonblocking = new (require_lib188()).ActorRdfJoinOptionalHash({
        "canHandleUndefs": true,
        "blocking": false,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-hash-undef-nonblocking",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_hash_undef_blocking = new (require_lib188()).ActorRdfJoinOptionalHash({
        "canHandleUndefs": true,
        "blocking": true,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-hash-undef-blocking",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_nested_loop = new (require_lib189()).ActorRdfJoinOptionalNestedLoop({
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-nested-loop",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_minus_hash_def = new (require_lib190()).ActorRdfJoinMinusHash({
        "canHandleUndefs": false,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#minus-hash-def",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_minus_hash_undef = new (require_lib190()).ActorRdfJoinMinusHash({
        "canHandleUndefs": true,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#minus-hash-undef",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_dereference_rdf_actors_parse = new (require_lib192()).ActorDereferenceRdfParse({
        "mediatorDereference": urn_comunica_default_dereference_mediators_main,
        "mediatorParse": urn_comunica_default_rdf_parse_mediators_parse,
        "mediatorParseMediatypes": urn_comunica_default_rdf_parse_mediators_mediaType,
        "mediaMappings": { "htm": "text/html", "html": "text/html", "json": "application/json", "jsonld": "application/ld+json", "n3": "text/n3", "nq": "application/n-quads", "nquads": "application/n-quads", "nt": "application/n-triples", "ntriples": "application/n-triples", "owl": "application/rdf+xml", "rdf": "application/rdf+xml", "rdfxml": "application/rdf+xml", "shaclc": "text/shaclc", "shaclce": "text/shaclc-ext", "shc": "text/shaclc", "shce": "text/shaclc-ext", "svg": "image/svg+xml", "svgz": "image/svg+xml", "trig": "application/trig", "ttl": "text/turtle", "turtle": "text/turtle", "xht": "application/xhtml+xml", "xhtml": "application/xhtml+xml", "xml": "application/xml" },
        "name": "urn:comunica:default:dereference-rdf/actors#parse",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference_rdf__4_0_0_components_ActorDereferenceRdf_jsonld_ActorDereferenceRdf_default_bus,
        "busFailMessage": "RDF dereferencing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_parse_html_actors_script = new (require_lib193()).ActorRdfParseHtmlScript({
        "mediatorRdfParseMediatypes": urn_comunica_default_rdf_parse_mediators_mediaType,
        "mediatorRdfParseHandle": urn_comunica_default_rdf_parse_mediators_parse,
        "name": "urn:comunica:default:rdf-parse-html/actors#script",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse_html__4_0_0_components_ActorRdfParseHtml_jsonld_ActorRdfParseHtml_default_bus,
        "busFailMessage": "RDF HTML parsing failed: none of the configured parsers were able to parse RDF in HTML"
      });
      const urn_comunica_default_query_result_serialize_actors_rdf = new (require_lib194()).ActorQueryResultSerializeRdf({
        "mediatorRdfSerialize": urn_comunica_default_rdf_serialize_mediators_serialize,
        "mediatorMediaTypeCombiner": urn_comunica_default_rdf_serialize_mediators_mediaType,
        "mediatorMediaTypeFormatCombiner": urn_comunica_default_rdf_serialize_mediators_mediaTypeFormat,
        "name": "urn:comunica:default:query-result-serialize/actors#rdf",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_group_concat = new (require_lib196()).ActorBindingsAggregatorFactoryGroupConcat({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#group-concat",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_count = new (require_lib197()).ActorBindingsAggregatorFactoryCount({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#count",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_sample = new (require_lib198()).ActorBindingsAggregatorFactorySample({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#sample",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_wildcard_count = new (require_lib199()).ActorBindingsAggregatorFactoryWildcardCount({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#wildcard-count",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_average = new (require_lib200()).ActorBindingsAggregatorFactoryAverage({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#average",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_sum = new (require_lib201()).ActorBindingsAggregatorFactorySum({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#sum",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_in = new (require_lib202()).ActorFunctionFactoryExpressionIn({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#expression-function-in",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_expression_function_not_in = new (require_lib203()).ActorFunctionFactoryExpressionNotIn({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#expression-function-not-in",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_greater_than_equal = new (require_lib204()).ActorFunctionFactoryTermGreaterThanEqual({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#term-function-greater-than-equal",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_greater_than = new (require_lib205()).ActorFunctionFactoryTermGreaterThan({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#term-function-greater-than",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_inequality = new (require_lib206()).ActorFunctionFactoryTermInequality({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#term-function-inequality",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_lesser_than_equal = new (require_lib207()).ActorFunctionFactoryTermLesserThanEqual({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#term-function-lesser-than-equal",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_function_factory_actors_term_function_lesser_than = new (require_lib208()).ActorFunctionFactoryTermLesserThan({
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "name": "urn:comunica:default:function-factory/actors#term-function-lesser-than",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_function_factory__4_0_0_components_ActorFunctionFactory_jsonld_ActorFunctionFactory_default_bus,
        "busFailMessage": "Creation of function evaluator failed: no configured actor was able to evaluate function ${action.functionName}"
      });
      const urn_comunica_default_http_actors_wayback = new (require_lib209()).ActorHttpWayback({
        "mediatorHttp": urn_comunica_default_http_mediators_no_fallback,
        "name": "urn:comunica:default:http/actors#wayback",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_fallback_bus,
        "busFailMessage": "HTTP request failed: none of the configured actors were able to handle ${action.input}"
      });
      const urn_comunica_default_rdf_parse_actors_jsonld = new (require_lib210()).ActorRdfParseJsonLd({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "mediaTypePriorities": { "application/json": 0.15, "application/ld+json": 1 },
        "mediaTypeFormats": { "application/json": "http://www.w3.org/ns/formats/JSON-LD", "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD" },
        "priorityScale": 0.9,
        "name": "urn:comunica:default:rdf-parse/actors#jsonld",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_parse__4_0_0_components_ActorRdfParse_jsonld_ActorRdfParse_default_bus,
        "busFailMessage": "RDF parsing failed: none of the configured parsers were able to handle the media type ${action.handle.mediaType} for ${action.handle.url}"
      });
      const urn_comunica_default_rdf_update_hypermedia_actors_patch_sparql_update = new (require_lib212()).ActorRdfUpdateHypermediaPatchSparqlUpdate({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "name": "urn:comunica:default:rdf-update-hypermedia/actors#patch-sparql-update",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_hypermedia__4_0_0_components_ActorRdfUpdateHypermedia_jsonld_ActorRdfUpdateHypermedia_default_bus,
        "busFailMessage": "RDF hypermedia updating failed: none of the configured actors were able to handle an update for ${action.url}"
      });
      const urn_comunica_default_rdf_update_hypermedia_actors_put_ldp = new (require_lib213()).ActorRdfUpdateHypermediaPutLdp({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "mediatorRdfSerializeMediatypes": urn_comunica_default_rdf_serialize_mediators_mediaType,
        "mediatorRdfSerialize": urn_comunica_default_rdf_serialize_mediators_serialize,
        "name": "urn:comunica:default:rdf-update-hypermedia/actors#put-ldp",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_hypermedia__4_0_0_components_ActorRdfUpdateHypermedia_jsonld_ActorRdfUpdateHypermedia_default_bus,
        "busFailMessage": "RDF hypermedia updating failed: none of the configured actors were able to handle an update for ${action.url}"
      });
      const urn_comunica_default_rdf_update_hypermedia_actors_sparql = new (require_lib214()).ActorRdfUpdateHypermediaSparql({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "checkUrlSuffixSparql": true,
        "checkUrlSuffixUpdate": true,
        "name": "urn:comunica:default:rdf-update-hypermedia/actors#sparql",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_hypermedia__4_0_0_components_ActorRdfUpdateHypermedia_jsonld_ActorRdfUpdateHypermedia_default_bus,
        "busFailMessage": "RDF hypermedia updating failed: none of the configured actors were able to handle an update for ${action.url}"
      });
      const urn_comunica_default_query_operation_actors_ask = new (require_lib215()).ActorQueryOperationAsk({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#ask",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_bgp = new (require_lib216()).ActorQueryOperationBgpJoin({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#bgp",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_construct = new (require_lib217()).ActorQueryOperationConstruct({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#construct",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_distinct = new (require_lib218()).ActorQueryOperationDistinctIdentity({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#distinct",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_extend = new (require_lib219()).ActorQueryOperationExtend({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#extend",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_filter = new (require_lib220()).ActorQueryOperationFilter({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#filter",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_from = new (require_lib221()).ActorQueryOperationFromQuad({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#from",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_project = new (require_lib222()).ActorQueryOperationProject({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#project",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_reduced = new (require_lib223()).ActorQueryOperationReducedHash({
        "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
        "cacheSize": 100,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#reduced",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_slice = new (require_lib224()).ActorQueryOperationSlice({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#slice",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_union = new (require_lib225()).ActorQueryOperationUnion({
        "mediatorRdfMetadataAccumulate": urn_comunica_default_rdf_metadata_accumulate_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#union",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_alt = new (require_lib227()).ActorQueryOperationPathAlt({
        "mediatorRdfMetadataAccumulate": urn_comunica_default_rdf_metadata_accumulate_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-alt",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_inv = new (require_lib228()).ActorQueryOperationPathInv({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-inv",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_link = new (require_lib229()).ActorQueryOperationPathLink({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-link",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_nps = new (require_lib230()).ActorQueryOperationPathNps({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-nps",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_clear = new (require_lib231()).ActorQueryOperationClear({
        "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-clear",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_composite = new (require_lib232()).ActorQueryOperationUpdateCompositeUpdate({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-composite",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_create = new (require_lib233()).ActorQueryOperationCreate({
        "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-create",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_drop = new (require_lib234()).ActorQueryOperationDrop({
        "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-drop",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_load = new (require_lib235()).ActorQueryOperationLoad({
        "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
        "mediatorQuerySourceIdentify": urn_comunica_default_query_source_identify_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-load",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_join = new (require_lib236()).ActorQueryOperationJoin({
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#join",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_leftjoin = new (require_lib237()).ActorQueryOperationLeftJoin({
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#leftjoin",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_minus = new (require_lib238()).ActorQueryOperationMinus({
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#minus",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_seq = new (require_lib239()).ActorQueryOperationPathSeq({
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-seq",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_rdf_join_actors_inner_multi_smallest = new (require_lib240()).ActorRdfJoinMultiSmallest({
        "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-multi-smallest",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_max = new (require_lib241()).ActorBindingsAggregatorFactoryMax({
        "mediatorTermComparatorFactory": urn_comunica_default_term_comparator_factory_mediators_main,
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#max",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_bindings_aggregator_factory_actors_min = new (require_lib242()).ActorBindingsAggregatorFactoryMin({
        "mediatorTermComparatorFactory": urn_comunica_default_term_comparator_factory_mediators_main,
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "name": "urn:comunica:default:bindings-aggregator-factory/actors#min",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_bindings_aggregator_factory__4_0_0_components_ActorBindingsAggregatorFactory_jsonld_ActorBindingsAggregatorFactory_default_bus,
        "busFailMessage": "Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}"
      });
      const urn_comunica_default_query_operation_actors_orderby = new (require_lib243()).ActorQueryOperationOrderBy({
        "mediatorExpressionEvaluatorFactory": urn_comunica_default_expression_evaluator_factory_mediators_main,
        "mediatorTermComparatorFactory": urn_comunica_default_term_comparator_factory_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#orderby",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_optimize_query_operation_actors_filter_pushdown = new (require_lib244()).ActorOptimizeQueryOperationFilterPushdown({
        "aggressivePushdown": false,
        "maxIterations": 10,
        "splitConjunctive": true,
        "mergeConjunctive": true,
        "pushIntoLeftJoins": true,
        "pushEqualityIntoPatterns": true,
        "name": "urn:comunica:default:optimize-query-operation/actors#filter-pushdown",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_group_sources
        ]
      });
      const urn_comunica_default_dereference_actors_http = new (require_lib245()).ActorDereferenceHttp({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "maxAcceptHeaderLength": 1024,
        "maxAcceptHeaderLengthBrowser": 128,
        "name": "urn:comunica:default:dereference/actors#http",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_dereference__4_0_0_components_ActorDereference_jsonld_ActorDereference_default_bus,
        "busFailMessage": "Dereferencing failed: none of the configured actors were able to handle ${action.url}",
        "beforeActors": [
          urn_comunica_default_dereference_actors_fallback
        ]
      });
      const urn_comunica_default_http_actors_proxy = new (require_lib246()).ActorHttpProxy({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "name": "urn:comunica:default:http/actors#proxy",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus,
        "busFailMessage": "HTTP request failed: none of the configured actors were able to handle ${action.input}",
        "beforeActors": [
          urn_comunica_default_http_actors_fetch
        ]
      });
      const urn_comunica_default_context_preprocess_actors_query_source_identify = new (require_lib247()).ActorContextPreprocessQuerySourceIdentify({
        "cacheSize": 100,
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_context_preprocess_query_source_identify__4_0_0_components_ActorContextPreprocessQuerySourceIdentify_jsonld_IActorContextPreprocessQuerySourceIdentifyArgs_default_invalidator,
        "mediatorQuerySourceIdentify": urn_comunica_default_query_source_identify_mediators_main,
        "mediatorContextPreprocess": urn_comunica_default_context_preprocess_mediators_main,
        "name": "urn:comunica:default:context-preprocess/actors#query-source-identify",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__4_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus,
        "busFailMessage": "Context preprocessing failed",
        "beforeActors": [
          urn_comunica_default_context_preprocess_actors_query_source_skolemize
        ]
      });
      const urn_comunica_default_init_actors_query = new (require_index_browser()).ActorInitQuery({
        "mediatorQueryProcess": urn_comunica_default_query_process_mediators_main,
        "mediatorQueryResultSerialize": urn_comunica_default_query_result_serialize_mediators_serialize,
        "mediatorQueryResultSerializeMediaTypeCombiner": urn_comunica_default_query_result_serialize_mediators_mediaType,
        "mediatorQueryResultSerializeMediaTypeFormatCombiner": urn_comunica_default_query_result_serialize_mediators_mediaTypeFormat,
        "mediatorHttpInvalidate": urn_comunica_default_http_invalidate_mediators_main,
        "defaultQueryInputFormat": "sparql",
        "allowNoSources": false,
        "name": "urn:comunica:default:init/actors#query",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_init__4_0_0_components_ActorInit_jsonld_ActorInit_default_bus,
        "busFailMessage": "Initialization failed: none of the configured actors were to initialize"
      });
      const urn_comunica_default_rdf_update_quads_actors_hypermedia = new (require_lib248()).ActorRdfUpdateQuadsHypermedia({
        "cacheSize": 100,
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_rdf_update_quads_hypermedia__4_0_0_components_ActorRdfUpdateQuadsHypermedia_jsonld_IActorRdfUpdateQuadsHypermediaArgs_default_invalidator,
        "mediatorDereferenceRdf": urn_comunica_default_dereference_rdf_mediators_main,
        "mediatorMetadata": urn_comunica_default_rdf_metadata_mediators_main,
        "mediatorMetadataExtract": urn_comunica_default_rdf_metadata_extract_mediators_main,
        "mediatorRdfUpdateHypermedia": urn_comunica_default_rdf_update_hypermedia_mediators_main,
        "name": "urn:comunica:default:rdf-update-quads/actors#hypermedia",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__4_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus,
        "busFailMessage": "RDF updating failed: none of the configured actors were able to handle an update"
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__4_0_0_components_ActorQueryResultSerializeSparqlJson_jsonld_ActorQueryResultSerializeSparqlJson_default_observer = new (require_lib249()).ActionObserverHttp({
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__4_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator,
        "observedActors": [
          "urn:comunica:default:http/actors#fetch"
        ],
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-sparql-json/^4.0.0/components/ActorQueryResultSerializeSparqlJson.jsonld#ActorQueryResultSerializeSparqlJson_default_observer",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus
      });
      const https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__4_0_0_components_ActorQueryResultSerializeStats_jsonld_ActorQueryResultSerializeStats_default_observer = new (require_lib250()).ActionObserverHttp({
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__4_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator,
        "observedActors": [
          "urn:comunica:default:http/actors#fetch"
        ],
        "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-stats/^4.0.0/components/ActorQueryResultSerializeStats.jsonld#ActorQueryResultSerializeStats_default_observer",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus
      });
      const urn_comunica_default_query_source_identify_hypermedia_actors_qpf = new (require_lib253()).ActorQuerySourceIdentifyHypermediaQpf({
        "mediatorMetadata": urn_comunica_default_rdf_metadata_mediators_main,
        "mediatorMetadataExtract": urn_comunica_default_rdf_metadata_extract_mediators_main,
        "mediatorDereferenceRdf": urn_comunica_default_dereference_rdf_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "subjectUri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#subject",
        "predicateUri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate",
        "objectUri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#object",
        "graphUri": "http://www.w3.org/ns/sparql-service-description#graph",
        "name": "urn:comunica:default:query-source-identify-hypermedia/actors#qpf",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify_hypermedia__4_0_0_components_ActorQuerySourceIdentifyHypermedia_jsonld_ActorQuerySourceIdentifyHypermedia_default_bus,
        "busFailMessage": "Query source hypermedia identification failed: none of the configured actors were able to identify ${action.url}"
      });
      const urn_comunica_default_query_source_identify_hypermedia_actors_sparql = new (require_lib254()).ActorQuerySourceIdentifyHypermediaSparql({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "checkUrlSuffix": true,
        "forceHttpGet": false,
        "cacheSize": 1024,
        "forceSourceType": false,
        "bindMethod": "values",
        "countTimeout": 3e3,
        "cardinalityCountQueries": true,
        "cardinalityEstimateConstruction": false,
        "name": "urn:comunica:default:query-source-identify-hypermedia/actors#sparql",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify_hypermedia__4_0_0_components_ActorQuerySourceIdentifyHypermedia_jsonld_ActorQuerySourceIdentifyHypermedia_default_bus,
        "busFailMessage": "Query source hypermedia identification failed: none of the configured actors were able to identify ${action.url}"
      });
      const urn_comunica_default_query_source_identify_hypermedia_actors_none = new (require_lib256()).ActorQuerySourceIdentifyHypermediaNone({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:query-source-identify-hypermedia/actors#none",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify_hypermedia__4_0_0_components_ActorQuerySourceIdentifyHypermedia_jsonld_ActorQuerySourceIdentifyHypermedia_default_bus,
        "busFailMessage": "Query source hypermedia identification failed: none of the configured actors were able to identify ${action.url}"
      });
      const urn_comunica_default_expression_evaluator_factory_actors_default = new (require_lib258()).ActorExpressionEvaluatorFactoryDefault({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:expression-evaluator-factory/actors#default",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_expression_evaluator_factory__4_0_0_components_ActorExpressionEvaluatorFactory_jsonld_ActorExpressionEvaluatorFactory_default_bus,
        "busFailMessage": "Creation of Expression Evaluator failed"
      });
      const urn_comunica_default_query_operation_actors_group = new (require_lib259()).ActorQueryOperationGroup({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorBindingsAggregatorFactory": urn_comunica_default_bindings_aggregator_factory_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#group",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_nop = new (require_lib260()).ActorQueryOperationNop({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#nop",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_service = new (require_lib261()).ActorQueryOperationService({
        "forceSparqlEndpoint": false,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQuerySourceIdentify": urn_comunica_default_query_source_identify_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#service",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_values = new (require_lib262()).ActorQueryOperationValues({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#values",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_one_or_more = new (require_lib263()).ActorQueryOperationPathOneOrMore({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-one-or-more",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_zero_or_more = new (require_lib264()).ActorQueryOperationPathZeroOrMore({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-zero-or-more",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_path_zero_or_one = new (require_lib265()).ActorQueryOperationPathZeroOrOne({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#path-zero-or-one",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_operation_actors_update_delete_insert = new (require_lib266()).ActorQueryOperationUpdateDeleteInsert({
        "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "name": "urn:comunica:default:query-operation/actors#update-delete-insert",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__4_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus,
        "busFailMessage": "Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}"
      });
      const urn_comunica_default_query_process_actors_sequential = new (require_lib268()).ActorQueryProcessSequential({
        "mediatorContextPreprocess": urn_comunica_default_context_preprocess_mediators_main,
        "mediatorQueryParse": urn_comunica_default_query_parse_mediators_main,
        "mediatorOptimizeQueryOperation": urn_comunica_default_optimize_query_operation_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:query-process/actors#sequential",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus,
        "busFailMessage": 'Query processing failed: none of the configured actor were process to the query "${action.query}"'
      });
      const urn_comunica_default_query_source_identify_actors_hypermedia = new (require_lib269()).ActorQuerySourceIdentifyHypermedia({
        "cacheSize": 100,
        "maxIterators": 64,
        "aggregateTraversalStore": true,
        "mediatorDereferenceRdf": urn_comunica_default_dereference_rdf_mediators_main,
        "mediatorMetadata": urn_comunica_default_rdf_metadata_mediators_main,
        "mediatorMetadataExtract": urn_comunica_default_rdf_metadata_extract_mediators_main,
        "mediatorMetadataAccumulate": urn_comunica_default_rdf_metadata_accumulate_mediators_main,
        "mediatorQuerySourceIdentifyHypermedia": urn_comunica_default_query_source_identify_hypermedia_mediators_main,
        "mediatorRdfResolveHypermediaLinks": urn_comunica_default_rdf_resolve_hypermedia_links_mediators_main,
        "mediatorRdfResolveHypermediaLinksQueue": urn_comunica_default_rdf_resolve_hypermedia_links_queue_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:query-source-identify/actors#hypermedia",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify__4_0_0_components_ActorQuerySourceIdentify_jsonld_ActorQuerySourceIdentify_default_bus,
        "busFailMessage": "Query source identification failed: none of the configured actors were able to identify ${action.querySourceUnidentified.value}"
      });
      const urn_comunica_default_rdf_join_actors_inner_none = new (require_lib270()).ActorRdfJoinNone({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-none",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_rdf_join_actors_optional_bind = new (require_lib272()).ActorRdfJoinOptionalBind({
        "bindOrder": "depth-first",
        "selectivityModifier": 1e-6,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#optional-bind",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}"
      });
      const urn_comunica_default_term_comparator_factory_actors_expression_evaluator = new (require_lib274()).ActorTermComparatorFactoryExpressionEvaluator({
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "mediatorFunctionFactory": urn_comunica_default_function_factory_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:term-comparator-factory/actors#expression-evaluator",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_term_comparator_factory__4_0_0_components_ActorTermComparatorFactory_jsonld_ActorTermComparatorFactory_default_bus,
        "busFailMessage": "Creation of term comparator failed"
      });
      const urn_comunica_default_rdf_join_actors_inner_multi_bind = new (require_lib271()).ActorRdfJoinMultiBind({
        "bindOrder": "depth-first",
        "selectivityModifier": 1e-4,
        "minMaxCardinalityRatio": 60,
        "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
        "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-multi-bind",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}",
        "beforeActors": [
          urn_comunica_default_rdf_join_actors_inner_multi_smallest,
          urn_comunica_default_rdf_join_actors_inner_hash_def,
          urn_comunica_default_rdf_join_actors_inner_hash_undef,
          urn_comunica_default_rdf_join_actors_inner_symmetric_hash,
          urn_comunica_default_rdf_join_actors_inner_nested_loop
        ]
      });
      const urn_comunica_default_rdf_join_actors_inner_multi_smallest_filter_bindings = new (require_lib275()).ActorRdfJoinMultiSmallestFilterBindings({
        "selectivityModifier": 1e-4,
        "blockSize": 64,
        "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
        "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-multi-smallest-filter-bindings",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}",
        "beforeActors": [
          urn_comunica_default_rdf_join_actors_inner_multi_smallest,
          urn_comunica_default_rdf_join_actors_inner_hash_def,
          urn_comunica_default_rdf_join_actors_inner_hash_undef,
          urn_comunica_default_rdf_join_actors_inner_symmetric_hash,
          urn_comunica_default_rdf_join_actors_inner_nested_loop
        ]
      });
      const urn_comunica_default_query_result_serialize_actors_sparql_json = new (require_lib249()).ActorQueryResultSerializeSparqlJson({
        "emitMetadata": true,
        "httpObserver": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__4_0_0_components_ActorQueryResultSerializeSparqlJson_jsonld_ActorQueryResultSerializeSparqlJson_default_observer,
        "mediaTypePriorities": { "application/sparql-results+json": 0.8 },
        "mediaTypeFormats": { "application/sparql-results+json": "http://www.w3.org/ns/formats/SPARQL_Results_JSON" },
        "name": "urn:comunica:default:query-result-serialize/actors#sparql-json",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_result_serialize_actors_stats = new (require_lib250()).ActorQueryResultSerializeStats({
        "httpObserver": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__4_0_0_components_ActorQueryResultSerializeStats_jsonld_ActorQueryResultSerializeStats_default_observer,
        "mediaTypePriorities": { "stats": 0.5 },
        "mediaTypeFormats": { "stats": "https://comunica.linkeddatafragments.org/#results_stats" },
        "name": "urn:comunica:default:query-result-serialize/actors#stats",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__4_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus,
        "busFailMessage": "Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}"
      });
      const urn_comunica_default_query_process_actors_explain_logical = new (require_lib276()).ActorQueryProcessExplainLogical({
        "queryProcessor": urn_comunica_default_query_process_actors_sequential,
        "name": "urn:comunica:default:query-process/actors#explain-logical",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus,
        "busFailMessage": 'Query processing failed: none of the configured actor were process to the query "${action.query}"'
      });
      const urn_comunica_default_query_process_actors_explain_parsed = new (require_lib277()).ActorQueryProcessExplainParsed({
        "queryProcessor": urn_comunica_default_query_process_actors_sequential,
        "name": "urn:comunica:default:query-process/actors#explain-parsed",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus,
        "busFailMessage": 'Query processing failed: none of the configured actor were process to the query "${action.query}"'
      });
      const urn_comunica_default_query_process_actors_explain_physical = new (require_lib278()).ActorQueryProcessExplainPhysical({
        "queryProcessor": urn_comunica_default_query_process_actors_sequential,
        "name": "urn:comunica:default:query-process/actors#explain-physical",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_process__4_0_0_components_ActorQueryProcess_jsonld_ActorQueryProcess_default_bus,
        "busFailMessage": 'Query processing failed: none of the configured actor were process to the query "${action.query}"'
      });
      const urn_comunica_default_optimize_query_operation_actors_prune_empty_source_operations = new (require_lib279()).ActorOptimizeQueryOperationPruneEmptySourceOperations({
        "useAskIfSupported": false,
        "name": "urn:comunica:default:optimize-query-operation/actors#prune-empty-source-operations",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_filter_pushdown
        ]
      });
      const urn_comunica_default_http_actors_retry = new (require_lib280()).ActorHttpRetry({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_http_retry__4_0_0_components_ActorHttpRetry_jsonld_IActorHttpQueueArgs_default_invalidator,
        "name": "urn:comunica:default:http/actors#retry",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus,
        "busFailMessage": "HTTP request failed: none of the configured actors were able to handle ${action.input}",
        "beforeActors": [
          urn_comunica_default_http_actors_proxy
        ]
      });
      const urn_comunica_default_http_actors_limit_rate = new (require_lib281()).ActorHttpLimitRate({
        "mediatorHttp": urn_comunica_default_http_mediators_main,
        "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_http_limit_rate__4_0_0_components_ActorHttpLimitRate_jsonld_IActorHttpLimitRateArgs_default_invalidator,
        "correctionMultiplier": 0.1,
        "failureMultiplier": 10,
        "limitByDefault": false,
        "allowOverlap": false,
        "name": "urn:comunica:default:http/actors#limit-rate",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__4_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus,
        "busFailMessage": "HTTP request failed: none of the configured actors were able to handle ${action.input}",
        "beforeActors": [
          urn_comunica_default_http_actors_proxy
        ]
      });
      const urn_comunica_default_query_source_identify_actors_rdfjs = new (require_lib255()).ActorQuerySourceIdentifyRdfJs({
        "mediatorMergeBindingsContext": urn_comunica_default_merge_bindings_context_mediators_main,
        "name": "urn:comunica:default:query-source-identify/actors#rdfjs",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify__4_0_0_components_ActorQuerySourceIdentify_jsonld_ActorQuerySourceIdentify_default_bus,
        "busFailMessage": "Query source identification failed: none of the configured actors were able to identify ${action.querySourceUnidentified.value}",
        "beforeActors": [
          urn_comunica_default_query_source_identify_actors_hypermedia
        ]
      });
      const urn_comunica_default_query_source_identify_actors_serialized = new (require_lib282()).ActorQuerySourceIdentifySerialized({
        "mediatorRdfParse": urn_comunica_default_rdf_parse_mediators_parse,
        "mediatorQuerySourceIdentify": urn_comunica_default_query_source_identify_mediators_main,
        "name": "urn:comunica:default:query-source-identify/actors#serialized",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_source_identify__4_0_0_components_ActorQuerySourceIdentify_jsonld_ActorQuerySourceIdentify_default_bus,
        "busFailMessage": "Query source identification failed: none of the configured actors were able to identify ${action.querySourceUnidentified.value}",
        "beforeActors": [
          urn_comunica_default_query_source_identify_actors_hypermedia
        ]
      });
      const urn_comunica_default_rdf_join_actors_inner_multi_bind_source = new (require_lib283()).ActorRdfJoinMultiBindSource({
        "selectivityModifier": 1e-4,
        "blockSize": 16,
        "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
        "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
        "name": "urn:comunica:default:rdf-join/actors#inner-multi-bind-source",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__4_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus,
        "busFailMessage": "RDF joining failed: none of the configured actors were able to handle the join type ${action.type}",
        "beforeActors": [
          urn_comunica_default_rdf_join_actors_inner_multi_smallest,
          urn_comunica_default_rdf_join_actors_inner_multi_bind,
          urn_comunica_default_rdf_join_actors_inner_hash_def,
          urn_comunica_default_rdf_join_actors_inner_hash_undef,
          urn_comunica_default_rdf_join_actors_inner_symmetric_hash,
          urn_comunica_default_rdf_join_actors_inner_nested_loop
        ]
      });
      const urn_comunica_default_optimize_query_operation_actors_join_connected = new (require_lib284()).ActorOptimizeQueryOperationJoinConnected({
        "name": "urn:comunica:default:optimize-query-operation/actors#join-connected",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_prune_empty_source_operations
        ]
      });
      const urn_comunica_default_optimize_query_operation_actors_bgp_to_join = new (require_lib285()).ActorOptimizeQueryOperationBgpToJoin({
        "name": "urn:comunica:default:optimize-query-operation/actors#bgp-to-join",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_join_connected
        ]
      });
      const urn_comunica_default_optimize_query_operation_actors_join_bgp = new (require_lib286()).ActorOptimizeQueryOperationJoinBgp({
        "name": "urn:comunica:default:optimize-query-operation/actors#join-bgp",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_bgp_to_join
        ]
      });
      const urn_comunica_default_optimize_query_operation_actors_assign_sources_exhaustive = new (require_lib287()).ActorOptimizeQueryOperationAssignSourcesExhaustive({
        "name": "urn:comunica:default:optimize-query-operation/actors#assign-sources-exhaustive",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_join_bgp
        ]
      });
      const urn_comunica_default_optimize_query_operation_actors_describe_to_constructs_subject = new (require_lib288()).ActorOptimizeQueryOperationDescribeToConstructsSubject({
        "name": "urn:comunica:default:optimize-query-operation/actors#describe-to-constructs-subject",
        "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__4_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus,
        "busFailMessage": "Query optimization failed: none of the configured actors were able to optimize",
        "beforeActors": [
          urn_comunica_default_optimize_query_operation_actors_assign_sources_exhaustive
        ]
      });
      const urn_comunica_default_Runner = (https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_init__4_0_0_components_ActorInit_jsonld_ActorInit_default_bus, [
        urn_comunica_default_context_preprocess_actors_convert_shortcuts,
        urn_comunica_default_context_preprocess_actors_set_defaults,
        urn_comunica_default_context_preprocess_actors_source_to_destination,
        urn_comunica_default_context_preprocess_actors_query_source_identify,
        urn_comunica_default_context_preprocess_actors_query_source_skolemize,
        urn_comunica_default_hash_bindings_actors_murmur,
        urn_comunica_default_hash_quads_actors_murmur,
        urn_comunica_default_init_actors_query,
        urn_comunica_default_optimize_query_operation_actors_rewrite_copy,
        urn_comunica_default_optimize_query_operation_actors_rewrite_move,
        urn_comunica_default_optimize_query_operation_actors_rewrite_add,
        urn_comunica_default_optimize_query_operation_actors_describe_to_constructs_subject,
        urn_comunica_default_optimize_query_operation_actors_assign_sources_exhaustive,
        urn_comunica_default_optimize_query_operation_actors_join_bgp,
        urn_comunica_default_optimize_query_operation_actors_bgp_to_join,
        urn_comunica_default_optimize_query_operation_actors_join_connected,
        urn_comunica_default_optimize_query_operation_actors_prune_empty_source_operations,
        urn_comunica_default_optimize_query_operation_actors_filter_pushdown,
        urn_comunica_default_optimize_query_operation_actors_group_sources,
        urn_comunica_default_optimize_query_operation_actors_construct_distinct,
        urn_comunica_default_query_parse_actors_sparql,
        urn_comunica_default_query_parse_actors_graphql,
        urn_comunica_default_query_result_serialize_actors_json,
        urn_comunica_default_query_result_serialize_actors_rdf,
        urn_comunica_default_query_result_serialize_actors_simple,
        urn_comunica_default_query_result_serialize_actors_csv,
        urn_comunica_default_query_result_serialize_actors_sparql_json,
        urn_comunica_default_query_result_serialize_actors_sparql_tsv,
        urn_comunica_default_query_result_serialize_actors_sparql_xml,
        urn_comunica_default_query_result_serialize_actors_stats,
        urn_comunica_default_query_result_serialize_actors_table,
        urn_comunica_default_query_result_serialize_actors_tree,
        urn_comunica_default_query_source_identify_hypermedia_actors_qpf,
        urn_comunica_default_query_source_identify_hypermedia_actors_sparql,
        urn_comunica_default_query_source_identify_hypermedia_actors_none,
        urn_comunica_default_dereference_actors_http,
        urn_comunica_default_dereference_actors_fallback,
        urn_comunica_default_dereference_rdf_actors_parse,
        urn_comunica_default_rdf_join_entries_sort_actors_cardinality,
        urn_comunica_default_rdf_join_entries_sort_actors_selectivity,
        urn_comunica_default_rdf_join_selectivity_actors_variable_counting,
        urn_comunica_default_rdf_metadata_actors_primary_topic,
        urn_comunica_default_rdf_metadata_actors_all,
        urn_comunica_default_rdf_metadata_accumulate_actors_cardinality,
        urn_comunica_default_rdf_metadata_accumulate_actors_pagesize,
        urn_comunica_default_rdf_metadata_accumulate_actors_requesttime,
        urn_comunica_default_rdf_metadata_extract_actors_hydra_controls,
        urn_comunica_default_rdf_metadata_extract_actors_hydra_count,
        urn_comunica_default_rdf_metadata_extract_actors_hydra_pagesize,
        urn_comunica_default_rdf_metadata_extract_actors_request_time,
        urn_comunica_default_rdf_metadata_extract_actors_allow_http_methods,
        urn_comunica_default_rdf_metadata_extract_actors_put_accepted,
        urn_comunica_default_rdf_metadata_extract_actors_patch_sparql_update,
        urn_comunica_default_rdf_metadata_extract_actors_sparql_service,
        urn_comunica_default_rdf_metadata_extract_actors_void,
        urn_comunica_default_rdf_parse_actors_n3,
        urn_comunica_default_rdf_parse_actors_jsonld,
        urn_comunica_default_rdf_parse_actors_rdfxml,
        urn_comunica_default_rdf_parse_actors_xmlrdfa,
        urn_comunica_default_rdf_parse_actors_html,
        urn_comunica_default_rdf_parse_actors_shaclc,
        urn_comunica_default_rdf_parse_html_actors_microdata,
        urn_comunica_default_rdf_parse_html_actors_rdfa,
        urn_comunica_default_rdf_parse_html_actors_script,
        urn_comunica_default_rdf_resolve_hypermedia_links_actors_next,
        urn_comunica_default_rdf_resolve_hypermedia_links_queue_actors_fifo,
        urn_comunica_default_rdf_serialize_actors_n3,
        urn_comunica_default_rdf_serialize_actors_jsonld,
        urn_comunica_default_rdf_serialize_actors_shaclc,
        urn_comunica_default_rdf_update_hypermedia_actors_patch_sparql_update,
        urn_comunica_default_rdf_update_hypermedia_actors_put_ldp,
        urn_comunica_default_rdf_update_hypermedia_actors_sparql,
        urn_comunica_default_rdf_update_quads_actors_hypermedia,
        urn_comunica_default_rdf_update_quads_actors_rdfjs_store,
        urn_comunica_default_bindings_aggregator_factory_actors_average,
        urn_comunica_default_bindings_aggregator_factory_actors_group_concat,
        urn_comunica_default_bindings_aggregator_factory_actors_count,
        urn_comunica_default_bindings_aggregator_factory_actors_max,
        urn_comunica_default_bindings_aggregator_factory_actors_min,
        urn_comunica_default_bindings_aggregator_factory_actors_sample,
        urn_comunica_default_bindings_aggregator_factory_actors_sum,
        urn_comunica_default_bindings_aggregator_factory_actors_wildcard_count,
        urn_comunica_default_expression_evaluator_factory_actors_default,
        urn_comunica_default_function_factory_actors_expression_function_bnode,
        urn_comunica_default_function_factory_actors_expression_function_bound,
        urn_comunica_default_function_factory_actors_expression_function_coalesce,
        urn_comunica_default_function_factory_actors_expression_function_concat,
        urn_comunica_default_function_factory_actors_expression_function_extensions,
        urn_comunica_default_function_factory_actors_expression_function_if,
        urn_comunica_default_function_factory_actors_expression_function_in,
        urn_comunica_default_function_factory_actors_expression_function_logical_and,
        urn_comunica_default_function_factory_actors_expression_function_logical_or,
        urn_comunica_default_function_factory_actors_expression_function_not_in,
        urn_comunica_default_function_factory_actors_expression_function_same_term,
        urn_comunica_default_function_factory_actors_term_function_abs,
        urn_comunica_default_function_factory_actors_term_function_addition,
        urn_comunica_default_function_factory_actors_term_function_ceil,
        urn_comunica_default_function_factory_actors_term_function_contains,
        urn_comunica_default_function_factory_actors_term_function_datatype,
        urn_comunica_default_function_factory_actors_term_function_day,
        urn_comunica_default_function_factory_actors_term_function_division,
        urn_comunica_default_function_factory_actors_term_function_encode_for_uri,
        urn_comunica_default_function_factory_actors_term_function_equality,
        urn_comunica_default_function_factory_actors_term_function_floor,
        urn_comunica_default_function_factory_actors_term_function_greater_than_equal,
        urn_comunica_default_function_factory_actors_term_function_greater_than,
        urn_comunica_default_function_factory_actors_term_function_hours,
        urn_comunica_default_function_factory_actors_term_function_inequality,
        urn_comunica_default_function_factory_actors_term_function_iri,
        urn_comunica_default_function_factory_actors_term_function_is_blank,
        urn_comunica_default_function_factory_actors_term_function_is_iri,
        urn_comunica_default_function_factory_actors_term_function_is_literal,
        urn_comunica_default_function_factory_actors_term_function_is_numeric,
        urn_comunica_default_function_factory_actors_term_function_is_triple,
        urn_comunica_default_function_factory_actors_term_function_lang,
        urn_comunica_default_function_factory_actors_term_function_langmatches,
        urn_comunica_default_function_factory_actors_term_function_lcase,
        urn_comunica_default_function_factory_actors_term_function_lesser_than_equal,
        urn_comunica_default_function_factory_actors_term_function_lesser_than,
        urn_comunica_default_function_factory_actors_term_function_md5,
        urn_comunica_default_function_factory_actors_term_function_minutes,
        urn_comunica_default_function_factory_actors_term_function_month,
        urn_comunica_default_function_factory_actors_term_function_multiplication,
        urn_comunica_default_function_factory_actors_term_function_not,
        urn_comunica_default_function_factory_actors_term_function_now,
        urn_comunica_default_function_factory_actors_term_function_object,
        urn_comunica_default_function_factory_actors_term_function_predicate,
        urn_comunica_default_function_factory_actors_term_function_rand,
        urn_comunica_default_function_factory_actors_term_function_regex,
        urn_comunica_default_function_factory_actors_term_function_replace,
        urn_comunica_default_function_factory_actors_term_function_round,
        urn_comunica_default_function_factory_actors_term_function_seconds,
        urn_comunica_default_function_factory_actors_term_function_sha1,
        urn_comunica_default_function_factory_actors_term_function_sha256,
        urn_comunica_default_function_factory_actors_term_function_sha384,
        urn_comunica_default_function_factory_actors_term_function_sha512,
        urn_comunica_default_function_factory_actors_term_function_str_after,
        urn_comunica_default_function_factory_actors_term_function_str_before,
        urn_comunica_default_function_factory_actors_term_function_str_dt,
        urn_comunica_default_function_factory_actors_term_function_str_ends,
        urn_comunica_default_function_factory_actors_term_function_str_lang,
        urn_comunica_default_function_factory_actors_term_function_str_len,
        urn_comunica_default_function_factory_actors_term_function_str_starts,
        urn_comunica_default_function_factory_actors_term_function_str_uuid,
        urn_comunica_default_function_factory_actors_term_function_str,
        urn_comunica_default_function_factory_actors_term_function_sub_str,
        urn_comunica_default_function_factory_actors_term_function_subject,
        urn_comunica_default_function_factory_actors_term_function_subtraction,
        urn_comunica_default_function_factory_actors_term_function_timezone,
        urn_comunica_default_function_factory_actors_term_function_triple,
        urn_comunica_default_function_factory_actors_term_function_tz,
        urn_comunica_default_function_factory_actors_term_function_ucase,
        urn_comunica_default_function_factory_actors_term_function_unary_minus,
        urn_comunica_default_function_factory_actors_term_function_unary_plus,
        urn_comunica_default_function_factory_actors_term_function_uuid,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_boolean,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_date,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_datetime,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_day_time_duration,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_decimal,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_double,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_duration,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_float,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_integer,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_string,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_time,
        urn_comunica_default_function_factory_actors_term_function_xsd_to_year_month_duration,
        urn_comunica_default_function_factory_actors_term_function_year,
        urn_comunica_default_http_actors_retry,
        urn_comunica_default_http_actors_proxy,
        urn_comunica_default_http_actors_fetch,
        urn_comunica_default_http_actors_limit_rate,
        urn_comunica_default_http_actors_wayback,
        urn_comunica_default_query_operation_actors_ask,
        urn_comunica_default_query_operation_actors_bgp,
        urn_comunica_default_query_operation_actors_construct,
        urn_comunica_default_query_operation_actors_distinct,
        urn_comunica_default_query_operation_actors_extend,
        urn_comunica_default_query_operation_actors_filter,
        urn_comunica_default_query_operation_actors_from,
        urn_comunica_default_query_operation_actors_group,
        urn_comunica_default_query_operation_actors_join,
        urn_comunica_default_query_operation_actors_leftjoin,
        urn_comunica_default_query_operation_actors_minus,
        urn_comunica_default_query_operation_actors_nop,
        urn_comunica_default_query_operation_actors_orderby,
        urn_comunica_default_query_operation_actors_project,
        urn_comunica_default_query_operation_actors_reduced,
        urn_comunica_default_query_operation_actors_service,
        urn_comunica_default_query_operation_actors_slice,
        urn_comunica_default_query_operation_actors_source,
        urn_comunica_default_query_operation_actors_union,
        urn_comunica_default_query_operation_actors_values,
        urn_comunica_default_query_operation_actors_path_alt,
        urn_comunica_default_query_operation_actors_path_inv,
        urn_comunica_default_query_operation_actors_path_link,
        urn_comunica_default_query_operation_actors_path_nps,
        urn_comunica_default_query_operation_actors_path_one_or_more,
        urn_comunica_default_query_operation_actors_path_seq,
        urn_comunica_default_query_operation_actors_path_zero_or_more,
        urn_comunica_default_query_operation_actors_path_zero_or_one,
        urn_comunica_default_query_operation_actors_update_clear,
        urn_comunica_default_query_operation_actors_update_composite,
        urn_comunica_default_query_operation_actors_update_create,
        urn_comunica_default_query_operation_actors_update_delete_insert,
        urn_comunica_default_query_operation_actors_update_drop,
        urn_comunica_default_query_operation_actors_update_load,
        urn_comunica_default_query_process_actors_sequential,
        urn_comunica_default_query_process_actors_explain_logical,
        urn_comunica_default_query_process_actors_explain_parsed,
        urn_comunica_default_query_process_actors_explain_physical,
        urn_comunica_default_query_source_identify_actors_hypermedia,
        urn_comunica_default_query_source_identify_actors_rdfjs,
        urn_comunica_default_query_source_identify_actors_serialized,
        urn_comunica_default_rdf_join_actors_inner_none,
        urn_comunica_default_rdf_join_actors_inner_single,
        urn_comunica_default_rdf_join_actors_inner_multi_empty,
        urn_comunica_default_rdf_join_actors_inner_multi_bind_source,
        urn_comunica_default_rdf_join_actors_inner_multi_bind,
        urn_comunica_default_rdf_join_actors_inner_hash_def,
        urn_comunica_default_rdf_join_actors_inner_hash_undef,
        urn_comunica_default_rdf_join_actors_inner_symmetric_hash,
        urn_comunica_default_rdf_join_actors_inner_nested_loop,
        urn_comunica_default_rdf_join_actors_inner_multi_smallest,
        urn_comunica_default_rdf_join_actors_inner_multi_smallest_filter_bindings,
        urn_comunica_default_rdf_join_actors_optional_bind,
        urn_comunica_default_rdf_join_actors_optional_hash_def_nonblocking,
        urn_comunica_default_rdf_join_actors_optional_hash_def_blocking,
        urn_comunica_default_rdf_join_actors_optional_hash_undef_nonblocking,
        urn_comunica_default_rdf_join_actors_optional_hash_undef_blocking,
        urn_comunica_default_rdf_join_actors_optional_nested_loop,
        urn_comunica_default_rdf_join_actors_minus_hash_def,
        urn_comunica_default_rdf_join_actors_minus_hash_undef,
        urn_comunica_default_term_comparator_factory_actors_expression_evaluator
      ]);
      return urn_comunica_default_init_actors_query;
    };
  }
});

// ../../lipdjs/node_modules/@comunica/query-sparql/lib/QueryEngine.js
var require_QueryEngine = __commonJS({
  "../../lipdjs/node_modules/@comunica/query-sparql/lib/QueryEngine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngine = void 0;
    var actor_init_query_1 = require_index_browser();
    var engineDefault = require_engine_default();
    var QueryEngine = class extends actor_init_query_1.QueryEngineBase {
      constructor(engine = engineDefault()) {
        super(engine);
      }
    };
    exports.QueryEngine = QueryEngine;
  }
});

// ../../lipdjs/node_modules/@comunica/query-sparql/lib/index-browser.js
var require_index_browser2 = __commonJS({
  "../../lipdjs/node_modules/@comunica/query-sparql/lib/index-browser.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QueryEngine(), exports);
  }
});
export default require_index_browser2();
/*! Bundled license information:

imurmurhash/imurmurhash.js:
  (**
   * @preserve
   * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
   *
   * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
   * @see http://github.com/homebrewing/brauhaus-diff
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/murmurhash-js
   * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
   * @see http://sites.google.com/site/murmurhash/
   *)

xmlchars/xml/1.0/ed5.js:
  (**
   * Character classes and associated utilities for the 5th edition of XML 1.0.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)

xmlchars/xml/1.1/ed2.js:
  (**
   * Character classes and associated utilities for the 2nd edition of XML 1.1.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)

xmlchars/xmlns/1.0/ed3.js:
  (**
   * Character class utilities for XML NS 1.0 edition 3.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)
*/
//# sourceMappingURL=@comunica_query-sparql.js.map
